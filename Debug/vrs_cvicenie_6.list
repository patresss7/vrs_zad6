
vrs_cvicenie_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08002e28  08002e28  00012e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eb8  08002eb8  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  08002eb8  08002eb8  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002eb8  08002eb8  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002eb8  08002eb8  00012eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ebc  08002ebc  00012ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08002ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d4  2**0
                  CONTENTS
 10 .bss          00000228  200000d4  200000d4  000200d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002fc  200002fc  000200d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 14 .debug_info   000060c4  00000000  00000000  00020147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000190b  00000000  00000000  0002620b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007d8  00000000  00000000  00027b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005ab  00000000  00000000  000282f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c3be  00000000  00000000  0002889b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000815b  00000000  00000000  00044c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a001a  00000000  00000000  0004cdb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002490  00000000  00000000  000ecdd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  000ef260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d4 	.word	0x200000d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002e10 	.word	0x08002e10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d8 	.word	0x200000d8
 80001cc:	08002e10 	.word	0x08002e10

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027e:	2b00      	cmp	r3, #0
 8000280:	db0b      	blt.n	800029a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	f003 021f 	and.w	r2, r3, #31
 8000288:	4907      	ldr	r1, [pc, #28]	; (80002a8 <__NVIC_EnableIRQ+0x38>)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	095b      	lsrs	r3, r3, #5
 8000290:	2001      	movs	r0, #1
 8000292:	fa00 f202 	lsl.w	r2, r0, r2
 8000296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e100 	.word	0xe000e100

080002ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db0a      	blt.n	80002d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	490c      	ldr	r1, [pc, #48]	; (80002f8 <__NVIC_SetPriority+0x4c>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	440b      	add	r3, r1
 80002d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d4:	e00a      	b.n	80002ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4908      	ldr	r1, [pc, #32]	; (80002fc <__NVIC_SetPriority+0x50>)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	3b04      	subs	r3, #4
 80002e4:	0112      	lsls	r2, r2, #4
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	440b      	add	r3, r1
 80002ea:	761a      	strb	r2, [r3, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000300:	b480      	push	{r7}
 8000302:	b085      	sub	sp, #20
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800030a:	695a      	ldr	r2, [r3, #20]
 800030c:	4907      	ldr	r1, [pc, #28]	; (800032c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4313      	orrs	r3, r2
 8000312:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000316:	695a      	ldr	r2, [r3, #20]
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4013      	ands	r3, r2
 800031c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800031e:	68fb      	ldr	r3, [r7, #12]
}
 8000320:	bf00      	nop
 8000322:	3714      	adds	r7, #20
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr
 800032c:	40021000 	.word	0x40021000

08000330 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000334:	2001      	movs	r0, #1
 8000336:	f7ff ffe3 	bl	8000300 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, 0);
 800033a:	2100      	movs	r1, #0
 800033c:	2010      	movs	r0, #16
 800033e:	f7ff ffb5 	bl	80002ac <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000342:	2010      	movs	r0, #16
 8000344:	f7ff ff94 	bl	8000270 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, 0);
 8000348:	2100      	movs	r1, #0
 800034a:	2011      	movs	r0, #17
 800034c:	f7ff ffae 	bl	80002ac <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000350:	2011      	movs	r0, #17
 8000352:	f7ff ff8d 	bl	8000270 <__NVIC_EnableIRQ>

}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
	...

0800035c <LL_AHB1_GRP1_EnableClock>:
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000364:	4b08      	ldr	r3, [pc, #32]	; (8000388 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000366:	695a      	ldr	r2, [r3, #20]
 8000368:	4907      	ldr	r1, [pc, #28]	; (8000388 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4313      	orrs	r3, r2
 800036e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000372:	695a      	ldr	r2, [r3, #20]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4013      	ands	r3, r2
 8000378:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800037a:	68fb      	ldr	r3, [r7, #12]
}
 800037c:	bf00      	nop
 800037e:	3714      	adds	r7, #20
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr
 8000388:	40021000 	.word	0x40021000

0800038c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800038c:	b480      	push	{r7}
 800038e:	b089      	sub	sp, #36	; 0x24
 8000390:	af00      	add	r7, sp, #0
 8000392:	60f8      	str	r0, [r7, #12]
 8000394:	60b9      	str	r1, [r7, #8]
 8000396:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003a0:	697b      	ldr	r3, [r7, #20]
 80003a2:	fa93 f3a3 	rbit	r3, r3
 80003a6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80003a8:	693b      	ldr	r3, [r7, #16]
 80003aa:	fab3 f383 	clz	r3, r3
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	005b      	lsls	r3, r3, #1
 80003b2:	2103      	movs	r1, #3
 80003b4:	fa01 f303 	lsl.w	r3, r1, r3
 80003b8:	43db      	mvns	r3, r3
 80003ba:	401a      	ands	r2, r3
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003c0:	69fb      	ldr	r3, [r7, #28]
 80003c2:	fa93 f3a3 	rbit	r3, r3
 80003c6:	61bb      	str	r3, [r7, #24]
  return result;
 80003c8:	69bb      	ldr	r3, [r7, #24]
 80003ca:	fab3 f383 	clz	r3, r3
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	005b      	lsls	r3, r3, #1
 80003d2:	6879      	ldr	r1, [r7, #4]
 80003d4:	fa01 f303 	lsl.w	r3, r1, r3
 80003d8:	431a      	orrs	r2, r3
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	601a      	str	r2, [r3, #0]
}
 80003de:	bf00      	nop
 80003e0:	3724      	adds	r7, #36	; 0x24
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr

080003ea <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80003ea:	b480      	push	{r7}
 80003ec:	b083      	sub	sp, #12
 80003ee:	af00      	add	r7, sp, #0
 80003f0:	6078      	str	r0, [r7, #4]
 80003f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	683a      	ldr	r2, [r7, #0]
 80003f8:	619a      	str	r2, [r3, #24]
}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr

08000406 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000406:	b480      	push	{r7}
 8000408:	b083      	sub	sp, #12
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
 800040e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	683a      	ldr	r2, [r7, #0]
 8000414:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
	...

08000424 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b086      	sub	sp, #24
 8000428:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */

  /* LED pin configuration */
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_3, LL_GPIO_MODE_OUTPUT);
 800042a:	2201      	movs	r2, #1
 800042c:	2108      	movs	r1, #8
 800042e:	4817      	ldr	r0, [pc, #92]	; (800048c <MX_GPIO_Init+0x68>)
 8000430:	f7ff ffac 	bl	800038c <LL_GPIO_SetPinMode>
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_3);
 8000434:	2108      	movs	r1, #8
 8000436:	4815      	ldr	r0, [pc, #84]	; (800048c <MX_GPIO_Init+0x68>)
 8000438:	f7ff ffd7 	bl	80003ea <LL_GPIO_SetOutputPin>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043c:	463b      	mov	r3, r7
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]
 8000448:	611a      	str	r2, [r3, #16]
 800044a:	615a      	str	r2, [r3, #20]

    /* GPIO Ports Clock Enable */
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800044c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000450:	f7ff ff84 	bl	800035c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000454:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000458:	f7ff ff80 	bl	800035c <LL_AHB1_GRP1_EnableClock>

	/**/
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 800045c:	2108      	movs	r1, #8
 800045e:	480b      	ldr	r0, [pc, #44]	; (800048c <MX_GPIO_Init+0x68>)
 8000460:	f7ff ffd1 	bl	8000406 <LL_GPIO_ResetOutputPin>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000464:	2308      	movs	r3, #8
 8000466:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000468:	2301      	movs	r3, #1
 800046a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800046c:	2300      	movs	r3, #0
 800046e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000470:	2300      	movs	r3, #0
 8000472:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000474:	2300      	movs	r3, #0
 8000476:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000478:	463b      	mov	r3, r7
 800047a:	4619      	mov	r1, r3
 800047c:	4803      	ldr	r0, [pc, #12]	; (800048c <MX_GPIO_Init+0x68>)
 800047e:	f001 fbf3 	bl	8001c68 <LL_GPIO_Init>

}
 8000482:	bf00      	nop
 8000484:	3718      	adds	r7, #24
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	48000400 	.word	0x48000400

08000490 <__NVIC_GetPriorityGrouping>:
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000494:	4b04      	ldr	r3, [pc, #16]	; (80004a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000496:	68db      	ldr	r3, [r3, #12]
 8000498:	0a1b      	lsrs	r3, r3, #8
 800049a:	f003 0307 	and.w	r3, r3, #7
}
 800049e:	4618      	mov	r0, r3
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	e000ed00 	.word	0xe000ed00

080004ac <__NVIC_EnableIRQ>:
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	db0b      	blt.n	80004d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	f003 021f 	and.w	r2, r3, #31
 80004c4:	4907      	ldr	r1, [pc, #28]	; (80004e4 <__NVIC_EnableIRQ+0x38>)
 80004c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ca:	095b      	lsrs	r3, r3, #5
 80004cc:	2001      	movs	r0, #1
 80004ce:	fa00 f202 	lsl.w	r2, r0, r2
 80004d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	e000e100 	.word	0xe000e100

080004e8 <__NVIC_SetPriority>:
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	6039      	str	r1, [r7, #0]
 80004f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	db0a      	blt.n	8000512 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	b2da      	uxtb	r2, r3
 8000500:	490c      	ldr	r1, [pc, #48]	; (8000534 <__NVIC_SetPriority+0x4c>)
 8000502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000506:	0112      	lsls	r2, r2, #4
 8000508:	b2d2      	uxtb	r2, r2
 800050a:	440b      	add	r3, r1
 800050c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000510:	e00a      	b.n	8000528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	b2da      	uxtb	r2, r3
 8000516:	4908      	ldr	r1, [pc, #32]	; (8000538 <__NVIC_SetPriority+0x50>)
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	f003 030f 	and.w	r3, r3, #15
 800051e:	3b04      	subs	r3, #4
 8000520:	0112      	lsls	r2, r2, #4
 8000522:	b2d2      	uxtb	r2, r2
 8000524:	440b      	add	r3, r1
 8000526:	761a      	strb	r2, [r3, #24]
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	e000e100 	.word	0xe000e100
 8000538:	e000ed00 	.word	0xe000ed00

0800053c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800053c:	b480      	push	{r7}
 800053e:	b089      	sub	sp, #36	; 0x24
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	f003 0307 	and.w	r3, r3, #7
 800054e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	f1c3 0307 	rsb	r3, r3, #7
 8000556:	2b04      	cmp	r3, #4
 8000558:	bf28      	it	cs
 800055a:	2304      	movcs	r3, #4
 800055c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800055e:	69fb      	ldr	r3, [r7, #28]
 8000560:	3304      	adds	r3, #4
 8000562:	2b06      	cmp	r3, #6
 8000564:	d902      	bls.n	800056c <NVIC_EncodePriority+0x30>
 8000566:	69fb      	ldr	r3, [r7, #28]
 8000568:	3b03      	subs	r3, #3
 800056a:	e000      	b.n	800056e <NVIC_EncodePriority+0x32>
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000570:	f04f 32ff 	mov.w	r2, #4294967295
 8000574:	69bb      	ldr	r3, [r7, #24]
 8000576:	fa02 f303 	lsl.w	r3, r2, r3
 800057a:	43da      	mvns	r2, r3
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	401a      	ands	r2, r3
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000584:	f04f 31ff 	mov.w	r1, #4294967295
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	43d9      	mvns	r1, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000594:	4313      	orrs	r3, r2
         );
}
 8000596:	4618      	mov	r0, r3
 8000598:	3724      	adds	r7, #36	; 0x24
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b083      	sub	sp, #12
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f043 0201 	orr.w	r2, r3, #1
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	601a      	str	r2, [r3, #0]
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80005c2:	b480      	push	{r7}
 80005c4:	b083      	sub	sp, #12
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	601a      	str	r2, [r3, #0]
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80005e2:	b480      	push	{r7}
 80005e4:	b083      	sub	sp, #12
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	601a      	str	r2, [r3, #0]
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr

08000602 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000602:	b480      	push	{r7}
 8000604:	b085      	sub	sp, #20
 8000606:	af00      	add	r7, sp, #0
 8000608:	60f8      	str	r0, [r7, #12]
 800060a:	60b9      	str	r1, [r7, #8]
 800060c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	68db      	ldr	r3, [r3, #12]
 8000612:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000616:	f023 0306 	bic.w	r3, r3, #6
 800061a:	68b9      	ldr	r1, [r7, #8]
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	430a      	orrs	r2, r1
 8000620:	431a      	orrs	r2, r3
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	60da      	str	r2, [r3, #12]
}
 8000626:	bf00      	nop
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000632:	b480      	push	{r7}
 8000634:	b083      	sub	sp, #12
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	68db      	ldr	r3, [r3, #12]
 800063e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	60da      	str	r2, [r3, #12]
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 8000652:	b480      	push	{r7}
 8000654:	b083      	sub	sp, #12
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	f003 0304 	and.w	r3, r3, #4
 8000662:	2b04      	cmp	r3, #4
 8000664:	d101      	bne.n	800066a <LL_I2C_IsActiveFlag_RXNE+0x18>
 8000666:	2301      	movs	r3, #1
 8000668:	e000      	b.n	800066c <LL_I2C_IsActiveFlag_RXNE+0x1a>
 800066a:	2300      	movs	r3, #0
}
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	605a      	str	r2, [r3, #4]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a4:	b2db      	uxtb	r3, r3
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
	...

080006b4 <LL_AHB1_GRP1_EnableClock>:
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006be:	695a      	ldr	r2, [r3, #20]
 80006c0:	4907      	ldr	r1, [pc, #28]	; (80006e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006ca:	695a      	ldr	r2, [r3, #20]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4013      	ands	r3, r2
 80006d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006d2:	68fb      	ldr	r3, [r7, #12]
}
 80006d4:	bf00      	nop
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	40021000 	.word	0x40021000

080006e4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <LL_APB1_GRP1_EnableClock+0x2c>)
 80006ee:	69da      	ldr	r2, [r3, #28]
 80006f0:	4907      	ldr	r1, [pc, #28]	; (8000710 <LL_APB1_GRP1_EnableClock+0x2c>)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4313      	orrs	r3, r2
 80006f6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80006f8:	4b05      	ldr	r3, [pc, #20]	; (8000710 <LL_APB1_GRP1_EnableClock+0x2c>)
 80006fa:	69da      	ldr	r2, [r3, #28]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4013      	ands	r3, r2
 8000700:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000702:	68fb      	ldr	r3, [r7, #12]
}
 8000704:	bf00      	nop
 8000706:	3714      	adds	r7, #20
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	40021000 	.word	0x40021000

08000714 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08e      	sub	sp, #56	; 0x38
 8000718:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]
 800072a:	615a      	str	r2, [r3, #20]
 800072c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
 800073c:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800073e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000742:	f7ff ffb7 	bl	80006b4 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000746:	23c0      	movs	r3, #192	; 0xc0
 8000748:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800074a:	2302      	movs	r3, #2
 800074c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800074e:	2303      	movs	r3, #3
 8000750:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000752:	2301      	movs	r3, #1
 8000754:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000756:	2301      	movs	r3, #1
 8000758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800075a:	2304      	movs	r3, #4
 800075c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	4619      	mov	r1, r3
 8000762:	4821      	ldr	r0, [pc, #132]	; (80007e8 <MX_I2C1_Init+0xd4>)
 8000764:	f001 fa80 	bl	8001c68 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000768:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800076c:	f7ff ffba 	bl	80006e4 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000770:	f7ff fe8e 	bl	8000490 <__NVIC_GetPriorityGrouping>
 8000774:	4603      	mov	r3, r0
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fede 	bl	800053c <NVIC_EncodePriority>
 8000780:	4603      	mov	r3, r0
 8000782:	4619      	mov	r1, r3
 8000784:	201f      	movs	r0, #31
 8000786:	f7ff feaf 	bl	80004e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800078a:	201f      	movs	r0, #31
 800078c:	f7ff fe8e 	bl	80004ac <__NVIC_EnableIRQ>

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8000790:	4816      	ldr	r0, [pc, #88]	; (80007ec <MX_I2C1_Init+0xd8>)
 8000792:	f7ff ff71 	bl	8000678 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8000796:	4815      	ldr	r0, [pc, #84]	; (80007ec <MX_I2C1_Init+0xd8>)
 8000798:	f7ff ff4b 	bl	8000632 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800079c:	4813      	ldr	r0, [pc, #76]	; (80007ec <MX_I2C1_Init+0xd8>)
 800079e:	f7ff ff20 	bl	80005e2 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80007a2:	4812      	ldr	r0, [pc, #72]	; (80007ec <MX_I2C1_Init+0xd8>)
 80007a4:	f7ff ff0d 	bl	80005c2 <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 80007ac:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_I2C1_Init+0xdc>)
 80007ae:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80007bc:	2300      	movs	r3, #0
 80007be:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80007c0:	2300      	movs	r3, #0
 80007c2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4619      	mov	r1, r3
 80007ca:	4808      	ldr	r0, [pc, #32]	; (80007ec <MX_I2C1_Init+0xd8>)
 80007cc:	f001 fb5f 	bl	8001e8e <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_I2C1_Init+0xd8>)
 80007d6:	f7ff ff14 	bl	8000602 <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 80007da:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_I2C1_Init+0xd8>)
 80007dc:	f7ff fee1 	bl	80005a2 <LL_I2C_Enable>
}
 80007e0:	bf00      	nop
 80007e2:	3738      	adds	r7, #56	; 0x38
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	48000400 	.word	0x48000400
 80007ec:	40005400 	.word	0x40005400
 80007f0:	2000090e 	.word	0x2000090e

080007f4 <I2C1_EV_IRQHandler>:
	return i2c_rx_data;
}


void I2C1_EV_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	// Check RXNE flag value in ISR register
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 80007f8:	4807      	ldr	r0, [pc, #28]	; (8000818 <I2C1_EV_IRQHandler+0x24>)
 80007fa:	f7ff ff2a 	bl	8000652 <LL_I2C_IsActiveFlag_RXNE>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d006      	beq.n	8000812 <I2C1_EV_IRQHandler+0x1e>
	{
		// Call function Master Reception Callback
		i2c_rx_data = LL_I2C_ReceiveData8(I2C1);
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <I2C1_EV_IRQHandler+0x24>)
 8000806:	f7ff ff47 	bl	8000698 <LL_I2C_ReceiveData8>
 800080a:	4603      	mov	r3, r0
 800080c:	461a      	mov	r2, r3
 800080e:	4b03      	ldr	r3, [pc, #12]	; (800081c <I2C1_EV_IRQHandler+0x28>)
 8000810:	701a      	strb	r2, [r3, #0]
	}
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40005400 	.word	0x40005400
 800081c:	200000f0 	.word	0x200000f0

08000820 <__NVIC_SetPriorityGrouping>:
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <__NVIC_SetPriorityGrouping+0x44>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800083c:	4013      	ands	r3, r2
 800083e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800084c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000852:	4a04      	ldr	r2, [pc, #16]	; (8000864 <__NVIC_SetPriorityGrouping+0x44>)
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	60d3      	str	r3, [r2, #12]
}
 8000858:	bf00      	nop
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <LL_RCC_HSI_Enable+0x1c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a04      	ldr	r2, [pc, #16]	; (8000884 <LL_RCC_HSI_Enable+0x1c>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	6013      	str	r3, [r2, #0]
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40021000 	.word	0x40021000

08000888 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <LL_RCC_HSI_IsReady+0x20>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f003 0302 	and.w	r3, r3, #2
 8000894:	2b02      	cmp	r3, #2
 8000896:	bf0c      	ite	eq
 8000898:	2301      	moveq	r3, #1
 800089a:	2300      	movne	r3, #0
 800089c:	b2db      	uxtb	r3, r3
}
 800089e:	4618      	mov	r0, r3
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	40021000 	.word	0x40021000

080008ac <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	00db      	lsls	r3, r3, #3
 80008c0:	4904      	ldr	r1, [pc, #16]	; (80008d4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80008c2:	4313      	orrs	r3, r2
 80008c4:	600b      	str	r3, [r1, #0]
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40021000 	.word	0x40021000

080008d8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <LL_RCC_SetSysClkSource+0x24>)
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	f023 0203 	bic.w	r2, r3, #3
 80008e8:	4904      	ldr	r1, [pc, #16]	; (80008fc <LL_RCC_SetSysClkSource+0x24>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	604b      	str	r3, [r1, #4]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	40021000 	.word	0x40021000

08000900 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000904:	4b04      	ldr	r3, [pc, #16]	; (8000918 <LL_RCC_GetSysClkSource+0x18>)
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	f003 030c 	and.w	r3, r3, #12
}
 800090c:	4618      	mov	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000

0800091c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <LL_RCC_SetAHBPrescaler+0x24>)
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800092c:	4904      	ldr	r1, [pc, #16]	; (8000940 <LL_RCC_SetAHBPrescaler+0x24>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4313      	orrs	r3, r2
 8000932:	604b      	str	r3, [r1, #4]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	40021000 	.word	0x40021000

08000944 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <LL_RCC_SetAPB1Prescaler+0x24>)
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000954:	4904      	ldr	r1, [pc, #16]	; (8000968 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4313      	orrs	r3, r2
 800095a:	604b      	str	r3, [r1, #4]
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	40021000 	.word	0x40021000

0800096c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800097c:	4904      	ldr	r1, [pc, #16]	; (8000990 <LL_RCC_SetAPB2Prescaler+0x24>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4313      	orrs	r3, r2
 8000982:	604b      	str	r3, [r1, #4]
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	40021000 	.word	0x40021000

08000994 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <LL_RCC_SetI2CClockSource+0x2c>)
 800099e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	0e1b      	lsrs	r3, r3, #24
 80009a4:	43db      	mvns	r3, r3
 80009a6:	401a      	ands	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80009ae:	4904      	ldr	r1, [pc, #16]	; (80009c0 <LL_RCC_SetI2CClockSource+0x2c>)
 80009b0:	4313      	orrs	r3, r2
 80009b2:	630b      	str	r3, [r1, #48]	; 0x30
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	40021000 	.word	0x40021000

080009c4 <LL_APB1_GRP1_EnableClock>:
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80009ce:	69da      	ldr	r2, [r3, #28]
 80009d0:	4907      	ldr	r1, [pc, #28]	; (80009f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80009da:	69da      	ldr	r2, [r3, #28]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4013      	ands	r3, r2
 80009e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009e2:	68fb      	ldr	r3, [r7, #12]
}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	40021000 	.word	0x40021000

080009f4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <LL_APB2_GRP1_EnableClock+0x2c>)
 80009fe:	699a      	ldr	r2, [r3, #24]
 8000a00:	4907      	ldr	r1, [pc, #28]	; (8000a20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a0a:	699a      	ldr	r2, [r3, #24]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a12:	68fb      	ldr	r3, [r7, #12]
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	40021000 	.word	0x40021000

08000a24 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <LL_FLASH_SetLatency+0x24>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f023 0207 	bic.w	r2, r3, #7
 8000a34:	4904      	ldr	r1, [pc, #16]	; (8000a48 <LL_FLASH_SetLatency+0x24>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	600b      	str	r3, [r1, #0]
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	40022000 	.word	0x40022000

08000a4c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <LL_FLASH_GetLatency+0x18>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f003 0307 	and.w	r3, r3, #7
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40022000 	.word	0x40022000

08000a68 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b04      	cmp	r3, #4
 8000a74:	d106      	bne.n	8000a84 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <LL_SYSTICK_SetClkSource+0x34>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <LL_SYSTICK_SetClkSource+0x34>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8000a82:	e005      	b.n	8000a90 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <LL_SYSTICK_SetClkSource+0x34>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <LL_SYSTICK_SetClkSource+0x34>)
 8000a8a:	f023 0304 	bic.w	r3, r3, #4
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000e010 	.word	0xe000e010

08000aa0 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	041a      	lsls	r2, r3, #16
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	43d9      	mvns	r1, r3
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	400b      	ands	r3, r1
 8000ac0:	431a      	orrs	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	619a      	str	r2, [r3, #24]
}
 8000ac6:	bf00      	nop
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <main>:
char messageToBeSent[128] = {'a','a','\0'};
char statusMessage[128];


int main(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f7ff ff8b 	bl	80009f4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000ade:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000ae2:	f7ff ff6f 	bl	80009c4 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae6:	2003      	movs	r0, #3
 8000ae8:	f7ff fe9a 	bl	8000820 <__NVIC_SetPriorityGrouping>

  SystemClock_Config();
 8000aec:	f000 f822 	bl	8000b34 <SystemClock_Config>

  MX_GPIO_Init();
 8000af0:	f7ff fc98 	bl	8000424 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000af4:	f7ff fe0e 	bl	8000714 <MX_I2C1_Init>
  MX_DMA_Init();
 8000af8:	f7ff fc1a 	bl	8000330 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000afc:	f000 fe22 	bl	8001744 <MX_USART2_UART_Init>

  USART2_RegisterCallback(proccesDmaData);
 8000b00:	4809      	ldr	r0, [pc, #36]	; (8000b28 <main+0x54>)
 8000b02:	f000 fe0d 	bl	8001720 <USART2_RegisterCallback>
//	  if(i2c_master_read_byte(LSM6DSL_DEVICE_ADDRESS, LSM6DSL_WHO_AM_I_ADDRES) == LSM6DSL_WHO_AM_I_VALUE)
//	  {
//		  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_3);
//	  }

		  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_3);
 8000b06:	2108      	movs	r1, #8
 8000b08:	4808      	ldr	r0, [pc, #32]	; (8000b2c <main+0x58>)
 8000b0a:	f7ff ffc9 	bl	8000aa0 <LL_GPIO_TogglePin>
		  USART2_PutBuffer((uint8_t*)messageToBeSent, sizeof(messageToBeSent));
 8000b0e:	2180      	movs	r1, #128	; 0x80
 8000b10:	4807      	ldr	r0, [pc, #28]	; (8000b30 <main+0x5c>)
 8000b12:	f000 fef9 	bl	8001908 <USART2_PutBuffer>

	  USART2_PutBuffer((uint8_t*)messageToBeSent, sizeof(messageToBeSent));
 8000b16:	2180      	movs	r1, #128	; 0x80
 8000b18:	4805      	ldr	r0, [pc, #20]	; (8000b30 <main+0x5c>)
 8000b1a:	f000 fef5 	bl	8001908 <USART2_PutBuffer>
	  LL_mDelay(100);
 8000b1e:	2064      	movs	r0, #100	; 0x64
 8000b20:	f001 fc9c 	bl	800245c <LL_mDelay>
		  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_3);
 8000b24:	e7ef      	b.n	8000b06 <main+0x32>
 8000b26:	bf00      	nop
 8000b28:	08000ba9 	.word	0x08000ba9
 8000b2c:	48000400 	.word	0x48000400
 8000b30:	20000000 	.word	0x20000000

08000b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f7ff ff73 	bl	8000a24 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8000b3e:	f7ff ff85 	bl	8000a4c <LL_FLASH_GetLatency>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x18>
  {
  Error_Handler();
 8000b48:	f000 f8cc 	bl	8000ce4 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8000b4c:	f7ff fe8c 	bl	8000868 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000b50:	bf00      	nop
 8000b52:	f7ff fe99 	bl	8000888 <LL_RCC_HSI_IsReady>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d1fa      	bne.n	8000b52 <SystemClock_Config+0x1e>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000b5c:	2010      	movs	r0, #16
 8000b5e:	f7ff fea5 	bl	80008ac <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000b62:	2000      	movs	r0, #0
 8000b64:	f7ff feda 	bl	800091c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f7ff feeb 	bl	8000944 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f7ff fefc 	bl	800096c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000b74:	2000      	movs	r0, #0
 8000b76:	f7ff feaf 	bl	80008d8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000b7a:	bf00      	nop
 8000b7c:	f7ff fec0 	bl	8000900 <LL_RCC_GetSysClkSource>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d1fa      	bne.n	8000b7c <SystemClock_Config+0x48>
  {

  }
  LL_Init1msTick(8000000);
 8000b86:	4807      	ldr	r0, [pc, #28]	; (8000ba4 <SystemClock_Config+0x70>)
 8000b88:	f001 fc5a 	bl	8002440 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8000b8c:	2004      	movs	r0, #4
 8000b8e:	f7ff ff6b 	bl	8000a68 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8000b92:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <SystemClock_Config+0x70>)
 8000b94:	f001 fc88 	bl	80024a8 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8000b98:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000b9c:	f7ff fefa 	bl	8000994 <LL_RCC_SetI2CClockSource>
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	007a1200 	.word	0x007a1200

08000ba8 <proccesDmaData>:

void proccesDmaData(uint8_t sign)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af02      	add	r7, sp, #8
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
	if(transimissionEnabled)
 8000bb2:	4b45      	ldr	r3, [pc, #276]	; (8000cc8 <proccesDmaData+0x120>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d064      	beq.n	8000c84 <proccesDmaData+0xdc>
		{
			if(sign >= 'a' && sign <= 'z')
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	2b60      	cmp	r3, #96	; 0x60
 8000bbe:	d916      	bls.n	8000bee <proccesDmaData+0x46>
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	2b7a      	cmp	r3, #122	; 0x7a
 8000bc4:	d813      	bhi.n	8000bee <proccesDmaData+0x46>
			{
				thisLetterCount.small_letter++;
 8000bc6:	4b41      	ldr	r3, [pc, #260]	; (8000ccc <proccesDmaData+0x124>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4b3f      	ldr	r3, [pc, #252]	; (8000ccc <proccesDmaData+0x124>)
 8000bd0:	701a      	strb	r2, [r3, #0]
				processedSignsCount++;
 8000bd2:	4b3f      	ldr	r3, [pc, #252]	; (8000cd0 <proccesDmaData+0x128>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	4a3d      	ldr	r2, [pc, #244]	; (8000cd0 <proccesDmaData+0x128>)
 8000bda:	6013      	str	r3, [r2, #0]
				messageBuffer[messageBufferIndex++] = sign;
 8000bdc:	4b3d      	ldr	r3, [pc, #244]	; (8000cd4 <proccesDmaData+0x12c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	1c5a      	adds	r2, r3, #1
 8000be2:	493c      	ldr	r1, [pc, #240]	; (8000cd4 <proccesDmaData+0x12c>)
 8000be4:	600a      	str	r2, [r1, #0]
 8000be6:	493c      	ldr	r1, [pc, #240]	; (8000cd8 <proccesDmaData+0x130>)
 8000be8:	79fa      	ldrb	r2, [r7, #7]
 8000bea:	54ca      	strb	r2, [r1, r3]
 8000bec:	e04a      	b.n	8000c84 <proccesDmaData+0xdc>
			}
			else if(sign >= 'A' && sign <= 'Z')
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b40      	cmp	r3, #64	; 0x40
 8000bf2:	d916      	bls.n	8000c22 <proccesDmaData+0x7a>
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b5a      	cmp	r3, #90	; 0x5a
 8000bf8:	d813      	bhi.n	8000c22 <proccesDmaData+0x7a>
			{
				thisLetterCount.capital_letter++;
 8000bfa:	4b34      	ldr	r3, [pc, #208]	; (8000ccc <proccesDmaData+0x124>)
 8000bfc:	785b      	ldrb	r3, [r3, #1]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4b32      	ldr	r3, [pc, #200]	; (8000ccc <proccesDmaData+0x124>)
 8000c04:	705a      	strb	r2, [r3, #1]
				processedSignsCount++;
 8000c06:	4b32      	ldr	r3, [pc, #200]	; (8000cd0 <proccesDmaData+0x128>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	4a30      	ldr	r2, [pc, #192]	; (8000cd0 <proccesDmaData+0x128>)
 8000c0e:	6013      	str	r3, [r2, #0]
				messageBuffer[messageBufferIndex++] = sign;
 8000c10:	4b30      	ldr	r3, [pc, #192]	; (8000cd4 <proccesDmaData+0x12c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	492f      	ldr	r1, [pc, #188]	; (8000cd4 <proccesDmaData+0x12c>)
 8000c18:	600a      	str	r2, [r1, #0]
 8000c1a:	492f      	ldr	r1, [pc, #188]	; (8000cd8 <proccesDmaData+0x130>)
 8000c1c:	79fa      	ldrb	r2, [r7, #7]
 8000c1e:	54ca      	strb	r2, [r1, r3]
 8000c20:	e030      	b.n	8000c84 <proccesDmaData+0xdc>
			}
			else if(sign == END_SIGN)
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	2b24      	cmp	r3, #36	; 0x24
 8000c26:	d120      	bne.n	8000c6a <proccesDmaData+0xc2>
			{
				transimissionEnabled = 0;
 8000c28:	4b27      	ldr	r3, [pc, #156]	; (8000cc8 <proccesDmaData+0x120>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
				processedSignsCount = 0;
 8000c2e:	4b28      	ldr	r3, [pc, #160]	; (8000cd0 <proccesDmaData+0x128>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
				sprintf(messageToBeSent,"Valid string: %s, lower-case: %d, upper-case: %d \r\n",messageBuffer,thisLetterCount.small_letter,thisLetterCount.capital_letter);
 8000c34:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <proccesDmaData+0x124>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b24      	ldr	r3, [pc, #144]	; (8000ccc <proccesDmaData+0x124>)
 8000c3c:	785b      	ldrb	r3, [r3, #1]
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	4613      	mov	r3, r2
 8000c42:	4a25      	ldr	r2, [pc, #148]	; (8000cd8 <proccesDmaData+0x130>)
 8000c44:	4925      	ldr	r1, [pc, #148]	; (8000cdc <proccesDmaData+0x134>)
 8000c46:	4826      	ldr	r0, [pc, #152]	; (8000ce0 <proccesDmaData+0x138>)
 8000c48:	f001 fc3e 	bl	80024c8 <siprintf>
				thisLetterCount.small_letter = 0;
 8000c4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <proccesDmaData+0x124>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]
				thisLetterCount.capital_letter = 0;
 8000c52:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <proccesDmaData+0x124>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	705a      	strb	r2, [r3, #1]
				memset(messageBuffer, 0, MAX_MSG_LEN);
 8000c58:	2223      	movs	r2, #35	; 0x23
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	481e      	ldr	r0, [pc, #120]	; (8000cd8 <proccesDmaData+0x130>)
 8000c5e:	f001 fc53 	bl	8002508 <memset>
				messageBufferIndex = 0;
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <proccesDmaData+0x12c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	e00c      	b.n	8000c84 <proccesDmaData+0xdc>
			}
			else
			{
				processedSignsCount++;
 8000c6a:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <proccesDmaData+0x128>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <proccesDmaData+0x128>)
 8000c72:	6013      	str	r3, [r2, #0]
				messageBuffer[messageBufferIndex++] = sign;
 8000c74:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <proccesDmaData+0x12c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	1c5a      	adds	r2, r3, #1
 8000c7a:	4916      	ldr	r1, [pc, #88]	; (8000cd4 <proccesDmaData+0x12c>)
 8000c7c:	600a      	str	r2, [r1, #0]
 8000c7e:	4916      	ldr	r1, [pc, #88]	; (8000cd8 <proccesDmaData+0x130>)
 8000c80:	79fa      	ldrb	r2, [r7, #7]
 8000c82:	54ca      	strb	r2, [r1, r3]
			}
		}
		if(processedSignsCount > MAX_MSG_LEN)
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <proccesDmaData+0x128>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b23      	cmp	r3, #35	; 0x23
 8000c8a:	dd13      	ble.n	8000cb4 <proccesDmaData+0x10c>
		{
			transimissionEnabled = 0;
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <proccesDmaData+0x120>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
			processedSignsCount = 0;
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <proccesDmaData+0x128>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
			thisLetterCount.small_letter = 0;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <proccesDmaData+0x124>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
			thisLetterCount.capital_letter = 0;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <proccesDmaData+0x124>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	705a      	strb	r2, [r3, #1]
			memset(messageBuffer, 0, MAX_MSG_LEN);
 8000ca4:	2223      	movs	r2, #35	; 0x23
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	480b      	ldr	r0, [pc, #44]	; (8000cd8 <proccesDmaData+0x130>)
 8000caa:	f001 fc2d 	bl	8002508 <memset>
			messageBufferIndex = 0;
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <proccesDmaData+0x12c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
		}
		if(sign == START_SIGN)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	2b23      	cmp	r3, #35	; 0x23
 8000cb8:	d102      	bne.n	8000cc0 <proccesDmaData+0x118>
		{
			transimissionEnabled = 1;
 8000cba:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <proccesDmaData+0x120>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	701a      	strb	r2, [r3, #0]
		}
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200000f8 	.word	0x200000f8
 8000ccc:	20000124 	.word	0x20000124
 8000cd0:	200000f4 	.word	0x200000f4
 8000cd4:	20000120 	.word	0x20000120
 8000cd8:	200000fc 	.word	0x200000fc
 8000cdc:	08002e28 	.word	0x08002e28
 8000ce0:	20000000 	.word	0x20000000

08000ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <LL_DMA_DisableChannel+0x3c>)
 8000d04:	5cd3      	ldrb	r3, [r2, r3]
 8000d06:	461a      	mov	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	683a      	ldr	r2, [r7, #0]
 8000d10:	3a01      	subs	r2, #1
 8000d12:	4907      	ldr	r1, [pc, #28]	; (8000d30 <LL_DMA_DisableChannel+0x3c>)
 8000d14:	5c8a      	ldrb	r2, [r1, r2]
 8000d16:	4611      	mov	r1, r2
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	440a      	add	r2, r1
 8000d1c:	f023 0301 	bic.w	r3, r3, #1
 8000d20:	6013      	str	r3, [r2, #0]
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	08002e5c 	.word	0x08002e5c

08000d34 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000d48:	bf0c      	ite	eq
 8000d4a:	2301      	moveq	r3, #1
 8000d4c:	2300      	movne	r3, #0
 8000d4e:	b2db      	uxtb	r3, r3
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000d70:	bf0c      	ite	eq
 8000d72:	2301      	moveq	r3, #1
 8000d74:	2300      	movne	r3, #0
 8000d76:	b2db      	uxtb	r3, r3
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000d98:	bf0c      	ite	eq
 8000d9a:	2301      	moveq	r3, #1
 8000d9c:	2300      	movne	r3, #0
 8000d9e:	b2db      	uxtb	r3, r3
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000dba:	605a      	str	r2, [r3, #4]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000dd6:	605a      	str	r2, [r3, #4]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000df2:	605a      	str	r2, [r3, #4]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	69db      	ldr	r3, [r3, #28]
 8000e0c:	f003 0310 	and.w	r3, r3, #16
 8000e10:	2b10      	cmp	r3, #16
 8000e12:	d101      	bne.n	8000e18 <LL_USART_IsActiveFlag_IDLE+0x18>
 8000e14:	2301      	movs	r3, #1
 8000e16:	e000      	b.n	8000e1a <LL_USART_IsActiveFlag_IDLE+0x1a>
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e36:	2b40      	cmp	r3, #64	; 0x40
 8000e38:	d101      	bne.n	8000e3e <LL_USART_IsActiveFlag_TC+0x18>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e000      	b.n	8000e40 <LL_USART_IsActiveFlag_TC+0x1a>
 8000e3e:	2300      	movs	r3, #0
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2210      	movs	r2, #16
 8000e58:	621a      	str	r2, [r3, #32]
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <HardFault_Handler+0x4>

08000e7a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <MemManage_Handler+0x4>

08000e80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <BusFault_Handler+0x4>

08000e86 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <UsageFault_Handler+0x4>

08000e8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <DMA1_Channel6_IRQHandler+0x38>)
 8000eca:	f7ff ff33 	bl	8000d34 <LL_DMA_IsActiveFlag_TC6>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d105      	bne.n	8000ee0 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8000ed4:	f000 fd38 	bl	8001948 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 8000ed8:	4808      	ldr	r0, [pc, #32]	; (8000efc <DMA1_Channel6_IRQHandler+0x38>)
 8000eda:	f7ff ff67 	bl	8000dac <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 8000ede:	e00a      	b.n	8000ef6 <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8000ee0:	4806      	ldr	r0, [pc, #24]	; (8000efc <DMA1_Channel6_IRQHandler+0x38>)
 8000ee2:	f7ff ff4f 	bl	8000d84 <LL_DMA_IsActiveFlag_HT6>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d104      	bne.n	8000ef6 <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8000eec:	f000 fd2c 	bl	8001948 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <DMA1_Channel6_IRQHandler+0x38>)
 8000ef2:	f7ff ff77 	bl	8000de4 <LL_DMA_ClearFlag_HT6>
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40020000 	.word	0x40020000

08000f00 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8000f04:	480a      	ldr	r0, [pc, #40]	; (8000f30 <DMA1_Channel7_IRQHandler+0x30>)
 8000f06:	f7ff ff29 	bl	8000d5c <LL_DMA_IsActiveFlag_TC7>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d10d      	bne.n	8000f2c <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8000f10:	4807      	ldr	r0, [pc, #28]	; (8000f30 <DMA1_Channel7_IRQHandler+0x30>)
 8000f12:	f7ff ff59 	bl	8000dc8 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8000f16:	bf00      	nop
 8000f18:	4806      	ldr	r0, [pc, #24]	; (8000f34 <DMA1_Channel7_IRQHandler+0x34>)
 8000f1a:	f7ff ff84 	bl	8000e26 <LL_USART_IsActiveFlag_TC>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d0f9      	beq.n	8000f18 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8000f24:	2107      	movs	r1, #7
 8000f26:	4802      	ldr	r0, [pc, #8]	; (8000f30 <DMA1_Channel7_IRQHandler+0x30>)
 8000f28:	f7ff fee4 	bl	8000cf4 <LL_DMA_DisableChannel>
	}
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40020000 	.word	0x40020000
 8000f34:	40004400 	.word	0x40004400

08000f38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8000f3c:	4806      	ldr	r0, [pc, #24]	; (8000f58 <USART2_IRQHandler+0x20>)
 8000f3e:	f7ff ff5f 	bl	8000e00 <LL_USART_IsActiveFlag_IDLE>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d004      	beq.n	8000f52 <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8000f48:	f000 fcfe 	bl	8001948 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <USART2_IRQHandler+0x20>)
 8000f4e:	f7ff ff7d 	bl	8000e4c <LL_USART_ClearFlag_IDLE>
	}
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40004400 	.word	0x40004400

08000f5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f64:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <_sbrk+0x5c>)
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <_sbrk+0x60>)
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d102      	bne.n	8000f7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <_sbrk+0x64>)
 8000f7a:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <_sbrk+0x68>)
 8000f7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d207      	bcs.n	8000f9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f8c:	f001 fac4 	bl	8002518 <__errno>
 8000f90:	4603      	mov	r3, r0
 8000f92:	220c      	movs	r2, #12
 8000f94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9a:	e009      	b.n	8000fb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <_sbrk+0x64>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <_sbrk+0x64>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <_sbrk+0x64>)
 8000fac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fae:	68fb      	ldr	r3, [r7, #12]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20003000 	.word	0x20003000
 8000fbc:	00000400 	.word	0x00000400
 8000fc0:	20000128 	.word	0x20000128
 8000fc4:	20000300 	.word	0x20000300

08000fc8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <SystemInit+0x20>)
 8000fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <SystemInit+0x20>)
 8000fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_EnableIRQ>:
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	db0b      	blt.n	8001016 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	f003 021f 	and.w	r2, r3, #31
 8001004:	4907      	ldr	r1, [pc, #28]	; (8001024 <__NVIC_EnableIRQ+0x38>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	095b      	lsrs	r3, r3, #5
 800100c:	2001      	movs	r0, #1
 800100e:	fa00 f202 	lsl.w	r2, r0, r2
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000e100 	.word	0xe000e100

08001028 <__NVIC_SetPriority>:
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001038:	2b00      	cmp	r3, #0
 800103a:	db0a      	blt.n	8001052 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	b2da      	uxtb	r2, r3
 8001040:	490c      	ldr	r1, [pc, #48]	; (8001074 <__NVIC_SetPriority+0x4c>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	0112      	lsls	r2, r2, #4
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	440b      	add	r3, r1
 800104c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001050:	e00a      	b.n	8001068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4908      	ldr	r1, [pc, #32]	; (8001078 <__NVIC_SetPriority+0x50>)
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	3b04      	subs	r3, #4
 8001060:	0112      	lsls	r2, r2, #4
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	440b      	add	r3, r1
 8001066:	761a      	strb	r2, [r3, #24]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000e100 	.word	0xe000e100
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <LL_AHB1_GRP1_EnableClock>:
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001086:	695a      	ldr	r2, [r3, #20]
 8001088:	4907      	ldr	r1, [pc, #28]	; (80010a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4313      	orrs	r3, r2
 800108e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001092:	695a      	ldr	r2, [r3, #20]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4013      	ands	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800109a:	68fb      	ldr	r3, [r7, #12]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	40021000 	.word	0x40021000

080010ac <LL_APB1_GRP1_EnableClock>:
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80010b6:	69da      	ldr	r2, [r3, #28]
 80010b8:	4907      	ldr	r1, [pc, #28]	; (80010d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80010c2:	69da      	ldr	r2, [r3, #28]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4013      	ands	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	40021000 	.word	0x40021000

080010dc <LL_DMA_EnableChannel>:
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <LL_DMA_EnableChannel+0x3c>)
 80010ec:	5cd3      	ldrb	r3, [r2, r3]
 80010ee:	461a      	mov	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4413      	add	r3, r2
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	3a01      	subs	r2, #1
 80010fa:	4907      	ldr	r1, [pc, #28]	; (8001118 <LL_DMA_EnableChannel+0x3c>)
 80010fc:	5c8a      	ldrb	r2, [r1, r2]
 80010fe:	4611      	mov	r1, r2
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	440a      	add	r2, r1
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6013      	str	r3, [r2, #0]
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	08002e7c 	.word	0x08002e7c

0800111c <LL_DMA_DisableChannel>:
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	3b01      	subs	r3, #1
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <LL_DMA_DisableChannel+0x3c>)
 800112c:	5cd3      	ldrb	r3, [r2, r3]
 800112e:	461a      	mov	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4413      	add	r3, r2
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	3a01      	subs	r2, #1
 800113a:	4907      	ldr	r1, [pc, #28]	; (8001158 <LL_DMA_DisableChannel+0x3c>)
 800113c:	5c8a      	ldrb	r2, [r1, r2]
 800113e:	4611      	mov	r1, r2
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	440a      	add	r2, r1
 8001144:	f023 0301 	bic.w	r3, r3, #1
 8001148:	6013      	str	r3, [r2, #0]
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	08002e7c 	.word	0x08002e7c

0800115c <LL_DMA_SetDataTransferDirection>:
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	3b01      	subs	r3, #1
 800116c:	4a0d      	ldr	r2, [pc, #52]	; (80011a4 <LL_DMA_SetDataTransferDirection+0x48>)
 800116e:	5cd3      	ldrb	r3, [r2, r3]
 8001170:	461a      	mov	r2, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4413      	add	r3, r2
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800117c:	f023 0310 	bic.w	r3, r3, #16
 8001180:	68ba      	ldr	r2, [r7, #8]
 8001182:	3a01      	subs	r2, #1
 8001184:	4907      	ldr	r1, [pc, #28]	; (80011a4 <LL_DMA_SetDataTransferDirection+0x48>)
 8001186:	5c8a      	ldrb	r2, [r1, r2]
 8001188:	4611      	mov	r1, r2
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	440a      	add	r2, r1
 800118e:	4611      	mov	r1, r2
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	4313      	orrs	r3, r2
 8001194:	600b      	str	r3, [r1, #0]
}
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	08002e7c 	.word	0x08002e7c

080011a8 <LL_DMA_GetDataTransferDirection>:
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <LL_DMA_GetDataTransferDirection+0x2c>)
 80011b8:	5cd3      	ldrb	r3, [r2, r3]
 80011ba:	461a      	mov	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4413      	add	r3, r2
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	f244 0310 	movw	r3, #16400	; 0x4010
 80011c6:	4013      	ands	r3, r2
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	08002e7c 	.word	0x08002e7c

080011d8 <LL_DMA_SetMode>:
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	4a0c      	ldr	r2, [pc, #48]	; (800121c <LL_DMA_SetMode+0x44>)
 80011ea:	5cd3      	ldrb	r3, [r2, r3]
 80011ec:	461a      	mov	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4413      	add	r3, r2
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f023 0220 	bic.w	r2, r3, #32
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	4907      	ldr	r1, [pc, #28]	; (800121c <LL_DMA_SetMode+0x44>)
 80011fe:	5ccb      	ldrb	r3, [r1, r3]
 8001200:	4619      	mov	r1, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	440b      	add	r3, r1
 8001206:	4619      	mov	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4313      	orrs	r3, r2
 800120c:	600b      	str	r3, [r1, #0]
}
 800120e:	bf00      	nop
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	08002e7c 	.word	0x08002e7c

08001220 <LL_DMA_SetPeriphIncMode>:
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	3b01      	subs	r3, #1
 8001230:	4a0c      	ldr	r2, [pc, #48]	; (8001264 <LL_DMA_SetPeriphIncMode+0x44>)
 8001232:	5cd3      	ldrb	r3, [r2, r3]
 8001234:	461a      	mov	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4413      	add	r3, r2
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	3b01      	subs	r3, #1
 8001244:	4907      	ldr	r1, [pc, #28]	; (8001264 <LL_DMA_SetPeriphIncMode+0x44>)
 8001246:	5ccb      	ldrb	r3, [r1, r3]
 8001248:	4619      	mov	r1, r3
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	440b      	add	r3, r1
 800124e:	4619      	mov	r1, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4313      	orrs	r3, r2
 8001254:	600b      	str	r3, [r1, #0]
}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	08002e7c 	.word	0x08002e7c

08001268 <LL_DMA_SetMemoryIncMode>:
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	3b01      	subs	r3, #1
 8001278:	4a0c      	ldr	r2, [pc, #48]	; (80012ac <LL_DMA_SetMemoryIncMode+0x44>)
 800127a:	5cd3      	ldrb	r3, [r2, r3]
 800127c:	461a      	mov	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4413      	add	r3, r2
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	3b01      	subs	r3, #1
 800128c:	4907      	ldr	r1, [pc, #28]	; (80012ac <LL_DMA_SetMemoryIncMode+0x44>)
 800128e:	5ccb      	ldrb	r3, [r1, r3]
 8001290:	4619      	mov	r1, r3
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	440b      	add	r3, r1
 8001296:	4619      	mov	r1, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4313      	orrs	r3, r2
 800129c:	600b      	str	r3, [r1, #0]
}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	08002e7c 	.word	0x08002e7c

080012b0 <LL_DMA_SetPeriphSize>:
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	3b01      	subs	r3, #1
 80012c0:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <LL_DMA_SetPeriphSize+0x44>)
 80012c2:	5cd3      	ldrb	r3, [r2, r3]
 80012c4:	461a      	mov	r2, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4413      	add	r3, r2
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	4907      	ldr	r1, [pc, #28]	; (80012f4 <LL_DMA_SetPeriphSize+0x44>)
 80012d6:	5ccb      	ldrb	r3, [r1, r3]
 80012d8:	4619      	mov	r1, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	440b      	add	r3, r1
 80012de:	4619      	mov	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	08002e7c 	.word	0x08002e7c

080012f8 <LL_DMA_SetMemorySize>:
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	3b01      	subs	r3, #1
 8001308:	4a0c      	ldr	r2, [pc, #48]	; (800133c <LL_DMA_SetMemorySize+0x44>)
 800130a:	5cd3      	ldrb	r3, [r2, r3]
 800130c:	461a      	mov	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4413      	add	r3, r2
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	3b01      	subs	r3, #1
 800131c:	4907      	ldr	r1, [pc, #28]	; (800133c <LL_DMA_SetMemorySize+0x44>)
 800131e:	5ccb      	ldrb	r3, [r1, r3]
 8001320:	4619      	mov	r1, r3
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	440b      	add	r3, r1
 8001326:	4619      	mov	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4313      	orrs	r3, r2
 800132c:	600b      	str	r3, [r1, #0]
}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	08002e7c 	.word	0x08002e7c

08001340 <LL_DMA_SetChannelPriorityLevel>:
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	3b01      	subs	r3, #1
 8001350:	4a0c      	ldr	r2, [pc, #48]	; (8001384 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001352:	5cd3      	ldrb	r3, [r2, r3]
 8001354:	461a      	mov	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4413      	add	r3, r2
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	3b01      	subs	r3, #1
 8001364:	4907      	ldr	r1, [pc, #28]	; (8001384 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001366:	5ccb      	ldrb	r3, [r1, r3]
 8001368:	4619      	mov	r1, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	440b      	add	r3, r1
 800136e:	4619      	mov	r1, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	08002e7c 	.word	0x08002e7c

08001388 <LL_DMA_SetDataLength>:
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	3b01      	subs	r3, #1
 8001398:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <LL_DMA_SetDataLength+0x44>)
 800139a:	5cd3      	ldrb	r3, [r2, r3]
 800139c:	461a      	mov	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4413      	add	r3, r2
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	0c1b      	lsrs	r3, r3, #16
 80013a6:	041b      	lsls	r3, r3, #16
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	3a01      	subs	r2, #1
 80013ac:	4907      	ldr	r1, [pc, #28]	; (80013cc <LL_DMA_SetDataLength+0x44>)
 80013ae:	5c8a      	ldrb	r2, [r1, r2]
 80013b0:	4611      	mov	r1, r2
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	440a      	add	r2, r1
 80013b6:	4611      	mov	r1, r2
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	604b      	str	r3, [r1, #4]
}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	08002e7c 	.word	0x08002e7c

080013d0 <LL_DMA_GetDataLength>:
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	3b01      	subs	r3, #1
 80013de:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <LL_DMA_GetDataLength+0x28>)
 80013e0:	5cd3      	ldrb	r3, [r2, r3]
 80013e2:	461a      	mov	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4413      	add	r3, r2
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	b29b      	uxth	r3, r3
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	08002e7c 	.word	0x08002e7c

080013fc <LL_DMA_ConfigAddresses>:
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	2b10      	cmp	r3, #16
 800140e:	d114      	bne.n	800143a <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	3b01      	subs	r3, #1
 8001414:	4a16      	ldr	r2, [pc, #88]	; (8001470 <LL_DMA_ConfigAddresses+0x74>)
 8001416:	5cd3      	ldrb	r3, [r2, r3]
 8001418:	461a      	mov	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4413      	add	r3, r2
 800141e:	461a      	mov	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	3b01      	subs	r3, #1
 8001428:	4a11      	ldr	r2, [pc, #68]	; (8001470 <LL_DMA_ConfigAddresses+0x74>)
 800142a:	5cd3      	ldrb	r3, [r2, r3]
 800142c:	461a      	mov	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4413      	add	r3, r2
 8001432:	461a      	mov	r2, r3
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	6093      	str	r3, [r2, #8]
}
 8001438:	e013      	b.n	8001462 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	3b01      	subs	r3, #1
 800143e:	4a0c      	ldr	r2, [pc, #48]	; (8001470 <LL_DMA_ConfigAddresses+0x74>)
 8001440:	5cd3      	ldrb	r3, [r2, r3]
 8001442:	461a      	mov	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4413      	add	r3, r2
 8001448:	461a      	mov	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	3b01      	subs	r3, #1
 8001452:	4a07      	ldr	r2, [pc, #28]	; (8001470 <LL_DMA_ConfigAddresses+0x74>)
 8001454:	5cd3      	ldrb	r3, [r2, r3]
 8001456:	461a      	mov	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4413      	add	r3, r2
 800145c:	461a      	mov	r2, r3
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	60d3      	str	r3, [r2, #12]
}
 8001462:	bf00      	nop
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	08002e7c 	.word	0x08002e7c

08001474 <LL_DMA_SetMemoryAddress>:
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	3b01      	subs	r3, #1
 8001484:	4a06      	ldr	r2, [pc, #24]	; (80014a0 <LL_DMA_SetMemoryAddress+0x2c>)
 8001486:	5cd3      	ldrb	r3, [r2, r3]
 8001488:	461a      	mov	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4413      	add	r3, r2
 800148e:	461a      	mov	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	60d3      	str	r3, [r2, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	08002e7c 	.word	0x08002e7c

080014a4 <LL_DMA_SetPeriphAddress>:
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	4a06      	ldr	r2, [pc, #24]	; (80014d0 <LL_DMA_SetPeriphAddress+0x2c>)
 80014b6:	5cd3      	ldrb	r3, [r2, r3]
 80014b8:	461a      	mov	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	4413      	add	r3, r2
 80014be:	461a      	mov	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6093      	str	r3, [r2, #8]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	08002e7c 	.word	0x08002e7c

080014d4 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	3b01      	subs	r3, #1
 80014e2:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <LL_DMA_EnableIT_TC+0x3c>)
 80014e4:	5cd3      	ldrb	r3, [r2, r3]
 80014e6:	461a      	mov	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4413      	add	r3, r2
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	3a01      	subs	r2, #1
 80014f2:	4907      	ldr	r1, [pc, #28]	; (8001510 <LL_DMA_EnableIT_TC+0x3c>)
 80014f4:	5c8a      	ldrb	r2, [r1, r2]
 80014f6:	4611      	mov	r1, r2
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	440a      	add	r2, r1
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	6013      	str	r3, [r2, #0]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	08002e7c 	.word	0x08002e7c

08001514 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	3b01      	subs	r3, #1
 8001522:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <LL_DMA_EnableIT_HT+0x3c>)
 8001524:	5cd3      	ldrb	r3, [r2, r3]
 8001526:	461a      	mov	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4413      	add	r3, r2
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	3a01      	subs	r2, #1
 8001532:	4907      	ldr	r1, [pc, #28]	; (8001550 <LL_DMA_EnableIT_HT+0x3c>)
 8001534:	5c8a      	ldrb	r2, [r1, r2]
 8001536:	4611      	mov	r1, r2
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	440a      	add	r2, r1
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	6013      	str	r3, [r2, #0]
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	08002e7c 	.word	0x08002e7c

08001554 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	3b01      	subs	r3, #1
 8001562:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <LL_DMA_EnableIT_TE+0x3c>)
 8001564:	5cd3      	ldrb	r3, [r2, r3]
 8001566:	461a      	mov	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4413      	add	r3, r2
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	3a01      	subs	r2, #1
 8001572:	4907      	ldr	r1, [pc, #28]	; (8001590 <LL_DMA_EnableIT_TE+0x3c>)
 8001574:	5c8a      	ldrb	r2, [r1, r2]
 8001576:	4611      	mov	r1, r2
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	440a      	add	r2, r1
 800157c:	f043 0308 	orr.w	r3, r3, #8
 8001580:	6013      	str	r3, [r2, #0]
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	08002e7c 	.word	0x08002e7c

08001594 <LL_USART_Enable>:
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f043 0201 	orr.w	r2, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	601a      	str	r2, [r3, #0]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <LL_USART_ConfigAsyncMode>:
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	609a      	str	r2, [r3, #8]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	; 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	e853 3f00 	ldrex	r3, [r3]
 80015f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	f043 0310 	orr.w	r3, r3, #16
 80015fa:	61fb      	str	r3, [r7, #28]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	61ba      	str	r2, [r7, #24]
 8001602:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001604:	6979      	ldr	r1, [r7, #20]
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	e841 2300 	strex	r3, r2, [r1]
 800160c:	613b      	str	r3, [r7, #16]
   return(result);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1e9      	bne.n	80015e8 <LL_USART_EnableIT_IDLE+0x8>
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	3724      	adds	r7, #36	; 0x24
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8001622:	b480      	push	{r7}
 8001624:	b089      	sub	sp, #36	; 0x24
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3308      	adds	r3, #8
 800162e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	e853 3f00 	ldrex	r3, [r3]
 8001636:	60bb      	str	r3, [r7, #8]
   return(result);
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3308      	adds	r3, #8
 8001644:	69fa      	ldr	r2, [r7, #28]
 8001646:	61ba      	str	r2, [r7, #24]
 8001648:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800164a:	6979      	ldr	r1, [r7, #20]
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	e841 2300 	strex	r3, r2, [r1]
 8001652:	613b      	str	r3, [r7, #16]
   return(result);
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1e7      	bne.n	800162a <LL_USART_DisableIT_CTS+0x8>
}
 800165a:	bf00      	nop
 800165c:	bf00      	nop
 800165e:	3724      	adds	r7, #36	; 0x24
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8001668:	b480      	push	{r7}
 800166a:	b089      	sub	sp, #36	; 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3308      	adds	r3, #8
 8001674:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	e853 3f00 	ldrex	r3, [r3]
 800167c:	60bb      	str	r3, [r7, #8]
   return(result);
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001684:	61fb      	str	r3, [r7, #28]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3308      	adds	r3, #8
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	61ba      	str	r2, [r7, #24]
 800168e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001690:	6979      	ldr	r1, [r7, #20]
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	e841 2300 	strex	r3, r2, [r1]
 8001698:	613b      	str	r3, [r7, #16]
   return(result);
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1e7      	bne.n	8001670 <LL_USART_EnableDMAReq_RX+0x8>
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3724      	adds	r7, #36	; 0x24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b089      	sub	sp, #36	; 0x24
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3308      	adds	r3, #8
 80016ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	e853 3f00 	ldrex	r3, [r3]
 80016c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ca:	61fb      	str	r3, [r7, #28]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3308      	adds	r3, #8
 80016d0:	69fa      	ldr	r2, [r7, #28]
 80016d2:	61ba      	str	r2, [r7, #24]
 80016d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80016d6:	6979      	ldr	r1, [r7, #20]
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	e841 2300 	strex	r3, r2, [r1]
 80016de:	613b      	str	r3, [r7, #16]
   return(result);
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1e7      	bne.n	80016b6 <LL_USART_EnableDMAReq_TX+0x8>
}
 80016e6:	bf00      	nop
 80016e8:	bf00      	nop
 80016ea:	3724      	adds	r7, #36	; 0x24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d103      	bne.n	800170c <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3328      	adds	r3, #40	; 0x28
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	e002      	b.n	8001712 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3324      	adds	r3, #36	; 0x24
 8001710:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8001712:	68fb      	ldr	r3, [r7, #12]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <USART2_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(uint8_t data) = 0;

/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d002      	beq.n	8001734 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a03      	ldr	r2, [pc, #12]	; (8001740 <USART2_RegisterCallback+0x20>)
 8001732:	6013      	str	r3, [r2, #0]
	}
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	200001ac 	.word	0x200001ac

08001744 <MX_USART2_UART_Init>:
	// type global variables here


/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8001744:	b5b0      	push	{r4, r5, r7, lr}
 8001746:	b090      	sub	sp, #64	; 0x40
 8001748:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800174a:	f107 031c 	add.w	r3, r7, #28
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
 8001758:	611a      	str	r2, [r3, #16]
 800175a:	615a      	str	r2, [r3, #20]
 800175c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
 800176c:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800176e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001772:	f7ff fc9b 	bl	80010ac <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001776:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800177a:	f7ff fc7f 	bl	800107c <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 800177e:	f248 0304 	movw	r3, #32772	; 0x8004
 8001782:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001784:	2302      	movs	r3, #2
 8001786:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001788:	2303      	movs	r3, #3
 800178a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001794:	2307      	movs	r3, #7
 8001796:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	4619      	mov	r1, r3
 800179c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a0:	f000 fa62 	bl	8001c68 <LL_GPIO_Init>
   * Rx memory buffer will be handled in normal mode, not circular!
   * You can use configuration from example program and modify it.
   * For more information about DMA registers, refer to reference manual.
   */

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2106      	movs	r1, #6
 80017a8:	4854      	ldr	r0, [pc, #336]	; (80018fc <MX_USART2_UART_Init+0x1b8>)
 80017aa:	f7ff fcd7 	bl	800115c <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 80017ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017b2:	2106      	movs	r1, #6
 80017b4:	4851      	ldr	r0, [pc, #324]	; (80018fc <MX_USART2_UART_Init+0x1b8>)
 80017b6:	f7ff fdc3 	bl	8001340 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2106      	movs	r1, #6
 80017be:	484f      	ldr	r0, [pc, #316]	; (80018fc <MX_USART2_UART_Init+0x1b8>)
 80017c0:	f7ff fd0a 	bl	80011d8 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80017c4:	2200      	movs	r2, #0
 80017c6:	2106      	movs	r1, #6
 80017c8:	484c      	ldr	r0, [pc, #304]	; (80018fc <MX_USART2_UART_Init+0x1b8>)
 80017ca:	f7ff fd29 	bl	8001220 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 80017ce:	2280      	movs	r2, #128	; 0x80
 80017d0:	2106      	movs	r1, #6
 80017d2:	484a      	ldr	r0, [pc, #296]	; (80018fc <MX_USART2_UART_Init+0x1b8>)
 80017d4:	f7ff fd48 	bl	8001268 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 80017d8:	2200      	movs	r2, #0
 80017da:	2106      	movs	r1, #6
 80017dc:	4847      	ldr	r0, [pc, #284]	; (80018fc <MX_USART2_UART_Init+0x1b8>)
 80017de:	f7ff fd67 	bl	80012b0 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2106      	movs	r1, #6
 80017e6:	4845      	ldr	r0, [pc, #276]	; (80018fc <MX_USART2_UART_Init+0x1b8>)
 80017e8:	f7ff fd86 	bl	80012f8 <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 80017ec:	2101      	movs	r1, #1
 80017ee:	4844      	ldr	r0, [pc, #272]	; (8001900 <MX_USART2_UART_Init+0x1bc>)
 80017f0:	f7ff ff80 	bl	80016f4 <LL_USART_DMA_GetRegAddr>
 80017f4:	4604      	mov	r4, r0
 80017f6:	4d43      	ldr	r5, [pc, #268]	; (8001904 <MX_USART2_UART_Init+0x1c0>)
 80017f8:	2106      	movs	r1, #6
 80017fa:	4840      	ldr	r0, [pc, #256]	; (80018fc <MX_USART2_UART_Init+0x1b8>)
 80017fc:	f7ff fcd4 	bl	80011a8 <LL_DMA_GetDataTransferDirection>
 8001800:	4603      	mov	r3, r0
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	462b      	mov	r3, r5
 8001806:	4622      	mov	r2, r4
 8001808:	2106      	movs	r1, #6
 800180a:	483c      	ldr	r0, [pc, #240]	; (80018fc <MX_USART2_UART_Init+0x1b8>)
 800180c:	f7ff fdf6 	bl	80013fc <LL_DMA_ConfigAddresses>
						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
							(uint32_t)bufferUSART2dma,
							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8001810:	2280      	movs	r2, #128	; 0x80
 8001812:	2106      	movs	r1, #6
 8001814:	4839      	ldr	r0, [pc, #228]	; (80018fc <MX_USART2_UART_Init+0x1b8>)
 8001816:	f7ff fdb7 	bl	8001388 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 800181a:	2106      	movs	r1, #6
 800181c:	4837      	ldr	r0, [pc, #220]	; (80018fc <MX_USART2_UART_Init+0x1b8>)
 800181e:	f7ff fc5d 	bl	80010dc <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 8001822:	4837      	ldr	r0, [pc, #220]	; (8001900 <MX_USART2_UART_Init+0x1bc>)
 8001824:	f7ff ff20 	bl	8001668 <LL_USART_EnableDMAReq_RX>

  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 8001828:	2106      	movs	r1, #6
 800182a:	4834      	ldr	r0, [pc, #208]	; (80018fc <MX_USART2_UART_Init+0x1b8>)
 800182c:	f7ff fe52 	bl	80014d4 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 8001830:	2106      	movs	r1, #6
 8001832:	4832      	ldr	r0, [pc, #200]	; (80018fc <MX_USART2_UART_Init+0x1b8>)
 8001834:	f7ff fe6e 	bl	8001514 <LL_DMA_EnableIT_HT>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001838:	2210      	movs	r2, #16
 800183a:	2107      	movs	r1, #7
 800183c:	482f      	ldr	r0, [pc, #188]	; (80018fc <MX_USART2_UART_Init+0x1b8>)
 800183e:	f7ff fc8d 	bl	800115c <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8001842:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001846:	2107      	movs	r1, #7
 8001848:	482c      	ldr	r0, [pc, #176]	; (80018fc <MX_USART2_UART_Init+0x1b8>)
 800184a:	f7ff fd79 	bl	8001340 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 800184e:	2200      	movs	r2, #0
 8001850:	2107      	movs	r1, #7
 8001852:	482a      	ldr	r0, [pc, #168]	; (80018fc <MX_USART2_UART_Init+0x1b8>)
 8001854:	f7ff fcc0 	bl	80011d8 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8001858:	2200      	movs	r2, #0
 800185a:	2107      	movs	r1, #7
 800185c:	4827      	ldr	r0, [pc, #156]	; (80018fc <MX_USART2_UART_Init+0x1b8>)
 800185e:	f7ff fcdf 	bl	8001220 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8001862:	2280      	movs	r2, #128	; 0x80
 8001864:	2107      	movs	r1, #7
 8001866:	4825      	ldr	r0, [pc, #148]	; (80018fc <MX_USART2_UART_Init+0x1b8>)
 8001868:	f7ff fcfe 	bl	8001268 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 800186c:	2200      	movs	r2, #0
 800186e:	2107      	movs	r1, #7
 8001870:	4822      	ldr	r0, [pc, #136]	; (80018fc <MX_USART2_UART_Init+0x1b8>)
 8001872:	f7ff fd1d 	bl	80012b0 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8001876:	2200      	movs	r2, #0
 8001878:	2107      	movs	r1, #7
 800187a:	4820      	ldr	r0, [pc, #128]	; (80018fc <MX_USART2_UART_Init+0x1b8>)
 800187c:	f7ff fd3c 	bl	80012f8 <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8001880:	2100      	movs	r1, #0
 8001882:	481f      	ldr	r0, [pc, #124]	; (8001900 <MX_USART2_UART_Init+0x1bc>)
 8001884:	f7ff ff36 	bl	80016f4 <LL_USART_DMA_GetRegAddr>
 8001888:	4603      	mov	r3, r0
 800188a:	461a      	mov	r2, r3
 800188c:	2107      	movs	r1, #7
 800188e:	481b      	ldr	r0, [pc, #108]	; (80018fc <MX_USART2_UART_Init+0x1b8>)
 8001890:	f7ff fe08 	bl	80014a4 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 8001894:	481a      	ldr	r0, [pc, #104]	; (8001900 <MX_USART2_UART_Init+0x1bc>)
 8001896:	f7ff ff0a 	bl	80016ae <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 800189a:	2107      	movs	r1, #7
 800189c:	4817      	ldr	r0, [pc, #92]	; (80018fc <MX_USART2_UART_Init+0x1b8>)
 800189e:	f7ff fe59 	bl	8001554 <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 80018a2:	2100      	movs	r1, #0
 80018a4:	2026      	movs	r0, #38	; 0x26
 80018a6:	f7ff fbbf 	bl	8001028 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80018aa:	2026      	movs	r0, #38	; 0x26
 80018ac:	f7ff fb9e 	bl	8000fec <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 80018b0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80018b4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80018be:	2300      	movs	r3, #0
 80018c0:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80018c2:	230c      	movs	r3, #12
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80018ca:	2300      	movs	r3, #0
 80018cc:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80018ce:	f107 031c 	add.w	r3, r7, #28
 80018d2:	4619      	mov	r1, r3
 80018d4:	480a      	ldr	r0, [pc, #40]	; (8001900 <MX_USART2_UART_Init+0x1bc>)
 80018d6:	f000 fd2d 	bl	8002334 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80018da:	4809      	ldr	r0, [pc, #36]	; (8001900 <MX_USART2_UART_Init+0x1bc>)
 80018dc:	f7ff fe6a 	bl	80015b4 <LL_USART_ConfigAsyncMode>
  LL_USART_DisableIT_CTS(USART2);
 80018e0:	4807      	ldr	r0, [pc, #28]	; (8001900 <MX_USART2_UART_Init+0x1bc>)
 80018e2:	f7ff fe9e 	bl	8001622 <LL_USART_DisableIT_CTS>

  /* Enable USART2 peripheral and interrupts*/
  LL_USART_EnableIT_IDLE(USART2);
 80018e6:	4806      	ldr	r0, [pc, #24]	; (8001900 <MX_USART2_UART_Init+0x1bc>)
 80018e8:	f7ff fe7a 	bl	80015e0 <LL_USART_EnableIT_IDLE>
  LL_USART_Enable(USART2);
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <MX_USART2_UART_Init+0x1bc>)
 80018ee:	f7ff fe51 	bl	8001594 <LL_USART_Enable>
  	  //type your code here:
}
 80018f2:	bf00      	nop
 80018f4:	3738      	adds	r7, #56	; 0x38
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bdb0      	pop	{r4, r5, r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40020000 	.word	0x40020000
 8001900:	40004400 	.word	0x40004400
 8001904:	2000012c 	.word	0x2000012c

08001908 <USART2_PutBuffer>:

// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	461a      	mov	r2, r3
 8001918:	2107      	movs	r1, #7
 800191a:	480a      	ldr	r0, [pc, #40]	; (8001944 <USART2_PutBuffer+0x3c>)
 800191c:	f7ff fdaa 	bl	8001474 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8001920:	78fb      	ldrb	r3, [r7, #3]
 8001922:	461a      	mov	r2, r3
 8001924:	2107      	movs	r1, #7
 8001926:	4807      	ldr	r0, [pc, #28]	; (8001944 <USART2_PutBuffer+0x3c>)
 8001928:	f7ff fd2e 	bl	8001388 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 800192c:	2107      	movs	r1, #7
 800192e:	4805      	ldr	r0, [pc, #20]	; (8001944 <USART2_PutBuffer+0x3c>)
 8001930:	f7ff fdd0 	bl	80014d4 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001934:	2107      	movs	r1, #7
 8001936:	4803      	ldr	r0, [pc, #12]	; (8001944 <USART2_PutBuffer+0x3c>)
 8001938:	f7ff fbd0 	bl	80010dc <LL_DMA_EnableChannel>
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40020000 	.word	0x40020000

08001948 <USART2_CheckDmaReception>:
 */

uint16_t buf_read_pos = 0;

void USART2_CheckDmaReception(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 800194e:	2106      	movs	r1, #6
 8001950:	482a      	ldr	r0, [pc, #168]	; (80019fc <USART2_CheckDmaReception+0xb4>)
 8001952:	f7ff fd3d 	bl	80013d0 <LL_DMA_GetDataLength>
 8001956:	4603      	mov	r3, r0
 8001958:	b29b      	uxth	r3, r3
 800195a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800195e:	80fb      	strh	r3, [r7, #6]

	if (pos >= DMA_USART2_BUFFER_SIZE)
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	2b7f      	cmp	r3, #127	; 0x7f
 8001964:	d941      	bls.n	80019ea <USART2_CheckDmaReception+0xa2>
	{
		// set the DMA address pointer back to the beginning of the buffer
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 8001966:	2106      	movs	r1, #6
 8001968:	4824      	ldr	r0, [pc, #144]	; (80019fc <USART2_CheckDmaReception+0xb4>)
 800196a:	f7ff fbd7 	bl	800111c <LL_DMA_DisableChannel>
		LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_6, (uint32_t)bufferUSART2dma);
 800196e:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <USART2_CheckDmaReception+0xb8>)
 8001970:	461a      	mov	r2, r3
 8001972:	2106      	movs	r1, #6
 8001974:	4821      	ldr	r0, [pc, #132]	; (80019fc <USART2_CheckDmaReception+0xb4>)
 8001976:	f7ff fd7d 	bl	8001474 <LL_DMA_SetMemoryAddress>
		LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 800197a:	2280      	movs	r2, #128	; 0x80
 800197c:	2106      	movs	r1, #6
 800197e:	481f      	ldr	r0, [pc, #124]	; (80019fc <USART2_CheckDmaReception+0xb4>)
 8001980:	f7ff fd02 	bl	8001388 <LL_DMA_SetDataLength>
		LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8001984:	2106      	movs	r1, #6
 8001986:	481d      	ldr	r0, [pc, #116]	; (80019fc <USART2_CheckDmaReception+0xb4>)
 8001988:	f7ff fba8 	bl	80010dc <LL_DMA_EnableChannel>

		// process all data until the end of the buffer
		while(buf_read_pos < DMA_USART2_BUFFER_SIZE)
 800198c:	e012      	b.n	80019b4 <USART2_CheckDmaReception+0x6c>
		{
			if(USART2_ProcessData != 0)
 800198e:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <USART2_CheckDmaReception+0xbc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d008      	beq.n	80019a8 <USART2_CheckDmaReception+0x60>
			{
				USART2_ProcessData(bufferUSART2dma[buf_read_pos]);
 8001996:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <USART2_CheckDmaReception+0xbc>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a1b      	ldr	r2, [pc, #108]	; (8001a08 <USART2_CheckDmaReception+0xc0>)
 800199c:	8812      	ldrh	r2, [r2, #0]
 800199e:	4611      	mov	r1, r2
 80019a0:	4a17      	ldr	r2, [pc, #92]	; (8001a00 <USART2_CheckDmaReception+0xb8>)
 80019a2:	5c52      	ldrb	r2, [r2, r1]
 80019a4:	4610      	mov	r0, r2
 80019a6:	4798      	blx	r3
			}
			buf_read_pos++;
 80019a8:	4b17      	ldr	r3, [pc, #92]	; (8001a08 <USART2_CheckDmaReception+0xc0>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	3301      	adds	r3, #1
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <USART2_CheckDmaReception+0xc0>)
 80019b2:	801a      	strh	r2, [r3, #0]
		while(buf_read_pos < DMA_USART2_BUFFER_SIZE)
 80019b4:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <USART2_CheckDmaReception+0xc0>)
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	2b7f      	cmp	r3, #127	; 0x7f
 80019ba:	d9e8      	bls.n	800198e <USART2_CheckDmaReception+0x46>
		}

		buf_read_pos = 0;
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <USART2_CheckDmaReception+0xc0>)
 80019be:	2200      	movs	r2, #0
 80019c0:	801a      	strh	r2, [r3, #0]
				USART2_ProcessData(bufferUSART2dma[buf_read_pos]);
			}
			buf_read_pos++;
		}
	}
}
 80019c2:	e017      	b.n	80019f4 <USART2_CheckDmaReception+0xac>
			if(USART2_ProcessData != 0)
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <USART2_CheckDmaReception+0xbc>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d008      	beq.n	80019de <USART2_CheckDmaReception+0x96>
				USART2_ProcessData(bufferUSART2dma[buf_read_pos]);
 80019cc:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <USART2_CheckDmaReception+0xbc>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0d      	ldr	r2, [pc, #52]	; (8001a08 <USART2_CheckDmaReception+0xc0>)
 80019d2:	8812      	ldrh	r2, [r2, #0]
 80019d4:	4611      	mov	r1, r2
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <USART2_CheckDmaReception+0xb8>)
 80019d8:	5c52      	ldrb	r2, [r2, r1]
 80019da:	4610      	mov	r0, r2
 80019dc:	4798      	blx	r3
			buf_read_pos++;
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <USART2_CheckDmaReception+0xc0>)
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	3301      	adds	r3, #1
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <USART2_CheckDmaReception+0xc0>)
 80019e8:	801a      	strh	r2, [r3, #0]
		while(buf_read_pos < pos)
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <USART2_CheckDmaReception+0xc0>)
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	88fa      	ldrh	r2, [r7, #6]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d8e7      	bhi.n	80019c4 <USART2_CheckDmaReception+0x7c>
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40020000 	.word	0x40020000
 8001a00:	2000012c 	.word	0x2000012c
 8001a04:	200001ac 	.word	0x200001ac
 8001a08:	200001b0 	.word	0x200001b0

08001a0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a44 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a10:	f7ff fada 	bl	8000fc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a14:	480c      	ldr	r0, [pc, #48]	; (8001a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a16:	490d      	ldr	r1, [pc, #52]	; (8001a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a18:	4a0d      	ldr	r2, [pc, #52]	; (8001a50 <LoopForever+0xe>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a1c:	e002      	b.n	8001a24 <LoopCopyDataInit>

08001a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a22:	3304      	adds	r3, #4

08001a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a28:	d3f9      	bcc.n	8001a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a2c:	4c0a      	ldr	r4, [pc, #40]	; (8001a58 <LoopForever+0x16>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a30:	e001      	b.n	8001a36 <LoopFillZerobss>

08001a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a34:	3204      	adds	r2, #4

08001a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a38:	d3fb      	bcc.n	8001a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a3a:	f000 fd73 	bl	8002524 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a3e:	f7ff f849 	bl	8000ad4 <main>

08001a42 <LoopForever>:

LoopForever:
    b LoopForever
 8001a42:	e7fe      	b.n	8001a42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a44:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a4c:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8001a50:	08002ec0 	.word	0x08002ec0
  ldr r2, =_sbss
 8001a54:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8001a58:	200002fc 	.word	0x200002fc

08001a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <ADC1_2_IRQHandler>

08001a5e <LL_GPIO_SetPinMode>:
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b089      	sub	sp, #36	; 0x24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	60f8      	str	r0, [r7, #12]
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	fa93 f3a3 	rbit	r3, r3
 8001a78:	613b      	str	r3, [r7, #16]
  return result;
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	fab3 f383 	clz	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2103      	movs	r1, #3
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	401a      	ands	r2, r3
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	fa93 f3a3 	rbit	r3, r3
 8001a98:	61bb      	str	r3, [r7, #24]
  return result;
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	fab3 f383 	clz	r3, r3
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	601a      	str	r2, [r3, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	3724      	adds	r7, #36	; 0x24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <LL_GPIO_SetPinOutputType>:
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	401a      	ands	r2, r3
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	fb01 f303 	mul.w	r3, r1, r3
 8001ada:	431a      	orrs	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	605a      	str	r2, [r3, #4]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <LL_GPIO_SetPinSpeed>:
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	; 0x24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa93 f3a3 	rbit	r3, r3
 8001b06:	613b      	str	r3, [r7, #16]
  return result;
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	2103      	movs	r1, #3
 8001b14:	fa01 f303 	lsl.w	r3, r1, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	fa93 f3a3 	rbit	r3, r3
 8001b26:	61bb      	str	r3, [r7, #24]
  return result;
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	fab3 f383 	clz	r3, r3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	fa01 f303 	lsl.w	r3, r1, r3
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	609a      	str	r2, [r3, #8]
}
 8001b3e:	bf00      	nop
 8001b40:	3724      	adds	r7, #36	; 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <LL_GPIO_SetPinPull>:
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b089      	sub	sp, #36	; 0x24
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	fa93 f3a3 	rbit	r3, r3
 8001b64:	613b      	str	r3, [r7, #16]
  return result;
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	fab3 f383 	clz	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	2103      	movs	r1, #3
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	401a      	ands	r2, r3
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	fa93 f3a3 	rbit	r3, r3
 8001b84:	61bb      	str	r3, [r7, #24]
  return result;
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	fab3 f383 	clz	r3, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	431a      	orrs	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	60da      	str	r2, [r3, #12]
}
 8001b9c:	bf00      	nop
 8001b9e:	3724      	adds	r7, #36	; 0x24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <LL_GPIO_SetAFPin_0_7>:
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6a1a      	ldr	r2, [r3, #32]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	fa93 f3a3 	rbit	r3, r3
 8001bc2:	613b      	str	r3, [r7, #16]
  return result;
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	fab3 f383 	clz	r3, r3
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	210f      	movs	r1, #15
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	fa93 f3a3 	rbit	r3, r3
 8001be2:	61bb      	str	r3, [r7, #24]
  return result;
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	fab3 f383 	clz	r3, r3
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	621a      	str	r2, [r3, #32]
}
 8001bfa:	bf00      	nop
 8001bfc:	3724      	adds	r7, #36	; 0x24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <LL_GPIO_SetAFPin_8_15>:
{
 8001c06:	b480      	push	{r7}
 8001c08:	b089      	sub	sp, #36	; 0x24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	0a1b      	lsrs	r3, r3, #8
 8001c1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	613b      	str	r3, [r7, #16]
  return result;
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	210f      	movs	r1, #15
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	401a      	ands	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	0a1b      	lsrs	r3, r3, #8
 8001c3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	fa93 f3a3 	rbit	r3, r3
 8001c44:	61bb      	str	r3, [r7, #24]
  return result;
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	fab3 f383 	clz	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	431a      	orrs	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c5c:	bf00      	nop
 8001c5e:	3724      	adds	r7, #36	; 0x24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	fa93 f3a3 	rbit	r3, r3
 8001c7e:	613b      	str	r3, [r7, #16]
  return result;
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	fab3 f383 	clz	r3, r3
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001c8a:	e051      	b.n	8001d30 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	2101      	movs	r1, #1
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa01 f303 	lsl.w	r3, r1, r3
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d043      	beq.n	8001d2a <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d003      	beq.n	8001cb2 <LL_GPIO_Init+0x4a>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d10e      	bne.n	8001cd0 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	69b9      	ldr	r1, [r7, #24]
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ff16 	bl	8001aec <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	6819      	ldr	r1, [r3, #0]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff fef6 	bl	8001abc <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	69b9      	ldr	r1, [r7, #24]
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ff36 	bl	8001b4a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d11a      	bne.n	8001d1c <LL_GPIO_Init+0xb4>
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	60bb      	str	r3, [r7, #8]
  return result;
 8001cf2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001cf4:	fab3 f383 	clz	r3, r3
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b07      	cmp	r3, #7
 8001cfc:	d807      	bhi.n	8001d0e <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	461a      	mov	r2, r3
 8001d04:	69b9      	ldr	r1, [r7, #24]
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ff4e 	bl	8001ba8 <LL_GPIO_SetAFPin_0_7>
 8001d0c:	e006      	b.n	8001d1c <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	461a      	mov	r2, r3
 8001d14:	69b9      	ldr	r1, [r7, #24]
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff ff75 	bl	8001c06 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	461a      	mov	r2, r3
 8001d22:	69b9      	ldr	r1, [r7, #24]
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff fe9a 	bl	8001a5e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1a6      	bne.n	8001c8c <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3720      	adds	r7, #32
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <LL_I2C_Enable>:
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f043 0201 	orr.w	r2, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	601a      	str	r2, [r3, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LL_I2C_Disable>:
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f023 0201 	bic.w	r2, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	601a      	str	r2, [r3, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_I2C_ConfigFilters>:
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	0219      	lsls	r1, r3, #8
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	430b      	orrs	r3, r1
 8001da4:	431a      	orrs	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	601a      	str	r2, [r3, #0]
}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <LL_I2C_SetOwnAddress1>:
{
 8001db6:	b480      	push	{r7}
 8001db8:	b085      	sub	sp, #20
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	60f8      	str	r0, [r7, #12]
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001dca:	f023 0307 	bic.w	r3, r3, #7
 8001dce:	68b9      	ldr	r1, [r7, #8]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	609a      	str	r2, [r3, #8]
}
 8001dda:	bf00      	nop
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <LL_I2C_EnableOwnAddress1>:
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	609a      	str	r2, [r3, #8]
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <LL_I2C_DisableOwnAddress1>:
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	609a      	str	r2, [r3, #8]
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <LL_I2C_SetTiming>:
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	611a      	str	r2, [r3, #16]
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <LL_I2C_SetMode>:
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	601a      	str	r2, [r3, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_I2C_AcknowledgeNextData>:
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	605a      	str	r2, [r3, #4]
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ff65 	bl	8001d68 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	6899      	ldr	r1, [r3, #8]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ff6d 	bl	8001d88 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ffb6 	bl	8001e26 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ff44 	bl	8001d48 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff ffa0 	bl	8001e06 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	6919      	ldr	r1, [r3, #16]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ff70 	bl	8001db6 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d002      	beq.n	8001ee4 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff ff81 	bl	8001de6 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4619      	mov	r1, r3
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff ffa9 	bl	8001e42 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ffb6 	bl	8001e68 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <LL_RCC_HSI_IsReady>:
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <LL_RCC_HSI_IsReady+0x20>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	bf0c      	ite	eq
 8001f18:	2301      	moveq	r3, #1
 8001f1a:	2300      	movne	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	40021000 	.word	0x40021000

08001f2c <LL_RCC_LSE_IsReady>:
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <LL_RCC_LSE_IsReady+0x20>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	bf0c      	ite	eq
 8001f3c:	2301      	moveq	r3, #1
 8001f3e:	2300      	movne	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	40021000 	.word	0x40021000

08001f50 <LL_RCC_GetSysClkSource>:
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001f54:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <LL_RCC_GetSysClkSource+0x18>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 030c 	and.w	r3, r3, #12
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40021000 	.word	0x40021000

08001f6c <LL_RCC_GetAHBPrescaler>:
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <LL_RCC_GetAHBPrescaler+0x18>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40021000 	.word	0x40021000

08001f88 <LL_RCC_GetAPB1Prescaler>:
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001f8c:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000

08001fa4 <LL_RCC_GetAPB2Prescaler>:
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001fa8:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <LL_RCC_GetAPB2Prescaler+0x18>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000

08001fc0 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8001fc8:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <LL_RCC_GetUSARTClockSource+0x28>)
 8001fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fcc:	2103      	movs	r1, #3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd4:	401a      	ands	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	061b      	lsls	r3, r3, #24
 8001fda:	4313      	orrs	r3, r2
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	40021000 	.word	0x40021000

08001fec <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <LL_RCC_PLL_GetMainSource+0x18>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40021000 	.word	0x40021000

08002008 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 800200c:	4b04      	ldr	r3, [pc, #16]	; (8002020 <LL_RCC_PLL_GetMultiplicator+0x18>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40021000 	.word	0x40021000

08002024 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <LL_RCC_PLL_GetPrediv+0x18>)
 800202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202c:	f003 030f 	and.w	r3, r3, #15
}
 8002030:	4618      	mov	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000

08002040 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002048:	f000 f862 	bl	8002110 <RCC_GetSystemClockFreq>
 800204c:	4602      	mov	r2, r0
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f000 f880 	bl	800215c <RCC_GetHCLKClockFreq>
 800205c:	4602      	mov	r2, r0
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	4618      	mov	r0, r3
 8002068:	f000 f88e 	bl	8002188 <RCC_GetPCLK1ClockFreq>
 800206c:	4602      	mov	r2, r0
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	4618      	mov	r0, r3
 8002078:	f000 f89a 	bl	80021b0 <RCC_GetPCLK2ClockFreq>
 800207c:	4602      	mov	r2, r0
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	60da      	str	r2, [r3, #12]
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002094:	2300      	movs	r3, #0
 8002096:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d130      	bne.n	8002100 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ff8e 	bl	8001fc0 <LL_RCC_GetUSARTClockSource>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	d00a      	beq.n	80020c0 <LL_RCC_GetUSARTClockFreq+0x34>
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d819      	bhi.n	80020e2 <LL_RCC_GetUSARTClockFreq+0x56>
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d002      	beq.n	80020b8 <LL_RCC_GetUSARTClockFreq+0x2c>
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d00c      	beq.n	80020d0 <LL_RCC_GetUSARTClockFreq+0x44>
 80020b6:	e014      	b.n	80020e2 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80020b8:	f000 f82a 	bl	8002110 <RCC_GetSystemClockFreq>
 80020bc:	60f8      	str	r0, [r7, #12]
        break;
 80020be:	e01f      	b.n	8002100 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80020c0:	f7ff ff22 	bl	8001f08 <LL_RCC_HSI_IsReady>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d017      	beq.n	80020fa <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <LL_RCC_GetUSARTClockFreq+0x80>)
 80020cc:	60fb      	str	r3, [r7, #12]
        }
        break;
 80020ce:	e014      	b.n	80020fa <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80020d0:	f7ff ff2c 	bl	8001f2c <LL_RCC_LSE_IsReady>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d011      	beq.n	80020fe <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 80020da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020de:	60fb      	str	r3, [r7, #12]
        }
        break;
 80020e0:	e00d      	b.n	80020fe <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80020e2:	f000 f815 	bl	8002110 <RCC_GetSystemClockFreq>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 f837 	bl	800215c <RCC_GetHCLKClockFreq>
 80020ee:	4603      	mov	r3, r0
 80020f0:	4618      	mov	r0, r3
 80020f2:	f000 f849 	bl	8002188 <RCC_GetPCLK1ClockFreq>
 80020f6:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 80020f8:	e002      	b.n	8002100 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 80020fa:	bf00      	nop
 80020fc:	e000      	b.n	8002100 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 80020fe:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8002100:	68fb      	ldr	r3, [r7, #12]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	007a1200 	.word	0x007a1200

08002110 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800211a:	f7ff ff19 	bl	8001f50 <LL_RCC_GetSysClkSource>
 800211e:	4603      	mov	r3, r0
 8002120:	2b08      	cmp	r3, #8
 8002122:	d00c      	beq.n	800213e <RCC_GetSystemClockFreq+0x2e>
 8002124:	2b08      	cmp	r3, #8
 8002126:	d80e      	bhi.n	8002146 <RCC_GetSystemClockFreq+0x36>
 8002128:	2b00      	cmp	r3, #0
 800212a:	d002      	beq.n	8002132 <RCC_GetSystemClockFreq+0x22>
 800212c:	2b04      	cmp	r3, #4
 800212e:	d003      	beq.n	8002138 <RCC_GetSystemClockFreq+0x28>
 8002130:	e009      	b.n	8002146 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <RCC_GetSystemClockFreq+0x48>)
 8002134:	607b      	str	r3, [r7, #4]
      break;
 8002136:	e009      	b.n	800214c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002138:	4b07      	ldr	r3, [pc, #28]	; (8002158 <RCC_GetSystemClockFreq+0x48>)
 800213a:	607b      	str	r3, [r7, #4]
      break;
 800213c:	e006      	b.n	800214c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800213e:	f000 f84b 	bl	80021d8 <RCC_PLL_GetFreqDomain_SYS>
 8002142:	6078      	str	r0, [r7, #4]
      break;
 8002144:	e002      	b.n	800214c <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8002146:	4b04      	ldr	r3, [pc, #16]	; (8002158 <RCC_GetSystemClockFreq+0x48>)
 8002148:	607b      	str	r3, [r7, #4]
      break;
 800214a:	bf00      	nop
  }

  return frequency;
 800214c:	687b      	ldr	r3, [r7, #4]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	007a1200 	.word	0x007a1200

0800215c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002164:	f7ff ff02 	bl	8001f6c <LL_RCC_GetAHBPrescaler>
 8002168:	4603      	mov	r3, r0
 800216a:	091b      	lsrs	r3, r3, #4
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	4a04      	ldr	r2, [pc, #16]	; (8002184 <RCC_GetHCLKClockFreq+0x28>)
 8002172:	5cd3      	ldrb	r3, [r2, r3]
 8002174:	461a      	mov	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	40d3      	lsrs	r3, r2
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	08002e64 	.word	0x08002e64

08002188 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002190:	f7ff fefa 	bl	8001f88 <LL_RCC_GetAPB1Prescaler>
 8002194:	4603      	mov	r3, r0
 8002196:	0a1b      	lsrs	r3, r3, #8
 8002198:	4a04      	ldr	r2, [pc, #16]	; (80021ac <RCC_GetPCLK1ClockFreq+0x24>)
 800219a:	5cd3      	ldrb	r3, [r2, r3]
 800219c:	461a      	mov	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	40d3      	lsrs	r3, r2
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	08002e74 	.word	0x08002e74

080021b0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80021b8:	f7ff fef4 	bl	8001fa4 <LL_RCC_GetAPB2Prescaler>
 80021bc:	4603      	mov	r3, r0
 80021be:	0adb      	lsrs	r3, r3, #11
 80021c0:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <RCC_GetPCLK2ClockFreq+0x24>)
 80021c2:	5cd3      	ldrb	r3, [r2, r3]
 80021c4:	461a      	mov	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	40d3      	lsrs	r3, r2
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	08002e74 	.word	0x08002e74

080021d8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80021d8:	b590      	push	{r4, r7, lr}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80021e6:	f7ff ff01 	bl	8001fec <LL_RCC_PLL_GetMainSource>
 80021ea:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d004      	beq.n	80021fc <RCC_PLL_GetFreqDomain_SYS+0x24>
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f8:	d003      	beq.n	8002202 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80021fa:	e005      	b.n	8002208 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80021fc:	4b13      	ldr	r3, [pc, #76]	; (800224c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80021fe:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002200:	e005      	b.n	800220e <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002202:	4b13      	ldr	r3, [pc, #76]	; (8002250 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002204:	60fb      	str	r3, [r7, #12]
      break;
 8002206:	e002      	b.n	800220e <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8002208:	4b10      	ldr	r3, [pc, #64]	; (800224c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800220a:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800220c:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 800220e:	f7ff ff09 	bl	8002024 <LL_RCC_PLL_GetPrediv>
 8002212:	4603      	mov	r3, r0
 8002214:	3301      	adds	r3, #1
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	fbb2 f4f3 	udiv	r4, r2, r3
 800221c:	f7ff fef4 	bl	8002008 <LL_RCC_PLL_GetMultiplicator>
 8002220:	4603      	mov	r3, r0
 8002222:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002226:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800222a:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	fa92 f2a2 	rbit	r2, r2
 8002232:	603a      	str	r2, [r7, #0]
  return result;
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	fab2 f282 	clz	r2, r2
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	40d3      	lsrs	r3, r2
 800223e:	3302      	adds	r3, #2
 8002240:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	bd90      	pop	{r4, r7, pc}
 800224c:	003d0900 	.word	0x003d0900
 8002250:	007a1200 	.word	0x007a1200

08002254 <LL_USART_IsEnabled>:
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <LL_USART_IsEnabled+0x18>
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <LL_USART_IsEnabled+0x1a>
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <LL_USART_SetStopBitsLength>:
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	605a      	str	r2, [r3, #4]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <LL_USART_SetHWFlowCtrl>:
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	609a      	str	r2, [r3, #8]
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <LL_USART_SetBaudRate>:
{
 80022c6:	b480      	push	{r7}
 80022c8:	b087      	sub	sp, #28
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022da:	d11a      	bne.n	8002312 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	005a      	lsls	r2, r3, #1
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	085b      	lsrs	r3, r3, #1
 80022e4:	441a      	add	r2, r3
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	085b      	lsrs	r3, r3, #1
 80022fe:	b29b      	uxth	r3, r3
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	60da      	str	r2, [r3, #12]
}
 8002310:	e00a      	b.n	8002328 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	085a      	lsrs	r2, r3, #1
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	441a      	add	r2, r3
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002320:	b29b      	uxth	r3, r3
 8002322:	461a      	mov	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	60da      	str	r2, [r3, #12]
}
 8002328:	bf00      	nop
 800232a:	371c      	adds	r7, #28
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002342:	2300      	movs	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff ff84 	bl	8002254 <LL_USART_IsEnabled>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d14e      	bne.n	80023f0 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	4b29      	ldr	r3, [pc, #164]	; (80023fc <LL_USART_Init+0xc8>)
 8002358:	4013      	ands	r3, r2
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	6851      	ldr	r1, [r2, #4]
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	68d2      	ldr	r2, [r2, #12]
 8002362:	4311      	orrs	r1, r2
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	6912      	ldr	r2, [r2, #16]
 8002368:	4311      	orrs	r1, r2
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	6992      	ldr	r2, [r2, #24]
 800236e:	430a      	orrs	r2, r1
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	4619      	mov	r1, r3
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff ff7c 	bl	800227a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	4619      	mov	r1, r3
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff ff89 	bl	80022a0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a1b      	ldr	r2, [pc, #108]	; (8002400 <LL_USART_Init+0xcc>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d104      	bne.n	80023a0 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002396:	2000      	movs	r0, #0
 8002398:	f7ff fe78 	bl	800208c <LL_RCC_GetUSARTClockFreq>
 800239c:	61b8      	str	r0, [r7, #24]
 800239e:	e016      	b.n	80023ce <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a18      	ldr	r2, [pc, #96]	; (8002404 <LL_USART_Init+0xd0>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d107      	bne.n	80023b8 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80023a8:	f107 0308 	add.w	r3, r7, #8
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fe47 	bl	8002040 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	61bb      	str	r3, [r7, #24]
 80023b6:	e00a      	b.n	80023ce <LL_USART_Init+0x9a>
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a13      	ldr	r2, [pc, #76]	; (8002408 <LL_USART_Init+0xd4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d106      	bne.n	80023ce <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80023c0:	f107 0308 	add.w	r3, r7, #8
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fe3b 	bl	8002040 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00d      	beq.n	80023f0 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d009      	beq.n	80023f0 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 80023dc:	2300      	movs	r3, #0
 80023de:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80023e8:	69b9      	ldr	r1, [r7, #24]
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff ff6b 	bl	80022c6 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80023f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3720      	adds	r7, #32
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	efff69f3 	.word	0xefff69f3
 8002400:	40013800 	.word	0x40013800
 8002404:	40004400 	.word	0x40004400
 8002408:	40004800 	.word	0x40004800

0800240c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	fbb2 f3f3 	udiv	r3, r2, r3
 800241e:	4a07      	ldr	r2, [pc, #28]	; (800243c <LL_InitTick+0x30>)
 8002420:	3b01      	subs	r3, #1
 8002422:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002424:	4b05      	ldr	r3, [pc, #20]	; (800243c <LL_InitTick+0x30>)
 8002426:	2200      	movs	r2, #0
 8002428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800242a:	4b04      	ldr	r3, [pc, #16]	; (800243c <LL_InitTick+0x30>)
 800242c:	2205      	movs	r2, #5
 800242e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000e010 	.word	0xe000e010

08002440 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002448:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff ffdd 	bl	800240c <LL_InitTick>
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002464:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <LL_mDelay+0x48>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800246a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002472:	d00c      	beq.n	800248e <LL_mDelay+0x32>
  {
    Delay++;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3301      	adds	r3, #1
 8002478:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800247a:	e008      	b.n	800248e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <LL_mDelay+0x48>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <LL_mDelay+0x32>
    {
      Delay--;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	607b      	str	r3, [r7, #4]
  while (Delay)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1f3      	bne.n	800247c <LL_mDelay+0x20>
    }
  }
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	e000e010 	.word	0xe000e010

080024a8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80024b0:	4a04      	ldr	r2, [pc, #16]	; (80024c4 <LL_SetSystemCoreClock+0x1c>)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6013      	str	r3, [r2, #0]
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	20000080 	.word	0x20000080

080024c8 <siprintf>:
 80024c8:	b40e      	push	{r1, r2, r3}
 80024ca:	b500      	push	{lr}
 80024cc:	b09c      	sub	sp, #112	; 0x70
 80024ce:	ab1d      	add	r3, sp, #116	; 0x74
 80024d0:	9002      	str	r0, [sp, #8]
 80024d2:	9006      	str	r0, [sp, #24]
 80024d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80024d8:	4809      	ldr	r0, [pc, #36]	; (8002500 <siprintf+0x38>)
 80024da:	9107      	str	r1, [sp, #28]
 80024dc:	9104      	str	r1, [sp, #16]
 80024de:	4909      	ldr	r1, [pc, #36]	; (8002504 <siprintf+0x3c>)
 80024e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80024e4:	9105      	str	r1, [sp, #20]
 80024e6:	6800      	ldr	r0, [r0, #0]
 80024e8:	9301      	str	r3, [sp, #4]
 80024ea:	a902      	add	r1, sp, #8
 80024ec:	f000 f992 	bl	8002814 <_svfiprintf_r>
 80024f0:	9b02      	ldr	r3, [sp, #8]
 80024f2:	2200      	movs	r2, #0
 80024f4:	701a      	strb	r2, [r3, #0]
 80024f6:	b01c      	add	sp, #112	; 0x70
 80024f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80024fc:	b003      	add	sp, #12
 80024fe:	4770      	bx	lr
 8002500:	200000d0 	.word	0x200000d0
 8002504:	ffff0208 	.word	0xffff0208

08002508 <memset>:
 8002508:	4402      	add	r2, r0
 800250a:	4603      	mov	r3, r0
 800250c:	4293      	cmp	r3, r2
 800250e:	d100      	bne.n	8002512 <memset+0xa>
 8002510:	4770      	bx	lr
 8002512:	f803 1b01 	strb.w	r1, [r3], #1
 8002516:	e7f9      	b.n	800250c <memset+0x4>

08002518 <__errno>:
 8002518:	4b01      	ldr	r3, [pc, #4]	; (8002520 <__errno+0x8>)
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	200000d0 	.word	0x200000d0

08002524 <__libc_init_array>:
 8002524:	b570      	push	{r4, r5, r6, lr}
 8002526:	4d0d      	ldr	r5, [pc, #52]	; (800255c <__libc_init_array+0x38>)
 8002528:	4c0d      	ldr	r4, [pc, #52]	; (8002560 <__libc_init_array+0x3c>)
 800252a:	1b64      	subs	r4, r4, r5
 800252c:	10a4      	asrs	r4, r4, #2
 800252e:	2600      	movs	r6, #0
 8002530:	42a6      	cmp	r6, r4
 8002532:	d109      	bne.n	8002548 <__libc_init_array+0x24>
 8002534:	4d0b      	ldr	r5, [pc, #44]	; (8002564 <__libc_init_array+0x40>)
 8002536:	4c0c      	ldr	r4, [pc, #48]	; (8002568 <__libc_init_array+0x44>)
 8002538:	f000 fc6a 	bl	8002e10 <_init>
 800253c:	1b64      	subs	r4, r4, r5
 800253e:	10a4      	asrs	r4, r4, #2
 8002540:	2600      	movs	r6, #0
 8002542:	42a6      	cmp	r6, r4
 8002544:	d105      	bne.n	8002552 <__libc_init_array+0x2e>
 8002546:	bd70      	pop	{r4, r5, r6, pc}
 8002548:	f855 3b04 	ldr.w	r3, [r5], #4
 800254c:	4798      	blx	r3
 800254e:	3601      	adds	r6, #1
 8002550:	e7ee      	b.n	8002530 <__libc_init_array+0xc>
 8002552:	f855 3b04 	ldr.w	r3, [r5], #4
 8002556:	4798      	blx	r3
 8002558:	3601      	adds	r6, #1
 800255a:	e7f2      	b.n	8002542 <__libc_init_array+0x1e>
 800255c:	08002eb8 	.word	0x08002eb8
 8002560:	08002eb8 	.word	0x08002eb8
 8002564:	08002eb8 	.word	0x08002eb8
 8002568:	08002ebc 	.word	0x08002ebc

0800256c <__retarget_lock_acquire_recursive>:
 800256c:	4770      	bx	lr

0800256e <__retarget_lock_release_recursive>:
 800256e:	4770      	bx	lr

08002570 <_free_r>:
 8002570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002572:	2900      	cmp	r1, #0
 8002574:	d044      	beq.n	8002600 <_free_r+0x90>
 8002576:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800257a:	9001      	str	r0, [sp, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	f1a1 0404 	sub.w	r4, r1, #4
 8002582:	bfb8      	it	lt
 8002584:	18e4      	addlt	r4, r4, r3
 8002586:	f000 f8df 	bl	8002748 <__malloc_lock>
 800258a:	4a1e      	ldr	r2, [pc, #120]	; (8002604 <_free_r+0x94>)
 800258c:	9801      	ldr	r0, [sp, #4]
 800258e:	6813      	ldr	r3, [r2, #0]
 8002590:	b933      	cbnz	r3, 80025a0 <_free_r+0x30>
 8002592:	6063      	str	r3, [r4, #4]
 8002594:	6014      	str	r4, [r2, #0]
 8002596:	b003      	add	sp, #12
 8002598:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800259c:	f000 b8da 	b.w	8002754 <__malloc_unlock>
 80025a0:	42a3      	cmp	r3, r4
 80025a2:	d908      	bls.n	80025b6 <_free_r+0x46>
 80025a4:	6825      	ldr	r5, [r4, #0]
 80025a6:	1961      	adds	r1, r4, r5
 80025a8:	428b      	cmp	r3, r1
 80025aa:	bf01      	itttt	eq
 80025ac:	6819      	ldreq	r1, [r3, #0]
 80025ae:	685b      	ldreq	r3, [r3, #4]
 80025b0:	1949      	addeq	r1, r1, r5
 80025b2:	6021      	streq	r1, [r4, #0]
 80025b4:	e7ed      	b.n	8002592 <_free_r+0x22>
 80025b6:	461a      	mov	r2, r3
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	b10b      	cbz	r3, 80025c0 <_free_r+0x50>
 80025bc:	42a3      	cmp	r3, r4
 80025be:	d9fa      	bls.n	80025b6 <_free_r+0x46>
 80025c0:	6811      	ldr	r1, [r2, #0]
 80025c2:	1855      	adds	r5, r2, r1
 80025c4:	42a5      	cmp	r5, r4
 80025c6:	d10b      	bne.n	80025e0 <_free_r+0x70>
 80025c8:	6824      	ldr	r4, [r4, #0]
 80025ca:	4421      	add	r1, r4
 80025cc:	1854      	adds	r4, r2, r1
 80025ce:	42a3      	cmp	r3, r4
 80025d0:	6011      	str	r1, [r2, #0]
 80025d2:	d1e0      	bne.n	8002596 <_free_r+0x26>
 80025d4:	681c      	ldr	r4, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	6053      	str	r3, [r2, #4]
 80025da:	440c      	add	r4, r1
 80025dc:	6014      	str	r4, [r2, #0]
 80025de:	e7da      	b.n	8002596 <_free_r+0x26>
 80025e0:	d902      	bls.n	80025e8 <_free_r+0x78>
 80025e2:	230c      	movs	r3, #12
 80025e4:	6003      	str	r3, [r0, #0]
 80025e6:	e7d6      	b.n	8002596 <_free_r+0x26>
 80025e8:	6825      	ldr	r5, [r4, #0]
 80025ea:	1961      	adds	r1, r4, r5
 80025ec:	428b      	cmp	r3, r1
 80025ee:	bf04      	itt	eq
 80025f0:	6819      	ldreq	r1, [r3, #0]
 80025f2:	685b      	ldreq	r3, [r3, #4]
 80025f4:	6063      	str	r3, [r4, #4]
 80025f6:	bf04      	itt	eq
 80025f8:	1949      	addeq	r1, r1, r5
 80025fa:	6021      	streq	r1, [r4, #0]
 80025fc:	6054      	str	r4, [r2, #4]
 80025fe:	e7ca      	b.n	8002596 <_free_r+0x26>
 8002600:	b003      	add	sp, #12
 8002602:	bd30      	pop	{r4, r5, pc}
 8002604:	200002f4 	.word	0x200002f4

08002608 <sbrk_aligned>:
 8002608:	b570      	push	{r4, r5, r6, lr}
 800260a:	4e0e      	ldr	r6, [pc, #56]	; (8002644 <sbrk_aligned+0x3c>)
 800260c:	460c      	mov	r4, r1
 800260e:	6831      	ldr	r1, [r6, #0]
 8002610:	4605      	mov	r5, r0
 8002612:	b911      	cbnz	r1, 800261a <sbrk_aligned+0x12>
 8002614:	f000 fba6 	bl	8002d64 <_sbrk_r>
 8002618:	6030      	str	r0, [r6, #0]
 800261a:	4621      	mov	r1, r4
 800261c:	4628      	mov	r0, r5
 800261e:	f000 fba1 	bl	8002d64 <_sbrk_r>
 8002622:	1c43      	adds	r3, r0, #1
 8002624:	d00a      	beq.n	800263c <sbrk_aligned+0x34>
 8002626:	1cc4      	adds	r4, r0, #3
 8002628:	f024 0403 	bic.w	r4, r4, #3
 800262c:	42a0      	cmp	r0, r4
 800262e:	d007      	beq.n	8002640 <sbrk_aligned+0x38>
 8002630:	1a21      	subs	r1, r4, r0
 8002632:	4628      	mov	r0, r5
 8002634:	f000 fb96 	bl	8002d64 <_sbrk_r>
 8002638:	3001      	adds	r0, #1
 800263a:	d101      	bne.n	8002640 <sbrk_aligned+0x38>
 800263c:	f04f 34ff 	mov.w	r4, #4294967295
 8002640:	4620      	mov	r0, r4
 8002642:	bd70      	pop	{r4, r5, r6, pc}
 8002644:	200002f8 	.word	0x200002f8

08002648 <_malloc_r>:
 8002648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800264c:	1ccd      	adds	r5, r1, #3
 800264e:	f025 0503 	bic.w	r5, r5, #3
 8002652:	3508      	adds	r5, #8
 8002654:	2d0c      	cmp	r5, #12
 8002656:	bf38      	it	cc
 8002658:	250c      	movcc	r5, #12
 800265a:	2d00      	cmp	r5, #0
 800265c:	4607      	mov	r7, r0
 800265e:	db01      	blt.n	8002664 <_malloc_r+0x1c>
 8002660:	42a9      	cmp	r1, r5
 8002662:	d905      	bls.n	8002670 <_malloc_r+0x28>
 8002664:	230c      	movs	r3, #12
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	2600      	movs	r6, #0
 800266a:	4630      	mov	r0, r6
 800266c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002670:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002744 <_malloc_r+0xfc>
 8002674:	f000 f868 	bl	8002748 <__malloc_lock>
 8002678:	f8d8 3000 	ldr.w	r3, [r8]
 800267c:	461c      	mov	r4, r3
 800267e:	bb5c      	cbnz	r4, 80026d8 <_malloc_r+0x90>
 8002680:	4629      	mov	r1, r5
 8002682:	4638      	mov	r0, r7
 8002684:	f7ff ffc0 	bl	8002608 <sbrk_aligned>
 8002688:	1c43      	adds	r3, r0, #1
 800268a:	4604      	mov	r4, r0
 800268c:	d155      	bne.n	800273a <_malloc_r+0xf2>
 800268e:	f8d8 4000 	ldr.w	r4, [r8]
 8002692:	4626      	mov	r6, r4
 8002694:	2e00      	cmp	r6, #0
 8002696:	d145      	bne.n	8002724 <_malloc_r+0xdc>
 8002698:	2c00      	cmp	r4, #0
 800269a:	d048      	beq.n	800272e <_malloc_r+0xe6>
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	4631      	mov	r1, r6
 80026a0:	4638      	mov	r0, r7
 80026a2:	eb04 0903 	add.w	r9, r4, r3
 80026a6:	f000 fb5d 	bl	8002d64 <_sbrk_r>
 80026aa:	4581      	cmp	r9, r0
 80026ac:	d13f      	bne.n	800272e <_malloc_r+0xe6>
 80026ae:	6821      	ldr	r1, [r4, #0]
 80026b0:	1a6d      	subs	r5, r5, r1
 80026b2:	4629      	mov	r1, r5
 80026b4:	4638      	mov	r0, r7
 80026b6:	f7ff ffa7 	bl	8002608 <sbrk_aligned>
 80026ba:	3001      	adds	r0, #1
 80026bc:	d037      	beq.n	800272e <_malloc_r+0xe6>
 80026be:	6823      	ldr	r3, [r4, #0]
 80026c0:	442b      	add	r3, r5
 80026c2:	6023      	str	r3, [r4, #0]
 80026c4:	f8d8 3000 	ldr.w	r3, [r8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d038      	beq.n	800273e <_malloc_r+0xf6>
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	42a2      	cmp	r2, r4
 80026d0:	d12b      	bne.n	800272a <_malloc_r+0xe2>
 80026d2:	2200      	movs	r2, #0
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	e00f      	b.n	80026f8 <_malloc_r+0xb0>
 80026d8:	6822      	ldr	r2, [r4, #0]
 80026da:	1b52      	subs	r2, r2, r5
 80026dc:	d41f      	bmi.n	800271e <_malloc_r+0xd6>
 80026de:	2a0b      	cmp	r2, #11
 80026e0:	d917      	bls.n	8002712 <_malloc_r+0xca>
 80026e2:	1961      	adds	r1, r4, r5
 80026e4:	42a3      	cmp	r3, r4
 80026e6:	6025      	str	r5, [r4, #0]
 80026e8:	bf18      	it	ne
 80026ea:	6059      	strne	r1, [r3, #4]
 80026ec:	6863      	ldr	r3, [r4, #4]
 80026ee:	bf08      	it	eq
 80026f0:	f8c8 1000 	streq.w	r1, [r8]
 80026f4:	5162      	str	r2, [r4, r5]
 80026f6:	604b      	str	r3, [r1, #4]
 80026f8:	4638      	mov	r0, r7
 80026fa:	f104 060b 	add.w	r6, r4, #11
 80026fe:	f000 f829 	bl	8002754 <__malloc_unlock>
 8002702:	f026 0607 	bic.w	r6, r6, #7
 8002706:	1d23      	adds	r3, r4, #4
 8002708:	1af2      	subs	r2, r6, r3
 800270a:	d0ae      	beq.n	800266a <_malloc_r+0x22>
 800270c:	1b9b      	subs	r3, r3, r6
 800270e:	50a3      	str	r3, [r4, r2]
 8002710:	e7ab      	b.n	800266a <_malloc_r+0x22>
 8002712:	42a3      	cmp	r3, r4
 8002714:	6862      	ldr	r2, [r4, #4]
 8002716:	d1dd      	bne.n	80026d4 <_malloc_r+0x8c>
 8002718:	f8c8 2000 	str.w	r2, [r8]
 800271c:	e7ec      	b.n	80026f8 <_malloc_r+0xb0>
 800271e:	4623      	mov	r3, r4
 8002720:	6864      	ldr	r4, [r4, #4]
 8002722:	e7ac      	b.n	800267e <_malloc_r+0x36>
 8002724:	4634      	mov	r4, r6
 8002726:	6876      	ldr	r6, [r6, #4]
 8002728:	e7b4      	b.n	8002694 <_malloc_r+0x4c>
 800272a:	4613      	mov	r3, r2
 800272c:	e7cc      	b.n	80026c8 <_malloc_r+0x80>
 800272e:	230c      	movs	r3, #12
 8002730:	603b      	str	r3, [r7, #0]
 8002732:	4638      	mov	r0, r7
 8002734:	f000 f80e 	bl	8002754 <__malloc_unlock>
 8002738:	e797      	b.n	800266a <_malloc_r+0x22>
 800273a:	6025      	str	r5, [r4, #0]
 800273c:	e7dc      	b.n	80026f8 <_malloc_r+0xb0>
 800273e:	605b      	str	r3, [r3, #4]
 8002740:	deff      	udf	#255	; 0xff
 8002742:	bf00      	nop
 8002744:	200002f4 	.word	0x200002f4

08002748 <__malloc_lock>:
 8002748:	4801      	ldr	r0, [pc, #4]	; (8002750 <__malloc_lock+0x8>)
 800274a:	f7ff bf0f 	b.w	800256c <__retarget_lock_acquire_recursive>
 800274e:	bf00      	nop
 8002750:	200002f0 	.word	0x200002f0

08002754 <__malloc_unlock>:
 8002754:	4801      	ldr	r0, [pc, #4]	; (800275c <__malloc_unlock+0x8>)
 8002756:	f7ff bf0a 	b.w	800256e <__retarget_lock_release_recursive>
 800275a:	bf00      	nop
 800275c:	200002f0 	.word	0x200002f0

08002760 <__ssputs_r>:
 8002760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002764:	688e      	ldr	r6, [r1, #8]
 8002766:	461f      	mov	r7, r3
 8002768:	42be      	cmp	r6, r7
 800276a:	680b      	ldr	r3, [r1, #0]
 800276c:	4682      	mov	sl, r0
 800276e:	460c      	mov	r4, r1
 8002770:	4690      	mov	r8, r2
 8002772:	d82c      	bhi.n	80027ce <__ssputs_r+0x6e>
 8002774:	898a      	ldrh	r2, [r1, #12]
 8002776:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800277a:	d026      	beq.n	80027ca <__ssputs_r+0x6a>
 800277c:	6965      	ldr	r5, [r4, #20]
 800277e:	6909      	ldr	r1, [r1, #16]
 8002780:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002784:	eba3 0901 	sub.w	r9, r3, r1
 8002788:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800278c:	1c7b      	adds	r3, r7, #1
 800278e:	444b      	add	r3, r9
 8002790:	106d      	asrs	r5, r5, #1
 8002792:	429d      	cmp	r5, r3
 8002794:	bf38      	it	cc
 8002796:	461d      	movcc	r5, r3
 8002798:	0553      	lsls	r3, r2, #21
 800279a:	d527      	bpl.n	80027ec <__ssputs_r+0x8c>
 800279c:	4629      	mov	r1, r5
 800279e:	f7ff ff53 	bl	8002648 <_malloc_r>
 80027a2:	4606      	mov	r6, r0
 80027a4:	b360      	cbz	r0, 8002800 <__ssputs_r+0xa0>
 80027a6:	6921      	ldr	r1, [r4, #16]
 80027a8:	464a      	mov	r2, r9
 80027aa:	f000 faeb 	bl	8002d84 <memcpy>
 80027ae:	89a3      	ldrh	r3, [r4, #12]
 80027b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80027b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027b8:	81a3      	strh	r3, [r4, #12]
 80027ba:	6126      	str	r6, [r4, #16]
 80027bc:	6165      	str	r5, [r4, #20]
 80027be:	444e      	add	r6, r9
 80027c0:	eba5 0509 	sub.w	r5, r5, r9
 80027c4:	6026      	str	r6, [r4, #0]
 80027c6:	60a5      	str	r5, [r4, #8]
 80027c8:	463e      	mov	r6, r7
 80027ca:	42be      	cmp	r6, r7
 80027cc:	d900      	bls.n	80027d0 <__ssputs_r+0x70>
 80027ce:	463e      	mov	r6, r7
 80027d0:	6820      	ldr	r0, [r4, #0]
 80027d2:	4632      	mov	r2, r6
 80027d4:	4641      	mov	r1, r8
 80027d6:	f000 faab 	bl	8002d30 <memmove>
 80027da:	68a3      	ldr	r3, [r4, #8]
 80027dc:	1b9b      	subs	r3, r3, r6
 80027de:	60a3      	str	r3, [r4, #8]
 80027e0:	6823      	ldr	r3, [r4, #0]
 80027e2:	4433      	add	r3, r6
 80027e4:	6023      	str	r3, [r4, #0]
 80027e6:	2000      	movs	r0, #0
 80027e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027ec:	462a      	mov	r2, r5
 80027ee:	f000 fad7 	bl	8002da0 <_realloc_r>
 80027f2:	4606      	mov	r6, r0
 80027f4:	2800      	cmp	r0, #0
 80027f6:	d1e0      	bne.n	80027ba <__ssputs_r+0x5a>
 80027f8:	6921      	ldr	r1, [r4, #16]
 80027fa:	4650      	mov	r0, sl
 80027fc:	f7ff feb8 	bl	8002570 <_free_r>
 8002800:	230c      	movs	r3, #12
 8002802:	f8ca 3000 	str.w	r3, [sl]
 8002806:	89a3      	ldrh	r3, [r4, #12]
 8002808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800280c:	81a3      	strh	r3, [r4, #12]
 800280e:	f04f 30ff 	mov.w	r0, #4294967295
 8002812:	e7e9      	b.n	80027e8 <__ssputs_r+0x88>

08002814 <_svfiprintf_r>:
 8002814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002818:	4698      	mov	r8, r3
 800281a:	898b      	ldrh	r3, [r1, #12]
 800281c:	061b      	lsls	r3, r3, #24
 800281e:	b09d      	sub	sp, #116	; 0x74
 8002820:	4607      	mov	r7, r0
 8002822:	460d      	mov	r5, r1
 8002824:	4614      	mov	r4, r2
 8002826:	d50e      	bpl.n	8002846 <_svfiprintf_r+0x32>
 8002828:	690b      	ldr	r3, [r1, #16]
 800282a:	b963      	cbnz	r3, 8002846 <_svfiprintf_r+0x32>
 800282c:	2140      	movs	r1, #64	; 0x40
 800282e:	f7ff ff0b 	bl	8002648 <_malloc_r>
 8002832:	6028      	str	r0, [r5, #0]
 8002834:	6128      	str	r0, [r5, #16]
 8002836:	b920      	cbnz	r0, 8002842 <_svfiprintf_r+0x2e>
 8002838:	230c      	movs	r3, #12
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	f04f 30ff 	mov.w	r0, #4294967295
 8002840:	e0d0      	b.n	80029e4 <_svfiprintf_r+0x1d0>
 8002842:	2340      	movs	r3, #64	; 0x40
 8002844:	616b      	str	r3, [r5, #20]
 8002846:	2300      	movs	r3, #0
 8002848:	9309      	str	r3, [sp, #36]	; 0x24
 800284a:	2320      	movs	r3, #32
 800284c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002850:	f8cd 800c 	str.w	r8, [sp, #12]
 8002854:	2330      	movs	r3, #48	; 0x30
 8002856:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80029fc <_svfiprintf_r+0x1e8>
 800285a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800285e:	f04f 0901 	mov.w	r9, #1
 8002862:	4623      	mov	r3, r4
 8002864:	469a      	mov	sl, r3
 8002866:	f813 2b01 	ldrb.w	r2, [r3], #1
 800286a:	b10a      	cbz	r2, 8002870 <_svfiprintf_r+0x5c>
 800286c:	2a25      	cmp	r2, #37	; 0x25
 800286e:	d1f9      	bne.n	8002864 <_svfiprintf_r+0x50>
 8002870:	ebba 0b04 	subs.w	fp, sl, r4
 8002874:	d00b      	beq.n	800288e <_svfiprintf_r+0x7a>
 8002876:	465b      	mov	r3, fp
 8002878:	4622      	mov	r2, r4
 800287a:	4629      	mov	r1, r5
 800287c:	4638      	mov	r0, r7
 800287e:	f7ff ff6f 	bl	8002760 <__ssputs_r>
 8002882:	3001      	adds	r0, #1
 8002884:	f000 80a9 	beq.w	80029da <_svfiprintf_r+0x1c6>
 8002888:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800288a:	445a      	add	r2, fp
 800288c:	9209      	str	r2, [sp, #36]	; 0x24
 800288e:	f89a 3000 	ldrb.w	r3, [sl]
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 80a1 	beq.w	80029da <_svfiprintf_r+0x1c6>
 8002898:	2300      	movs	r3, #0
 800289a:	f04f 32ff 	mov.w	r2, #4294967295
 800289e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028a2:	f10a 0a01 	add.w	sl, sl, #1
 80028a6:	9304      	str	r3, [sp, #16]
 80028a8:	9307      	str	r3, [sp, #28]
 80028aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028ae:	931a      	str	r3, [sp, #104]	; 0x68
 80028b0:	4654      	mov	r4, sl
 80028b2:	2205      	movs	r2, #5
 80028b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028b8:	4850      	ldr	r0, [pc, #320]	; (80029fc <_svfiprintf_r+0x1e8>)
 80028ba:	f7fd fc89 	bl	80001d0 <memchr>
 80028be:	9a04      	ldr	r2, [sp, #16]
 80028c0:	b9d8      	cbnz	r0, 80028fa <_svfiprintf_r+0xe6>
 80028c2:	06d0      	lsls	r0, r2, #27
 80028c4:	bf44      	itt	mi
 80028c6:	2320      	movmi	r3, #32
 80028c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028cc:	0711      	lsls	r1, r2, #28
 80028ce:	bf44      	itt	mi
 80028d0:	232b      	movmi	r3, #43	; 0x2b
 80028d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028d6:	f89a 3000 	ldrb.w	r3, [sl]
 80028da:	2b2a      	cmp	r3, #42	; 0x2a
 80028dc:	d015      	beq.n	800290a <_svfiprintf_r+0xf6>
 80028de:	9a07      	ldr	r2, [sp, #28]
 80028e0:	4654      	mov	r4, sl
 80028e2:	2000      	movs	r0, #0
 80028e4:	f04f 0c0a 	mov.w	ip, #10
 80028e8:	4621      	mov	r1, r4
 80028ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028ee:	3b30      	subs	r3, #48	; 0x30
 80028f0:	2b09      	cmp	r3, #9
 80028f2:	d94d      	bls.n	8002990 <_svfiprintf_r+0x17c>
 80028f4:	b1b0      	cbz	r0, 8002924 <_svfiprintf_r+0x110>
 80028f6:	9207      	str	r2, [sp, #28]
 80028f8:	e014      	b.n	8002924 <_svfiprintf_r+0x110>
 80028fa:	eba0 0308 	sub.w	r3, r0, r8
 80028fe:	fa09 f303 	lsl.w	r3, r9, r3
 8002902:	4313      	orrs	r3, r2
 8002904:	9304      	str	r3, [sp, #16]
 8002906:	46a2      	mov	sl, r4
 8002908:	e7d2      	b.n	80028b0 <_svfiprintf_r+0x9c>
 800290a:	9b03      	ldr	r3, [sp, #12]
 800290c:	1d19      	adds	r1, r3, #4
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	9103      	str	r1, [sp, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	bfbb      	ittet	lt
 8002916:	425b      	neglt	r3, r3
 8002918:	f042 0202 	orrlt.w	r2, r2, #2
 800291c:	9307      	strge	r3, [sp, #28]
 800291e:	9307      	strlt	r3, [sp, #28]
 8002920:	bfb8      	it	lt
 8002922:	9204      	strlt	r2, [sp, #16]
 8002924:	7823      	ldrb	r3, [r4, #0]
 8002926:	2b2e      	cmp	r3, #46	; 0x2e
 8002928:	d10c      	bne.n	8002944 <_svfiprintf_r+0x130>
 800292a:	7863      	ldrb	r3, [r4, #1]
 800292c:	2b2a      	cmp	r3, #42	; 0x2a
 800292e:	d134      	bne.n	800299a <_svfiprintf_r+0x186>
 8002930:	9b03      	ldr	r3, [sp, #12]
 8002932:	1d1a      	adds	r2, r3, #4
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	9203      	str	r2, [sp, #12]
 8002938:	2b00      	cmp	r3, #0
 800293a:	bfb8      	it	lt
 800293c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002940:	3402      	adds	r4, #2
 8002942:	9305      	str	r3, [sp, #20]
 8002944:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002a0c <_svfiprintf_r+0x1f8>
 8002948:	7821      	ldrb	r1, [r4, #0]
 800294a:	2203      	movs	r2, #3
 800294c:	4650      	mov	r0, sl
 800294e:	f7fd fc3f 	bl	80001d0 <memchr>
 8002952:	b138      	cbz	r0, 8002964 <_svfiprintf_r+0x150>
 8002954:	9b04      	ldr	r3, [sp, #16]
 8002956:	eba0 000a 	sub.w	r0, r0, sl
 800295a:	2240      	movs	r2, #64	; 0x40
 800295c:	4082      	lsls	r2, r0
 800295e:	4313      	orrs	r3, r2
 8002960:	3401      	adds	r4, #1
 8002962:	9304      	str	r3, [sp, #16]
 8002964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002968:	4825      	ldr	r0, [pc, #148]	; (8002a00 <_svfiprintf_r+0x1ec>)
 800296a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800296e:	2206      	movs	r2, #6
 8002970:	f7fd fc2e 	bl	80001d0 <memchr>
 8002974:	2800      	cmp	r0, #0
 8002976:	d038      	beq.n	80029ea <_svfiprintf_r+0x1d6>
 8002978:	4b22      	ldr	r3, [pc, #136]	; (8002a04 <_svfiprintf_r+0x1f0>)
 800297a:	bb1b      	cbnz	r3, 80029c4 <_svfiprintf_r+0x1b0>
 800297c:	9b03      	ldr	r3, [sp, #12]
 800297e:	3307      	adds	r3, #7
 8002980:	f023 0307 	bic.w	r3, r3, #7
 8002984:	3308      	adds	r3, #8
 8002986:	9303      	str	r3, [sp, #12]
 8002988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800298a:	4433      	add	r3, r6
 800298c:	9309      	str	r3, [sp, #36]	; 0x24
 800298e:	e768      	b.n	8002862 <_svfiprintf_r+0x4e>
 8002990:	fb0c 3202 	mla	r2, ip, r2, r3
 8002994:	460c      	mov	r4, r1
 8002996:	2001      	movs	r0, #1
 8002998:	e7a6      	b.n	80028e8 <_svfiprintf_r+0xd4>
 800299a:	2300      	movs	r3, #0
 800299c:	3401      	adds	r4, #1
 800299e:	9305      	str	r3, [sp, #20]
 80029a0:	4619      	mov	r1, r3
 80029a2:	f04f 0c0a 	mov.w	ip, #10
 80029a6:	4620      	mov	r0, r4
 80029a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029ac:	3a30      	subs	r2, #48	; 0x30
 80029ae:	2a09      	cmp	r2, #9
 80029b0:	d903      	bls.n	80029ba <_svfiprintf_r+0x1a6>
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0c6      	beq.n	8002944 <_svfiprintf_r+0x130>
 80029b6:	9105      	str	r1, [sp, #20]
 80029b8:	e7c4      	b.n	8002944 <_svfiprintf_r+0x130>
 80029ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80029be:	4604      	mov	r4, r0
 80029c0:	2301      	movs	r3, #1
 80029c2:	e7f0      	b.n	80029a6 <_svfiprintf_r+0x192>
 80029c4:	ab03      	add	r3, sp, #12
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	462a      	mov	r2, r5
 80029ca:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <_svfiprintf_r+0x1f4>)
 80029cc:	a904      	add	r1, sp, #16
 80029ce:	4638      	mov	r0, r7
 80029d0:	f3af 8000 	nop.w
 80029d4:	1c42      	adds	r2, r0, #1
 80029d6:	4606      	mov	r6, r0
 80029d8:	d1d6      	bne.n	8002988 <_svfiprintf_r+0x174>
 80029da:	89ab      	ldrh	r3, [r5, #12]
 80029dc:	065b      	lsls	r3, r3, #25
 80029de:	f53f af2d 	bmi.w	800283c <_svfiprintf_r+0x28>
 80029e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029e4:	b01d      	add	sp, #116	; 0x74
 80029e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029ea:	ab03      	add	r3, sp, #12
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	462a      	mov	r2, r5
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <_svfiprintf_r+0x1f4>)
 80029f2:	a904      	add	r1, sp, #16
 80029f4:	4638      	mov	r0, r7
 80029f6:	f000 f879 	bl	8002aec <_printf_i>
 80029fa:	e7eb      	b.n	80029d4 <_svfiprintf_r+0x1c0>
 80029fc:	08002e83 	.word	0x08002e83
 8002a00:	08002e8d 	.word	0x08002e8d
 8002a04:	00000000 	.word	0x00000000
 8002a08:	08002761 	.word	0x08002761
 8002a0c:	08002e89 	.word	0x08002e89

08002a10 <_printf_common>:
 8002a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a14:	4616      	mov	r6, r2
 8002a16:	4699      	mov	r9, r3
 8002a18:	688a      	ldr	r2, [r1, #8]
 8002a1a:	690b      	ldr	r3, [r1, #16]
 8002a1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a20:	4293      	cmp	r3, r2
 8002a22:	bfb8      	it	lt
 8002a24:	4613      	movlt	r3, r2
 8002a26:	6033      	str	r3, [r6, #0]
 8002a28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a2c:	4607      	mov	r7, r0
 8002a2e:	460c      	mov	r4, r1
 8002a30:	b10a      	cbz	r2, 8002a36 <_printf_common+0x26>
 8002a32:	3301      	adds	r3, #1
 8002a34:	6033      	str	r3, [r6, #0]
 8002a36:	6823      	ldr	r3, [r4, #0]
 8002a38:	0699      	lsls	r1, r3, #26
 8002a3a:	bf42      	ittt	mi
 8002a3c:	6833      	ldrmi	r3, [r6, #0]
 8002a3e:	3302      	addmi	r3, #2
 8002a40:	6033      	strmi	r3, [r6, #0]
 8002a42:	6825      	ldr	r5, [r4, #0]
 8002a44:	f015 0506 	ands.w	r5, r5, #6
 8002a48:	d106      	bne.n	8002a58 <_printf_common+0x48>
 8002a4a:	f104 0a19 	add.w	sl, r4, #25
 8002a4e:	68e3      	ldr	r3, [r4, #12]
 8002a50:	6832      	ldr	r2, [r6, #0]
 8002a52:	1a9b      	subs	r3, r3, r2
 8002a54:	42ab      	cmp	r3, r5
 8002a56:	dc26      	bgt.n	8002aa6 <_printf_common+0x96>
 8002a58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a5c:	1e13      	subs	r3, r2, #0
 8002a5e:	6822      	ldr	r2, [r4, #0]
 8002a60:	bf18      	it	ne
 8002a62:	2301      	movne	r3, #1
 8002a64:	0692      	lsls	r2, r2, #26
 8002a66:	d42b      	bmi.n	8002ac0 <_printf_common+0xb0>
 8002a68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a6c:	4649      	mov	r1, r9
 8002a6e:	4638      	mov	r0, r7
 8002a70:	47c0      	blx	r8
 8002a72:	3001      	adds	r0, #1
 8002a74:	d01e      	beq.n	8002ab4 <_printf_common+0xa4>
 8002a76:	6823      	ldr	r3, [r4, #0]
 8002a78:	6922      	ldr	r2, [r4, #16]
 8002a7a:	f003 0306 	and.w	r3, r3, #6
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	bf02      	ittt	eq
 8002a82:	68e5      	ldreq	r5, [r4, #12]
 8002a84:	6833      	ldreq	r3, [r6, #0]
 8002a86:	1aed      	subeq	r5, r5, r3
 8002a88:	68a3      	ldr	r3, [r4, #8]
 8002a8a:	bf0c      	ite	eq
 8002a8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a90:	2500      	movne	r5, #0
 8002a92:	4293      	cmp	r3, r2
 8002a94:	bfc4      	itt	gt
 8002a96:	1a9b      	subgt	r3, r3, r2
 8002a98:	18ed      	addgt	r5, r5, r3
 8002a9a:	2600      	movs	r6, #0
 8002a9c:	341a      	adds	r4, #26
 8002a9e:	42b5      	cmp	r5, r6
 8002aa0:	d11a      	bne.n	8002ad8 <_printf_common+0xc8>
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	e008      	b.n	8002ab8 <_printf_common+0xa8>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	4652      	mov	r2, sl
 8002aaa:	4649      	mov	r1, r9
 8002aac:	4638      	mov	r0, r7
 8002aae:	47c0      	blx	r8
 8002ab0:	3001      	adds	r0, #1
 8002ab2:	d103      	bne.n	8002abc <_printf_common+0xac>
 8002ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002abc:	3501      	adds	r5, #1
 8002abe:	e7c6      	b.n	8002a4e <_printf_common+0x3e>
 8002ac0:	18e1      	adds	r1, r4, r3
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	2030      	movs	r0, #48	; 0x30
 8002ac6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002aca:	4422      	add	r2, r4
 8002acc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ad0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ad4:	3302      	adds	r3, #2
 8002ad6:	e7c7      	b.n	8002a68 <_printf_common+0x58>
 8002ad8:	2301      	movs	r3, #1
 8002ada:	4622      	mov	r2, r4
 8002adc:	4649      	mov	r1, r9
 8002ade:	4638      	mov	r0, r7
 8002ae0:	47c0      	blx	r8
 8002ae2:	3001      	adds	r0, #1
 8002ae4:	d0e6      	beq.n	8002ab4 <_printf_common+0xa4>
 8002ae6:	3601      	adds	r6, #1
 8002ae8:	e7d9      	b.n	8002a9e <_printf_common+0x8e>
	...

08002aec <_printf_i>:
 8002aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002af0:	7e0f      	ldrb	r7, [r1, #24]
 8002af2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002af4:	2f78      	cmp	r7, #120	; 0x78
 8002af6:	4691      	mov	r9, r2
 8002af8:	4680      	mov	r8, r0
 8002afa:	460c      	mov	r4, r1
 8002afc:	469a      	mov	sl, r3
 8002afe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002b02:	d807      	bhi.n	8002b14 <_printf_i+0x28>
 8002b04:	2f62      	cmp	r7, #98	; 0x62
 8002b06:	d80a      	bhi.n	8002b1e <_printf_i+0x32>
 8002b08:	2f00      	cmp	r7, #0
 8002b0a:	f000 80d4 	beq.w	8002cb6 <_printf_i+0x1ca>
 8002b0e:	2f58      	cmp	r7, #88	; 0x58
 8002b10:	f000 80c0 	beq.w	8002c94 <_printf_i+0x1a8>
 8002b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b1c:	e03a      	b.n	8002b94 <_printf_i+0xa8>
 8002b1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b22:	2b15      	cmp	r3, #21
 8002b24:	d8f6      	bhi.n	8002b14 <_printf_i+0x28>
 8002b26:	a101      	add	r1, pc, #4	; (adr r1, 8002b2c <_printf_i+0x40>)
 8002b28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b2c:	08002b85 	.word	0x08002b85
 8002b30:	08002b99 	.word	0x08002b99
 8002b34:	08002b15 	.word	0x08002b15
 8002b38:	08002b15 	.word	0x08002b15
 8002b3c:	08002b15 	.word	0x08002b15
 8002b40:	08002b15 	.word	0x08002b15
 8002b44:	08002b99 	.word	0x08002b99
 8002b48:	08002b15 	.word	0x08002b15
 8002b4c:	08002b15 	.word	0x08002b15
 8002b50:	08002b15 	.word	0x08002b15
 8002b54:	08002b15 	.word	0x08002b15
 8002b58:	08002c9d 	.word	0x08002c9d
 8002b5c:	08002bc5 	.word	0x08002bc5
 8002b60:	08002c57 	.word	0x08002c57
 8002b64:	08002b15 	.word	0x08002b15
 8002b68:	08002b15 	.word	0x08002b15
 8002b6c:	08002cbf 	.word	0x08002cbf
 8002b70:	08002b15 	.word	0x08002b15
 8002b74:	08002bc5 	.word	0x08002bc5
 8002b78:	08002b15 	.word	0x08002b15
 8002b7c:	08002b15 	.word	0x08002b15
 8002b80:	08002c5f 	.word	0x08002c5f
 8002b84:	682b      	ldr	r3, [r5, #0]
 8002b86:	1d1a      	adds	r2, r3, #4
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	602a      	str	r2, [r5, #0]
 8002b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b94:	2301      	movs	r3, #1
 8002b96:	e09f      	b.n	8002cd8 <_printf_i+0x1ec>
 8002b98:	6820      	ldr	r0, [r4, #0]
 8002b9a:	682b      	ldr	r3, [r5, #0]
 8002b9c:	0607      	lsls	r7, r0, #24
 8002b9e:	f103 0104 	add.w	r1, r3, #4
 8002ba2:	6029      	str	r1, [r5, #0]
 8002ba4:	d501      	bpl.n	8002baa <_printf_i+0xbe>
 8002ba6:	681e      	ldr	r6, [r3, #0]
 8002ba8:	e003      	b.n	8002bb2 <_printf_i+0xc6>
 8002baa:	0646      	lsls	r6, r0, #25
 8002bac:	d5fb      	bpl.n	8002ba6 <_printf_i+0xba>
 8002bae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002bb2:	2e00      	cmp	r6, #0
 8002bb4:	da03      	bge.n	8002bbe <_printf_i+0xd2>
 8002bb6:	232d      	movs	r3, #45	; 0x2d
 8002bb8:	4276      	negs	r6, r6
 8002bba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bbe:	485a      	ldr	r0, [pc, #360]	; (8002d28 <_printf_i+0x23c>)
 8002bc0:	230a      	movs	r3, #10
 8002bc2:	e012      	b.n	8002bea <_printf_i+0xfe>
 8002bc4:	682b      	ldr	r3, [r5, #0]
 8002bc6:	6820      	ldr	r0, [r4, #0]
 8002bc8:	1d19      	adds	r1, r3, #4
 8002bca:	6029      	str	r1, [r5, #0]
 8002bcc:	0605      	lsls	r5, r0, #24
 8002bce:	d501      	bpl.n	8002bd4 <_printf_i+0xe8>
 8002bd0:	681e      	ldr	r6, [r3, #0]
 8002bd2:	e002      	b.n	8002bda <_printf_i+0xee>
 8002bd4:	0641      	lsls	r1, r0, #25
 8002bd6:	d5fb      	bpl.n	8002bd0 <_printf_i+0xe4>
 8002bd8:	881e      	ldrh	r6, [r3, #0]
 8002bda:	4853      	ldr	r0, [pc, #332]	; (8002d28 <_printf_i+0x23c>)
 8002bdc:	2f6f      	cmp	r7, #111	; 0x6f
 8002bde:	bf0c      	ite	eq
 8002be0:	2308      	moveq	r3, #8
 8002be2:	230a      	movne	r3, #10
 8002be4:	2100      	movs	r1, #0
 8002be6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002bea:	6865      	ldr	r5, [r4, #4]
 8002bec:	60a5      	str	r5, [r4, #8]
 8002bee:	2d00      	cmp	r5, #0
 8002bf0:	bfa2      	ittt	ge
 8002bf2:	6821      	ldrge	r1, [r4, #0]
 8002bf4:	f021 0104 	bicge.w	r1, r1, #4
 8002bf8:	6021      	strge	r1, [r4, #0]
 8002bfa:	b90e      	cbnz	r6, 8002c00 <_printf_i+0x114>
 8002bfc:	2d00      	cmp	r5, #0
 8002bfe:	d04b      	beq.n	8002c98 <_printf_i+0x1ac>
 8002c00:	4615      	mov	r5, r2
 8002c02:	fbb6 f1f3 	udiv	r1, r6, r3
 8002c06:	fb03 6711 	mls	r7, r3, r1, r6
 8002c0a:	5dc7      	ldrb	r7, [r0, r7]
 8002c0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002c10:	4637      	mov	r7, r6
 8002c12:	42bb      	cmp	r3, r7
 8002c14:	460e      	mov	r6, r1
 8002c16:	d9f4      	bls.n	8002c02 <_printf_i+0x116>
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d10b      	bne.n	8002c34 <_printf_i+0x148>
 8002c1c:	6823      	ldr	r3, [r4, #0]
 8002c1e:	07de      	lsls	r6, r3, #31
 8002c20:	d508      	bpl.n	8002c34 <_printf_i+0x148>
 8002c22:	6923      	ldr	r3, [r4, #16]
 8002c24:	6861      	ldr	r1, [r4, #4]
 8002c26:	4299      	cmp	r1, r3
 8002c28:	bfde      	ittt	le
 8002c2a:	2330      	movle	r3, #48	; 0x30
 8002c2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c34:	1b52      	subs	r2, r2, r5
 8002c36:	6122      	str	r2, [r4, #16]
 8002c38:	f8cd a000 	str.w	sl, [sp]
 8002c3c:	464b      	mov	r3, r9
 8002c3e:	aa03      	add	r2, sp, #12
 8002c40:	4621      	mov	r1, r4
 8002c42:	4640      	mov	r0, r8
 8002c44:	f7ff fee4 	bl	8002a10 <_printf_common>
 8002c48:	3001      	adds	r0, #1
 8002c4a:	d14a      	bne.n	8002ce2 <_printf_i+0x1f6>
 8002c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c50:	b004      	add	sp, #16
 8002c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c56:	6823      	ldr	r3, [r4, #0]
 8002c58:	f043 0320 	orr.w	r3, r3, #32
 8002c5c:	6023      	str	r3, [r4, #0]
 8002c5e:	4833      	ldr	r0, [pc, #204]	; (8002d2c <_printf_i+0x240>)
 8002c60:	2778      	movs	r7, #120	; 0x78
 8002c62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002c66:	6823      	ldr	r3, [r4, #0]
 8002c68:	6829      	ldr	r1, [r5, #0]
 8002c6a:	061f      	lsls	r7, r3, #24
 8002c6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c70:	d402      	bmi.n	8002c78 <_printf_i+0x18c>
 8002c72:	065f      	lsls	r7, r3, #25
 8002c74:	bf48      	it	mi
 8002c76:	b2b6      	uxthmi	r6, r6
 8002c78:	07df      	lsls	r7, r3, #31
 8002c7a:	bf48      	it	mi
 8002c7c:	f043 0320 	orrmi.w	r3, r3, #32
 8002c80:	6029      	str	r1, [r5, #0]
 8002c82:	bf48      	it	mi
 8002c84:	6023      	strmi	r3, [r4, #0]
 8002c86:	b91e      	cbnz	r6, 8002c90 <_printf_i+0x1a4>
 8002c88:	6823      	ldr	r3, [r4, #0]
 8002c8a:	f023 0320 	bic.w	r3, r3, #32
 8002c8e:	6023      	str	r3, [r4, #0]
 8002c90:	2310      	movs	r3, #16
 8002c92:	e7a7      	b.n	8002be4 <_printf_i+0xf8>
 8002c94:	4824      	ldr	r0, [pc, #144]	; (8002d28 <_printf_i+0x23c>)
 8002c96:	e7e4      	b.n	8002c62 <_printf_i+0x176>
 8002c98:	4615      	mov	r5, r2
 8002c9a:	e7bd      	b.n	8002c18 <_printf_i+0x12c>
 8002c9c:	682b      	ldr	r3, [r5, #0]
 8002c9e:	6826      	ldr	r6, [r4, #0]
 8002ca0:	6961      	ldr	r1, [r4, #20]
 8002ca2:	1d18      	adds	r0, r3, #4
 8002ca4:	6028      	str	r0, [r5, #0]
 8002ca6:	0635      	lsls	r5, r6, #24
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	d501      	bpl.n	8002cb0 <_printf_i+0x1c4>
 8002cac:	6019      	str	r1, [r3, #0]
 8002cae:	e002      	b.n	8002cb6 <_printf_i+0x1ca>
 8002cb0:	0670      	lsls	r0, r6, #25
 8002cb2:	d5fb      	bpl.n	8002cac <_printf_i+0x1c0>
 8002cb4:	8019      	strh	r1, [r3, #0]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	6123      	str	r3, [r4, #16]
 8002cba:	4615      	mov	r5, r2
 8002cbc:	e7bc      	b.n	8002c38 <_printf_i+0x14c>
 8002cbe:	682b      	ldr	r3, [r5, #0]
 8002cc0:	1d1a      	adds	r2, r3, #4
 8002cc2:	602a      	str	r2, [r5, #0]
 8002cc4:	681d      	ldr	r5, [r3, #0]
 8002cc6:	6862      	ldr	r2, [r4, #4]
 8002cc8:	2100      	movs	r1, #0
 8002cca:	4628      	mov	r0, r5
 8002ccc:	f7fd fa80 	bl	80001d0 <memchr>
 8002cd0:	b108      	cbz	r0, 8002cd6 <_printf_i+0x1ea>
 8002cd2:	1b40      	subs	r0, r0, r5
 8002cd4:	6060      	str	r0, [r4, #4]
 8002cd6:	6863      	ldr	r3, [r4, #4]
 8002cd8:	6123      	str	r3, [r4, #16]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ce0:	e7aa      	b.n	8002c38 <_printf_i+0x14c>
 8002ce2:	6923      	ldr	r3, [r4, #16]
 8002ce4:	462a      	mov	r2, r5
 8002ce6:	4649      	mov	r1, r9
 8002ce8:	4640      	mov	r0, r8
 8002cea:	47d0      	blx	sl
 8002cec:	3001      	adds	r0, #1
 8002cee:	d0ad      	beq.n	8002c4c <_printf_i+0x160>
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	079b      	lsls	r3, r3, #30
 8002cf4:	d413      	bmi.n	8002d1e <_printf_i+0x232>
 8002cf6:	68e0      	ldr	r0, [r4, #12]
 8002cf8:	9b03      	ldr	r3, [sp, #12]
 8002cfa:	4298      	cmp	r0, r3
 8002cfc:	bfb8      	it	lt
 8002cfe:	4618      	movlt	r0, r3
 8002d00:	e7a6      	b.n	8002c50 <_printf_i+0x164>
 8002d02:	2301      	movs	r3, #1
 8002d04:	4632      	mov	r2, r6
 8002d06:	4649      	mov	r1, r9
 8002d08:	4640      	mov	r0, r8
 8002d0a:	47d0      	blx	sl
 8002d0c:	3001      	adds	r0, #1
 8002d0e:	d09d      	beq.n	8002c4c <_printf_i+0x160>
 8002d10:	3501      	adds	r5, #1
 8002d12:	68e3      	ldr	r3, [r4, #12]
 8002d14:	9903      	ldr	r1, [sp, #12]
 8002d16:	1a5b      	subs	r3, r3, r1
 8002d18:	42ab      	cmp	r3, r5
 8002d1a:	dcf2      	bgt.n	8002d02 <_printf_i+0x216>
 8002d1c:	e7eb      	b.n	8002cf6 <_printf_i+0x20a>
 8002d1e:	2500      	movs	r5, #0
 8002d20:	f104 0619 	add.w	r6, r4, #25
 8002d24:	e7f5      	b.n	8002d12 <_printf_i+0x226>
 8002d26:	bf00      	nop
 8002d28:	08002e94 	.word	0x08002e94
 8002d2c:	08002ea5 	.word	0x08002ea5

08002d30 <memmove>:
 8002d30:	4288      	cmp	r0, r1
 8002d32:	b510      	push	{r4, lr}
 8002d34:	eb01 0402 	add.w	r4, r1, r2
 8002d38:	d902      	bls.n	8002d40 <memmove+0x10>
 8002d3a:	4284      	cmp	r4, r0
 8002d3c:	4623      	mov	r3, r4
 8002d3e:	d807      	bhi.n	8002d50 <memmove+0x20>
 8002d40:	1e43      	subs	r3, r0, #1
 8002d42:	42a1      	cmp	r1, r4
 8002d44:	d008      	beq.n	8002d58 <memmove+0x28>
 8002d46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d4e:	e7f8      	b.n	8002d42 <memmove+0x12>
 8002d50:	4402      	add	r2, r0
 8002d52:	4601      	mov	r1, r0
 8002d54:	428a      	cmp	r2, r1
 8002d56:	d100      	bne.n	8002d5a <memmove+0x2a>
 8002d58:	bd10      	pop	{r4, pc}
 8002d5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d62:	e7f7      	b.n	8002d54 <memmove+0x24>

08002d64 <_sbrk_r>:
 8002d64:	b538      	push	{r3, r4, r5, lr}
 8002d66:	4d06      	ldr	r5, [pc, #24]	; (8002d80 <_sbrk_r+0x1c>)
 8002d68:	2300      	movs	r3, #0
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	4608      	mov	r0, r1
 8002d6e:	602b      	str	r3, [r5, #0]
 8002d70:	f7fe f8f4 	bl	8000f5c <_sbrk>
 8002d74:	1c43      	adds	r3, r0, #1
 8002d76:	d102      	bne.n	8002d7e <_sbrk_r+0x1a>
 8002d78:	682b      	ldr	r3, [r5, #0]
 8002d7a:	b103      	cbz	r3, 8002d7e <_sbrk_r+0x1a>
 8002d7c:	6023      	str	r3, [r4, #0]
 8002d7e:	bd38      	pop	{r3, r4, r5, pc}
 8002d80:	200002ec 	.word	0x200002ec

08002d84 <memcpy>:
 8002d84:	440a      	add	r2, r1
 8002d86:	4291      	cmp	r1, r2
 8002d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d8c:	d100      	bne.n	8002d90 <memcpy+0xc>
 8002d8e:	4770      	bx	lr
 8002d90:	b510      	push	{r4, lr}
 8002d92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d9a:	4291      	cmp	r1, r2
 8002d9c:	d1f9      	bne.n	8002d92 <memcpy+0xe>
 8002d9e:	bd10      	pop	{r4, pc}

08002da0 <_realloc_r>:
 8002da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002da4:	4680      	mov	r8, r0
 8002da6:	4614      	mov	r4, r2
 8002da8:	460e      	mov	r6, r1
 8002daa:	b921      	cbnz	r1, 8002db6 <_realloc_r+0x16>
 8002dac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002db0:	4611      	mov	r1, r2
 8002db2:	f7ff bc49 	b.w	8002648 <_malloc_r>
 8002db6:	b92a      	cbnz	r2, 8002dc4 <_realloc_r+0x24>
 8002db8:	f7ff fbda 	bl	8002570 <_free_r>
 8002dbc:	4625      	mov	r5, r4
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002dc4:	f000 f81b 	bl	8002dfe <_malloc_usable_size_r>
 8002dc8:	4284      	cmp	r4, r0
 8002dca:	4607      	mov	r7, r0
 8002dcc:	d802      	bhi.n	8002dd4 <_realloc_r+0x34>
 8002dce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002dd2:	d812      	bhi.n	8002dfa <_realloc_r+0x5a>
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	4640      	mov	r0, r8
 8002dd8:	f7ff fc36 	bl	8002648 <_malloc_r>
 8002ddc:	4605      	mov	r5, r0
 8002dde:	2800      	cmp	r0, #0
 8002de0:	d0ed      	beq.n	8002dbe <_realloc_r+0x1e>
 8002de2:	42bc      	cmp	r4, r7
 8002de4:	4622      	mov	r2, r4
 8002de6:	4631      	mov	r1, r6
 8002de8:	bf28      	it	cs
 8002dea:	463a      	movcs	r2, r7
 8002dec:	f7ff ffca 	bl	8002d84 <memcpy>
 8002df0:	4631      	mov	r1, r6
 8002df2:	4640      	mov	r0, r8
 8002df4:	f7ff fbbc 	bl	8002570 <_free_r>
 8002df8:	e7e1      	b.n	8002dbe <_realloc_r+0x1e>
 8002dfa:	4635      	mov	r5, r6
 8002dfc:	e7df      	b.n	8002dbe <_realloc_r+0x1e>

08002dfe <_malloc_usable_size_r>:
 8002dfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e02:	1f18      	subs	r0, r3, #4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	bfbc      	itt	lt
 8002e08:	580b      	ldrlt	r3, [r1, r0]
 8002e0a:	18c0      	addlt	r0, r0, r3
 8002e0c:	4770      	bx	lr
	...

08002e10 <_init>:
 8002e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e12:	bf00      	nop
 8002e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e16:	bc08      	pop	{r3}
 8002e18:	469e      	mov	lr, r3
 8002e1a:	4770      	bx	lr

08002e1c <_fini>:
 8002e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1e:	bf00      	nop
 8002e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e22:	bc08      	pop	{r3}
 8002e24:	469e      	mov	lr, r3
 8002e26:	4770      	bx	lr
