
vrs_cvicenie_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003070  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003200  08003200  00013200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032a4  080032a4  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  080032a4  080032a4  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032a4  080032a4  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032a4  080032a4  000132a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032a8  080032a8  000132a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  080032ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d4  2**0
                  CONTENTS
 10 .bss          0000024c  200000d4  200000d4  000200d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000320  20000320  000200d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 14 .debug_info   00006550  00000000  00000000  00020147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a8c  00000000  00000000  00026697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000838  00000000  00000000  00028128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005f3  00000000  00000000  00028960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001cc5d  00000000  00000000  00028f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00008d2a  00000000  00000000  00045bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a0917  00000000  00000000  0004e8da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000025ec  00000000  00000000  000ef1f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  000f17e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d4 	.word	0x200000d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080031e8 	.word	0x080031e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d8 	.word	0x200000d8
 80001cc:	080031e8 	.word	0x080031e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <hts221_read_bytes>:
{
	write_multi_byte(data, len, HTS221_I2C_ADDRESS, register_address);

}
void hts221_read_bytes(uint8_t register_address, uint8_t *data, uint8_t len)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	6039      	str	r1, [r7, #0]
 800027a:	71fb      	strb	r3, [r7, #7]
 800027c:	4613      	mov	r3, r2
 800027e:	71bb      	strb	r3, [r7, #6]
	read_multi_byte(data, len, HTS221_I2C_ADDRESS, register_address);
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	79b9      	ldrb	r1, [r7, #6]
 8000284:	22be      	movs	r2, #190	; 0xbe
 8000286:	6838      	ldr	r0, [r7, #0]
 8000288:	f000 fc0c 	bl	8000aa4 <read_multi_byte>
}
 800028c:	bf00      	nop
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}

08000294 <hts221_init>:

uint8_t hts221_init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
	uint8_t ID;
	hts221_read_bytes(HTS221_REG_WHO_AM_I, &ID, 1);
 800029a:	1dfb      	adds	r3, r7, #7
 800029c:	2201      	movs	r2, #1
 800029e:	4619      	mov	r1, r3
 80002a0:	200f      	movs	r0, #15
 80002a2:	f7ff ffe5 	bl	8000270 <hts221_read_bytes>
	if(ID != HTS221_WHO_AM_I_VALUE)
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	2bbc      	cmp	r3, #188	; 0xbc
 80002aa:	d001      	beq.n	80002b0 <hts221_init+0x1c>
	{
		return 0;
 80002ac:	2300      	movs	r3, #0
 80002ae:	e088      	b.n	80003c2 <hts221_init+0x12e>
	}

	uint8_t data[2];
	hts221_read_bytes(HTS221_REG_H0_rH_x2, &data, 1);
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2201      	movs	r2, #1
 80002b4:	4619      	mov	r1, r3
 80002b6:	2030      	movs	r0, #48	; 0x30
 80002b8:	f7ff ffda 	bl	8000270 <hts221_read_bytes>
	hy0 = data[0]/2;
 80002bc:	793b      	ldrb	r3, [r7, #4]
 80002be:	085b      	lsrs	r3, r3, #1
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	ee07 3a90 	vmov	s15, r3
 80002c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002ca:	4b40      	ldr	r3, [pc, #256]	; (80003cc <hts221_init+0x138>)
 80002cc:	edc3 7a00 	vstr	s15, [r3]
	hts221_read_bytes(HTS221_REG_H1_rH_x2, &data, 1);
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2201      	movs	r2, #1
 80002d4:	4619      	mov	r1, r3
 80002d6:	2031      	movs	r0, #49	; 0x31
 80002d8:	f7ff ffca 	bl	8000270 <hts221_read_bytes>
	hy1 = data[0]/2;
 80002dc:	793b      	ldrb	r3, [r7, #4]
 80002de:	085b      	lsrs	r3, r3, #1
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	ee07 3a90 	vmov	s15, r3
 80002e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002ea:	4b39      	ldr	r3, [pc, #228]	; (80003d0 <hts221_init+0x13c>)
 80002ec:	edc3 7a00 	vstr	s15, [r3]


	hts221_read_bytes(HTS221_REG_H0_T0_OUT_L, &data, 2);
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2202      	movs	r2, #2
 80002f4:	4619      	mov	r1, r3
 80002f6:	2036      	movs	r0, #54	; 0x36
 80002f8:	f7ff ffba 	bl	8000270 <hts221_read_bytes>
	hx0 = data[1] | data[0] << 8;
 80002fc:	797b      	ldrb	r3, [r7, #5]
 80002fe:	461a      	mov	r2, r3
 8000300:	793b      	ldrb	r3, [r7, #4]
 8000302:	021b      	lsls	r3, r3, #8
 8000304:	4313      	orrs	r3, r2
 8000306:	ee07 3a90 	vmov	s15, r3
 800030a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800030e:	4b31      	ldr	r3, [pc, #196]	; (80003d4 <hts221_init+0x140>)
 8000310:	edc3 7a00 	vstr	s15, [r3]
	hts221_read_bytes(HTS221_REG_H1_T0_OUT_L, &data, 2);
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	2202      	movs	r2, #2
 8000318:	4619      	mov	r1, r3
 800031a:	203a      	movs	r0, #58	; 0x3a
 800031c:	f7ff ffa8 	bl	8000270 <hts221_read_bytes>
	hx1 = data[1] | data[0] << 8;
 8000320:	797b      	ldrb	r3, [r7, #5]
 8000322:	461a      	mov	r2, r3
 8000324:	793b      	ldrb	r3, [r7, #4]
 8000326:	021b      	lsls	r3, r3, #8
 8000328:	4313      	orrs	r3, r2
 800032a:	ee07 3a90 	vmov	s15, r3
 800032e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <hts221_init+0x144>)
 8000334:	edc3 7a00 	vstr	s15, [r3]


	hts221_read_bytes(HTS221_REG_T0_degC_x8, &data, 1);
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2201      	movs	r2, #1
 800033c:	4619      	mov	r1, r3
 800033e:	2032      	movs	r0, #50	; 0x32
 8000340:	f7ff ff96 	bl	8000270 <hts221_read_bytes>
	ty0 = data[0]/8;
 8000344:	793b      	ldrb	r3, [r7, #4]
 8000346:	08db      	lsrs	r3, r3, #3
 8000348:	b2db      	uxtb	r3, r3
 800034a:	ee07 3a90 	vmov	s15, r3
 800034e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000352:	4b22      	ldr	r3, [pc, #136]	; (80003dc <hts221_init+0x148>)
 8000354:	edc3 7a00 	vstr	s15, [r3]
	hts221_read_bytes(HTS221_REG_T1_degC_x8, &data, 1);
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	2201      	movs	r2, #1
 800035c:	4619      	mov	r1, r3
 800035e:	2033      	movs	r0, #51	; 0x33
 8000360:	f7ff ff86 	bl	8000270 <hts221_read_bytes>
	ty1 = data[0]/8;
 8000364:	793b      	ldrb	r3, [r7, #4]
 8000366:	08db      	lsrs	r3, r3, #3
 8000368:	b2db      	uxtb	r3, r3
 800036a:	ee07 3a90 	vmov	s15, r3
 800036e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000372:	4b1b      	ldr	r3, [pc, #108]	; (80003e0 <hts221_init+0x14c>)
 8000374:	edc3 7a00 	vstr	s15, [r3]


	hts221_read_bytes(HTS221_REG_T0_OUT_L, &data, 2);
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2202      	movs	r2, #2
 800037c:	4619      	mov	r1, r3
 800037e:	203c      	movs	r0, #60	; 0x3c
 8000380:	f7ff ff76 	bl	8000270 <hts221_read_bytes>
	tx0 = data[1] | data[0] << 8;
 8000384:	797b      	ldrb	r3, [r7, #5]
 8000386:	461a      	mov	r2, r3
 8000388:	793b      	ldrb	r3, [r7, #4]
 800038a:	021b      	lsls	r3, r3, #8
 800038c:	4313      	orrs	r3, r2
 800038e:	ee07 3a90 	vmov	s15, r3
 8000392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000396:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <hts221_init+0x150>)
 8000398:	edc3 7a00 	vstr	s15, [r3]
	hts221_read_bytes(HTS221_REG_T1_OUT_L, &data, 2);
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	2202      	movs	r2, #2
 80003a0:	4619      	mov	r1, r3
 80003a2:	203e      	movs	r0, #62	; 0x3e
 80003a4:	f7ff ff64 	bl	8000270 <hts221_read_bytes>
	tx1 = data[1] | data[0] << 8;
 80003a8:	797b      	ldrb	r3, [r7, #5]
 80003aa:	461a      	mov	r2, r3
 80003ac:	793b      	ldrb	r3, [r7, #4]
 80003ae:	021b      	lsls	r3, r3, #8
 80003b0:	4313      	orrs	r3, r2
 80003b2:	ee07 3a90 	vmov	s15, r3
 80003b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <hts221_init+0x154>)
 80003bc:	edc3 7a00 	vstr	s15, [r3]


	return 1;
 80003c0:	2301      	movs	r3, #1

}
 80003c2:	4618      	mov	r0, r3
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000108 	.word	0x20000108
 80003d0:	2000010c 	.word	0x2000010c
 80003d4:	20000100 	.word	0x20000100
 80003d8:	20000104 	.word	0x20000104
 80003dc:	200000f8 	.word	0x200000f8
 80003e0:	200000fc 	.word	0x200000fc
 80003e4:	200000f0 	.word	0x200000f0
 80003e8:	200000f4 	.word	0x200000f4

080003ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db0b      	blt.n	8000416 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	f003 021f 	and.w	r2, r3, #31
 8000404:	4907      	ldr	r1, [pc, #28]	; (8000424 <__NVIC_EnableIRQ+0x38>)
 8000406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800040a:	095b      	lsrs	r3, r3, #5
 800040c:	2001      	movs	r0, #1
 800040e:	fa00 f202 	lsl.w	r2, r0, r2
 8000412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	e000e100 	.word	0xe000e100

08000428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	6039      	str	r1, [r7, #0]
 8000432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000438:	2b00      	cmp	r3, #0
 800043a:	db0a      	blt.n	8000452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800043c:	683b      	ldr	r3, [r7, #0]
 800043e:	b2da      	uxtb	r2, r3
 8000440:	490c      	ldr	r1, [pc, #48]	; (8000474 <__NVIC_SetPriority+0x4c>)
 8000442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000446:	0112      	lsls	r2, r2, #4
 8000448:	b2d2      	uxtb	r2, r2
 800044a:	440b      	add	r3, r1
 800044c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000450:	e00a      	b.n	8000468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	b2da      	uxtb	r2, r3
 8000456:	4908      	ldr	r1, [pc, #32]	; (8000478 <__NVIC_SetPriority+0x50>)
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	f003 030f 	and.w	r3, r3, #15
 800045e:	3b04      	subs	r3, #4
 8000460:	0112      	lsls	r2, r2, #4
 8000462:	b2d2      	uxtb	r2, r2
 8000464:	440b      	add	r3, r1
 8000466:	761a      	strb	r2, [r3, #24]
}
 8000468:	bf00      	nop
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr
 8000474:	e000e100 	.word	0xe000e100
 8000478:	e000ed00 	.word	0xe000ed00

0800047c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000486:	695a      	ldr	r2, [r3, #20]
 8000488:	4907      	ldr	r1, [pc, #28]	; (80004a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4313      	orrs	r3, r2
 800048e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000490:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000492:	695a      	ldr	r2, [r3, #20]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4013      	ands	r3, r2
 8000498:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800049a:	68fb      	ldr	r3, [r7, #12]
}
 800049c:	bf00      	nop
 800049e:	3714      	adds	r7, #20
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	40021000 	.word	0x40021000

080004ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80004b0:	2001      	movs	r0, #1
 80004b2:	f7ff ffe3 	bl	800047c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, 0);
 80004b6:	2100      	movs	r1, #0
 80004b8:	2010      	movs	r0, #16
 80004ba:	f7ff ffb5 	bl	8000428 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80004be:	2010      	movs	r0, #16
 80004c0:	f7ff ff94 	bl	80003ec <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, 0);
 80004c4:	2100      	movs	r1, #0
 80004c6:	2011      	movs	r0, #17
 80004c8:	f7ff ffae 	bl	8000428 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80004cc:	2011      	movs	r0, #17
 80004ce:	f7ff ff8d 	bl	80003ec <__NVIC_EnableIRQ>

}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
	...

080004d8 <LL_AHB1_GRP1_EnableClock>:
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004e2:	695a      	ldr	r2, [r3, #20]
 80004e4:	4907      	ldr	r1, [pc, #28]	; (8000504 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4313      	orrs	r3, r2
 80004ea:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004ee:	695a      	ldr	r2, [r3, #20]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4013      	ands	r3, r2
 80004f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004f6:	68fb      	ldr	r3, [r7, #12]
}
 80004f8:	bf00      	nop
 80004fa:	3714      	adds	r7, #20
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	40021000 	.word	0x40021000

08000508 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000508:	b480      	push	{r7}
 800050a:	b089      	sub	sp, #36	; 0x24
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	fa93 f3a3 	rbit	r3, r3
 8000522:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000524:	693b      	ldr	r3, [r7, #16]
 8000526:	fab3 f383 	clz	r3, r3
 800052a:	b2db      	uxtb	r3, r3
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	2103      	movs	r1, #3
 8000530:	fa01 f303 	lsl.w	r3, r1, r3
 8000534:	43db      	mvns	r3, r3
 8000536:	401a      	ands	r2, r3
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800053c:	69fb      	ldr	r3, [r7, #28]
 800053e:	fa93 f3a3 	rbit	r3, r3
 8000542:	61bb      	str	r3, [r7, #24]
  return result;
 8000544:	69bb      	ldr	r3, [r7, #24]
 8000546:	fab3 f383 	clz	r3, r3
 800054a:	b2db      	uxtb	r3, r3
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	6879      	ldr	r1, [r7, #4]
 8000550:	fa01 f303 	lsl.w	r3, r1, r3
 8000554:	431a      	orrs	r2, r3
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	601a      	str	r2, [r3, #0]
}
 800055a:	bf00      	nop
 800055c:	3724      	adds	r7, #36	; 0x24
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000566:	b480      	push	{r7}
 8000568:	b083      	sub	sp, #12
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
 800056e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	683a      	ldr	r2, [r7, #0]
 8000574:	619a      	str	r2, [r3, #24]
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000582:	b480      	push	{r7}
 8000584:	b083      	sub	sp, #12
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
 800058a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	683a      	ldr	r2, [r7, #0]
 8000590:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
	...

080005a0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */

  /* LED pin configuration */
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_3, LL_GPIO_MODE_OUTPUT);
 80005a6:	2201      	movs	r2, #1
 80005a8:	2108      	movs	r1, #8
 80005aa:	4817      	ldr	r0, [pc, #92]	; (8000608 <MX_GPIO_Init+0x68>)
 80005ac:	f7ff ffac 	bl	8000508 <LL_GPIO_SetPinMode>
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_3);
 80005b0:	2108      	movs	r1, #8
 80005b2:	4815      	ldr	r0, [pc, #84]	; (8000608 <MX_GPIO_Init+0x68>)
 80005b4:	f7ff ffd7 	bl	8000566 <LL_GPIO_SetOutputPin>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	463b      	mov	r3, r7
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]
 80005c6:	615a      	str	r2, [r3, #20]

    /* GPIO Ports Clock Enable */
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80005c8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80005cc:	f7ff ff84 	bl	80004d8 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80005d0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80005d4:	f7ff ff80 	bl	80004d8 <LL_AHB1_GRP1_EnableClock>

	/**/
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 80005d8:	2108      	movs	r1, #8
 80005da:	480b      	ldr	r0, [pc, #44]	; (8000608 <MX_GPIO_Init+0x68>)
 80005dc:	f7ff ffd1 	bl	8000582 <LL_GPIO_ResetOutputPin>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80005e0:	2308      	movs	r3, #8
 80005e2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005e4:	2301      	movs	r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005f0:	2300      	movs	r3, #0
 80005f2:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f4:	463b      	mov	r3, r7
 80005f6:	4619      	mov	r1, r3
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <MX_GPIO_Init+0x68>)
 80005fa:	f001 fd21 	bl	8002040 <LL_GPIO_Init>

}
 80005fe:	bf00      	nop
 8000600:	3718      	adds	r7, #24
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	48000400 	.word	0x48000400

0800060c <__NVIC_GetPriorityGrouping>:
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000610:	4b04      	ldr	r3, [pc, #16]	; (8000624 <__NVIC_GetPriorityGrouping+0x18>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	0a1b      	lsrs	r3, r3, #8
 8000616:	f003 0307 	and.w	r3, r3, #7
}
 800061a:	4618      	mov	r0, r3
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <__NVIC_EnableIRQ>:
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000636:	2b00      	cmp	r3, #0
 8000638:	db0b      	blt.n	8000652 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	f003 021f 	and.w	r2, r3, #31
 8000640:	4907      	ldr	r1, [pc, #28]	; (8000660 <__NVIC_EnableIRQ+0x38>)
 8000642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000646:	095b      	lsrs	r3, r3, #5
 8000648:	2001      	movs	r0, #1
 800064a:	fa00 f202 	lsl.w	r2, r0, r2
 800064e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000652:	bf00      	nop
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	e000e100 	.word	0xe000e100

08000664 <__NVIC_SetPriority>:
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	6039      	str	r1, [r7, #0]
 800066e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000674:	2b00      	cmp	r3, #0
 8000676:	db0a      	blt.n	800068e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	b2da      	uxtb	r2, r3
 800067c:	490c      	ldr	r1, [pc, #48]	; (80006b0 <__NVIC_SetPriority+0x4c>)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	0112      	lsls	r2, r2, #4
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	440b      	add	r3, r1
 8000688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800068c:	e00a      	b.n	80006a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4908      	ldr	r1, [pc, #32]	; (80006b4 <__NVIC_SetPriority+0x50>)
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	f003 030f 	and.w	r3, r3, #15
 800069a:	3b04      	subs	r3, #4
 800069c:	0112      	lsls	r2, r2, #4
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	440b      	add	r3, r1
 80006a2:	761a      	strb	r2, [r3, #24]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	e000e100 	.word	0xe000e100
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b089      	sub	sp, #36	; 0x24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f003 0307 	and.w	r3, r3, #7
 80006ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006cc:	69fb      	ldr	r3, [r7, #28]
 80006ce:	f1c3 0307 	rsb	r3, r3, #7
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	bf28      	it	cs
 80006d6:	2304      	movcs	r3, #4
 80006d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	3304      	adds	r3, #4
 80006de:	2b06      	cmp	r3, #6
 80006e0:	d902      	bls.n	80006e8 <NVIC_EncodePriority+0x30>
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	3b03      	subs	r3, #3
 80006e6:	e000      	b.n	80006ea <NVIC_EncodePriority+0x32>
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	f04f 32ff 	mov.w	r2, #4294967295
 80006f0:	69bb      	ldr	r3, [r7, #24]
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	43da      	mvns	r2, r3
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	401a      	ands	r2, r3
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000700:	f04f 31ff 	mov.w	r1, #4294967295
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	fa01 f303 	lsl.w	r3, r1, r3
 800070a:	43d9      	mvns	r1, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	4313      	orrs	r3, r2
         );
}
 8000712:	4618      	mov	r0, r3
 8000714:	3724      	adds	r7, #36	; 0x24
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 800071e:	b480      	push	{r7}
 8000720:	b083      	sub	sp, #12
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f043 0201 	orr.w	r2, r3, #1
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	601a      	str	r2, [r3, #0]
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 800073e:	b480      	push	{r7}
 8000740:	b083      	sub	sp, #12
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	601a      	str	r2, [r3, #0]
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	601a      	str	r2, [r3, #0]
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 800077e:	b480      	push	{r7}
 8000780:	b085      	sub	sp, #20
 8000782:	af00      	add	r7, sp, #0
 8000784:	60f8      	str	r0, [r7, #12]
 8000786:	60b9      	str	r1, [r7, #8]
 8000788:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	68db      	ldr	r3, [r3, #12]
 800078e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000792:	f023 0306 	bic.w	r3, r3, #6
 8000796:	68b9      	ldr	r1, [r7, #8]
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	430a      	orrs	r2, r1
 800079c:	431a      	orrs	r2, r3
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	60da      	str	r2, [r3, #12]
}
 80007a2:	bf00      	nop
 80007a4:	3714      	adds	r7, #20
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80007ae:	b480      	push	{r7}
 80007b0:	b083      	sub	sp, #12
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	68db      	ldr	r3, [r3, #12]
 80007ba:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	60da      	str	r2, [r3, #12]
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 80007ce:	b480      	push	{r7}
 80007d0:	b083      	sub	sp, #12
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f043 0204 	orr.w	r2, r3, #4
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	601a      	str	r2, [r3, #0]
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 80007ee:	b480      	push	{r7}
 80007f0:	b083      	sub	sp, #12
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f023 0204 	bic.w	r2, r3, #4
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	601a      	str	r2, [r3, #0]
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(const I2C_TypeDef *I2Cx)
{
 800080e:	b480      	push	{r7}
 8000810:	b083      	sub	sp, #12
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	2b02      	cmp	r3, #2
 8000820:	d101      	bne.n	8000826 <LL_I2C_IsActiveFlag_TXIS+0x18>
 8000822:	2301      	movs	r3, #1
 8000824:	e000      	b.n	8000828 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8000826:	2300      	movs	r3, #0
}
 8000828:	4618      	mov	r0, r3
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0304 	and.w	r3, r3, #4
 8000844:	2b04      	cmp	r3, #4
 8000846:	d101      	bne.n	800084c <LL_I2C_IsActiveFlag_RXNE+0x18>
 8000848:	2301      	movs	r3, #1
 800084a:	e000      	b.n	800084e <LL_I2C_IsActiveFlag_RXNE+0x1a>
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(const I2C_TypeDef *I2Cx)
{
 800085a:	b480      	push	{r7}
 800085c:	b083      	sub	sp, #12
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	f003 0320 	and.w	r3, r3, #32
 800086a:	2b20      	cmp	r3, #32
 800086c:	d101      	bne.n	8000872 <LL_I2C_IsActiveFlag_STOP+0x18>
 800086e:	2301      	movs	r3, #1
 8000870:	e000      	b.n	8000874 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8000872:	2300      	movs	r3, #0
}
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <LL_I2C_ClearFlag_NACK>:
  * @rmtoll ICR          NACKCF        LL_I2C_ClearFlag_NACK
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_NACK(I2C_TypeDef *I2Cx)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	69db      	ldr	r3, [r3, #28]
 800088c:	f043 0210 	orr.w	r2, r3, #16
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	61da      	str	r2, [r3, #28]
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	69db      	ldr	r3, [r3, #28]
 80008ac:	f043 0220 	orr.w	r2, r3, #32
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	61da      	str	r2, [r3, #28]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	605a      	str	r2, [r3, #4]
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
 80008ec:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	685a      	ldr	r2, [r3, #4]
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	0d5b      	lsrs	r3, r3, #21
 80008f6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <LL_I2C_HandleTransfer+0x48>)
 80008fc:	430b      	orrs	r3, r1
 80008fe:	43db      	mvns	r3, r3
 8000900:	401a      	ands	r2, r3
 8000902:	68b9      	ldr	r1, [r7, #8]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4319      	orrs	r1, r3
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	041b      	lsls	r3, r3, #16
 800090c:	4319      	orrs	r1, r3
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	4319      	orrs	r1, r3
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	430b      	orrs	r3, r1
 8000916:	431a      	orrs	r2, r3
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 800091c:	bf00      	nop
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	03ff7bff 	.word	0x03ff7bff

0800092c <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000938:	b2db      	uxtb	r3, r3
}
 800093a:	4618      	mov	r0, r3
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
 800094e:	460b      	mov	r3, r1
 8000950:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8000952:	78fa      	ldrb	r2, [r7, #3]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <LL_AHB1_GRP1_EnableClock>:
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800096e:	695a      	ldr	r2, [r3, #20]
 8000970:	4907      	ldr	r1, [pc, #28]	; (8000990 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4313      	orrs	r3, r2
 8000976:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800097a:	695a      	ldr	r2, [r3, #20]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4013      	ands	r3, r2
 8000980:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000982:	68fb      	ldr	r3, [r7, #12]
}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	40021000 	.word	0x40021000

08000994 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800099e:	69da      	ldr	r2, [r3, #28]
 80009a0:	4907      	ldr	r1, [pc, #28]	; (80009c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80009aa:	69da      	ldr	r2, [r3, #28]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4013      	ands	r3, r2
 80009b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009b2:	68fb      	ldr	r3, [r7, #12]
}
 80009b4:	bf00      	nop
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	40021000 	.word	0x40021000

080009c4 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08e      	sub	sp, #56	; 0x38
 80009c8:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]
 80009da:	615a      	str	r2, [r3, #20]
 80009dc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
 80009ec:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80009ee:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80009f2:	f7ff ffb7 	bl	8000964 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80009f6:	23c0      	movs	r3, #192	; 0xc0
 80009f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80009fa:	2302      	movs	r3, #2
 80009fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000a02:	2301      	movs	r3, #1
 8000a04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	4619      	mov	r1, r3
 8000a12:	4821      	ldr	r0, [pc, #132]	; (8000a98 <MX_I2C1_Init+0xd4>)
 8000a14:	f001 fb14 	bl	8002040 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000a18:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000a1c:	f7ff ffba 	bl	8000994 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000a20:	f7ff fdf4 	bl	800060c <__NVIC_GetPriorityGrouping>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fe44 	bl	80006b8 <NVIC_EncodePriority>
 8000a30:	4603      	mov	r3, r0
 8000a32:	4619      	mov	r1, r3
 8000a34:	201f      	movs	r0, #31
 8000a36:	f7ff fe15 	bl	8000664 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a3a:	201f      	movs	r0, #31
 8000a3c:	f7ff fdf4 	bl	8000628 <__NVIC_EnableIRQ>

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8000a40:	4816      	ldr	r0, [pc, #88]	; (8000a9c <MX_I2C1_Init+0xd8>)
 8000a42:	f7ff ff3d 	bl	80008c0 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8000a46:	4815      	ldr	r0, [pc, #84]	; (8000a9c <MX_I2C1_Init+0xd8>)
 8000a48:	f7ff feb1 	bl	80007ae <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8000a4c:	4813      	ldr	r0, [pc, #76]	; (8000a9c <MX_I2C1_Init+0xd8>)
 8000a4e:	f7ff fe86 	bl	800075e <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000a52:	4812      	ldr	r0, [pc, #72]	; (8000a9c <MX_I2C1_Init+0xd8>)
 8000a54:	f7ff fe73 	bl	800073e <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8000a5c:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_I2C1_Init+0xdc>)
 8000a5e:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000a70:	2300      	movs	r3, #0
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4808      	ldr	r0, [pc, #32]	; (8000a9c <MX_I2C1_Init+0xd8>)
 8000a7c:	f001 fbf3 	bl	8002266 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2100      	movs	r1, #0
 8000a84:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_I2C1_Init+0xd8>)
 8000a86:	f7ff fe7a 	bl	800077e <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 8000a8a:	4804      	ldr	r0, [pc, #16]	; (8000a9c <MX_I2C1_Init+0xd8>)
 8000a8c:	f7ff fe47 	bl	800071e <LL_I2C_Enable>
}
 8000a90:	bf00      	nop
 8000a92:	3738      	adds	r7, #56	; 0x38
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	48000400 	.word	0x48000400
 8000a9c:	40005400 	.word	0x40005400
 8000aa0:	2000090e 	.word	0x2000090e

08000aa4 <read_multi_byte>:
//		i2c_rx_data = LL_I2C_ReceiveData8(I2C1);
//	}
//}

void read_multi_byte(uint8_t *data, uint8_t len, uint8_t slave_address, uint8_t register_address)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af02      	add	r7, sp, #8
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	4608      	mov	r0, r1
 8000aae:	4611      	mov	r1, r2
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	70fb      	strb	r3, [r7, #3]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	70bb      	strb	r3, [r7, #2]
 8000aba:	4613      	mov	r3, r2
 8000abc:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = data;
 8000abe:	4a27      	ldr	r2, [pc, #156]	; (8000b5c <read_multi_byte+0xb8>)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6013      	str	r3, [r2, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8000ac4:	4826      	ldr	r0, [pc, #152]	; (8000b60 <read_multi_byte+0xbc>)
 8000ac6:	f7ff fe82 	bl	80007ce <LL_I2C_EnableIT_RX>
		// Initialize communication
	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8000aca:	78b9      	ldrb	r1, [r7, #2]
 8000acc:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <read_multi_byte+0xc0>)
 8000ace:	9301      	str	r3, [sp, #4]
 8000ad0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	2200      	movs	r2, #0
 8000ada:	4821      	ldr	r0, [pc, #132]	; (8000b60 <read_multi_byte+0xbc>)
 8000adc:	f7ff ff00 	bl	80008e0 <LL_I2C_HandleTransfer>
	// Send register address
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8000ae0:	e00a      	b.n	8000af8 <read_multi_byte+0x54>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8000ae2:	481f      	ldr	r0, [pc, #124]	; (8000b60 <read_multi_byte+0xbc>)
 8000ae4:	f7ff fe93 	bl	800080e <LL_I2C_IsActiveFlag_TXIS>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d004      	beq.n	8000af8 <read_multi_byte+0x54>
		{
			LL_I2C_TransmitData8(I2C1, register_address);
 8000aee:	787b      	ldrb	r3, [r7, #1]
 8000af0:	4619      	mov	r1, r3
 8000af2:	481b      	ldr	r0, [pc, #108]	; (8000b60 <read_multi_byte+0xbc>)
 8000af4:	f7ff ff27 	bl	8000946 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8000af8:	4819      	ldr	r0, [pc, #100]	; (8000b60 <read_multi_byte+0xbc>)
 8000afa:	f7ff feae 	bl	800085a <LL_I2C_IsActiveFlag_STOP>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d0ee      	beq.n	8000ae2 <read_multi_byte+0x3e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8000b04:	4816      	ldr	r0, [pc, #88]	; (8000b60 <read_multi_byte+0xbc>)
 8000b06:	f7ff fecb 	bl	80008a0 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8000b0a:	bf00      	nop
 8000b0c:	4814      	ldr	r0, [pc, #80]	; (8000b60 <read_multi_byte+0xbc>)
 8000b0e:	f7ff fea4 	bl	800085a <LL_I2C_IsActiveFlag_STOP>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1f9      	bne.n	8000b0c <read_multi_byte+0x68>

	// Receive data from slave device
	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8000b18:	78b9      	ldrb	r1, [r7, #2]
 8000b1a:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <read_multi_byte+0xc4>)
 8000b1c:	9301      	str	r3, [sp, #4]
 8000b1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	2301      	movs	r3, #1
 8000b26:	2200      	movs	r2, #0
 8000b28:	480d      	ldr	r0, [pc, #52]	; (8000b60 <read_multi_byte+0xbc>)
 8000b2a:	f7ff fed9 	bl	80008e0 <LL_I2C_HandleTransfer>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8000b2e:	bf00      	nop
 8000b30:	480b      	ldr	r0, [pc, #44]	; (8000b60 <read_multi_byte+0xbc>)
 8000b32:	f7ff fe92 	bl	800085a <LL_I2C_IsActiveFlag_STOP>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d0f9      	beq.n	8000b30 <read_multi_byte+0x8c>

	//End of transfer
	LL_I2C_DisableIT_RX(I2C1);
 8000b3c:	4808      	ldr	r0, [pc, #32]	; (8000b60 <read_multi_byte+0xbc>)
 8000b3e:	f7ff fe56 	bl	80007ee <LL_I2C_DisableIT_RX>
	LL_I2C_ClearFlag_STOP(I2C1);
 8000b42:	4807      	ldr	r0, [pc, #28]	; (8000b60 <read_multi_byte+0xbc>)
 8000b44:	f7ff feac 	bl	80008a0 <LL_I2C_ClearFlag_STOP>
	LL_I2C_ClearFlag_NACK(I2C1);
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <read_multi_byte+0xbc>)
 8000b4a:	f7ff fe99 	bl	8000880 <LL_I2C_ClearFlag_NACK>
	ubReceiveIndex = 0;
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <read_multi_byte+0xc8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]


}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000110 	.word	0x20000110
 8000b60:	40005400 	.word	0x40005400
 8000b64:	80002000 	.word	0x80002000
 8000b68:	80002400 	.word	0x80002400
 8000b6c:	20000114 	.word	0x20000114

08000b70 <I2C_IRQHandler>:
		}
		LL_I2C_ClearFlag_STOP(I2C1);
}

void I2C_IRQHandler(void)
{
 8000b70:	b598      	push	{r3, r4, r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8000b74:	4810      	ldr	r0, [pc, #64]	; (8000bb8 <I2C_IRQHandler+0x48>)
 8000b76:	f7ff fe5d 	bl	8000834 <LL_I2C_IsActiveFlag_RXNE>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d019      	beq.n	8000bb4 <I2C_IRQHandler+0x44>
	{
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <I2C_IRQHandler+0x4c>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <I2C_IRQHandler+0x50>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	1c59      	adds	r1, r3, #1
 8000b8c:	b2c8      	uxtb	r0, r1
 8000b8e:	490c      	ldr	r1, [pc, #48]	; (8000bc0 <I2C_IRQHandler+0x50>)
 8000b90:	7008      	strb	r0, [r1, #0]
 8000b92:	18d4      	adds	r4, r2, r3
 8000b94:	4808      	ldr	r0, [pc, #32]	; (8000bb8 <I2C_IRQHandler+0x48>)
 8000b96:	f7ff fec9 	bl	800092c <LL_I2C_ReceiveData8>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex>19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <I2C_IRQHandler+0x50>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b13      	cmp	r3, #19
 8000ba6:	d903      	bls.n	8000bb0 <I2C_IRQHandler+0x40>
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <I2C_IRQHandler+0x50>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
	}
}
 8000bae:	e001      	b.n	8000bb4 <I2C_IRQHandler+0x44>
		(ubReceiveIndex>19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <I2C_IRQHandler+0x50>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	bd98      	pop	{r3, r4, r7, pc}
 8000bb8:	40005400 	.word	0x40005400
 8000bbc:	20000110 	.word	0x20000110
 8000bc0:	20000114 	.word	0x20000114

08000bc4 <__NVIC_SetPriorityGrouping>:
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf6:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	60d3      	str	r3, [r2, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <LL_RCC_HSI_Enable+0x1c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <LL_RCC_HSI_Enable+0x1c>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000

08000c2c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <LL_RCC_HSI_IsReady+0x20>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f003 0302 	and.w	r3, r3, #2
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	bf0c      	ite	eq
 8000c3c:	2301      	moveq	r3, #1
 8000c3e:	2300      	movne	r3, #0
 8000c40:	b2db      	uxtb	r3, r3
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	40021000 	.word	0x40021000

08000c50 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000c58:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	4904      	ldr	r1, [pc, #16]	; (8000c78 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000c66:	4313      	orrs	r3, r2
 8000c68:	600b      	str	r3, [r1, #0]
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40021000 	.word	0x40021000

08000c7c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <LL_RCC_SetSysClkSource+0x24>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f023 0203 	bic.w	r2, r3, #3
 8000c8c:	4904      	ldr	r1, [pc, #16]	; (8000ca0 <LL_RCC_SetSysClkSource+0x24>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	604b      	str	r3, [r1, #4]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <LL_RCC_GetSysClkSource+0x18>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f003 030c 	and.w	r3, r3, #12
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cd0:	4904      	ldr	r1, [pc, #16]	; (8000ce4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	604b      	str	r3, [r1, #4]
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000cf8:	4904      	ldr	r1, [pc, #16]	; (8000d0c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	604b      	str	r3, [r1, #4]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	40021000 	.word	0x40021000

08000d10 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000d20:	4904      	ldr	r1, [pc, #16]	; (8000d34 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	604b      	str	r3, [r1, #4]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	40021000 	.word	0x40021000

08000d38 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <LL_RCC_SetI2CClockSource+0x2c>)
 8000d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	0e1b      	lsrs	r3, r3, #24
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000d52:	4904      	ldr	r1, [pc, #16]	; (8000d64 <LL_RCC_SetI2CClockSource+0x2c>)
 8000d54:	4313      	orrs	r3, r2
 8000d56:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	40021000 	.word	0x40021000

08000d68 <LL_APB1_GRP1_EnableClock>:
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d72:	69da      	ldr	r2, [r3, #28]
 8000d74:	4907      	ldr	r1, [pc, #28]	; (8000d94 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d7e:	69da      	ldr	r2, [r3, #28]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4013      	ands	r3, r2
 8000d84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d86:	68fb      	ldr	r3, [r7, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	40021000 	.word	0x40021000

08000d98 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000da2:	699a      	ldr	r2, [r3, #24]
 8000da4:	4907      	ldr	r1, [pc, #28]	; (8000dc4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000dae:	699a      	ldr	r2, [r3, #24]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4013      	ands	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000db6:	68fb      	ldr	r3, [r7, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <LL_FLASH_SetLatency+0x24>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f023 0207 	bic.w	r2, r3, #7
 8000dd8:	4904      	ldr	r1, [pc, #16]	; (8000dec <LL_FLASH_SetLatency+0x24>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	600b      	str	r3, [r1, #0]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	40022000 	.word	0x40022000

08000df0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <LL_FLASH_GetLatency+0x18>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f003 0307 	and.w	r3, r3, #7
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40022000 	.word	0x40022000

08000e0c <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	d106      	bne.n	8000e28 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <LL_SYSTICK_SetClkSource+0x34>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <LL_SYSTICK_SetClkSource+0x34>)
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8000e26:	e005      	b.n	8000e34 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <LL_SYSTICK_SetClkSource+0x34>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <LL_SYSTICK_SetClkSource+0x34>)
 8000e2e:	f023 0304 	bic.w	r3, r3, #4
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000e010 	.word	0xe000e010

08000e44 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000e54:	68fa      	ldr	r2, [r7, #12]
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	041a      	lsls	r2, r3, #16
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	43d9      	mvns	r1, r3
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	400b      	ands	r3, r1
 8000e64:	431a      	orrs	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	619a      	str	r2, [r3, #24]
}
 8000e6a:	bf00      	nop
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <main>:
char messageToBeSent[128] = {'a','a','\0'};
char statusMessage[128];


int main(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f7ff ff8a 	bl	8000d98 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000e84:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000e88:	f7ff ff6e 	bl	8000d68 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	f7ff fe99 	bl	8000bc4 <__NVIC_SetPriorityGrouping>

  SystemClock_Config();
 8000e92:	f000 f835 	bl	8000f00 <SystemClock_Config>

  MX_GPIO_Init();
 8000e96:	f7ff fb83 	bl	80005a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e9a:	f7ff fd93 	bl	80009c4 <MX_I2C1_Init>
  MX_DMA_Init();
 8000e9e:	f7ff fb05 	bl	80004ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ea2:	f000 fe3b 	bl	8001b1c <MX_USART2_UART_Init>

  USART2_RegisterCallback(proccesDmaData);
 8000ea6:	4811      	ldr	r0, [pc, #68]	; (8000eec <main+0x74>)
 8000ea8:	f000 fe26 	bl	8001af8 <USART2_RegisterCallback>
  uint8_t hts_good = hts221_init();
 8000eac:	f7ff f9f2 	bl	8000294 <hts221_init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	71fb      	strb	r3, [r7, #7]
//	  if(i2c_master_read_byte(LSM6DSL_DEVICE_ADDRESS, LSM6DSL_WHO_AM_I_ADDRES) == LSM6DSL_WHO_AM_I_VALUE)
//	  {
//		  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_3);
//	  }

	  if(hts_good)
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d004      	beq.n	8000ec4 <main+0x4c>
	  {
		  USART2_PutBuffer("HTS good", strlen("HTS good"));
 8000eba:	2108      	movs	r1, #8
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <main+0x78>)
 8000ebe:	f000 ff0f 	bl	8001ce0 <USART2_PutBuffer>
 8000ec2:	e003      	b.n	8000ecc <main+0x54>
	  }
	  else
	  {
		  USART2_PutBuffer("HTS bad", strlen("HTS bad"));
 8000ec4:	2107      	movs	r1, #7
 8000ec6:	480b      	ldr	r0, [pc, #44]	; (8000ef4 <main+0x7c>)
 8000ec8:	f000 ff0a 	bl	8001ce0 <USART2_PutBuffer>
	  }

		  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_3);
 8000ecc:	2108      	movs	r1, #8
 8000ece:	480a      	ldr	r0, [pc, #40]	; (8000ef8 <main+0x80>)
 8000ed0:	f7ff ffb8 	bl	8000e44 <LL_GPIO_TogglePin>
		  USART2_PutBuffer((uint8_t*)messageToBeSent, sizeof(messageToBeSent));
 8000ed4:	2180      	movs	r1, #128	; 0x80
 8000ed6:	4809      	ldr	r0, [pc, #36]	; (8000efc <main+0x84>)
 8000ed8:	f000 ff02 	bl	8001ce0 <USART2_PutBuffer>

	  USART2_PutBuffer((uint8_t*)messageToBeSent, sizeof(messageToBeSent));
 8000edc:	2180      	movs	r1, #128	; 0x80
 8000ede:	4807      	ldr	r0, [pc, #28]	; (8000efc <main+0x84>)
 8000ee0:	f000 fefe 	bl	8001ce0 <USART2_PutBuffer>
	  LL_mDelay(100);
 8000ee4:	2064      	movs	r0, #100	; 0x64
 8000ee6:	f001 fca5 	bl	8002834 <LL_mDelay>
	  if(hts_good)
 8000eea:	e7e3      	b.n	8000eb4 <main+0x3c>
 8000eec:	08000f75 	.word	0x08000f75
 8000ef0:	08003200 	.word	0x08003200
 8000ef4:	0800320c 	.word	0x0800320c
 8000ef8:	48000400 	.word	0x48000400
 8000efc:	20000000 	.word	0x20000000

08000f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000f04:	2000      	movs	r0, #0
 8000f06:	f7ff ff5f 	bl	8000dc8 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8000f0a:	f7ff ff71 	bl	8000df0 <LL_FLASH_GetLatency>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <SystemClock_Config+0x18>
  {
  Error_Handler();
 8000f14:	f000 f8cc 	bl	80010b0 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8000f18:	f7ff fe78 	bl	8000c0c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000f1c:	bf00      	nop
 8000f1e:	f7ff fe85 	bl	8000c2c <LL_RCC_HSI_IsReady>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d1fa      	bne.n	8000f1e <SystemClock_Config+0x1e>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000f28:	2010      	movs	r0, #16
 8000f2a:	f7ff fe91 	bl	8000c50 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f7ff fec6 	bl	8000cc0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000f34:	2000      	movs	r0, #0
 8000f36:	f7ff fed7 	bl	8000ce8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f7ff fee8 	bl	8000d10 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000f40:	2000      	movs	r0, #0
 8000f42:	f7ff fe9b 	bl	8000c7c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000f46:	bf00      	nop
 8000f48:	f7ff feac 	bl	8000ca4 <LL_RCC_GetSysClkSource>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d1fa      	bne.n	8000f48 <SystemClock_Config+0x48>
  {

  }
  LL_Init1msTick(8000000);
 8000f52:	4807      	ldr	r0, [pc, #28]	; (8000f70 <SystemClock_Config+0x70>)
 8000f54:	f001 fc60 	bl	8002818 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8000f58:	2004      	movs	r0, #4
 8000f5a:	f7ff ff57 	bl	8000e0c <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8000f5e:	4804      	ldr	r0, [pc, #16]	; (8000f70 <SystemClock_Config+0x70>)
 8000f60:	f001 fc8e 	bl	8002880 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8000f64:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000f68:	f7ff fee6 	bl	8000d38 <LL_RCC_SetI2CClockSource>
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	007a1200 	.word	0x007a1200

08000f74 <proccesDmaData>:

void proccesDmaData(uint8_t sign)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af02      	add	r7, sp, #8
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
	if(transimissionEnabled)
 8000f7e:	4b45      	ldr	r3, [pc, #276]	; (8001094 <proccesDmaData+0x120>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d064      	beq.n	8001050 <proccesDmaData+0xdc>
		{
			if(sign >= 'a' && sign <= 'z')
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2b60      	cmp	r3, #96	; 0x60
 8000f8a:	d916      	bls.n	8000fba <proccesDmaData+0x46>
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	2b7a      	cmp	r3, #122	; 0x7a
 8000f90:	d813      	bhi.n	8000fba <proccesDmaData+0x46>
			{
				thisLetterCount.small_letter++;
 8000f92:	4b41      	ldr	r3, [pc, #260]	; (8001098 <proccesDmaData+0x124>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	3301      	adds	r3, #1
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4b3f      	ldr	r3, [pc, #252]	; (8001098 <proccesDmaData+0x124>)
 8000f9c:	701a      	strb	r2, [r3, #0]
				processedSignsCount++;
 8000f9e:	4b3f      	ldr	r3, [pc, #252]	; (800109c <proccesDmaData+0x128>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	4a3d      	ldr	r2, [pc, #244]	; (800109c <proccesDmaData+0x128>)
 8000fa6:	6013      	str	r3, [r2, #0]
				messageBuffer[messageBufferIndex++] = sign;
 8000fa8:	4b3d      	ldr	r3, [pc, #244]	; (80010a0 <proccesDmaData+0x12c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	1c5a      	adds	r2, r3, #1
 8000fae:	493c      	ldr	r1, [pc, #240]	; (80010a0 <proccesDmaData+0x12c>)
 8000fb0:	600a      	str	r2, [r1, #0]
 8000fb2:	493c      	ldr	r1, [pc, #240]	; (80010a4 <proccesDmaData+0x130>)
 8000fb4:	79fa      	ldrb	r2, [r7, #7]
 8000fb6:	54ca      	strb	r2, [r1, r3]
 8000fb8:	e04a      	b.n	8001050 <proccesDmaData+0xdc>
			}
			else if(sign >= 'A' && sign <= 'Z')
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	2b40      	cmp	r3, #64	; 0x40
 8000fbe:	d916      	bls.n	8000fee <proccesDmaData+0x7a>
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	2b5a      	cmp	r3, #90	; 0x5a
 8000fc4:	d813      	bhi.n	8000fee <proccesDmaData+0x7a>
			{
				thisLetterCount.capital_letter++;
 8000fc6:	4b34      	ldr	r3, [pc, #208]	; (8001098 <proccesDmaData+0x124>)
 8000fc8:	785b      	ldrb	r3, [r3, #1]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4b32      	ldr	r3, [pc, #200]	; (8001098 <proccesDmaData+0x124>)
 8000fd0:	705a      	strb	r2, [r3, #1]
				processedSignsCount++;
 8000fd2:	4b32      	ldr	r3, [pc, #200]	; (800109c <proccesDmaData+0x128>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	4a30      	ldr	r2, [pc, #192]	; (800109c <proccesDmaData+0x128>)
 8000fda:	6013      	str	r3, [r2, #0]
				messageBuffer[messageBufferIndex++] = sign;
 8000fdc:	4b30      	ldr	r3, [pc, #192]	; (80010a0 <proccesDmaData+0x12c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	1c5a      	adds	r2, r3, #1
 8000fe2:	492f      	ldr	r1, [pc, #188]	; (80010a0 <proccesDmaData+0x12c>)
 8000fe4:	600a      	str	r2, [r1, #0]
 8000fe6:	492f      	ldr	r1, [pc, #188]	; (80010a4 <proccesDmaData+0x130>)
 8000fe8:	79fa      	ldrb	r2, [r7, #7]
 8000fea:	54ca      	strb	r2, [r1, r3]
 8000fec:	e030      	b.n	8001050 <proccesDmaData+0xdc>
			}
			else if(sign == END_SIGN)
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2b24      	cmp	r3, #36	; 0x24
 8000ff2:	d120      	bne.n	8001036 <proccesDmaData+0xc2>
			{
				transimissionEnabled = 0;
 8000ff4:	4b27      	ldr	r3, [pc, #156]	; (8001094 <proccesDmaData+0x120>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
				processedSignsCount = 0;
 8000ffa:	4b28      	ldr	r3, [pc, #160]	; (800109c <proccesDmaData+0x128>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
				sprintf(messageToBeSent,"Valid string: %s, lower-case: %d, upper-case: %d \r\n",messageBuffer,thisLetterCount.small_letter,thisLetterCount.capital_letter);
 8001000:	4b25      	ldr	r3, [pc, #148]	; (8001098 <proccesDmaData+0x124>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b24      	ldr	r3, [pc, #144]	; (8001098 <proccesDmaData+0x124>)
 8001008:	785b      	ldrb	r3, [r3, #1]
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	4613      	mov	r3, r2
 800100e:	4a25      	ldr	r2, [pc, #148]	; (80010a4 <proccesDmaData+0x130>)
 8001010:	4925      	ldr	r1, [pc, #148]	; (80010a8 <proccesDmaData+0x134>)
 8001012:	4826      	ldr	r0, [pc, #152]	; (80010ac <proccesDmaData+0x138>)
 8001014:	f001 fc44 	bl	80028a0 <siprintf>
				thisLetterCount.small_letter = 0;
 8001018:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <proccesDmaData+0x124>)
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
				thisLetterCount.capital_letter = 0;
 800101e:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <proccesDmaData+0x124>)
 8001020:	2200      	movs	r2, #0
 8001022:	705a      	strb	r2, [r3, #1]
				memset(messageBuffer, 0, MAX_MSG_LEN);
 8001024:	2223      	movs	r2, #35	; 0x23
 8001026:	2100      	movs	r1, #0
 8001028:	481e      	ldr	r0, [pc, #120]	; (80010a4 <proccesDmaData+0x130>)
 800102a:	f001 fc59 	bl	80028e0 <memset>
				messageBufferIndex = 0;
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <proccesDmaData+0x12c>)
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	e00c      	b.n	8001050 <proccesDmaData+0xdc>
			}
			else
			{
				processedSignsCount++;
 8001036:	4b19      	ldr	r3, [pc, #100]	; (800109c <proccesDmaData+0x128>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	3301      	adds	r3, #1
 800103c:	4a17      	ldr	r2, [pc, #92]	; (800109c <proccesDmaData+0x128>)
 800103e:	6013      	str	r3, [r2, #0]
				messageBuffer[messageBufferIndex++] = sign;
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <proccesDmaData+0x12c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	4916      	ldr	r1, [pc, #88]	; (80010a0 <proccesDmaData+0x12c>)
 8001048:	600a      	str	r2, [r1, #0]
 800104a:	4916      	ldr	r1, [pc, #88]	; (80010a4 <proccesDmaData+0x130>)
 800104c:	79fa      	ldrb	r2, [r7, #7]
 800104e:	54ca      	strb	r2, [r1, r3]
			}
		}
		if(processedSignsCount > MAX_MSG_LEN)
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <proccesDmaData+0x128>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b23      	cmp	r3, #35	; 0x23
 8001056:	dd13      	ble.n	8001080 <proccesDmaData+0x10c>
		{
			transimissionEnabled = 0;
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <proccesDmaData+0x120>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
			processedSignsCount = 0;
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <proccesDmaData+0x128>)
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
			thisLetterCount.small_letter = 0;
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <proccesDmaData+0x124>)
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
			thisLetterCount.capital_letter = 0;
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <proccesDmaData+0x124>)
 800106c:	2200      	movs	r2, #0
 800106e:	705a      	strb	r2, [r3, #1]
			memset(messageBuffer, 0, MAX_MSG_LEN);
 8001070:	2223      	movs	r2, #35	; 0x23
 8001072:	2100      	movs	r1, #0
 8001074:	480b      	ldr	r0, [pc, #44]	; (80010a4 <proccesDmaData+0x130>)
 8001076:	f001 fc33 	bl	80028e0 <memset>
			messageBufferIndex = 0;
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <proccesDmaData+0x12c>)
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
		}
		if(sign == START_SIGN)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	2b23      	cmp	r3, #35	; 0x23
 8001084:	d102      	bne.n	800108c <proccesDmaData+0x118>
		{
			transimissionEnabled = 1;
 8001086:	4b03      	ldr	r3, [pc, #12]	; (8001094 <proccesDmaData+0x120>)
 8001088:	2201      	movs	r2, #1
 800108a:	701a      	strb	r2, [r3, #0]
		}
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	2000011c 	.word	0x2000011c
 8001098:	20000148 	.word	0x20000148
 800109c:	20000118 	.word	0x20000118
 80010a0:	20000144 	.word	0x20000144
 80010a4:	20000120 	.word	0x20000120
 80010a8:	08003214 	.word	0x08003214
 80010ac:	20000000 	.word	0x20000000

080010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3b01      	subs	r3, #1
 80010ce:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <LL_DMA_DisableChannel+0x3c>)
 80010d0:	5cd3      	ldrb	r3, [r2, r3]
 80010d2:	461a      	mov	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4413      	add	r3, r2
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	3a01      	subs	r2, #1
 80010de:	4907      	ldr	r1, [pc, #28]	; (80010fc <LL_DMA_DisableChannel+0x3c>)
 80010e0:	5c8a      	ldrb	r2, [r1, r2]
 80010e2:	4611      	mov	r1, r2
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	440a      	add	r2, r1
 80010e8:	f023 0301 	bic.w	r3, r3, #1
 80010ec:	6013      	str	r3, [r2, #0]
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	08003248 	.word	0x08003248

08001100 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001110:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001114:	bf0c      	ite	eq
 8001116:	2301      	moveq	r3, #1
 8001118:	2300      	movne	r3, #0
 800111a:	b2db      	uxtb	r3, r3
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001138:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800113c:	bf0c      	ite	eq
 800113e:	2301      	moveq	r3, #1
 8001140:	2300      	movne	r3, #0
 8001142:	b2db      	uxtb	r3, r3
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001164:	bf0c      	ite	eq
 8001166:	2301      	moveq	r3, #1
 8001168:	2300      	movne	r3, #0
 800116a:	b2db      	uxtb	r3, r3
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001186:	605a      	str	r2, [r3, #4]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011a2:	605a      	str	r2, [r3, #4]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011be:	605a      	str	r2, [r3, #4]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69db      	ldr	r3, [r3, #28]
 80011d8:	f003 0310 	and.w	r3, r3, #16
 80011dc:	2b10      	cmp	r3, #16
 80011de:	d101      	bne.n	80011e4 <LL_USART_IsActiveFlag_IDLE+0x18>
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <LL_USART_IsActiveFlag_IDLE+0x1a>
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001202:	2b40      	cmp	r3, #64	; 0x40
 8001204:	d101      	bne.n	800120a <LL_USART_IsActiveFlag_TC+0x18>
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <LL_USART_IsActiveFlag_TC+0x1a>
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2210      	movs	r2, #16
 8001224:	621a      	str	r2, [r3, #32]
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <HardFault_Handler+0x4>

08001246 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <MemManage_Handler+0x4>

0800124c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <BusFault_Handler+0x4>

08001252 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <UsageFault_Handler+0x4>

08001258 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	I2C_IRQHandler();
 8001294:	f7ff fc6c 	bl	8000b70 <I2C_IRQHandler>
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 80012a0:	480c      	ldr	r0, [pc, #48]	; (80012d4 <DMA1_Channel6_IRQHandler+0x38>)
 80012a2:	f7ff ff2d 	bl	8001100 <LL_DMA_IsActiveFlag_TC6>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d105      	bne.n	80012b8 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 80012ac:	f000 fd38 	bl	8001d20 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 80012b0:	4808      	ldr	r0, [pc, #32]	; (80012d4 <DMA1_Channel6_IRQHandler+0x38>)
 80012b2:	f7ff ff61 	bl	8001178 <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 80012b6:	e00a      	b.n	80012ce <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 80012b8:	4806      	ldr	r0, [pc, #24]	; (80012d4 <DMA1_Channel6_IRQHandler+0x38>)
 80012ba:	f7ff ff49 	bl	8001150 <LL_DMA_IsActiveFlag_HT6>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d104      	bne.n	80012ce <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 80012c4:	f000 fd2c 	bl	8001d20 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 80012c8:	4802      	ldr	r0, [pc, #8]	; (80012d4 <DMA1_Channel6_IRQHandler+0x38>)
 80012ca:	f7ff ff71 	bl	80011b0 <LL_DMA_ClearFlag_HT6>
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40020000 	.word	0x40020000

080012d8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 80012dc:	480a      	ldr	r0, [pc, #40]	; (8001308 <DMA1_Channel7_IRQHandler+0x30>)
 80012de:	f7ff ff23 	bl	8001128 <LL_DMA_IsActiveFlag_TC7>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d10d      	bne.n	8001304 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 80012e8:	4807      	ldr	r0, [pc, #28]	; (8001308 <DMA1_Channel7_IRQHandler+0x30>)
 80012ea:	f7ff ff53 	bl	8001194 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 80012ee:	bf00      	nop
 80012f0:	4806      	ldr	r0, [pc, #24]	; (800130c <DMA1_Channel7_IRQHandler+0x34>)
 80012f2:	f7ff ff7e 	bl	80011f2 <LL_USART_IsActiveFlag_TC>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0f9      	beq.n	80012f0 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 80012fc:	2107      	movs	r1, #7
 80012fe:	4802      	ldr	r0, [pc, #8]	; (8001308 <DMA1_Channel7_IRQHandler+0x30>)
 8001300:	f7ff fede 	bl	80010c0 <LL_DMA_DisableChannel>
	}
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40020000 	.word	0x40020000
 800130c:	40004400 	.word	0x40004400

08001310 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8001314:	4806      	ldr	r0, [pc, #24]	; (8001330 <USART2_IRQHandler+0x20>)
 8001316:	f7ff ff59 	bl	80011cc <LL_USART_IsActiveFlag_IDLE>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d004      	beq.n	800132a <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8001320:	f000 fcfe 	bl	8001d20 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8001324:	4802      	ldr	r0, [pc, #8]	; (8001330 <USART2_IRQHandler+0x20>)
 8001326:	f7ff ff77 	bl	8001218 <LL_USART_ClearFlag_IDLE>
	}
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40004400 	.word	0x40004400

08001334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800133c:	4a14      	ldr	r2, [pc, #80]	; (8001390 <_sbrk+0x5c>)
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <_sbrk+0x60>)
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d102      	bne.n	8001356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <_sbrk+0x64>)
 8001352:	4a12      	ldr	r2, [pc, #72]	; (800139c <_sbrk+0x68>)
 8001354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	429a      	cmp	r2, r3
 8001362:	d207      	bcs.n	8001374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001364:	f001 fac4 	bl	80028f0 <__errno>
 8001368:	4603      	mov	r3, r0
 800136a:	220c      	movs	r2, #12
 800136c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	e009      	b.n	8001388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <_sbrk+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <_sbrk+0x64>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	4a05      	ldr	r2, [pc, #20]	; (8001398 <_sbrk+0x64>)
 8001384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001386:	68fb      	ldr	r3, [r7, #12]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20003000 	.word	0x20003000
 8001394:	00000400 	.word	0x00000400
 8001398:	2000014c 	.word	0x2000014c
 800139c:	20000320 	.word	0x20000320

080013a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <SystemInit+0x20>)
 80013a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013aa:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <SystemInit+0x20>)
 80013ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_EnableIRQ>:
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	db0b      	blt.n	80013ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	f003 021f 	and.w	r2, r3, #31
 80013dc:	4907      	ldr	r1, [pc, #28]	; (80013fc <__NVIC_EnableIRQ+0x38>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	095b      	lsrs	r3, r3, #5
 80013e4:	2001      	movs	r0, #1
 80013e6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000e100 	.word	0xe000e100

08001400 <__NVIC_SetPriority>:
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	2b00      	cmp	r3, #0
 8001412:	db0a      	blt.n	800142a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	b2da      	uxtb	r2, r3
 8001418:	490c      	ldr	r1, [pc, #48]	; (800144c <__NVIC_SetPriority+0x4c>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	0112      	lsls	r2, r2, #4
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	440b      	add	r3, r1
 8001424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001428:	e00a      	b.n	8001440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4908      	ldr	r1, [pc, #32]	; (8001450 <__NVIC_SetPriority+0x50>)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	3b04      	subs	r3, #4
 8001438:	0112      	lsls	r2, r2, #4
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	440b      	add	r3, r1
 800143e:	761a      	strb	r2, [r3, #24]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000e100 	.word	0xe000e100
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <LL_AHB1_GRP1_EnableClock>:
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800145e:	695a      	ldr	r2, [r3, #20]
 8001460:	4907      	ldr	r1, [pc, #28]	; (8001480 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4313      	orrs	r3, r2
 8001466:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800146a:	695a      	ldr	r2, [r3, #20]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4013      	ands	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001472:	68fb      	ldr	r3, [r7, #12]
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	40021000 	.word	0x40021000

08001484 <LL_APB1_GRP1_EnableClock>:
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800148e:	69da      	ldr	r2, [r3, #28]
 8001490:	4907      	ldr	r1, [pc, #28]	; (80014b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4313      	orrs	r3, r2
 8001496:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800149a:	69da      	ldr	r2, [r3, #28]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4013      	ands	r3, r2
 80014a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014a2:	68fb      	ldr	r3, [r7, #12]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	40021000 	.word	0x40021000

080014b4 <LL_DMA_EnableChannel>:
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	4a0b      	ldr	r2, [pc, #44]	; (80014f0 <LL_DMA_EnableChannel+0x3c>)
 80014c4:	5cd3      	ldrb	r3, [r2, r3]
 80014c6:	461a      	mov	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4413      	add	r3, r2
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	3a01      	subs	r2, #1
 80014d2:	4907      	ldr	r1, [pc, #28]	; (80014f0 <LL_DMA_EnableChannel+0x3c>)
 80014d4:	5c8a      	ldrb	r2, [r1, r2]
 80014d6:	4611      	mov	r1, r2
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	440a      	add	r2, r1
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6013      	str	r3, [r2, #0]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	08003268 	.word	0x08003268

080014f4 <LL_DMA_DisableChannel>:
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	3b01      	subs	r3, #1
 8001502:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <LL_DMA_DisableChannel+0x3c>)
 8001504:	5cd3      	ldrb	r3, [r2, r3]
 8001506:	461a      	mov	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4413      	add	r3, r2
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	3a01      	subs	r2, #1
 8001512:	4907      	ldr	r1, [pc, #28]	; (8001530 <LL_DMA_DisableChannel+0x3c>)
 8001514:	5c8a      	ldrb	r2, [r1, r2]
 8001516:	4611      	mov	r1, r2
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	440a      	add	r2, r1
 800151c:	f023 0301 	bic.w	r3, r3, #1
 8001520:	6013      	str	r3, [r2, #0]
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	08003268 	.word	0x08003268

08001534 <LL_DMA_SetDataTransferDirection>:
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	3b01      	subs	r3, #1
 8001544:	4a0d      	ldr	r2, [pc, #52]	; (800157c <LL_DMA_SetDataTransferDirection+0x48>)
 8001546:	5cd3      	ldrb	r3, [r2, r3]
 8001548:	461a      	mov	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4413      	add	r3, r2
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001554:	f023 0310 	bic.w	r3, r3, #16
 8001558:	68ba      	ldr	r2, [r7, #8]
 800155a:	3a01      	subs	r2, #1
 800155c:	4907      	ldr	r1, [pc, #28]	; (800157c <LL_DMA_SetDataTransferDirection+0x48>)
 800155e:	5c8a      	ldrb	r2, [r1, r2]
 8001560:	4611      	mov	r1, r2
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	440a      	add	r2, r1
 8001566:	4611      	mov	r1, r2
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	4313      	orrs	r3, r2
 800156c:	600b      	str	r3, [r1, #0]
}
 800156e:	bf00      	nop
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	08003268 	.word	0x08003268

08001580 <LL_DMA_GetDataTransferDirection>:
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	3b01      	subs	r3, #1
 800158e:	4a07      	ldr	r2, [pc, #28]	; (80015ac <LL_DMA_GetDataTransferDirection+0x2c>)
 8001590:	5cd3      	ldrb	r3, [r2, r3]
 8001592:	461a      	mov	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4413      	add	r3, r2
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	f244 0310 	movw	r3, #16400	; 0x4010
 800159e:	4013      	ands	r3, r2
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	08003268 	.word	0x08003268

080015b0 <LL_DMA_SetMode>:
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	3b01      	subs	r3, #1
 80015c0:	4a0c      	ldr	r2, [pc, #48]	; (80015f4 <LL_DMA_SetMode+0x44>)
 80015c2:	5cd3      	ldrb	r3, [r2, r3]
 80015c4:	461a      	mov	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4413      	add	r3, r2
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f023 0220 	bic.w	r2, r3, #32
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	4907      	ldr	r1, [pc, #28]	; (80015f4 <LL_DMA_SetMode+0x44>)
 80015d6:	5ccb      	ldrb	r3, [r1, r3]
 80015d8:	4619      	mov	r1, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	440b      	add	r3, r1
 80015de:	4619      	mov	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]
}
 80015e6:	bf00      	nop
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	08003268 	.word	0x08003268

080015f8 <LL_DMA_SetPeriphIncMode>:
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	3b01      	subs	r3, #1
 8001608:	4a0c      	ldr	r2, [pc, #48]	; (800163c <LL_DMA_SetPeriphIncMode+0x44>)
 800160a:	5cd3      	ldrb	r3, [r2, r3]
 800160c:	461a      	mov	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4413      	add	r3, r2
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	3b01      	subs	r3, #1
 800161c:	4907      	ldr	r1, [pc, #28]	; (800163c <LL_DMA_SetPeriphIncMode+0x44>)
 800161e:	5ccb      	ldrb	r3, [r1, r3]
 8001620:	4619      	mov	r1, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	440b      	add	r3, r1
 8001626:	4619      	mov	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4313      	orrs	r3, r2
 800162c:	600b      	str	r3, [r1, #0]
}
 800162e:	bf00      	nop
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	08003268 	.word	0x08003268

08001640 <LL_DMA_SetMemoryIncMode>:
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	3b01      	subs	r3, #1
 8001650:	4a0c      	ldr	r2, [pc, #48]	; (8001684 <LL_DMA_SetMemoryIncMode+0x44>)
 8001652:	5cd3      	ldrb	r3, [r2, r3]
 8001654:	461a      	mov	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4413      	add	r3, r2
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	3b01      	subs	r3, #1
 8001664:	4907      	ldr	r1, [pc, #28]	; (8001684 <LL_DMA_SetMemoryIncMode+0x44>)
 8001666:	5ccb      	ldrb	r3, [r1, r3]
 8001668:	4619      	mov	r1, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	440b      	add	r3, r1
 800166e:	4619      	mov	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4313      	orrs	r3, r2
 8001674:	600b      	str	r3, [r1, #0]
}
 8001676:	bf00      	nop
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	08003268 	.word	0x08003268

08001688 <LL_DMA_SetPeriphSize>:
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	3b01      	subs	r3, #1
 8001698:	4a0c      	ldr	r2, [pc, #48]	; (80016cc <LL_DMA_SetPeriphSize+0x44>)
 800169a:	5cd3      	ldrb	r3, [r2, r3]
 800169c:	461a      	mov	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4413      	add	r3, r2
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	4907      	ldr	r1, [pc, #28]	; (80016cc <LL_DMA_SetPeriphSize+0x44>)
 80016ae:	5ccb      	ldrb	r3, [r1, r3]
 80016b0:	4619      	mov	r1, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	440b      	add	r3, r1
 80016b6:	4619      	mov	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]
}
 80016be:	bf00      	nop
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	08003268 	.word	0x08003268

080016d0 <LL_DMA_SetMemorySize>:
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	3b01      	subs	r3, #1
 80016e0:	4a0c      	ldr	r2, [pc, #48]	; (8001714 <LL_DMA_SetMemorySize+0x44>)
 80016e2:	5cd3      	ldrb	r3, [r2, r3]
 80016e4:	461a      	mov	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4413      	add	r3, r2
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	4907      	ldr	r1, [pc, #28]	; (8001714 <LL_DMA_SetMemorySize+0x44>)
 80016f6:	5ccb      	ldrb	r3, [r1, r3]
 80016f8:	4619      	mov	r1, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	440b      	add	r3, r1
 80016fe:	4619      	mov	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4313      	orrs	r3, r2
 8001704:	600b      	str	r3, [r1, #0]
}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	08003268 	.word	0x08003268

08001718 <LL_DMA_SetChannelPriorityLevel>:
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	3b01      	subs	r3, #1
 8001728:	4a0c      	ldr	r2, [pc, #48]	; (800175c <LL_DMA_SetChannelPriorityLevel+0x44>)
 800172a:	5cd3      	ldrb	r3, [r2, r3]
 800172c:	461a      	mov	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4413      	add	r3, r2
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	3b01      	subs	r3, #1
 800173c:	4907      	ldr	r1, [pc, #28]	; (800175c <LL_DMA_SetChannelPriorityLevel+0x44>)
 800173e:	5ccb      	ldrb	r3, [r1, r3]
 8001740:	4619      	mov	r1, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	440b      	add	r3, r1
 8001746:	4619      	mov	r1, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4313      	orrs	r3, r2
 800174c:	600b      	str	r3, [r1, #0]
}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	08003268 	.word	0x08003268

08001760 <LL_DMA_SetDataLength>:
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	3b01      	subs	r3, #1
 8001770:	4a0c      	ldr	r2, [pc, #48]	; (80017a4 <LL_DMA_SetDataLength+0x44>)
 8001772:	5cd3      	ldrb	r3, [r2, r3]
 8001774:	461a      	mov	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4413      	add	r3, r2
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	0c1b      	lsrs	r3, r3, #16
 800177e:	041b      	lsls	r3, r3, #16
 8001780:	68ba      	ldr	r2, [r7, #8]
 8001782:	3a01      	subs	r2, #1
 8001784:	4907      	ldr	r1, [pc, #28]	; (80017a4 <LL_DMA_SetDataLength+0x44>)
 8001786:	5c8a      	ldrb	r2, [r1, r2]
 8001788:	4611      	mov	r1, r2
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	440a      	add	r2, r1
 800178e:	4611      	mov	r1, r2
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	4313      	orrs	r3, r2
 8001794:	604b      	str	r3, [r1, #4]
}
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	08003268 	.word	0x08003268

080017a8 <LL_DMA_GetDataLength>:
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	4a06      	ldr	r2, [pc, #24]	; (80017d0 <LL_DMA_GetDataLength+0x28>)
 80017b8:	5cd3      	ldrb	r3, [r2, r3]
 80017ba:	461a      	mov	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4413      	add	r3, r2
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	b29b      	uxth	r3, r3
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	08003268 	.word	0x08003268

080017d4 <LL_DMA_ConfigAddresses>:
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
 80017e0:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	2b10      	cmp	r3, #16
 80017e6:	d114      	bne.n	8001812 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	4a16      	ldr	r2, [pc, #88]	; (8001848 <LL_DMA_ConfigAddresses+0x74>)
 80017ee:	5cd3      	ldrb	r3, [r2, r3]
 80017f0:	461a      	mov	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4413      	add	r3, r2
 80017f6:	461a      	mov	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	3b01      	subs	r3, #1
 8001800:	4a11      	ldr	r2, [pc, #68]	; (8001848 <LL_DMA_ConfigAddresses+0x74>)
 8001802:	5cd3      	ldrb	r3, [r2, r3]
 8001804:	461a      	mov	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4413      	add	r3, r2
 800180a:	461a      	mov	r2, r3
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6093      	str	r3, [r2, #8]
}
 8001810:	e013      	b.n	800183a <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	3b01      	subs	r3, #1
 8001816:	4a0c      	ldr	r2, [pc, #48]	; (8001848 <LL_DMA_ConfigAddresses+0x74>)
 8001818:	5cd3      	ldrb	r3, [r2, r3]
 800181a:	461a      	mov	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4413      	add	r3, r2
 8001820:	461a      	mov	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	3b01      	subs	r3, #1
 800182a:	4a07      	ldr	r2, [pc, #28]	; (8001848 <LL_DMA_ConfigAddresses+0x74>)
 800182c:	5cd3      	ldrb	r3, [r2, r3]
 800182e:	461a      	mov	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	461a      	mov	r2, r3
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	60d3      	str	r3, [r2, #12]
}
 800183a:	bf00      	nop
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	08003268 	.word	0x08003268

0800184c <LL_DMA_SetMemoryAddress>:
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	3b01      	subs	r3, #1
 800185c:	4a06      	ldr	r2, [pc, #24]	; (8001878 <LL_DMA_SetMemoryAddress+0x2c>)
 800185e:	5cd3      	ldrb	r3, [r2, r3]
 8001860:	461a      	mov	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4413      	add	r3, r2
 8001866:	461a      	mov	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	60d3      	str	r3, [r2, #12]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	08003268 	.word	0x08003268

0800187c <LL_DMA_SetPeriphAddress>:
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	3b01      	subs	r3, #1
 800188c:	4a06      	ldr	r2, [pc, #24]	; (80018a8 <LL_DMA_SetPeriphAddress+0x2c>)
 800188e:	5cd3      	ldrb	r3, [r2, r3]
 8001890:	461a      	mov	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4413      	add	r3, r2
 8001896:	461a      	mov	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6093      	str	r3, [r2, #8]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	08003268 	.word	0x08003268

080018ac <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	4a0b      	ldr	r2, [pc, #44]	; (80018e8 <LL_DMA_EnableIT_TC+0x3c>)
 80018bc:	5cd3      	ldrb	r3, [r2, r3]
 80018be:	461a      	mov	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4413      	add	r3, r2
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	3a01      	subs	r2, #1
 80018ca:	4907      	ldr	r1, [pc, #28]	; (80018e8 <LL_DMA_EnableIT_TC+0x3c>)
 80018cc:	5c8a      	ldrb	r2, [r1, r2]
 80018ce:	4611      	mov	r1, r2
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	440a      	add	r2, r1
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	6013      	str	r3, [r2, #0]
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	08003268 	.word	0x08003268

080018ec <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	3b01      	subs	r3, #1
 80018fa:	4a0b      	ldr	r2, [pc, #44]	; (8001928 <LL_DMA_EnableIT_HT+0x3c>)
 80018fc:	5cd3      	ldrb	r3, [r2, r3]
 80018fe:	461a      	mov	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4413      	add	r3, r2
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	3a01      	subs	r2, #1
 800190a:	4907      	ldr	r1, [pc, #28]	; (8001928 <LL_DMA_EnableIT_HT+0x3c>)
 800190c:	5c8a      	ldrb	r2, [r1, r2]
 800190e:	4611      	mov	r1, r2
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	440a      	add	r2, r1
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	6013      	str	r3, [r2, #0]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	08003268 	.word	0x08003268

0800192c <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	3b01      	subs	r3, #1
 800193a:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <LL_DMA_EnableIT_TE+0x3c>)
 800193c:	5cd3      	ldrb	r3, [r2, r3]
 800193e:	461a      	mov	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4413      	add	r3, r2
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	3a01      	subs	r2, #1
 800194a:	4907      	ldr	r1, [pc, #28]	; (8001968 <LL_DMA_EnableIT_TE+0x3c>)
 800194c:	5c8a      	ldrb	r2, [r1, r2]
 800194e:	4611      	mov	r1, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	440a      	add	r2, r1
 8001954:	f043 0308 	orr.w	r3, r3, #8
 8001958:	6013      	str	r3, [r2, #0]
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	08003268 	.word	0x08003268

0800196c <LL_USART_Enable>:
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f043 0201 	orr.w	r2, r3, #1
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	601a      	str	r2, [r3, #0]
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <LL_USART_ConfigAsyncMode>:
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	609a      	str	r2, [r3, #8]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	e853 3f00 	ldrex	r3, [r3]
 80019ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	f043 0310 	orr.w	r3, r3, #16
 80019d2:	61fb      	str	r3, [r7, #28]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69fa      	ldr	r2, [r7, #28]
 80019d8:	61ba      	str	r2, [r7, #24]
 80019da:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019dc:	6979      	ldr	r1, [r7, #20]
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	e841 2300 	strex	r3, r2, [r1]
 80019e4:	613b      	str	r3, [r7, #16]
   return(result);
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1e9      	bne.n	80019c0 <LL_USART_EnableIT_IDLE+0x8>
}
 80019ec:	bf00      	nop
 80019ee:	bf00      	nop
 80019f0:	3724      	adds	r7, #36	; 0x24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b089      	sub	sp, #36	; 0x24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3308      	adds	r3, #8
 8001a06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	e853 3f00 	ldrex	r3, [r3]
 8001a0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3308      	adds	r3, #8
 8001a1c:	69fa      	ldr	r2, [r7, #28]
 8001a1e:	61ba      	str	r2, [r7, #24]
 8001a20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a22:	6979      	ldr	r1, [r7, #20]
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	e841 2300 	strex	r3, r2, [r1]
 8001a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1e7      	bne.n	8001a02 <LL_USART_DisableIT_CTS+0x8>
}
 8001a32:	bf00      	nop
 8001a34:	bf00      	nop
 8001a36:	3724      	adds	r7, #36	; 0x24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	; 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3308      	adds	r3, #8
 8001a4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	e853 3f00 	ldrex	r3, [r3]
 8001a54:	60bb      	str	r3, [r7, #8]
   return(result);
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3308      	adds	r3, #8
 8001a62:	69fa      	ldr	r2, [r7, #28]
 8001a64:	61ba      	str	r2, [r7, #24]
 8001a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a68:	6979      	ldr	r1, [r7, #20]
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	e841 2300 	strex	r3, r2, [r1]
 8001a70:	613b      	str	r3, [r7, #16]
   return(result);
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1e7      	bne.n	8001a48 <LL_USART_EnableDMAReq_RX+0x8>
}
 8001a78:	bf00      	nop
 8001a7a:	bf00      	nop
 8001a7c:	3724      	adds	r7, #36	; 0x24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b089      	sub	sp, #36	; 0x24
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3308      	adds	r3, #8
 8001a92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	e853 3f00 	ldrex	r3, [r3]
 8001a9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aa2:	61fb      	str	r3, [r7, #28]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3308      	adds	r3, #8
 8001aa8:	69fa      	ldr	r2, [r7, #28]
 8001aaa:	61ba      	str	r2, [r7, #24]
 8001aac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001aae:	6979      	ldr	r1, [r7, #20]
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	e841 2300 	strex	r3, r2, [r1]
 8001ab6:	613b      	str	r3, [r7, #16]
   return(result);
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1e7      	bne.n	8001a8e <LL_USART_EnableDMAReq_TX+0x8>
}
 8001abe:	bf00      	nop
 8001ac0:	bf00      	nop
 8001ac2:	3724      	adds	r7, #36	; 0x24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d103      	bne.n	8001ae4 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3328      	adds	r3, #40	; 0x28
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	e002      	b.n	8001aea <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3324      	adds	r3, #36	; 0x24
 8001ae8:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8001aea:	68fb      	ldr	r3, [r7, #12]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <USART2_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(uint8_t data) = 0;

/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a03      	ldr	r2, [pc, #12]	; (8001b18 <USART2_RegisterCallback+0x20>)
 8001b0a:	6013      	str	r3, [r2, #0]
	}
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	200001d0 	.word	0x200001d0

08001b1c <MX_USART2_UART_Init>:
	// type global variables here


/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8001b1c:	b5b0      	push	{r4, r5, r7, lr}
 8001b1e:	b090      	sub	sp, #64	; 0x40
 8001b20:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001b22:	f107 031c 	add.w	r3, r7, #28
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	611a      	str	r2, [r3, #16]
 8001b32:	615a      	str	r2, [r3, #20]
 8001b34:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
 8001b44:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001b46:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001b4a:	f7ff fc9b 	bl	8001484 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001b4e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001b52:	f7ff fc7f 	bl	8001454 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8001b56:	f248 0304 	movw	r3, #32772	; 0x8004
 8001b5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001b60:	2303      	movs	r3, #3
 8001b62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001b6c:	2307      	movs	r3, #7
 8001b6e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	4619      	mov	r1, r3
 8001b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b78:	f000 fa62 	bl	8002040 <LL_GPIO_Init>
   * Rx memory buffer will be handled in normal mode, not circular!
   * You can use configuration from example program and modify it.
   * For more information about DMA registers, refer to reference manual.
   */

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2106      	movs	r1, #6
 8001b80:	4854      	ldr	r0, [pc, #336]	; (8001cd4 <MX_USART2_UART_Init+0x1b8>)
 8001b82:	f7ff fcd7 	bl	8001534 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8001b86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b8a:	2106      	movs	r1, #6
 8001b8c:	4851      	ldr	r0, [pc, #324]	; (8001cd4 <MX_USART2_UART_Init+0x1b8>)
 8001b8e:	f7ff fdc3 	bl	8001718 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2106      	movs	r1, #6
 8001b96:	484f      	ldr	r0, [pc, #316]	; (8001cd4 <MX_USART2_UART_Init+0x1b8>)
 8001b98:	f7ff fd0a 	bl	80015b0 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2106      	movs	r1, #6
 8001ba0:	484c      	ldr	r0, [pc, #304]	; (8001cd4 <MX_USART2_UART_Init+0x1b8>)
 8001ba2:	f7ff fd29 	bl	80015f8 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8001ba6:	2280      	movs	r2, #128	; 0x80
 8001ba8:	2106      	movs	r1, #6
 8001baa:	484a      	ldr	r0, [pc, #296]	; (8001cd4 <MX_USART2_UART_Init+0x1b8>)
 8001bac:	f7ff fd48 	bl	8001640 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2106      	movs	r1, #6
 8001bb4:	4847      	ldr	r0, [pc, #284]	; (8001cd4 <MX_USART2_UART_Init+0x1b8>)
 8001bb6:	f7ff fd67 	bl	8001688 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2106      	movs	r1, #6
 8001bbe:	4845      	ldr	r0, [pc, #276]	; (8001cd4 <MX_USART2_UART_Init+0x1b8>)
 8001bc0:	f7ff fd86 	bl	80016d0 <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	4844      	ldr	r0, [pc, #272]	; (8001cd8 <MX_USART2_UART_Init+0x1bc>)
 8001bc8:	f7ff ff80 	bl	8001acc <LL_USART_DMA_GetRegAddr>
 8001bcc:	4604      	mov	r4, r0
 8001bce:	4d43      	ldr	r5, [pc, #268]	; (8001cdc <MX_USART2_UART_Init+0x1c0>)
 8001bd0:	2106      	movs	r1, #6
 8001bd2:	4840      	ldr	r0, [pc, #256]	; (8001cd4 <MX_USART2_UART_Init+0x1b8>)
 8001bd4:	f7ff fcd4 	bl	8001580 <LL_DMA_GetDataTransferDirection>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	462b      	mov	r3, r5
 8001bde:	4622      	mov	r2, r4
 8001be0:	2106      	movs	r1, #6
 8001be2:	483c      	ldr	r0, [pc, #240]	; (8001cd4 <MX_USART2_UART_Init+0x1b8>)
 8001be4:	f7ff fdf6 	bl	80017d4 <LL_DMA_ConfigAddresses>
						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
							(uint32_t)bufferUSART2dma,
							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8001be8:	2280      	movs	r2, #128	; 0x80
 8001bea:	2106      	movs	r1, #6
 8001bec:	4839      	ldr	r0, [pc, #228]	; (8001cd4 <MX_USART2_UART_Init+0x1b8>)
 8001bee:	f7ff fdb7 	bl	8001760 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8001bf2:	2106      	movs	r1, #6
 8001bf4:	4837      	ldr	r0, [pc, #220]	; (8001cd4 <MX_USART2_UART_Init+0x1b8>)
 8001bf6:	f7ff fc5d 	bl	80014b4 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 8001bfa:	4837      	ldr	r0, [pc, #220]	; (8001cd8 <MX_USART2_UART_Init+0x1bc>)
 8001bfc:	f7ff ff20 	bl	8001a40 <LL_USART_EnableDMAReq_RX>

  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 8001c00:	2106      	movs	r1, #6
 8001c02:	4834      	ldr	r0, [pc, #208]	; (8001cd4 <MX_USART2_UART_Init+0x1b8>)
 8001c04:	f7ff fe52 	bl	80018ac <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 8001c08:	2106      	movs	r1, #6
 8001c0a:	4832      	ldr	r0, [pc, #200]	; (8001cd4 <MX_USART2_UART_Init+0x1b8>)
 8001c0c:	f7ff fe6e 	bl	80018ec <LL_DMA_EnableIT_HT>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001c10:	2210      	movs	r2, #16
 8001c12:	2107      	movs	r1, #7
 8001c14:	482f      	ldr	r0, [pc, #188]	; (8001cd4 <MX_USART2_UART_Init+0x1b8>)
 8001c16:	f7ff fc8d 	bl	8001534 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8001c1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c1e:	2107      	movs	r1, #7
 8001c20:	482c      	ldr	r0, [pc, #176]	; (8001cd4 <MX_USART2_UART_Init+0x1b8>)
 8001c22:	f7ff fd79 	bl	8001718 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2107      	movs	r1, #7
 8001c2a:	482a      	ldr	r0, [pc, #168]	; (8001cd4 <MX_USART2_UART_Init+0x1b8>)
 8001c2c:	f7ff fcc0 	bl	80015b0 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2107      	movs	r1, #7
 8001c34:	4827      	ldr	r0, [pc, #156]	; (8001cd4 <MX_USART2_UART_Init+0x1b8>)
 8001c36:	f7ff fcdf 	bl	80015f8 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8001c3a:	2280      	movs	r2, #128	; 0x80
 8001c3c:	2107      	movs	r1, #7
 8001c3e:	4825      	ldr	r0, [pc, #148]	; (8001cd4 <MX_USART2_UART_Init+0x1b8>)
 8001c40:	f7ff fcfe 	bl	8001640 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2107      	movs	r1, #7
 8001c48:	4822      	ldr	r0, [pc, #136]	; (8001cd4 <MX_USART2_UART_Init+0x1b8>)
 8001c4a:	f7ff fd1d 	bl	8001688 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2107      	movs	r1, #7
 8001c52:	4820      	ldr	r0, [pc, #128]	; (8001cd4 <MX_USART2_UART_Init+0x1b8>)
 8001c54:	f7ff fd3c 	bl	80016d0 <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8001c58:	2100      	movs	r1, #0
 8001c5a:	481f      	ldr	r0, [pc, #124]	; (8001cd8 <MX_USART2_UART_Init+0x1bc>)
 8001c5c:	f7ff ff36 	bl	8001acc <LL_USART_DMA_GetRegAddr>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461a      	mov	r2, r3
 8001c64:	2107      	movs	r1, #7
 8001c66:	481b      	ldr	r0, [pc, #108]	; (8001cd4 <MX_USART2_UART_Init+0x1b8>)
 8001c68:	f7ff fe08 	bl	800187c <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 8001c6c:	481a      	ldr	r0, [pc, #104]	; (8001cd8 <MX_USART2_UART_Init+0x1bc>)
 8001c6e:	f7ff ff0a 	bl	8001a86 <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8001c72:	2107      	movs	r1, #7
 8001c74:	4817      	ldr	r0, [pc, #92]	; (8001cd4 <MX_USART2_UART_Init+0x1b8>)
 8001c76:	f7ff fe59 	bl	800192c <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	2026      	movs	r0, #38	; 0x26
 8001c7e:	f7ff fbbf 	bl	8001400 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001c82:	2026      	movs	r0, #38	; 0x26
 8001c84:	f7ff fb9e 	bl	80013c4 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8001c88:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001c8c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001c9a:	230c      	movs	r3, #12
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001ca6:	f107 031c 	add.w	r3, r7, #28
 8001caa:	4619      	mov	r1, r3
 8001cac:	480a      	ldr	r0, [pc, #40]	; (8001cd8 <MX_USART2_UART_Init+0x1bc>)
 8001cae:	f000 fd2d 	bl	800270c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001cb2:	4809      	ldr	r0, [pc, #36]	; (8001cd8 <MX_USART2_UART_Init+0x1bc>)
 8001cb4:	f7ff fe6a 	bl	800198c <LL_USART_ConfigAsyncMode>
  LL_USART_DisableIT_CTS(USART2);
 8001cb8:	4807      	ldr	r0, [pc, #28]	; (8001cd8 <MX_USART2_UART_Init+0x1bc>)
 8001cba:	f7ff fe9e 	bl	80019fa <LL_USART_DisableIT_CTS>

  /* Enable USART2 peripheral and interrupts*/
  LL_USART_EnableIT_IDLE(USART2);
 8001cbe:	4806      	ldr	r0, [pc, #24]	; (8001cd8 <MX_USART2_UART_Init+0x1bc>)
 8001cc0:	f7ff fe7a 	bl	80019b8 <LL_USART_EnableIT_IDLE>
  LL_USART_Enable(USART2);
 8001cc4:	4804      	ldr	r0, [pc, #16]	; (8001cd8 <MX_USART2_UART_Init+0x1bc>)
 8001cc6:	f7ff fe51 	bl	800196c <LL_USART_Enable>
  	  //type your code here:
}
 8001cca:	bf00      	nop
 8001ccc:	3738      	adds	r7, #56	; 0x38
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40020000 	.word	0x40020000
 8001cd8:	40004400 	.word	0x40004400
 8001cdc:	20000150 	.word	0x20000150

08001ce0 <USART2_PutBuffer>:

// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2107      	movs	r1, #7
 8001cf2:	480a      	ldr	r0, [pc, #40]	; (8001d1c <USART2_PutBuffer+0x3c>)
 8001cf4:	f7ff fdaa 	bl	800184c <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	2107      	movs	r1, #7
 8001cfe:	4807      	ldr	r0, [pc, #28]	; (8001d1c <USART2_PutBuffer+0x3c>)
 8001d00:	f7ff fd2e 	bl	8001760 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8001d04:	2107      	movs	r1, #7
 8001d06:	4805      	ldr	r0, [pc, #20]	; (8001d1c <USART2_PutBuffer+0x3c>)
 8001d08:	f7ff fdd0 	bl	80018ac <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001d0c:	2107      	movs	r1, #7
 8001d0e:	4803      	ldr	r0, [pc, #12]	; (8001d1c <USART2_PutBuffer+0x3c>)
 8001d10:	f7ff fbd0 	bl	80014b4 <LL_DMA_EnableChannel>
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40020000 	.word	0x40020000

08001d20 <USART2_CheckDmaReception>:
 */

uint16_t buf_read_pos = 0;

void USART2_CheckDmaReception(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 8001d26:	2106      	movs	r1, #6
 8001d28:	482a      	ldr	r0, [pc, #168]	; (8001dd4 <USART2_CheckDmaReception+0xb4>)
 8001d2a:	f7ff fd3d 	bl	80017a8 <LL_DMA_GetDataLength>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001d36:	80fb      	strh	r3, [r7, #6]

	if (pos >= DMA_USART2_BUFFER_SIZE)
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	2b7f      	cmp	r3, #127	; 0x7f
 8001d3c:	d941      	bls.n	8001dc2 <USART2_CheckDmaReception+0xa2>
	{
		// set the DMA address pointer back to the beginning of the buffer
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 8001d3e:	2106      	movs	r1, #6
 8001d40:	4824      	ldr	r0, [pc, #144]	; (8001dd4 <USART2_CheckDmaReception+0xb4>)
 8001d42:	f7ff fbd7 	bl	80014f4 <LL_DMA_DisableChannel>
		LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_6, (uint32_t)bufferUSART2dma);
 8001d46:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <USART2_CheckDmaReception+0xb8>)
 8001d48:	461a      	mov	r2, r3
 8001d4a:	2106      	movs	r1, #6
 8001d4c:	4821      	ldr	r0, [pc, #132]	; (8001dd4 <USART2_CheckDmaReception+0xb4>)
 8001d4e:	f7ff fd7d 	bl	800184c <LL_DMA_SetMemoryAddress>
		LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8001d52:	2280      	movs	r2, #128	; 0x80
 8001d54:	2106      	movs	r1, #6
 8001d56:	481f      	ldr	r0, [pc, #124]	; (8001dd4 <USART2_CheckDmaReception+0xb4>)
 8001d58:	f7ff fd02 	bl	8001760 <LL_DMA_SetDataLength>
		LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8001d5c:	2106      	movs	r1, #6
 8001d5e:	481d      	ldr	r0, [pc, #116]	; (8001dd4 <USART2_CheckDmaReception+0xb4>)
 8001d60:	f7ff fba8 	bl	80014b4 <LL_DMA_EnableChannel>

		// process all data until the end of the buffer
		while(buf_read_pos < DMA_USART2_BUFFER_SIZE)
 8001d64:	e012      	b.n	8001d8c <USART2_CheckDmaReception+0x6c>
		{
			if(USART2_ProcessData != 0)
 8001d66:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <USART2_CheckDmaReception+0xbc>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d008      	beq.n	8001d80 <USART2_CheckDmaReception+0x60>
			{
				USART2_ProcessData(bufferUSART2dma[buf_read_pos]);
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <USART2_CheckDmaReception+0xbc>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a1b      	ldr	r2, [pc, #108]	; (8001de0 <USART2_CheckDmaReception+0xc0>)
 8001d74:	8812      	ldrh	r2, [r2, #0]
 8001d76:	4611      	mov	r1, r2
 8001d78:	4a17      	ldr	r2, [pc, #92]	; (8001dd8 <USART2_CheckDmaReception+0xb8>)
 8001d7a:	5c52      	ldrb	r2, [r2, r1]
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4798      	blx	r3
			}
			buf_read_pos++;
 8001d80:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <USART2_CheckDmaReception+0xc0>)
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	3301      	adds	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <USART2_CheckDmaReception+0xc0>)
 8001d8a:	801a      	strh	r2, [r3, #0]
		while(buf_read_pos < DMA_USART2_BUFFER_SIZE)
 8001d8c:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <USART2_CheckDmaReception+0xc0>)
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	2b7f      	cmp	r3, #127	; 0x7f
 8001d92:	d9e8      	bls.n	8001d66 <USART2_CheckDmaReception+0x46>
		}

		buf_read_pos = 0;
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <USART2_CheckDmaReception+0xc0>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	801a      	strh	r2, [r3, #0]
				USART2_ProcessData(bufferUSART2dma[buf_read_pos]);
			}
			buf_read_pos++;
		}
	}
}
 8001d9a:	e017      	b.n	8001dcc <USART2_CheckDmaReception+0xac>
			if(USART2_ProcessData != 0)
 8001d9c:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <USART2_CheckDmaReception+0xbc>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d008      	beq.n	8001db6 <USART2_CheckDmaReception+0x96>
				USART2_ProcessData(bufferUSART2dma[buf_read_pos]);
 8001da4:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <USART2_CheckDmaReception+0xbc>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0d      	ldr	r2, [pc, #52]	; (8001de0 <USART2_CheckDmaReception+0xc0>)
 8001daa:	8812      	ldrh	r2, [r2, #0]
 8001dac:	4611      	mov	r1, r2
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <USART2_CheckDmaReception+0xb8>)
 8001db0:	5c52      	ldrb	r2, [r2, r1]
 8001db2:	4610      	mov	r0, r2
 8001db4:	4798      	blx	r3
			buf_read_pos++;
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <USART2_CheckDmaReception+0xc0>)
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <USART2_CheckDmaReception+0xc0>)
 8001dc0:	801a      	strh	r2, [r3, #0]
		while(buf_read_pos < pos)
 8001dc2:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <USART2_CheckDmaReception+0xc0>)
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	88fa      	ldrh	r2, [r7, #6]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d8e7      	bhi.n	8001d9c <USART2_CheckDmaReception+0x7c>
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40020000 	.word	0x40020000
 8001dd8:	20000150 	.word	0x20000150
 8001ddc:	200001d0 	.word	0x200001d0
 8001de0:	200001d4 	.word	0x200001d4

08001de4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001de4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e1c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001de8:	f7ff fada 	bl	80013a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dec:	480c      	ldr	r0, [pc, #48]	; (8001e20 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dee:	490d      	ldr	r1, [pc, #52]	; (8001e24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001df0:	4a0d      	ldr	r2, [pc, #52]	; (8001e28 <LoopForever+0xe>)
  movs r3, #0
 8001df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df4:	e002      	b.n	8001dfc <LoopCopyDataInit>

08001df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfa:	3304      	adds	r3, #4

08001dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e00:	d3f9      	bcc.n	8001df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e02:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e04:	4c0a      	ldr	r4, [pc, #40]	; (8001e30 <LoopForever+0x16>)
  movs r3, #0
 8001e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e08:	e001      	b.n	8001e0e <LoopFillZerobss>

08001e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e0c:	3204      	adds	r2, #4

08001e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e10:	d3fb      	bcc.n	8001e0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e12:	f000 fd73 	bl	80028fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e16:	f7ff f82f 	bl	8000e78 <main>

08001e1a <LoopForever>:

LoopForever:
    b LoopForever
 8001e1a:	e7fe      	b.n	8001e1a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e1c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e24:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8001e28:	080032ac 	.word	0x080032ac
  ldr r2, =_sbss
 8001e2c:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8001e30:	20000320 	.word	0x20000320

08001e34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e34:	e7fe      	b.n	8001e34 <ADC1_2_IRQHandler>

08001e36 <LL_GPIO_SetPinMode>:
{
 8001e36:	b480      	push	{r7}
 8001e38:	b089      	sub	sp, #36	; 0x24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	613b      	str	r3, [r7, #16]
  return result;
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	fab3 f383 	clz	r3, r3
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2103      	movs	r1, #3
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	401a      	ands	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	fa93 f3a3 	rbit	r3, r3
 8001e70:	61bb      	str	r3, [r7, #24]
  return result;
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	fab3 f383 	clz	r3, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e82:	431a      	orrs	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	601a      	str	r2, [r3, #0]
}
 8001e88:	bf00      	nop
 8001e8a:	3724      	adds	r7, #36	; 0x24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_GPIO_SetPinOutputType>:
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	401a      	ands	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	fb01 f303 	mul.w	r3, r1, r3
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	605a      	str	r2, [r3, #4]
}
 8001eb8:	bf00      	nop
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <LL_GPIO_SetPinSpeed>:
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b089      	sub	sp, #36	; 0x24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	fa93 f3a3 	rbit	r3, r3
 8001ede:	613b      	str	r3, [r7, #16]
  return result;
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	fab3 f383 	clz	r3, r3
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	2103      	movs	r1, #3
 8001eec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	fa93 f3a3 	rbit	r3, r3
 8001efe:	61bb      	str	r3, [r7, #24]
  return result;
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	431a      	orrs	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	609a      	str	r2, [r3, #8]
}
 8001f16:	bf00      	nop
 8001f18:	3724      	adds	r7, #36	; 0x24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <LL_GPIO_SetPinPull>:
{
 8001f22:	b480      	push	{r7}
 8001f24:	b089      	sub	sp, #36	; 0x24
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	60f8      	str	r0, [r7, #12]
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	fa93 f3a3 	rbit	r3, r3
 8001f3c:	613b      	str	r3, [r7, #16]
  return result;
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	fab3 f383 	clz	r3, r3
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	2103      	movs	r1, #3
 8001f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	401a      	ands	r2, r3
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	fa93 f3a3 	rbit	r3, r3
 8001f5c:	61bb      	str	r3, [r7, #24]
  return result;
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	fab3 f383 	clz	r3, r3
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	60da      	str	r2, [r3, #12]
}
 8001f74:	bf00      	nop
 8001f76:	3724      	adds	r7, #36	; 0x24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_GPIO_SetAFPin_0_7>:
{
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	; 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6a1a      	ldr	r2, [r3, #32]
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	613b      	str	r3, [r7, #16]
  return result;
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	fab3 f383 	clz	r3, r3
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	210f      	movs	r1, #15
 8001fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	401a      	ands	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	61bb      	str	r3, [r7, #24]
  return result;
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	fab3 f383 	clz	r3, r3
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	621a      	str	r2, [r3, #32]
}
 8001fd2:	bf00      	nop
 8001fd4:	3724      	adds	r7, #36	; 0x24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <LL_GPIO_SetAFPin_8_15>:
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b089      	sub	sp, #36	; 0x24
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	fa93 f3a3 	rbit	r3, r3
 8001ffa:	613b      	str	r3, [r7, #16]
  return result;
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	b2db      	uxtb	r3, r3
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	210f      	movs	r1, #15
 8002008:	fa01 f303 	lsl.w	r3, r1, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	401a      	ands	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	0a1b      	lsrs	r3, r3, #8
 8002014:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	fa93 f3a3 	rbit	r3, r3
 800201c:	61bb      	str	r3, [r7, #24]
  return result;
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	fab3 f383 	clz	r3, r3
 8002024:	b2db      	uxtb	r3, r3
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	fa01 f303 	lsl.w	r3, r1, r3
 800202e:	431a      	orrs	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002034:	bf00      	nop
 8002036:	3724      	adds	r7, #36	; 0x24
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	fa93 f3a3 	rbit	r3, r3
 8002056:	613b      	str	r3, [r7, #16]
  return result;
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	fab3 f383 	clz	r3, r3
 800205e:	b2db      	uxtb	r3, r3
 8002060:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002062:	e051      	b.n	8002108 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	2101      	movs	r1, #1
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	fa01 f303 	lsl.w	r3, r1, r3
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d043      	beq.n	8002102 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d003      	beq.n	800208a <LL_GPIO_Init+0x4a>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d10e      	bne.n	80020a8 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	461a      	mov	r2, r3
 8002090:	69b9      	ldr	r1, [r7, #24]
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff ff16 	bl	8001ec4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	6819      	ldr	r1, [r3, #0]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	461a      	mov	r2, r3
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff fef6 	bl	8001e94 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	461a      	mov	r2, r3
 80020ae:	69b9      	ldr	r1, [r7, #24]
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ff36 	bl	8001f22 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d11a      	bne.n	80020f4 <LL_GPIO_Init+0xb4>
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	fa93 f3a3 	rbit	r3, r3
 80020c8:	60bb      	str	r3, [r7, #8]
  return result;
 80020ca:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80020cc:	fab3 f383 	clz	r3, r3
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b07      	cmp	r3, #7
 80020d4:	d807      	bhi.n	80020e6 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	461a      	mov	r2, r3
 80020dc:	69b9      	ldr	r1, [r7, #24]
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff ff4e 	bl	8001f80 <LL_GPIO_SetAFPin_0_7>
 80020e4:	e006      	b.n	80020f4 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	461a      	mov	r2, r3
 80020ec:	69b9      	ldr	r1, [r7, #24]
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff ff75 	bl	8001fde <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	461a      	mov	r2, r3
 80020fa:	69b9      	ldr	r1, [r7, #24]
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff fe9a 	bl	8001e36 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3301      	adds	r3, #1
 8002106:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	fa22 f303 	lsr.w	r3, r2, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1a6      	bne.n	8002064 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3720      	adds	r7, #32
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <LL_I2C_Enable>:
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f043 0201 	orr.w	r2, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	601a      	str	r2, [r3, #0]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <LL_I2C_Disable>:
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f023 0201 	bic.w	r2, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	601a      	str	r2, [r3, #0]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_I2C_ConfigFilters>:
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	0219      	lsls	r1, r3, #8
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	430b      	orrs	r3, r1
 800217c:	431a      	orrs	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	601a      	str	r2, [r3, #0]
}
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <LL_I2C_SetOwnAddress1>:
{
 800218e:	b480      	push	{r7}
 8002190:	b085      	sub	sp, #20
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80021a2:	f023 0307 	bic.w	r3, r3, #7
 80021a6:	68b9      	ldr	r1, [r7, #8]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	431a      	orrs	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	609a      	str	r2, [r3, #8]
}
 80021b2:	bf00      	nop
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <LL_I2C_EnableOwnAddress1>:
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	609a      	str	r2, [r3, #8]
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <LL_I2C_DisableOwnAddress1>:
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	609a      	str	r2, [r3, #8]
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <LL_I2C_SetTiming>:
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	611a      	str	r2, [r3, #16]
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <LL_I2C_SetMode>:
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	601a      	str	r2, [r3, #0]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <LL_I2C_AcknowledgeNextData>:
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	605a      	str	r2, [r3, #4]
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff ff65 	bl	8002140 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	6899      	ldr	r1, [r3, #8]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	461a      	mov	r2, r3
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff ff6d 	bl	8002160 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4619      	mov	r1, r3
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ffb6 	bl	80021fe <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff ff44 	bl	8002120 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ffa0 	bl	80021de <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	6919      	ldr	r1, [r3, #16]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	461a      	mov	r2, r3
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff ff70 	bl	800218e <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff ff81 	bl	80021be <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4619      	mov	r1, r3
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff ffa9 	bl	800221a <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	4619      	mov	r1, r3
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff ffb6 	bl	8002240 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <LL_RCC_HSI_IsReady>:
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <LL_RCC_HSI_IsReady+0x20>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	bf0c      	ite	eq
 80022f0:	2301      	moveq	r3, #1
 80022f2:	2300      	movne	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	40021000 	.word	0x40021000

08002304 <LL_RCC_LSE_IsReady>:
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <LL_RCC_LSE_IsReady+0x20>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b02      	cmp	r3, #2
 8002312:	bf0c      	ite	eq
 8002314:	2301      	moveq	r3, #1
 8002316:	2300      	movne	r3, #0
 8002318:	b2db      	uxtb	r3, r3
}
 800231a:	4618      	mov	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	40021000 	.word	0x40021000

08002328 <LL_RCC_GetSysClkSource>:
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800232c:	4b04      	ldr	r3, [pc, #16]	; (8002340 <LL_RCC_GetSysClkSource+0x18>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 030c 	and.w	r3, r3, #12
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000

08002344 <LL_RCC_GetAHBPrescaler>:
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002348:	4b04      	ldr	r3, [pc, #16]	; (800235c <LL_RCC_GetAHBPrescaler+0x18>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40021000 	.word	0x40021000

08002360 <LL_RCC_GetAPB1Prescaler>:
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000

0800237c <LL_RCC_GetAPB2Prescaler>:
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002380:	4b04      	ldr	r3, [pc, #16]	; (8002394 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000

08002398 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80023a0:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <LL_RCC_GetUSARTClockSource+0x28>)
 80023a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023a4:	2103      	movs	r1, #3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ac:	401a      	ands	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	061b      	lsls	r3, r3, #24
 80023b2:	4313      	orrs	r3, r2
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	40021000 	.word	0x40021000

080023c4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <LL_RCC_PLL_GetMainSource+0x18>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40021000 	.word	0x40021000

080023e0 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80023e4:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <LL_RCC_PLL_GetMultiplicator+0x18>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000

080023fc <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8002400:	4b04      	ldr	r3, [pc, #16]	; (8002414 <LL_RCC_PLL_GetPrediv+0x18>)
 8002402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002404:	f003 030f 	and.w	r3, r3, #15
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000

08002418 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002420:	f000 f862 	bl	80024e8 <RCC_GetSystemClockFreq>
 8002424:	4602      	mov	r2, r0
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f000 f880 	bl	8002534 <RCC_GetHCLKClockFreq>
 8002434:	4602      	mov	r2, r0
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	4618      	mov	r0, r3
 8002440:	f000 f88e 	bl	8002560 <RCC_GetPCLK1ClockFreq>
 8002444:	4602      	mov	r2, r0
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	4618      	mov	r0, r3
 8002450:	f000 f89a 	bl	8002588 <RCC_GetPCLK2ClockFreq>
 8002454:	4602      	mov	r2, r0
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	60da      	str	r2, [r3, #12]
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d130      	bne.n	80024d8 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff ff8e 	bl	8002398 <LL_RCC_GetUSARTClockSource>
 800247c:	4603      	mov	r3, r0
 800247e:	2b03      	cmp	r3, #3
 8002480:	d00a      	beq.n	8002498 <LL_RCC_GetUSARTClockFreq+0x34>
 8002482:	2b03      	cmp	r3, #3
 8002484:	d819      	bhi.n	80024ba <LL_RCC_GetUSARTClockFreq+0x56>
 8002486:	2b01      	cmp	r3, #1
 8002488:	d002      	beq.n	8002490 <LL_RCC_GetUSARTClockFreq+0x2c>
 800248a:	2b02      	cmp	r3, #2
 800248c:	d00c      	beq.n	80024a8 <LL_RCC_GetUSARTClockFreq+0x44>
 800248e:	e014      	b.n	80024ba <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002490:	f000 f82a 	bl	80024e8 <RCC_GetSystemClockFreq>
 8002494:	60f8      	str	r0, [r7, #12]
        break;
 8002496:	e01f      	b.n	80024d8 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002498:	f7ff ff22 	bl	80022e0 <LL_RCC_HSI_IsReady>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d017      	beq.n	80024d2 <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 80024a2:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <LL_RCC_GetUSARTClockFreq+0x80>)
 80024a4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80024a6:	e014      	b.n	80024d2 <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80024a8:	f7ff ff2c 	bl	8002304 <LL_RCC_LSE_IsReady>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d011      	beq.n	80024d6 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 80024b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024b6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80024b8:	e00d      	b.n	80024d6 <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80024ba:	f000 f815 	bl	80024e8 <RCC_GetSystemClockFreq>
 80024be:	4603      	mov	r3, r0
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 f837 	bl	8002534 <RCC_GetHCLKClockFreq>
 80024c6:	4603      	mov	r3, r0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 f849 	bl	8002560 <RCC_GetPCLK1ClockFreq>
 80024ce:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 80024d0:	e002      	b.n	80024d8 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 80024d2:	bf00      	nop
 80024d4:	e000      	b.n	80024d8 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 80024d6:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 80024d8:	68fb      	ldr	r3, [r7, #12]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	007a1200 	.word	0x007a1200

080024e8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80024f2:	f7ff ff19 	bl	8002328 <LL_RCC_GetSysClkSource>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d00c      	beq.n	8002516 <RCC_GetSystemClockFreq+0x2e>
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d80e      	bhi.n	800251e <RCC_GetSystemClockFreq+0x36>
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <RCC_GetSystemClockFreq+0x22>
 8002504:	2b04      	cmp	r3, #4
 8002506:	d003      	beq.n	8002510 <RCC_GetSystemClockFreq+0x28>
 8002508:	e009      	b.n	800251e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <RCC_GetSystemClockFreq+0x48>)
 800250c:	607b      	str	r3, [r7, #4]
      break;
 800250e:	e009      	b.n	8002524 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002510:	4b07      	ldr	r3, [pc, #28]	; (8002530 <RCC_GetSystemClockFreq+0x48>)
 8002512:	607b      	str	r3, [r7, #4]
      break;
 8002514:	e006      	b.n	8002524 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002516:	f000 f84b 	bl	80025b0 <RCC_PLL_GetFreqDomain_SYS>
 800251a:	6078      	str	r0, [r7, #4]
      break;
 800251c:	e002      	b.n	8002524 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800251e:	4b04      	ldr	r3, [pc, #16]	; (8002530 <RCC_GetSystemClockFreq+0x48>)
 8002520:	607b      	str	r3, [r7, #4]
      break;
 8002522:	bf00      	nop
  }

  return frequency;
 8002524:	687b      	ldr	r3, [r7, #4]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	007a1200 	.word	0x007a1200

08002534 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800253c:	f7ff ff02 	bl	8002344 <LL_RCC_GetAHBPrescaler>
 8002540:	4603      	mov	r3, r0
 8002542:	091b      	lsrs	r3, r3, #4
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	4a04      	ldr	r2, [pc, #16]	; (800255c <RCC_GetHCLKClockFreq+0x28>)
 800254a:	5cd3      	ldrb	r3, [r2, r3]
 800254c:	461a      	mov	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	40d3      	lsrs	r3, r2
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	08003250 	.word	0x08003250

08002560 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002568:	f7ff fefa 	bl	8002360 <LL_RCC_GetAPB1Prescaler>
 800256c:	4603      	mov	r3, r0
 800256e:	0a1b      	lsrs	r3, r3, #8
 8002570:	4a04      	ldr	r2, [pc, #16]	; (8002584 <RCC_GetPCLK1ClockFreq+0x24>)
 8002572:	5cd3      	ldrb	r3, [r2, r3]
 8002574:	461a      	mov	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	40d3      	lsrs	r3, r2
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	08003260 	.word	0x08003260

08002588 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002590:	f7ff fef4 	bl	800237c <LL_RCC_GetAPB2Prescaler>
 8002594:	4603      	mov	r3, r0
 8002596:	0adb      	lsrs	r3, r3, #11
 8002598:	4a04      	ldr	r2, [pc, #16]	; (80025ac <RCC_GetPCLK2ClockFreq+0x24>)
 800259a:	5cd3      	ldrb	r3, [r2, r3]
 800259c:	461a      	mov	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	40d3      	lsrs	r3, r2
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	08003260 	.word	0x08003260

080025b0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80025b0:	b590      	push	{r4, r7, lr}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80025be:	f7ff ff01 	bl	80023c4 <LL_RCC_PLL_GetMainSource>
 80025c2:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d004      	beq.n	80025d4 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d0:	d003      	beq.n	80025da <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80025d2:	e005      	b.n	80025e0 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80025d4:	4b13      	ldr	r3, [pc, #76]	; (8002624 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80025d6:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80025d8:	e005      	b.n	80025e6 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80025da:	4b13      	ldr	r3, [pc, #76]	; (8002628 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80025dc:	60fb      	str	r3, [r7, #12]
      break;
 80025de:	e002      	b.n	80025e6 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 80025e0:	4b10      	ldr	r3, [pc, #64]	; (8002624 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80025e2:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80025e4:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 80025e6:	f7ff ff09 	bl	80023fc <LL_RCC_PLL_GetPrediv>
 80025ea:	4603      	mov	r3, r0
 80025ec:	3301      	adds	r3, #1
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	fbb2 f4f3 	udiv	r4, r2, r3
 80025f4:	f7ff fef4 	bl	80023e0 <LL_RCC_PLL_GetMultiplicator>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80025fe:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002602:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	fa92 f2a2 	rbit	r2, r2
 800260a:	603a      	str	r2, [r7, #0]
  return result;
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	fab2 f282 	clz	r2, r2
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	40d3      	lsrs	r3, r2
 8002616:	3302      	adds	r3, #2
 8002618:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	bd90      	pop	{r4, r7, pc}
 8002624:	003d0900 	.word	0x003d0900
 8002628:	007a1200 	.word	0x007a1200

0800262c <LL_USART_IsEnabled>:
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b01      	cmp	r3, #1
 800263e:	d101      	bne.n	8002644 <LL_USART_IsEnabled+0x18>
 8002640:	2301      	movs	r3, #1
 8002642:	e000      	b.n	8002646 <LL_USART_IsEnabled+0x1a>
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <LL_USART_SetStopBitsLength>:
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	605a      	str	r2, [r3, #4]
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <LL_USART_SetHWFlowCtrl>:
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	431a      	orrs	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	609a      	str	r2, [r3, #8]
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <LL_USART_SetBaudRate>:
{
 800269e:	b480      	push	{r7}
 80026a0:	b087      	sub	sp, #28
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
 80026aa:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026b2:	d11a      	bne.n	80026ea <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	005a      	lsls	r2, r3, #1
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	085b      	lsrs	r3, r3, #1
 80026bc:	441a      	add	r2, r3
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	085b      	lsrs	r3, r3, #1
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	60da      	str	r2, [r3, #12]
}
 80026e8:	e00a      	b.n	8002700 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	085a      	lsrs	r2, r3, #1
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	441a      	add	r2, r3
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	60da      	str	r2, [r3, #12]
}
 8002700:	bf00      	nop
 8002702:	371c      	adds	r7, #28
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800271a:	2300      	movs	r3, #0
 800271c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff ff84 	bl	800262c <LL_USART_IsEnabled>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d14e      	bne.n	80027c8 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <LL_USART_Init+0xc8>)
 8002730:	4013      	ands	r3, r2
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	6851      	ldr	r1, [r2, #4]
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	68d2      	ldr	r2, [r2, #12]
 800273a:	4311      	orrs	r1, r2
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	6912      	ldr	r2, [r2, #16]
 8002740:	4311      	orrs	r1, r2
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	6992      	ldr	r2, [r2, #24]
 8002746:	430a      	orrs	r2, r1
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	4619      	mov	r1, r3
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff ff7c 	bl	8002652 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	4619      	mov	r1, r3
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff ff89 	bl	8002678 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a1b      	ldr	r2, [pc, #108]	; (80027d8 <LL_USART_Init+0xcc>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d104      	bne.n	8002778 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800276e:	2000      	movs	r0, #0
 8002770:	f7ff fe78 	bl	8002464 <LL_RCC_GetUSARTClockFreq>
 8002774:	61b8      	str	r0, [r7, #24]
 8002776:	e016      	b.n	80027a6 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a18      	ldr	r2, [pc, #96]	; (80027dc <LL_USART_Init+0xd0>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d107      	bne.n	8002790 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002780:	f107 0308 	add.w	r3, r7, #8
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fe47 	bl	8002418 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	e00a      	b.n	80027a6 <LL_USART_Init+0x9a>
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a13      	ldr	r2, [pc, #76]	; (80027e0 <LL_USART_Init+0xd4>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d106      	bne.n	80027a6 <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002798:	f107 0308 	add.w	r3, r7, #8
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fe3b 	bl	8002418 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00d      	beq.n	80027c8 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d009      	beq.n	80027c8 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 80027b4:	2300      	movs	r3, #0
 80027b6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80027c0:	69b9      	ldr	r1, [r7, #24]
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff ff6b 	bl	800269e <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80027c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3720      	adds	r7, #32
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	efff69f3 	.word	0xefff69f3
 80027d8:	40013800 	.word	0x40013800
 80027dc:	40004400 	.word	0x40004400
 80027e0:	40004800 	.word	0x40004800

080027e4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f6:	4a07      	ldr	r2, [pc, #28]	; (8002814 <LL_InitTick+0x30>)
 80027f8:	3b01      	subs	r3, #1
 80027fa:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <LL_InitTick+0x30>)
 80027fe:	2200      	movs	r2, #0
 8002800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002802:	4b04      	ldr	r3, [pc, #16]	; (8002814 <LL_InitTick+0x30>)
 8002804:	2205      	movs	r2, #5
 8002806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	e000e010 	.word	0xe000e010

08002818 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002820:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7ff ffdd 	bl	80027e4 <LL_InitTick>
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800283c:	4b0f      	ldr	r3, [pc, #60]	; (800287c <LL_mDelay+0x48>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002842:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284a:	d00c      	beq.n	8002866 <LL_mDelay+0x32>
  {
    Delay++;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3301      	adds	r3, #1
 8002850:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002852:	e008      	b.n	8002866 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <LL_mDelay+0x48>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d002      	beq.n	8002866 <LL_mDelay+0x32>
    {
      Delay--;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3b01      	subs	r3, #1
 8002864:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1f3      	bne.n	8002854 <LL_mDelay+0x20>
    }
  }
}
 800286c:	bf00      	nop
 800286e:	bf00      	nop
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	e000e010 	.word	0xe000e010

08002880 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002888:	4a04      	ldr	r2, [pc, #16]	; (800289c <LL_SetSystemCoreClock+0x1c>)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6013      	str	r3, [r2, #0]
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20000080 	.word	0x20000080

080028a0 <siprintf>:
 80028a0:	b40e      	push	{r1, r2, r3}
 80028a2:	b500      	push	{lr}
 80028a4:	b09c      	sub	sp, #112	; 0x70
 80028a6:	ab1d      	add	r3, sp, #116	; 0x74
 80028a8:	9002      	str	r0, [sp, #8]
 80028aa:	9006      	str	r0, [sp, #24]
 80028ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80028b0:	4809      	ldr	r0, [pc, #36]	; (80028d8 <siprintf+0x38>)
 80028b2:	9107      	str	r1, [sp, #28]
 80028b4:	9104      	str	r1, [sp, #16]
 80028b6:	4909      	ldr	r1, [pc, #36]	; (80028dc <siprintf+0x3c>)
 80028b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80028bc:	9105      	str	r1, [sp, #20]
 80028be:	6800      	ldr	r0, [r0, #0]
 80028c0:	9301      	str	r3, [sp, #4]
 80028c2:	a902      	add	r1, sp, #8
 80028c4:	f000 f992 	bl	8002bec <_svfiprintf_r>
 80028c8:	9b02      	ldr	r3, [sp, #8]
 80028ca:	2200      	movs	r2, #0
 80028cc:	701a      	strb	r2, [r3, #0]
 80028ce:	b01c      	add	sp, #112	; 0x70
 80028d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80028d4:	b003      	add	sp, #12
 80028d6:	4770      	bx	lr
 80028d8:	200000d0 	.word	0x200000d0
 80028dc:	ffff0208 	.word	0xffff0208

080028e0 <memset>:
 80028e0:	4402      	add	r2, r0
 80028e2:	4603      	mov	r3, r0
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d100      	bne.n	80028ea <memset+0xa>
 80028e8:	4770      	bx	lr
 80028ea:	f803 1b01 	strb.w	r1, [r3], #1
 80028ee:	e7f9      	b.n	80028e4 <memset+0x4>

080028f0 <__errno>:
 80028f0:	4b01      	ldr	r3, [pc, #4]	; (80028f8 <__errno+0x8>)
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	200000d0 	.word	0x200000d0

080028fc <__libc_init_array>:
 80028fc:	b570      	push	{r4, r5, r6, lr}
 80028fe:	4d0d      	ldr	r5, [pc, #52]	; (8002934 <__libc_init_array+0x38>)
 8002900:	4c0d      	ldr	r4, [pc, #52]	; (8002938 <__libc_init_array+0x3c>)
 8002902:	1b64      	subs	r4, r4, r5
 8002904:	10a4      	asrs	r4, r4, #2
 8002906:	2600      	movs	r6, #0
 8002908:	42a6      	cmp	r6, r4
 800290a:	d109      	bne.n	8002920 <__libc_init_array+0x24>
 800290c:	4d0b      	ldr	r5, [pc, #44]	; (800293c <__libc_init_array+0x40>)
 800290e:	4c0c      	ldr	r4, [pc, #48]	; (8002940 <__libc_init_array+0x44>)
 8002910:	f000 fc6a 	bl	80031e8 <_init>
 8002914:	1b64      	subs	r4, r4, r5
 8002916:	10a4      	asrs	r4, r4, #2
 8002918:	2600      	movs	r6, #0
 800291a:	42a6      	cmp	r6, r4
 800291c:	d105      	bne.n	800292a <__libc_init_array+0x2e>
 800291e:	bd70      	pop	{r4, r5, r6, pc}
 8002920:	f855 3b04 	ldr.w	r3, [r5], #4
 8002924:	4798      	blx	r3
 8002926:	3601      	adds	r6, #1
 8002928:	e7ee      	b.n	8002908 <__libc_init_array+0xc>
 800292a:	f855 3b04 	ldr.w	r3, [r5], #4
 800292e:	4798      	blx	r3
 8002930:	3601      	adds	r6, #1
 8002932:	e7f2      	b.n	800291a <__libc_init_array+0x1e>
 8002934:	080032a4 	.word	0x080032a4
 8002938:	080032a4 	.word	0x080032a4
 800293c:	080032a4 	.word	0x080032a4
 8002940:	080032a8 	.word	0x080032a8

08002944 <__retarget_lock_acquire_recursive>:
 8002944:	4770      	bx	lr

08002946 <__retarget_lock_release_recursive>:
 8002946:	4770      	bx	lr

08002948 <_free_r>:
 8002948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800294a:	2900      	cmp	r1, #0
 800294c:	d044      	beq.n	80029d8 <_free_r+0x90>
 800294e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002952:	9001      	str	r0, [sp, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	f1a1 0404 	sub.w	r4, r1, #4
 800295a:	bfb8      	it	lt
 800295c:	18e4      	addlt	r4, r4, r3
 800295e:	f000 f8df 	bl	8002b20 <__malloc_lock>
 8002962:	4a1e      	ldr	r2, [pc, #120]	; (80029dc <_free_r+0x94>)
 8002964:	9801      	ldr	r0, [sp, #4]
 8002966:	6813      	ldr	r3, [r2, #0]
 8002968:	b933      	cbnz	r3, 8002978 <_free_r+0x30>
 800296a:	6063      	str	r3, [r4, #4]
 800296c:	6014      	str	r4, [r2, #0]
 800296e:	b003      	add	sp, #12
 8002970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002974:	f000 b8da 	b.w	8002b2c <__malloc_unlock>
 8002978:	42a3      	cmp	r3, r4
 800297a:	d908      	bls.n	800298e <_free_r+0x46>
 800297c:	6825      	ldr	r5, [r4, #0]
 800297e:	1961      	adds	r1, r4, r5
 8002980:	428b      	cmp	r3, r1
 8002982:	bf01      	itttt	eq
 8002984:	6819      	ldreq	r1, [r3, #0]
 8002986:	685b      	ldreq	r3, [r3, #4]
 8002988:	1949      	addeq	r1, r1, r5
 800298a:	6021      	streq	r1, [r4, #0]
 800298c:	e7ed      	b.n	800296a <_free_r+0x22>
 800298e:	461a      	mov	r2, r3
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	b10b      	cbz	r3, 8002998 <_free_r+0x50>
 8002994:	42a3      	cmp	r3, r4
 8002996:	d9fa      	bls.n	800298e <_free_r+0x46>
 8002998:	6811      	ldr	r1, [r2, #0]
 800299a:	1855      	adds	r5, r2, r1
 800299c:	42a5      	cmp	r5, r4
 800299e:	d10b      	bne.n	80029b8 <_free_r+0x70>
 80029a0:	6824      	ldr	r4, [r4, #0]
 80029a2:	4421      	add	r1, r4
 80029a4:	1854      	adds	r4, r2, r1
 80029a6:	42a3      	cmp	r3, r4
 80029a8:	6011      	str	r1, [r2, #0]
 80029aa:	d1e0      	bne.n	800296e <_free_r+0x26>
 80029ac:	681c      	ldr	r4, [r3, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	6053      	str	r3, [r2, #4]
 80029b2:	440c      	add	r4, r1
 80029b4:	6014      	str	r4, [r2, #0]
 80029b6:	e7da      	b.n	800296e <_free_r+0x26>
 80029b8:	d902      	bls.n	80029c0 <_free_r+0x78>
 80029ba:	230c      	movs	r3, #12
 80029bc:	6003      	str	r3, [r0, #0]
 80029be:	e7d6      	b.n	800296e <_free_r+0x26>
 80029c0:	6825      	ldr	r5, [r4, #0]
 80029c2:	1961      	adds	r1, r4, r5
 80029c4:	428b      	cmp	r3, r1
 80029c6:	bf04      	itt	eq
 80029c8:	6819      	ldreq	r1, [r3, #0]
 80029ca:	685b      	ldreq	r3, [r3, #4]
 80029cc:	6063      	str	r3, [r4, #4]
 80029ce:	bf04      	itt	eq
 80029d0:	1949      	addeq	r1, r1, r5
 80029d2:	6021      	streq	r1, [r4, #0]
 80029d4:	6054      	str	r4, [r2, #4]
 80029d6:	e7ca      	b.n	800296e <_free_r+0x26>
 80029d8:	b003      	add	sp, #12
 80029da:	bd30      	pop	{r4, r5, pc}
 80029dc:	20000318 	.word	0x20000318

080029e0 <sbrk_aligned>:
 80029e0:	b570      	push	{r4, r5, r6, lr}
 80029e2:	4e0e      	ldr	r6, [pc, #56]	; (8002a1c <sbrk_aligned+0x3c>)
 80029e4:	460c      	mov	r4, r1
 80029e6:	6831      	ldr	r1, [r6, #0]
 80029e8:	4605      	mov	r5, r0
 80029ea:	b911      	cbnz	r1, 80029f2 <sbrk_aligned+0x12>
 80029ec:	f000 fba6 	bl	800313c <_sbrk_r>
 80029f0:	6030      	str	r0, [r6, #0]
 80029f2:	4621      	mov	r1, r4
 80029f4:	4628      	mov	r0, r5
 80029f6:	f000 fba1 	bl	800313c <_sbrk_r>
 80029fa:	1c43      	adds	r3, r0, #1
 80029fc:	d00a      	beq.n	8002a14 <sbrk_aligned+0x34>
 80029fe:	1cc4      	adds	r4, r0, #3
 8002a00:	f024 0403 	bic.w	r4, r4, #3
 8002a04:	42a0      	cmp	r0, r4
 8002a06:	d007      	beq.n	8002a18 <sbrk_aligned+0x38>
 8002a08:	1a21      	subs	r1, r4, r0
 8002a0a:	4628      	mov	r0, r5
 8002a0c:	f000 fb96 	bl	800313c <_sbrk_r>
 8002a10:	3001      	adds	r0, #1
 8002a12:	d101      	bne.n	8002a18 <sbrk_aligned+0x38>
 8002a14:	f04f 34ff 	mov.w	r4, #4294967295
 8002a18:	4620      	mov	r0, r4
 8002a1a:	bd70      	pop	{r4, r5, r6, pc}
 8002a1c:	2000031c 	.word	0x2000031c

08002a20 <_malloc_r>:
 8002a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a24:	1ccd      	adds	r5, r1, #3
 8002a26:	f025 0503 	bic.w	r5, r5, #3
 8002a2a:	3508      	adds	r5, #8
 8002a2c:	2d0c      	cmp	r5, #12
 8002a2e:	bf38      	it	cc
 8002a30:	250c      	movcc	r5, #12
 8002a32:	2d00      	cmp	r5, #0
 8002a34:	4607      	mov	r7, r0
 8002a36:	db01      	blt.n	8002a3c <_malloc_r+0x1c>
 8002a38:	42a9      	cmp	r1, r5
 8002a3a:	d905      	bls.n	8002a48 <_malloc_r+0x28>
 8002a3c:	230c      	movs	r3, #12
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	2600      	movs	r6, #0
 8002a42:	4630      	mov	r0, r6
 8002a44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002b1c <_malloc_r+0xfc>
 8002a4c:	f000 f868 	bl	8002b20 <__malloc_lock>
 8002a50:	f8d8 3000 	ldr.w	r3, [r8]
 8002a54:	461c      	mov	r4, r3
 8002a56:	bb5c      	cbnz	r4, 8002ab0 <_malloc_r+0x90>
 8002a58:	4629      	mov	r1, r5
 8002a5a:	4638      	mov	r0, r7
 8002a5c:	f7ff ffc0 	bl	80029e0 <sbrk_aligned>
 8002a60:	1c43      	adds	r3, r0, #1
 8002a62:	4604      	mov	r4, r0
 8002a64:	d155      	bne.n	8002b12 <_malloc_r+0xf2>
 8002a66:	f8d8 4000 	ldr.w	r4, [r8]
 8002a6a:	4626      	mov	r6, r4
 8002a6c:	2e00      	cmp	r6, #0
 8002a6e:	d145      	bne.n	8002afc <_malloc_r+0xdc>
 8002a70:	2c00      	cmp	r4, #0
 8002a72:	d048      	beq.n	8002b06 <_malloc_r+0xe6>
 8002a74:	6823      	ldr	r3, [r4, #0]
 8002a76:	4631      	mov	r1, r6
 8002a78:	4638      	mov	r0, r7
 8002a7a:	eb04 0903 	add.w	r9, r4, r3
 8002a7e:	f000 fb5d 	bl	800313c <_sbrk_r>
 8002a82:	4581      	cmp	r9, r0
 8002a84:	d13f      	bne.n	8002b06 <_malloc_r+0xe6>
 8002a86:	6821      	ldr	r1, [r4, #0]
 8002a88:	1a6d      	subs	r5, r5, r1
 8002a8a:	4629      	mov	r1, r5
 8002a8c:	4638      	mov	r0, r7
 8002a8e:	f7ff ffa7 	bl	80029e0 <sbrk_aligned>
 8002a92:	3001      	adds	r0, #1
 8002a94:	d037      	beq.n	8002b06 <_malloc_r+0xe6>
 8002a96:	6823      	ldr	r3, [r4, #0]
 8002a98:	442b      	add	r3, r5
 8002a9a:	6023      	str	r3, [r4, #0]
 8002a9c:	f8d8 3000 	ldr.w	r3, [r8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d038      	beq.n	8002b16 <_malloc_r+0xf6>
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	42a2      	cmp	r2, r4
 8002aa8:	d12b      	bne.n	8002b02 <_malloc_r+0xe2>
 8002aaa:	2200      	movs	r2, #0
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	e00f      	b.n	8002ad0 <_malloc_r+0xb0>
 8002ab0:	6822      	ldr	r2, [r4, #0]
 8002ab2:	1b52      	subs	r2, r2, r5
 8002ab4:	d41f      	bmi.n	8002af6 <_malloc_r+0xd6>
 8002ab6:	2a0b      	cmp	r2, #11
 8002ab8:	d917      	bls.n	8002aea <_malloc_r+0xca>
 8002aba:	1961      	adds	r1, r4, r5
 8002abc:	42a3      	cmp	r3, r4
 8002abe:	6025      	str	r5, [r4, #0]
 8002ac0:	bf18      	it	ne
 8002ac2:	6059      	strne	r1, [r3, #4]
 8002ac4:	6863      	ldr	r3, [r4, #4]
 8002ac6:	bf08      	it	eq
 8002ac8:	f8c8 1000 	streq.w	r1, [r8]
 8002acc:	5162      	str	r2, [r4, r5]
 8002ace:	604b      	str	r3, [r1, #4]
 8002ad0:	4638      	mov	r0, r7
 8002ad2:	f104 060b 	add.w	r6, r4, #11
 8002ad6:	f000 f829 	bl	8002b2c <__malloc_unlock>
 8002ada:	f026 0607 	bic.w	r6, r6, #7
 8002ade:	1d23      	adds	r3, r4, #4
 8002ae0:	1af2      	subs	r2, r6, r3
 8002ae2:	d0ae      	beq.n	8002a42 <_malloc_r+0x22>
 8002ae4:	1b9b      	subs	r3, r3, r6
 8002ae6:	50a3      	str	r3, [r4, r2]
 8002ae8:	e7ab      	b.n	8002a42 <_malloc_r+0x22>
 8002aea:	42a3      	cmp	r3, r4
 8002aec:	6862      	ldr	r2, [r4, #4]
 8002aee:	d1dd      	bne.n	8002aac <_malloc_r+0x8c>
 8002af0:	f8c8 2000 	str.w	r2, [r8]
 8002af4:	e7ec      	b.n	8002ad0 <_malloc_r+0xb0>
 8002af6:	4623      	mov	r3, r4
 8002af8:	6864      	ldr	r4, [r4, #4]
 8002afa:	e7ac      	b.n	8002a56 <_malloc_r+0x36>
 8002afc:	4634      	mov	r4, r6
 8002afe:	6876      	ldr	r6, [r6, #4]
 8002b00:	e7b4      	b.n	8002a6c <_malloc_r+0x4c>
 8002b02:	4613      	mov	r3, r2
 8002b04:	e7cc      	b.n	8002aa0 <_malloc_r+0x80>
 8002b06:	230c      	movs	r3, #12
 8002b08:	603b      	str	r3, [r7, #0]
 8002b0a:	4638      	mov	r0, r7
 8002b0c:	f000 f80e 	bl	8002b2c <__malloc_unlock>
 8002b10:	e797      	b.n	8002a42 <_malloc_r+0x22>
 8002b12:	6025      	str	r5, [r4, #0]
 8002b14:	e7dc      	b.n	8002ad0 <_malloc_r+0xb0>
 8002b16:	605b      	str	r3, [r3, #4]
 8002b18:	deff      	udf	#255	; 0xff
 8002b1a:	bf00      	nop
 8002b1c:	20000318 	.word	0x20000318

08002b20 <__malloc_lock>:
 8002b20:	4801      	ldr	r0, [pc, #4]	; (8002b28 <__malloc_lock+0x8>)
 8002b22:	f7ff bf0f 	b.w	8002944 <__retarget_lock_acquire_recursive>
 8002b26:	bf00      	nop
 8002b28:	20000314 	.word	0x20000314

08002b2c <__malloc_unlock>:
 8002b2c:	4801      	ldr	r0, [pc, #4]	; (8002b34 <__malloc_unlock+0x8>)
 8002b2e:	f7ff bf0a 	b.w	8002946 <__retarget_lock_release_recursive>
 8002b32:	bf00      	nop
 8002b34:	20000314 	.word	0x20000314

08002b38 <__ssputs_r>:
 8002b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b3c:	688e      	ldr	r6, [r1, #8]
 8002b3e:	461f      	mov	r7, r3
 8002b40:	42be      	cmp	r6, r7
 8002b42:	680b      	ldr	r3, [r1, #0]
 8002b44:	4682      	mov	sl, r0
 8002b46:	460c      	mov	r4, r1
 8002b48:	4690      	mov	r8, r2
 8002b4a:	d82c      	bhi.n	8002ba6 <__ssputs_r+0x6e>
 8002b4c:	898a      	ldrh	r2, [r1, #12]
 8002b4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002b52:	d026      	beq.n	8002ba2 <__ssputs_r+0x6a>
 8002b54:	6965      	ldr	r5, [r4, #20]
 8002b56:	6909      	ldr	r1, [r1, #16]
 8002b58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b5c:	eba3 0901 	sub.w	r9, r3, r1
 8002b60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b64:	1c7b      	adds	r3, r7, #1
 8002b66:	444b      	add	r3, r9
 8002b68:	106d      	asrs	r5, r5, #1
 8002b6a:	429d      	cmp	r5, r3
 8002b6c:	bf38      	it	cc
 8002b6e:	461d      	movcc	r5, r3
 8002b70:	0553      	lsls	r3, r2, #21
 8002b72:	d527      	bpl.n	8002bc4 <__ssputs_r+0x8c>
 8002b74:	4629      	mov	r1, r5
 8002b76:	f7ff ff53 	bl	8002a20 <_malloc_r>
 8002b7a:	4606      	mov	r6, r0
 8002b7c:	b360      	cbz	r0, 8002bd8 <__ssputs_r+0xa0>
 8002b7e:	6921      	ldr	r1, [r4, #16]
 8002b80:	464a      	mov	r2, r9
 8002b82:	f000 faeb 	bl	800315c <memcpy>
 8002b86:	89a3      	ldrh	r3, [r4, #12]
 8002b88:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b90:	81a3      	strh	r3, [r4, #12]
 8002b92:	6126      	str	r6, [r4, #16]
 8002b94:	6165      	str	r5, [r4, #20]
 8002b96:	444e      	add	r6, r9
 8002b98:	eba5 0509 	sub.w	r5, r5, r9
 8002b9c:	6026      	str	r6, [r4, #0]
 8002b9e:	60a5      	str	r5, [r4, #8]
 8002ba0:	463e      	mov	r6, r7
 8002ba2:	42be      	cmp	r6, r7
 8002ba4:	d900      	bls.n	8002ba8 <__ssputs_r+0x70>
 8002ba6:	463e      	mov	r6, r7
 8002ba8:	6820      	ldr	r0, [r4, #0]
 8002baa:	4632      	mov	r2, r6
 8002bac:	4641      	mov	r1, r8
 8002bae:	f000 faab 	bl	8003108 <memmove>
 8002bb2:	68a3      	ldr	r3, [r4, #8]
 8002bb4:	1b9b      	subs	r3, r3, r6
 8002bb6:	60a3      	str	r3, [r4, #8]
 8002bb8:	6823      	ldr	r3, [r4, #0]
 8002bba:	4433      	add	r3, r6
 8002bbc:	6023      	str	r3, [r4, #0]
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bc4:	462a      	mov	r2, r5
 8002bc6:	f000 fad7 	bl	8003178 <_realloc_r>
 8002bca:	4606      	mov	r6, r0
 8002bcc:	2800      	cmp	r0, #0
 8002bce:	d1e0      	bne.n	8002b92 <__ssputs_r+0x5a>
 8002bd0:	6921      	ldr	r1, [r4, #16]
 8002bd2:	4650      	mov	r0, sl
 8002bd4:	f7ff feb8 	bl	8002948 <_free_r>
 8002bd8:	230c      	movs	r3, #12
 8002bda:	f8ca 3000 	str.w	r3, [sl]
 8002bde:	89a3      	ldrh	r3, [r4, #12]
 8002be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002be4:	81a3      	strh	r3, [r4, #12]
 8002be6:	f04f 30ff 	mov.w	r0, #4294967295
 8002bea:	e7e9      	b.n	8002bc0 <__ssputs_r+0x88>

08002bec <_svfiprintf_r>:
 8002bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bf0:	4698      	mov	r8, r3
 8002bf2:	898b      	ldrh	r3, [r1, #12]
 8002bf4:	061b      	lsls	r3, r3, #24
 8002bf6:	b09d      	sub	sp, #116	; 0x74
 8002bf8:	4607      	mov	r7, r0
 8002bfa:	460d      	mov	r5, r1
 8002bfc:	4614      	mov	r4, r2
 8002bfe:	d50e      	bpl.n	8002c1e <_svfiprintf_r+0x32>
 8002c00:	690b      	ldr	r3, [r1, #16]
 8002c02:	b963      	cbnz	r3, 8002c1e <_svfiprintf_r+0x32>
 8002c04:	2140      	movs	r1, #64	; 0x40
 8002c06:	f7ff ff0b 	bl	8002a20 <_malloc_r>
 8002c0a:	6028      	str	r0, [r5, #0]
 8002c0c:	6128      	str	r0, [r5, #16]
 8002c0e:	b920      	cbnz	r0, 8002c1a <_svfiprintf_r+0x2e>
 8002c10:	230c      	movs	r3, #12
 8002c12:	603b      	str	r3, [r7, #0]
 8002c14:	f04f 30ff 	mov.w	r0, #4294967295
 8002c18:	e0d0      	b.n	8002dbc <_svfiprintf_r+0x1d0>
 8002c1a:	2340      	movs	r3, #64	; 0x40
 8002c1c:	616b      	str	r3, [r5, #20]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	9309      	str	r3, [sp, #36]	; 0x24
 8002c22:	2320      	movs	r3, #32
 8002c24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c28:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c2c:	2330      	movs	r3, #48	; 0x30
 8002c2e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002dd4 <_svfiprintf_r+0x1e8>
 8002c32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c36:	f04f 0901 	mov.w	r9, #1
 8002c3a:	4623      	mov	r3, r4
 8002c3c:	469a      	mov	sl, r3
 8002c3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c42:	b10a      	cbz	r2, 8002c48 <_svfiprintf_r+0x5c>
 8002c44:	2a25      	cmp	r2, #37	; 0x25
 8002c46:	d1f9      	bne.n	8002c3c <_svfiprintf_r+0x50>
 8002c48:	ebba 0b04 	subs.w	fp, sl, r4
 8002c4c:	d00b      	beq.n	8002c66 <_svfiprintf_r+0x7a>
 8002c4e:	465b      	mov	r3, fp
 8002c50:	4622      	mov	r2, r4
 8002c52:	4629      	mov	r1, r5
 8002c54:	4638      	mov	r0, r7
 8002c56:	f7ff ff6f 	bl	8002b38 <__ssputs_r>
 8002c5a:	3001      	adds	r0, #1
 8002c5c:	f000 80a9 	beq.w	8002db2 <_svfiprintf_r+0x1c6>
 8002c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c62:	445a      	add	r2, fp
 8002c64:	9209      	str	r2, [sp, #36]	; 0x24
 8002c66:	f89a 3000 	ldrb.w	r3, [sl]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 80a1 	beq.w	8002db2 <_svfiprintf_r+0x1c6>
 8002c70:	2300      	movs	r3, #0
 8002c72:	f04f 32ff 	mov.w	r2, #4294967295
 8002c76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c7a:	f10a 0a01 	add.w	sl, sl, #1
 8002c7e:	9304      	str	r3, [sp, #16]
 8002c80:	9307      	str	r3, [sp, #28]
 8002c82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c86:	931a      	str	r3, [sp, #104]	; 0x68
 8002c88:	4654      	mov	r4, sl
 8002c8a:	2205      	movs	r2, #5
 8002c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c90:	4850      	ldr	r0, [pc, #320]	; (8002dd4 <_svfiprintf_r+0x1e8>)
 8002c92:	f7fd fa9d 	bl	80001d0 <memchr>
 8002c96:	9a04      	ldr	r2, [sp, #16]
 8002c98:	b9d8      	cbnz	r0, 8002cd2 <_svfiprintf_r+0xe6>
 8002c9a:	06d0      	lsls	r0, r2, #27
 8002c9c:	bf44      	itt	mi
 8002c9e:	2320      	movmi	r3, #32
 8002ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ca4:	0711      	lsls	r1, r2, #28
 8002ca6:	bf44      	itt	mi
 8002ca8:	232b      	movmi	r3, #43	; 0x2b
 8002caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cae:	f89a 3000 	ldrb.w	r3, [sl]
 8002cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8002cb4:	d015      	beq.n	8002ce2 <_svfiprintf_r+0xf6>
 8002cb6:	9a07      	ldr	r2, [sp, #28]
 8002cb8:	4654      	mov	r4, sl
 8002cba:	2000      	movs	r0, #0
 8002cbc:	f04f 0c0a 	mov.w	ip, #10
 8002cc0:	4621      	mov	r1, r4
 8002cc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cc6:	3b30      	subs	r3, #48	; 0x30
 8002cc8:	2b09      	cmp	r3, #9
 8002cca:	d94d      	bls.n	8002d68 <_svfiprintf_r+0x17c>
 8002ccc:	b1b0      	cbz	r0, 8002cfc <_svfiprintf_r+0x110>
 8002cce:	9207      	str	r2, [sp, #28]
 8002cd0:	e014      	b.n	8002cfc <_svfiprintf_r+0x110>
 8002cd2:	eba0 0308 	sub.w	r3, r0, r8
 8002cd6:	fa09 f303 	lsl.w	r3, r9, r3
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	9304      	str	r3, [sp, #16]
 8002cde:	46a2      	mov	sl, r4
 8002ce0:	e7d2      	b.n	8002c88 <_svfiprintf_r+0x9c>
 8002ce2:	9b03      	ldr	r3, [sp, #12]
 8002ce4:	1d19      	adds	r1, r3, #4
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	9103      	str	r1, [sp, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	bfbb      	ittet	lt
 8002cee:	425b      	neglt	r3, r3
 8002cf0:	f042 0202 	orrlt.w	r2, r2, #2
 8002cf4:	9307      	strge	r3, [sp, #28]
 8002cf6:	9307      	strlt	r3, [sp, #28]
 8002cf8:	bfb8      	it	lt
 8002cfa:	9204      	strlt	r2, [sp, #16]
 8002cfc:	7823      	ldrb	r3, [r4, #0]
 8002cfe:	2b2e      	cmp	r3, #46	; 0x2e
 8002d00:	d10c      	bne.n	8002d1c <_svfiprintf_r+0x130>
 8002d02:	7863      	ldrb	r3, [r4, #1]
 8002d04:	2b2a      	cmp	r3, #42	; 0x2a
 8002d06:	d134      	bne.n	8002d72 <_svfiprintf_r+0x186>
 8002d08:	9b03      	ldr	r3, [sp, #12]
 8002d0a:	1d1a      	adds	r2, r3, #4
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	9203      	str	r2, [sp, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bfb8      	it	lt
 8002d14:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d18:	3402      	adds	r4, #2
 8002d1a:	9305      	str	r3, [sp, #20]
 8002d1c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002de4 <_svfiprintf_r+0x1f8>
 8002d20:	7821      	ldrb	r1, [r4, #0]
 8002d22:	2203      	movs	r2, #3
 8002d24:	4650      	mov	r0, sl
 8002d26:	f7fd fa53 	bl	80001d0 <memchr>
 8002d2a:	b138      	cbz	r0, 8002d3c <_svfiprintf_r+0x150>
 8002d2c:	9b04      	ldr	r3, [sp, #16]
 8002d2e:	eba0 000a 	sub.w	r0, r0, sl
 8002d32:	2240      	movs	r2, #64	; 0x40
 8002d34:	4082      	lsls	r2, r0
 8002d36:	4313      	orrs	r3, r2
 8002d38:	3401      	adds	r4, #1
 8002d3a:	9304      	str	r3, [sp, #16]
 8002d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d40:	4825      	ldr	r0, [pc, #148]	; (8002dd8 <_svfiprintf_r+0x1ec>)
 8002d42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d46:	2206      	movs	r2, #6
 8002d48:	f7fd fa42 	bl	80001d0 <memchr>
 8002d4c:	2800      	cmp	r0, #0
 8002d4e:	d038      	beq.n	8002dc2 <_svfiprintf_r+0x1d6>
 8002d50:	4b22      	ldr	r3, [pc, #136]	; (8002ddc <_svfiprintf_r+0x1f0>)
 8002d52:	bb1b      	cbnz	r3, 8002d9c <_svfiprintf_r+0x1b0>
 8002d54:	9b03      	ldr	r3, [sp, #12]
 8002d56:	3307      	adds	r3, #7
 8002d58:	f023 0307 	bic.w	r3, r3, #7
 8002d5c:	3308      	adds	r3, #8
 8002d5e:	9303      	str	r3, [sp, #12]
 8002d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d62:	4433      	add	r3, r6
 8002d64:	9309      	str	r3, [sp, #36]	; 0x24
 8002d66:	e768      	b.n	8002c3a <_svfiprintf_r+0x4e>
 8002d68:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d6c:	460c      	mov	r4, r1
 8002d6e:	2001      	movs	r0, #1
 8002d70:	e7a6      	b.n	8002cc0 <_svfiprintf_r+0xd4>
 8002d72:	2300      	movs	r3, #0
 8002d74:	3401      	adds	r4, #1
 8002d76:	9305      	str	r3, [sp, #20]
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f04f 0c0a 	mov.w	ip, #10
 8002d7e:	4620      	mov	r0, r4
 8002d80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d84:	3a30      	subs	r2, #48	; 0x30
 8002d86:	2a09      	cmp	r2, #9
 8002d88:	d903      	bls.n	8002d92 <_svfiprintf_r+0x1a6>
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0c6      	beq.n	8002d1c <_svfiprintf_r+0x130>
 8002d8e:	9105      	str	r1, [sp, #20]
 8002d90:	e7c4      	b.n	8002d1c <_svfiprintf_r+0x130>
 8002d92:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d96:	4604      	mov	r4, r0
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e7f0      	b.n	8002d7e <_svfiprintf_r+0x192>
 8002d9c:	ab03      	add	r3, sp, #12
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	462a      	mov	r2, r5
 8002da2:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <_svfiprintf_r+0x1f4>)
 8002da4:	a904      	add	r1, sp, #16
 8002da6:	4638      	mov	r0, r7
 8002da8:	f3af 8000 	nop.w
 8002dac:	1c42      	adds	r2, r0, #1
 8002dae:	4606      	mov	r6, r0
 8002db0:	d1d6      	bne.n	8002d60 <_svfiprintf_r+0x174>
 8002db2:	89ab      	ldrh	r3, [r5, #12]
 8002db4:	065b      	lsls	r3, r3, #25
 8002db6:	f53f af2d 	bmi.w	8002c14 <_svfiprintf_r+0x28>
 8002dba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002dbc:	b01d      	add	sp, #116	; 0x74
 8002dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dc2:	ab03      	add	r3, sp, #12
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	462a      	mov	r2, r5
 8002dc8:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <_svfiprintf_r+0x1f4>)
 8002dca:	a904      	add	r1, sp, #16
 8002dcc:	4638      	mov	r0, r7
 8002dce:	f000 f879 	bl	8002ec4 <_printf_i>
 8002dd2:	e7eb      	b.n	8002dac <_svfiprintf_r+0x1c0>
 8002dd4:	0800326f 	.word	0x0800326f
 8002dd8:	08003279 	.word	0x08003279
 8002ddc:	00000000 	.word	0x00000000
 8002de0:	08002b39 	.word	0x08002b39
 8002de4:	08003275 	.word	0x08003275

08002de8 <_printf_common>:
 8002de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dec:	4616      	mov	r6, r2
 8002dee:	4699      	mov	r9, r3
 8002df0:	688a      	ldr	r2, [r1, #8]
 8002df2:	690b      	ldr	r3, [r1, #16]
 8002df4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	bfb8      	it	lt
 8002dfc:	4613      	movlt	r3, r2
 8002dfe:	6033      	str	r3, [r6, #0]
 8002e00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e04:	4607      	mov	r7, r0
 8002e06:	460c      	mov	r4, r1
 8002e08:	b10a      	cbz	r2, 8002e0e <_printf_common+0x26>
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	6033      	str	r3, [r6, #0]
 8002e0e:	6823      	ldr	r3, [r4, #0]
 8002e10:	0699      	lsls	r1, r3, #26
 8002e12:	bf42      	ittt	mi
 8002e14:	6833      	ldrmi	r3, [r6, #0]
 8002e16:	3302      	addmi	r3, #2
 8002e18:	6033      	strmi	r3, [r6, #0]
 8002e1a:	6825      	ldr	r5, [r4, #0]
 8002e1c:	f015 0506 	ands.w	r5, r5, #6
 8002e20:	d106      	bne.n	8002e30 <_printf_common+0x48>
 8002e22:	f104 0a19 	add.w	sl, r4, #25
 8002e26:	68e3      	ldr	r3, [r4, #12]
 8002e28:	6832      	ldr	r2, [r6, #0]
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	42ab      	cmp	r3, r5
 8002e2e:	dc26      	bgt.n	8002e7e <_printf_common+0x96>
 8002e30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e34:	1e13      	subs	r3, r2, #0
 8002e36:	6822      	ldr	r2, [r4, #0]
 8002e38:	bf18      	it	ne
 8002e3a:	2301      	movne	r3, #1
 8002e3c:	0692      	lsls	r2, r2, #26
 8002e3e:	d42b      	bmi.n	8002e98 <_printf_common+0xb0>
 8002e40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e44:	4649      	mov	r1, r9
 8002e46:	4638      	mov	r0, r7
 8002e48:	47c0      	blx	r8
 8002e4a:	3001      	adds	r0, #1
 8002e4c:	d01e      	beq.n	8002e8c <_printf_common+0xa4>
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	6922      	ldr	r2, [r4, #16]
 8002e52:	f003 0306 	and.w	r3, r3, #6
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	bf02      	ittt	eq
 8002e5a:	68e5      	ldreq	r5, [r4, #12]
 8002e5c:	6833      	ldreq	r3, [r6, #0]
 8002e5e:	1aed      	subeq	r5, r5, r3
 8002e60:	68a3      	ldr	r3, [r4, #8]
 8002e62:	bf0c      	ite	eq
 8002e64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e68:	2500      	movne	r5, #0
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	bfc4      	itt	gt
 8002e6e:	1a9b      	subgt	r3, r3, r2
 8002e70:	18ed      	addgt	r5, r5, r3
 8002e72:	2600      	movs	r6, #0
 8002e74:	341a      	adds	r4, #26
 8002e76:	42b5      	cmp	r5, r6
 8002e78:	d11a      	bne.n	8002eb0 <_printf_common+0xc8>
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	e008      	b.n	8002e90 <_printf_common+0xa8>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	4652      	mov	r2, sl
 8002e82:	4649      	mov	r1, r9
 8002e84:	4638      	mov	r0, r7
 8002e86:	47c0      	blx	r8
 8002e88:	3001      	adds	r0, #1
 8002e8a:	d103      	bne.n	8002e94 <_printf_common+0xac>
 8002e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e94:	3501      	adds	r5, #1
 8002e96:	e7c6      	b.n	8002e26 <_printf_common+0x3e>
 8002e98:	18e1      	adds	r1, r4, r3
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	2030      	movs	r0, #48	; 0x30
 8002e9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ea2:	4422      	add	r2, r4
 8002ea4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ea8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002eac:	3302      	adds	r3, #2
 8002eae:	e7c7      	b.n	8002e40 <_printf_common+0x58>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	4622      	mov	r2, r4
 8002eb4:	4649      	mov	r1, r9
 8002eb6:	4638      	mov	r0, r7
 8002eb8:	47c0      	blx	r8
 8002eba:	3001      	adds	r0, #1
 8002ebc:	d0e6      	beq.n	8002e8c <_printf_common+0xa4>
 8002ebe:	3601      	adds	r6, #1
 8002ec0:	e7d9      	b.n	8002e76 <_printf_common+0x8e>
	...

08002ec4 <_printf_i>:
 8002ec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ec8:	7e0f      	ldrb	r7, [r1, #24]
 8002eca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002ecc:	2f78      	cmp	r7, #120	; 0x78
 8002ece:	4691      	mov	r9, r2
 8002ed0:	4680      	mov	r8, r0
 8002ed2:	460c      	mov	r4, r1
 8002ed4:	469a      	mov	sl, r3
 8002ed6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002eda:	d807      	bhi.n	8002eec <_printf_i+0x28>
 8002edc:	2f62      	cmp	r7, #98	; 0x62
 8002ede:	d80a      	bhi.n	8002ef6 <_printf_i+0x32>
 8002ee0:	2f00      	cmp	r7, #0
 8002ee2:	f000 80d4 	beq.w	800308e <_printf_i+0x1ca>
 8002ee6:	2f58      	cmp	r7, #88	; 0x58
 8002ee8:	f000 80c0 	beq.w	800306c <_printf_i+0x1a8>
 8002eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ef0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ef4:	e03a      	b.n	8002f6c <_printf_i+0xa8>
 8002ef6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002efa:	2b15      	cmp	r3, #21
 8002efc:	d8f6      	bhi.n	8002eec <_printf_i+0x28>
 8002efe:	a101      	add	r1, pc, #4	; (adr r1, 8002f04 <_printf_i+0x40>)
 8002f00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f04:	08002f5d 	.word	0x08002f5d
 8002f08:	08002f71 	.word	0x08002f71
 8002f0c:	08002eed 	.word	0x08002eed
 8002f10:	08002eed 	.word	0x08002eed
 8002f14:	08002eed 	.word	0x08002eed
 8002f18:	08002eed 	.word	0x08002eed
 8002f1c:	08002f71 	.word	0x08002f71
 8002f20:	08002eed 	.word	0x08002eed
 8002f24:	08002eed 	.word	0x08002eed
 8002f28:	08002eed 	.word	0x08002eed
 8002f2c:	08002eed 	.word	0x08002eed
 8002f30:	08003075 	.word	0x08003075
 8002f34:	08002f9d 	.word	0x08002f9d
 8002f38:	0800302f 	.word	0x0800302f
 8002f3c:	08002eed 	.word	0x08002eed
 8002f40:	08002eed 	.word	0x08002eed
 8002f44:	08003097 	.word	0x08003097
 8002f48:	08002eed 	.word	0x08002eed
 8002f4c:	08002f9d 	.word	0x08002f9d
 8002f50:	08002eed 	.word	0x08002eed
 8002f54:	08002eed 	.word	0x08002eed
 8002f58:	08003037 	.word	0x08003037
 8002f5c:	682b      	ldr	r3, [r5, #0]
 8002f5e:	1d1a      	adds	r2, r3, #4
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	602a      	str	r2, [r5, #0]
 8002f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e09f      	b.n	80030b0 <_printf_i+0x1ec>
 8002f70:	6820      	ldr	r0, [r4, #0]
 8002f72:	682b      	ldr	r3, [r5, #0]
 8002f74:	0607      	lsls	r7, r0, #24
 8002f76:	f103 0104 	add.w	r1, r3, #4
 8002f7a:	6029      	str	r1, [r5, #0]
 8002f7c:	d501      	bpl.n	8002f82 <_printf_i+0xbe>
 8002f7e:	681e      	ldr	r6, [r3, #0]
 8002f80:	e003      	b.n	8002f8a <_printf_i+0xc6>
 8002f82:	0646      	lsls	r6, r0, #25
 8002f84:	d5fb      	bpl.n	8002f7e <_printf_i+0xba>
 8002f86:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002f8a:	2e00      	cmp	r6, #0
 8002f8c:	da03      	bge.n	8002f96 <_printf_i+0xd2>
 8002f8e:	232d      	movs	r3, #45	; 0x2d
 8002f90:	4276      	negs	r6, r6
 8002f92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f96:	485a      	ldr	r0, [pc, #360]	; (8003100 <_printf_i+0x23c>)
 8002f98:	230a      	movs	r3, #10
 8002f9a:	e012      	b.n	8002fc2 <_printf_i+0xfe>
 8002f9c:	682b      	ldr	r3, [r5, #0]
 8002f9e:	6820      	ldr	r0, [r4, #0]
 8002fa0:	1d19      	adds	r1, r3, #4
 8002fa2:	6029      	str	r1, [r5, #0]
 8002fa4:	0605      	lsls	r5, r0, #24
 8002fa6:	d501      	bpl.n	8002fac <_printf_i+0xe8>
 8002fa8:	681e      	ldr	r6, [r3, #0]
 8002faa:	e002      	b.n	8002fb2 <_printf_i+0xee>
 8002fac:	0641      	lsls	r1, r0, #25
 8002fae:	d5fb      	bpl.n	8002fa8 <_printf_i+0xe4>
 8002fb0:	881e      	ldrh	r6, [r3, #0]
 8002fb2:	4853      	ldr	r0, [pc, #332]	; (8003100 <_printf_i+0x23c>)
 8002fb4:	2f6f      	cmp	r7, #111	; 0x6f
 8002fb6:	bf0c      	ite	eq
 8002fb8:	2308      	moveq	r3, #8
 8002fba:	230a      	movne	r3, #10
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002fc2:	6865      	ldr	r5, [r4, #4]
 8002fc4:	60a5      	str	r5, [r4, #8]
 8002fc6:	2d00      	cmp	r5, #0
 8002fc8:	bfa2      	ittt	ge
 8002fca:	6821      	ldrge	r1, [r4, #0]
 8002fcc:	f021 0104 	bicge.w	r1, r1, #4
 8002fd0:	6021      	strge	r1, [r4, #0]
 8002fd2:	b90e      	cbnz	r6, 8002fd8 <_printf_i+0x114>
 8002fd4:	2d00      	cmp	r5, #0
 8002fd6:	d04b      	beq.n	8003070 <_printf_i+0x1ac>
 8002fd8:	4615      	mov	r5, r2
 8002fda:	fbb6 f1f3 	udiv	r1, r6, r3
 8002fde:	fb03 6711 	mls	r7, r3, r1, r6
 8002fe2:	5dc7      	ldrb	r7, [r0, r7]
 8002fe4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002fe8:	4637      	mov	r7, r6
 8002fea:	42bb      	cmp	r3, r7
 8002fec:	460e      	mov	r6, r1
 8002fee:	d9f4      	bls.n	8002fda <_printf_i+0x116>
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d10b      	bne.n	800300c <_printf_i+0x148>
 8002ff4:	6823      	ldr	r3, [r4, #0]
 8002ff6:	07de      	lsls	r6, r3, #31
 8002ff8:	d508      	bpl.n	800300c <_printf_i+0x148>
 8002ffa:	6923      	ldr	r3, [r4, #16]
 8002ffc:	6861      	ldr	r1, [r4, #4]
 8002ffe:	4299      	cmp	r1, r3
 8003000:	bfde      	ittt	le
 8003002:	2330      	movle	r3, #48	; 0x30
 8003004:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003008:	f105 35ff 	addle.w	r5, r5, #4294967295
 800300c:	1b52      	subs	r2, r2, r5
 800300e:	6122      	str	r2, [r4, #16]
 8003010:	f8cd a000 	str.w	sl, [sp]
 8003014:	464b      	mov	r3, r9
 8003016:	aa03      	add	r2, sp, #12
 8003018:	4621      	mov	r1, r4
 800301a:	4640      	mov	r0, r8
 800301c:	f7ff fee4 	bl	8002de8 <_printf_common>
 8003020:	3001      	adds	r0, #1
 8003022:	d14a      	bne.n	80030ba <_printf_i+0x1f6>
 8003024:	f04f 30ff 	mov.w	r0, #4294967295
 8003028:	b004      	add	sp, #16
 800302a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800302e:	6823      	ldr	r3, [r4, #0]
 8003030:	f043 0320 	orr.w	r3, r3, #32
 8003034:	6023      	str	r3, [r4, #0]
 8003036:	4833      	ldr	r0, [pc, #204]	; (8003104 <_printf_i+0x240>)
 8003038:	2778      	movs	r7, #120	; 0x78
 800303a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800303e:	6823      	ldr	r3, [r4, #0]
 8003040:	6829      	ldr	r1, [r5, #0]
 8003042:	061f      	lsls	r7, r3, #24
 8003044:	f851 6b04 	ldr.w	r6, [r1], #4
 8003048:	d402      	bmi.n	8003050 <_printf_i+0x18c>
 800304a:	065f      	lsls	r7, r3, #25
 800304c:	bf48      	it	mi
 800304e:	b2b6      	uxthmi	r6, r6
 8003050:	07df      	lsls	r7, r3, #31
 8003052:	bf48      	it	mi
 8003054:	f043 0320 	orrmi.w	r3, r3, #32
 8003058:	6029      	str	r1, [r5, #0]
 800305a:	bf48      	it	mi
 800305c:	6023      	strmi	r3, [r4, #0]
 800305e:	b91e      	cbnz	r6, 8003068 <_printf_i+0x1a4>
 8003060:	6823      	ldr	r3, [r4, #0]
 8003062:	f023 0320 	bic.w	r3, r3, #32
 8003066:	6023      	str	r3, [r4, #0]
 8003068:	2310      	movs	r3, #16
 800306a:	e7a7      	b.n	8002fbc <_printf_i+0xf8>
 800306c:	4824      	ldr	r0, [pc, #144]	; (8003100 <_printf_i+0x23c>)
 800306e:	e7e4      	b.n	800303a <_printf_i+0x176>
 8003070:	4615      	mov	r5, r2
 8003072:	e7bd      	b.n	8002ff0 <_printf_i+0x12c>
 8003074:	682b      	ldr	r3, [r5, #0]
 8003076:	6826      	ldr	r6, [r4, #0]
 8003078:	6961      	ldr	r1, [r4, #20]
 800307a:	1d18      	adds	r0, r3, #4
 800307c:	6028      	str	r0, [r5, #0]
 800307e:	0635      	lsls	r5, r6, #24
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	d501      	bpl.n	8003088 <_printf_i+0x1c4>
 8003084:	6019      	str	r1, [r3, #0]
 8003086:	e002      	b.n	800308e <_printf_i+0x1ca>
 8003088:	0670      	lsls	r0, r6, #25
 800308a:	d5fb      	bpl.n	8003084 <_printf_i+0x1c0>
 800308c:	8019      	strh	r1, [r3, #0]
 800308e:	2300      	movs	r3, #0
 8003090:	6123      	str	r3, [r4, #16]
 8003092:	4615      	mov	r5, r2
 8003094:	e7bc      	b.n	8003010 <_printf_i+0x14c>
 8003096:	682b      	ldr	r3, [r5, #0]
 8003098:	1d1a      	adds	r2, r3, #4
 800309a:	602a      	str	r2, [r5, #0]
 800309c:	681d      	ldr	r5, [r3, #0]
 800309e:	6862      	ldr	r2, [r4, #4]
 80030a0:	2100      	movs	r1, #0
 80030a2:	4628      	mov	r0, r5
 80030a4:	f7fd f894 	bl	80001d0 <memchr>
 80030a8:	b108      	cbz	r0, 80030ae <_printf_i+0x1ea>
 80030aa:	1b40      	subs	r0, r0, r5
 80030ac:	6060      	str	r0, [r4, #4]
 80030ae:	6863      	ldr	r3, [r4, #4]
 80030b0:	6123      	str	r3, [r4, #16]
 80030b2:	2300      	movs	r3, #0
 80030b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030b8:	e7aa      	b.n	8003010 <_printf_i+0x14c>
 80030ba:	6923      	ldr	r3, [r4, #16]
 80030bc:	462a      	mov	r2, r5
 80030be:	4649      	mov	r1, r9
 80030c0:	4640      	mov	r0, r8
 80030c2:	47d0      	blx	sl
 80030c4:	3001      	adds	r0, #1
 80030c6:	d0ad      	beq.n	8003024 <_printf_i+0x160>
 80030c8:	6823      	ldr	r3, [r4, #0]
 80030ca:	079b      	lsls	r3, r3, #30
 80030cc:	d413      	bmi.n	80030f6 <_printf_i+0x232>
 80030ce:	68e0      	ldr	r0, [r4, #12]
 80030d0:	9b03      	ldr	r3, [sp, #12]
 80030d2:	4298      	cmp	r0, r3
 80030d4:	bfb8      	it	lt
 80030d6:	4618      	movlt	r0, r3
 80030d8:	e7a6      	b.n	8003028 <_printf_i+0x164>
 80030da:	2301      	movs	r3, #1
 80030dc:	4632      	mov	r2, r6
 80030de:	4649      	mov	r1, r9
 80030e0:	4640      	mov	r0, r8
 80030e2:	47d0      	blx	sl
 80030e4:	3001      	adds	r0, #1
 80030e6:	d09d      	beq.n	8003024 <_printf_i+0x160>
 80030e8:	3501      	adds	r5, #1
 80030ea:	68e3      	ldr	r3, [r4, #12]
 80030ec:	9903      	ldr	r1, [sp, #12]
 80030ee:	1a5b      	subs	r3, r3, r1
 80030f0:	42ab      	cmp	r3, r5
 80030f2:	dcf2      	bgt.n	80030da <_printf_i+0x216>
 80030f4:	e7eb      	b.n	80030ce <_printf_i+0x20a>
 80030f6:	2500      	movs	r5, #0
 80030f8:	f104 0619 	add.w	r6, r4, #25
 80030fc:	e7f5      	b.n	80030ea <_printf_i+0x226>
 80030fe:	bf00      	nop
 8003100:	08003280 	.word	0x08003280
 8003104:	08003291 	.word	0x08003291

08003108 <memmove>:
 8003108:	4288      	cmp	r0, r1
 800310a:	b510      	push	{r4, lr}
 800310c:	eb01 0402 	add.w	r4, r1, r2
 8003110:	d902      	bls.n	8003118 <memmove+0x10>
 8003112:	4284      	cmp	r4, r0
 8003114:	4623      	mov	r3, r4
 8003116:	d807      	bhi.n	8003128 <memmove+0x20>
 8003118:	1e43      	subs	r3, r0, #1
 800311a:	42a1      	cmp	r1, r4
 800311c:	d008      	beq.n	8003130 <memmove+0x28>
 800311e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003122:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003126:	e7f8      	b.n	800311a <memmove+0x12>
 8003128:	4402      	add	r2, r0
 800312a:	4601      	mov	r1, r0
 800312c:	428a      	cmp	r2, r1
 800312e:	d100      	bne.n	8003132 <memmove+0x2a>
 8003130:	bd10      	pop	{r4, pc}
 8003132:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003136:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800313a:	e7f7      	b.n	800312c <memmove+0x24>

0800313c <_sbrk_r>:
 800313c:	b538      	push	{r3, r4, r5, lr}
 800313e:	4d06      	ldr	r5, [pc, #24]	; (8003158 <_sbrk_r+0x1c>)
 8003140:	2300      	movs	r3, #0
 8003142:	4604      	mov	r4, r0
 8003144:	4608      	mov	r0, r1
 8003146:	602b      	str	r3, [r5, #0]
 8003148:	f7fe f8f4 	bl	8001334 <_sbrk>
 800314c:	1c43      	adds	r3, r0, #1
 800314e:	d102      	bne.n	8003156 <_sbrk_r+0x1a>
 8003150:	682b      	ldr	r3, [r5, #0]
 8003152:	b103      	cbz	r3, 8003156 <_sbrk_r+0x1a>
 8003154:	6023      	str	r3, [r4, #0]
 8003156:	bd38      	pop	{r3, r4, r5, pc}
 8003158:	20000310 	.word	0x20000310

0800315c <memcpy>:
 800315c:	440a      	add	r2, r1
 800315e:	4291      	cmp	r1, r2
 8003160:	f100 33ff 	add.w	r3, r0, #4294967295
 8003164:	d100      	bne.n	8003168 <memcpy+0xc>
 8003166:	4770      	bx	lr
 8003168:	b510      	push	{r4, lr}
 800316a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800316e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003172:	4291      	cmp	r1, r2
 8003174:	d1f9      	bne.n	800316a <memcpy+0xe>
 8003176:	bd10      	pop	{r4, pc}

08003178 <_realloc_r>:
 8003178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800317c:	4680      	mov	r8, r0
 800317e:	4614      	mov	r4, r2
 8003180:	460e      	mov	r6, r1
 8003182:	b921      	cbnz	r1, 800318e <_realloc_r+0x16>
 8003184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003188:	4611      	mov	r1, r2
 800318a:	f7ff bc49 	b.w	8002a20 <_malloc_r>
 800318e:	b92a      	cbnz	r2, 800319c <_realloc_r+0x24>
 8003190:	f7ff fbda 	bl	8002948 <_free_r>
 8003194:	4625      	mov	r5, r4
 8003196:	4628      	mov	r0, r5
 8003198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800319c:	f000 f81b 	bl	80031d6 <_malloc_usable_size_r>
 80031a0:	4284      	cmp	r4, r0
 80031a2:	4607      	mov	r7, r0
 80031a4:	d802      	bhi.n	80031ac <_realloc_r+0x34>
 80031a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80031aa:	d812      	bhi.n	80031d2 <_realloc_r+0x5a>
 80031ac:	4621      	mov	r1, r4
 80031ae:	4640      	mov	r0, r8
 80031b0:	f7ff fc36 	bl	8002a20 <_malloc_r>
 80031b4:	4605      	mov	r5, r0
 80031b6:	2800      	cmp	r0, #0
 80031b8:	d0ed      	beq.n	8003196 <_realloc_r+0x1e>
 80031ba:	42bc      	cmp	r4, r7
 80031bc:	4622      	mov	r2, r4
 80031be:	4631      	mov	r1, r6
 80031c0:	bf28      	it	cs
 80031c2:	463a      	movcs	r2, r7
 80031c4:	f7ff ffca 	bl	800315c <memcpy>
 80031c8:	4631      	mov	r1, r6
 80031ca:	4640      	mov	r0, r8
 80031cc:	f7ff fbbc 	bl	8002948 <_free_r>
 80031d0:	e7e1      	b.n	8003196 <_realloc_r+0x1e>
 80031d2:	4635      	mov	r5, r6
 80031d4:	e7df      	b.n	8003196 <_realloc_r+0x1e>

080031d6 <_malloc_usable_size_r>:
 80031d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031da:	1f18      	subs	r0, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	bfbc      	itt	lt
 80031e0:	580b      	ldrlt	r3, [r1, r0]
 80031e2:	18c0      	addlt	r0, r0, r3
 80031e4:	4770      	bx	lr
	...

080031e8 <_init>:
 80031e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ea:	bf00      	nop
 80031ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ee:	bc08      	pop	{r3}
 80031f0:	469e      	mov	lr, r3
 80031f2:	4770      	bx	lr

080031f4 <_fini>:
 80031f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f6:	bf00      	nop
 80031f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031fa:	bc08      	pop	{r3}
 80031fc:	469e      	mov	lr, r3
 80031fe:	4770      	bx	lr
