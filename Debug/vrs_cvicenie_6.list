
vrs_cvicenie_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007190  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  08007320  08007320  00017320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007768  08007768  00020260  2**0
                  CONTENTS
  4 .ARM          00000000  08007768  08007768  00020260  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007768  08007768  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007768  08007768  00017768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800776c  0800776c  0001776c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  08007770  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020260  2**0
                  CONTENTS
 10 .bss          00000260  20000260  20000260  00020260  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004c0  200004c0  00020260  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 14 .debug_info   00006e2d  00000000  00000000  000202d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001dc6  00000000  00000000  00027100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000918  00000000  00000000  00028ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000692  00000000  00000000  000297e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001d882  00000000  00000000  00029e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009b33  00000000  00000000  000476f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a26f9  00000000  00000000  00051227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003874  00000000  00000000  000f3920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  000f7194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000260 	.word	0x20000260
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007308 	.word	0x08007308

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000264 	.word	0x20000264
 80001cc:	08007308 	.word	0x08007308

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <hts221_read_bytes>:
{
	write_multi_byte(data, len, HTS221_I2C_ADDRESS, register_address);

}
void hts221_read_bytes(uint8_t register_address, uint8_t *data, uint8_t len)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	4613      	mov	r3, r2
 8000c56:	71bb      	strb	r3, [r7, #6]
	read_multi_byte(data, len, HTS221_I2C_ADDRESS, register_address);
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	79b9      	ldrb	r1, [r7, #6]
 8000c5c:	22be      	movs	r2, #190	; 0xbe
 8000c5e:	6838      	ldr	r0, [r7, #0]
 8000c60:	f000 fda2 	bl	80017a8 <read_multi_byte>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <hts221_init>:

uint8_t hts221_init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
	uint8_t ID;
	hts221_read_bytes(HTS221_REG_WHO_AM_I, &ID, 1);
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	2201      	movs	r2, #1
 8000c76:	4619      	mov	r1, r3
 8000c78:	200f      	movs	r0, #15
 8000c7a:	f7ff ffe5 	bl	8000c48 <hts221_read_bytes>
	if(ID != HTS221_WHO_AM_I_VALUE)
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2bbc      	cmp	r3, #188	; 0xbc
 8000c82:	d001      	beq.n	8000c88 <hts221_init+0x1c>
	{
		return 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	e088      	b.n	8000d9a <hts221_init+0x12e>
	}

	uint8_t data[2];
	hts221_read_bytes(HTS221_REG_H0_rH_x2, &data, 1);
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	2030      	movs	r0, #48	; 0x30
 8000c90:	f7ff ffda 	bl	8000c48 <hts221_read_bytes>
	hy0 = data[0]/2;
 8000c94:	793b      	ldrb	r3, [r7, #4]
 8000c96:	085b      	lsrs	r3, r3, #1
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	ee07 3a90 	vmov	s15, r3
 8000c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ca2:	4b40      	ldr	r3, [pc, #256]	; (8000da4 <hts221_init+0x138>)
 8000ca4:	edc3 7a00 	vstr	s15, [r3]
	hts221_read_bytes(HTS221_REG_H1_rH_x2, &data, 1);
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	2201      	movs	r2, #1
 8000cac:	4619      	mov	r1, r3
 8000cae:	2031      	movs	r0, #49	; 0x31
 8000cb0:	f7ff ffca 	bl	8000c48 <hts221_read_bytes>
	hy1 = data[0]/2;
 8000cb4:	793b      	ldrb	r3, [r7, #4]
 8000cb6:	085b      	lsrs	r3, r3, #1
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	ee07 3a90 	vmov	s15, r3
 8000cbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc2:	4b39      	ldr	r3, [pc, #228]	; (8000da8 <hts221_init+0x13c>)
 8000cc4:	edc3 7a00 	vstr	s15, [r3]

	hts221_read_bytes(HTS221_REG_H0_T0_OUT_L, &data, 2);
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2202      	movs	r2, #2
 8000ccc:	4619      	mov	r1, r3
 8000cce:	2036      	movs	r0, #54	; 0x36
 8000cd0:	f7ff ffba 	bl	8000c48 <hts221_read_bytes>
	hx0 = data[0] | data[1] << 8;
 8000cd4:	793b      	ldrb	r3, [r7, #4]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	797b      	ldrb	r3, [r7, #5]
 8000cda:	021b      	lsls	r3, r3, #8
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	ee07 3a90 	vmov	s15, r3
 8000ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ce6:	4b31      	ldr	r3, [pc, #196]	; (8000dac <hts221_init+0x140>)
 8000ce8:	edc3 7a00 	vstr	s15, [r3]
	hts221_read_bytes(HTS221_REG_H1_T0_OUT_L, &data, 2);
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2202      	movs	r2, #2
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	203a      	movs	r0, #58	; 0x3a
 8000cf4:	f7ff ffa8 	bl	8000c48 <hts221_read_bytes>
	hx1 = data[0] | data[1] << 8;
 8000cf8:	793b      	ldrb	r3, [r7, #4]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	797b      	ldrb	r3, [r7, #5]
 8000cfe:	021b      	lsls	r3, r3, #8
 8000d00:	4313      	orrs	r3, r2
 8000d02:	ee07 3a90 	vmov	s15, r3
 8000d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d0a:	4b29      	ldr	r3, [pc, #164]	; (8000db0 <hts221_init+0x144>)
 8000d0c:	edc3 7a00 	vstr	s15, [r3]

	hts221_read_bytes(HTS221_REG_T0_degC_x8, &data, 1);
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2201      	movs	r2, #1
 8000d14:	4619      	mov	r1, r3
 8000d16:	2032      	movs	r0, #50	; 0x32
 8000d18:	f7ff ff96 	bl	8000c48 <hts221_read_bytes>
	ty0 = data[0]/8;
 8000d1c:	793b      	ldrb	r3, [r7, #4]
 8000d1e:	08db      	lsrs	r3, r3, #3
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	ee07 3a90 	vmov	s15, r3
 8000d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d2a:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <hts221_init+0x148>)
 8000d2c:	edc3 7a00 	vstr	s15, [r3]
	hts221_read_bytes(HTS221_REG_T1_degC_x8, &data, 1);
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	2201      	movs	r2, #1
 8000d34:	4619      	mov	r1, r3
 8000d36:	2033      	movs	r0, #51	; 0x33
 8000d38:	f7ff ff86 	bl	8000c48 <hts221_read_bytes>
	ty1 = data[0]/8;
 8000d3c:	793b      	ldrb	r3, [r7, #4]
 8000d3e:	08db      	lsrs	r3, r3, #3
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	ee07 3a90 	vmov	s15, r3
 8000d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d4a:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <hts221_init+0x14c>)
 8000d4c:	edc3 7a00 	vstr	s15, [r3]

	hts221_read_bytes(HTS221_REG_T0_OUT_L, &data, 2);
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2202      	movs	r2, #2
 8000d54:	4619      	mov	r1, r3
 8000d56:	203c      	movs	r0, #60	; 0x3c
 8000d58:	f7ff ff76 	bl	8000c48 <hts221_read_bytes>
	tx0 = data[0] | data[1] << 8;
 8000d5c:	793b      	ldrb	r3, [r7, #4]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	797b      	ldrb	r3, [r7, #5]
 8000d62:	021b      	lsls	r3, r3, #8
 8000d64:	4313      	orrs	r3, r2
 8000d66:	ee07 3a90 	vmov	s15, r3
 8000d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d6e:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <hts221_init+0x150>)
 8000d70:	edc3 7a00 	vstr	s15, [r3]
	hts221_read_bytes(HTS221_REG_T1_OUT_L, &data, 2);
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2202      	movs	r2, #2
 8000d78:	4619      	mov	r1, r3
 8000d7a:	203e      	movs	r0, #62	; 0x3e
 8000d7c:	f7ff ff64 	bl	8000c48 <hts221_read_bytes>
	tx1 = data[0] | data[1] << 8;
 8000d80:	793b      	ldrb	r3, [r7, #4]
 8000d82:	461a      	mov	r2, r3
 8000d84:	797b      	ldrb	r3, [r7, #5]
 8000d86:	021b      	lsls	r3, r3, #8
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	ee07 3a90 	vmov	s15, r3
 8000d8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <hts221_init+0x154>)
 8000d94:	edc3 7a00 	vstr	s15, [r3]


	return 1;
 8000d98:	2301      	movs	r3, #1

}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000294 	.word	0x20000294
 8000da8:	20000298 	.word	0x20000298
 8000dac:	2000028c 	.word	0x2000028c
 8000db0:	20000290 	.word	0x20000290
 8000db4:	20000284 	.word	0x20000284
 8000db8:	20000288 	.word	0x20000288
 8000dbc:	2000027c 	.word	0x2000027c
 8000dc0:	20000280 	.word	0x20000280

08000dc4 <hts221_read_temp>:

float hts221_read_temp(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
	float temp;
	uint8_t data[2];
	uint16_t x;
	hts221_read_bytes(HTS221_REG_TEMP_OUT_L, &data, 2);
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	2202      	movs	r2, #2
 8000dce:	4619      	mov	r1, r3
 8000dd0:	202a      	movs	r0, #42	; 0x2a
 8000dd2:	f7ff ff39 	bl	8000c48 <hts221_read_bytes>
	x = data[1] | data[0] << 8;
 8000dd6:	797b      	ldrb	r3, [r7, #5]
 8000dd8:	b21a      	sxth	r2, r3
 8000dda:	793b      	ldrb	r3, [r7, #4]
 8000ddc:	021b      	lsls	r3, r3, #8
 8000dde:	b21b      	sxth	r3, r3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	b21b      	sxth	r3, r3
 8000de4:	80fb      	strh	r3, [r7, #6]
	return linear_interpolation(x, tx0, tx1, ty0, ty1);
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <hts221_read_temp+0x60>)
 8000de8:	edd3 7a00 	vldr	s15, [r3]
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <hts221_read_temp+0x64>)
 8000dee:	ed93 7a00 	vldr	s14, [r3]
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <hts221_read_temp+0x68>)
 8000df4:	edd3 6a00 	vldr	s13, [r3]
 8000df8:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <hts221_read_temp+0x6c>)
 8000dfa:	ed93 6a00 	vldr	s12, [r3]
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	eef0 1a46 	vmov.f32	s3, s12
 8000e04:	eeb0 1a66 	vmov.f32	s2, s13
 8000e08:	eef0 0a47 	vmov.f32	s1, s14
 8000e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 f847 	bl	8000ea4 <linear_interpolation>
 8000e16:	eef0 7a40 	vmov.f32	s15, s0
}
 8000e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	2000027c 	.word	0x2000027c
 8000e28:	20000280 	.word	0x20000280
 8000e2c:	20000284 	.word	0x20000284
 8000e30:	20000288 	.word	0x20000288

08000e34 <hts221_read_humid>:
float hts221_read_humid(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
	float temp;
	uint8_t data[2];
	uint16_t x;
	hts221_read_bytes(HTS221_REG_HUMIDITY_OUT_L, &data, 2);
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2202      	movs	r2, #2
 8000e3e:	4619      	mov	r1, r3
 8000e40:	2028      	movs	r0, #40	; 0x28
 8000e42:	f7ff ff01 	bl	8000c48 <hts221_read_bytes>
	x = data[1] | data[0] << 8;
 8000e46:	797b      	ldrb	r3, [r7, #5]
 8000e48:	b21a      	sxth	r2, r3
 8000e4a:	793b      	ldrb	r3, [r7, #4]
 8000e4c:	021b      	lsls	r3, r3, #8
 8000e4e:	b21b      	sxth	r3, r3
 8000e50:	4313      	orrs	r3, r2
 8000e52:	b21b      	sxth	r3, r3
 8000e54:	80fb      	strh	r3, [r7, #6]
	return linear_interpolation(x, hx0, hx1, hy0, hy1);
 8000e56:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <hts221_read_humid+0x60>)
 8000e58:	edd3 7a00 	vldr	s15, [r3]
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <hts221_read_humid+0x64>)
 8000e5e:	ed93 7a00 	vldr	s14, [r3]
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <hts221_read_humid+0x68>)
 8000e64:	edd3 6a00 	vldr	s13, [r3]
 8000e68:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <hts221_read_humid+0x6c>)
 8000e6a:	ed93 6a00 	vldr	s12, [r3]
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	eef0 1a46 	vmov.f32	s3, s12
 8000e74:	eeb0 1a66 	vmov.f32	s2, s13
 8000e78:	eef0 0a47 	vmov.f32	s1, s14
 8000e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 f80f 	bl	8000ea4 <linear_interpolation>
 8000e86:	eef0 7a40 	vmov.f32	s15, s0
}
 8000e8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	2000028c 	.word	0x2000028c
 8000e98:	20000290 	.word	0x20000290
 8000e9c:	20000294 	.word	0x20000294
 8000ea0:	20000298 	.word	0x20000298

08000ea4 <linear_interpolation>:

float linear_interpolation(uint16_t x,float xo,float x1,float y0,float y1)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	; 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	ed87 0a04 	vstr	s0, [r7, #16]
 8000eb0:	edc7 0a03 	vstr	s1, [r7, #12]
 8000eb4:	ed87 1a02 	vstr	s2, [r7, #8]
 8000eb8:	edc7 1a01 	vstr	s3, [r7, #4]
 8000ebc:	82fb      	strh	r3, [r7, #22]
	if (x < xo || x > x1) {
 8000ebe:	8afb      	ldrh	r3, [r7, #22]
 8000ec0:	ee07 3a90 	vmov	s15, r3
 8000ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ec8:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ecc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed4:	dc0b      	bgt.n	8000eee <linear_interpolation+0x4a>
 8000ed6:	8afb      	ldrh	r3, [r7, #22]
 8000ed8:	ee07 3a90 	vmov	s15, r3
 8000edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ee0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ee4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eec:	d502      	bpl.n	8000ef4 <linear_interpolation+0x50>
	        // Handle the out-of-range case as needed (e.g., return an error code).
	        // You may choose to return a specific value or handle it differently.
	        // For simplicity, let's return 0 in this example.
	        return 0.0;
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	e023      	b.n	8000f3c <linear_interpolation+0x98>
	    }

	    // Perform linear interpolation
	    // Calculate the interpolation factor
	    float factor = ((float)x - xo) / (x1 - xo);
 8000ef4:	8afb      	ldrh	r3, [r7, #22]
 8000ef6:	ee07 3a90 	vmov	s15, r3
 8000efa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000efe:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f02:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000f06:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f16:	edc7 7a07 	vstr	s15, [r7, #28]

	    // Calculate the interpolated value
	    float interpolatedValue = y0 + factor * (y1 - y0);
 8000f1a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f26:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f2e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f36:	edc7 7a06 	vstr	s15, [r7, #24]

	    return interpolatedValue;
 8000f3a:	69bb      	ldr	r3, [r7, #24]
}
 8000f3c:	ee07 3a90 	vmov	s15, r3
 8000f40:	eeb0 0a67 	vmov.f32	s0, s15
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <lps25hb_write_bytes>:


uint8_t actual_address = LPS25HB_I2C_ADDRESS_0;

void lps25hb_write_bytes(uint8_t register_address, uint8_t *data, uint8_t len, uint8_t i2c_address)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	4611      	mov	r1, r2
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	71bb      	strb	r3, [r7, #6]
 8000f62:	4613      	mov	r3, r2
 8000f64:	717b      	strb	r3, [r7, #5]
	write_multi_byte(data, len, i2c_address, register_address);
 8000f66:	79b9      	ldrb	r1, [r7, #6]
 8000f68:	797a      	ldrb	r2, [r7, #5]
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	6838      	ldr	r0, [r7, #0]
 8000f6e:	f000 fc81 	bl	8001874 <write_multi_byte>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <lps25hb_read_bytes>:
void lps25hb_read_bytes(uint8_t register_address, uint8_t *data, uint8_t len, uint8_t i2c_address)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	4611      	mov	r1, r2
 8000f84:	461a      	mov	r2, r3
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	71bb      	strb	r3, [r7, #6]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	717b      	strb	r3, [r7, #5]
	read_multi_byte(data, len, i2c_address, register_address);
 8000f92:	79b9      	ldrb	r1, [r7, #6]
 8000f94:	797a      	ldrb	r2, [r7, #5]
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	6838      	ldr	r0, [r7, #0]
 8000f9a:	f000 fc05 	bl	80017a8 <read_multi_byte>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <lps25hb_init>:

uint8_t lps25hb_init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
	uint8_t ID;
	lps25hb_read_bytes(LPS25HB_REG_WHO_AM_I_ADDR, &ID, 1, actual_address);
 8000fae:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <lps25hb_init+0x50>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	1df9      	adds	r1, r7, #7
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	200f      	movs	r0, #15
 8000fb8:	f7ff ffdf 	bl	8000f7a <lps25hb_read_bytes>
	if(ID != LPS25HB_WHO_AM_I_VALUE)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	2bb1      	cmp	r3, #177	; 0xb1
 8000fc0:	d00e      	beq.n	8000fe0 <lps25hb_init+0x38>
	{
		actual_address = LPS25HB_I2C_ADDRESS_1;
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <lps25hb_init+0x50>)
 8000fc4:	22b8      	movs	r2, #184	; 0xb8
 8000fc6:	701a      	strb	r2, [r3, #0]
		lps25hb_read_bytes(LPS25HB_REG_WHO_AM_I_ADDR, &ID, 1, actual_address);
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <lps25hb_init+0x50>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	1df9      	adds	r1, r7, #7
 8000fce:	2201      	movs	r2, #1
 8000fd0:	200f      	movs	r0, #15
 8000fd2:	f7ff ffd2 	bl	8000f7a <lps25hb_read_bytes>
		if(ID != LPS25HB_WHO_AM_I_VALUE)
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	2bb1      	cmp	r3, #177	; 0xb1
 8000fda:	d001      	beq.n	8000fe0 <lps25hb_init+0x38>
		{
			return 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	e007      	b.n	8000ff0 <lps25hb_init+0x48>
		}
	}
	lps25hb_write_bytes(LPS25HB_REG_CTRL_REG1, 0b00110000, 1, actual_address);
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <lps25hb_init+0x50>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2130      	movs	r1, #48	; 0x30
 8000fe8:	2010      	movs	r0, #16
 8000fea:	f7ff ffb0 	bl	8000f4e <lps25hb_write_bytes>
	return 1;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000000 	.word	0x20000000

08000ffc <lps25hb_read_pressure>:

float lps25hb_read_pressure(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
	float result = 0;
 8001002:	f04f 0300 	mov.w	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
	uint8_t data[3];
	lps25hb_read_bytes(LPS25HB_REG_PRESS_OUT_XL, &data, 3, actual_address);
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <lps25hb_read_pressure+0x54>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	1d39      	adds	r1, r7, #4
 800100e:	2203      	movs	r2, #3
 8001010:	2028      	movs	r0, #40	; 0x28
 8001012:	f7ff ffb2 	bl	8000f7a <lps25hb_read_bytes>
	int32_t pressure_raw = (int32_t)((data[2] << 16) | (data[1] << 8) | data[0]);
 8001016:	79bb      	ldrb	r3, [r7, #6]
 8001018:	041a      	lsls	r2, r3, #16
 800101a:	797b      	ldrb	r3, [r7, #5]
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	4313      	orrs	r3, r2
 8001020:	793a      	ldrb	r2, [r7, #4]
 8001022:	4313      	orrs	r3, r2
 8001024:	60bb      	str	r3, [r7, #8]
	result = pressure_raw / 4096;
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	2b00      	cmp	r3, #0
 800102a:	da01      	bge.n	8001030 <lps25hb_read_pressure+0x34>
 800102c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001030:	131b      	asrs	r3, r3, #12
 8001032:	ee07 3a90 	vmov	s15, r3
 8001036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800103a:	edc7 7a03 	vstr	s15, [r7, #12]
	return result;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	ee07 3a90 	vmov	s15, r3

}
 8001044:	eeb0 0a67 	vmov.f32	s0, s15
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000000 	.word	0x20000000
 8001054:	00000000 	.word	0x00000000

08001058 <lps25hb_read_altitude>:

float lps25hb_read_altitude(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0

	const float SEA_LEVEL_PRESSURE_HPA = 1013.25; // Standard sea-level pressure in hPa
 800105e:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <lps25hb_read_altitude+0x90>)
 8001060:	60fb      	str	r3, [r7, #12]

	float altitude = 0;
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
	float pressure = lps25hb_read_pressure();
 8001068:	f7ff ffc8 	bl	8000ffc <lps25hb_read_pressure>
 800106c:	ed87 0a01 	vstr	s0, [r7, #4]

	 altitude = 44330.0 * (1.0 - pow((pressure / SEA_LEVEL_PRESSURE_HPA), 0.1903));
 8001070:	ed97 7a01 	vldr	s14, [r7, #4]
 8001074:	edd7 7a03 	vldr	s15, [r7, #12]
 8001078:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800107c:	ee16 0a90 	vmov	r0, s13
 8001080:	f7ff fa62 	bl	8000548 <__aeabi_f2d>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	ed9f 1b13 	vldr	d1, [pc, #76]	; 80010d8 <lps25hb_read_altitude+0x80>
 800108c:	ec43 2b10 	vmov	d0, r2, r3
 8001090:	f005 fa02 	bl	8006498 <pow>
 8001094:	ec53 2b10 	vmov	r2, r3, d0
 8001098:	f04f 0000 	mov.w	r0, #0
 800109c:	4913      	ldr	r1, [pc, #76]	; (80010ec <lps25hb_read_altitude+0x94>)
 800109e:	f7ff f8f3 	bl	8000288 <__aeabi_dsub>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4610      	mov	r0, r2
 80010a8:	4619      	mov	r1, r3
 80010aa:	a30d      	add	r3, pc, #52	; (adr r3, 80010e0 <lps25hb_read_altitude+0x88>)
 80010ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b0:	f7ff faa2 	bl	80005f8 <__aeabi_dmul>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f7ff fd74 	bl	8000ba8 <__aeabi_d2f>
 80010c0:	4603      	mov	r3, r0
 80010c2:	60bb      	str	r3, [r7, #8]

	 return altitude;
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	ee07 3a90 	vmov	s15, r3

}
 80010ca:	eeb0 0a67 	vmov.f32	s0, s15
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	f3af 8000 	nop.w
 80010d8:	1a36e2eb 	.word	0x1a36e2eb
 80010dc:	3fc85bc0 	.word	0x3fc85bc0
 80010e0:	00000000 	.word	0x00000000
 80010e4:	40e5a540 	.word	0x40e5a540
 80010e8:	447d5000 	.word	0x447d5000
 80010ec:	3ff00000 	.word	0x3ff00000

080010f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	db0b      	blt.n	800111a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f003 021f 	and.w	r2, r3, #31
 8001108:	4907      	ldr	r1, [pc, #28]	; (8001128 <__NVIC_EnableIRQ+0x38>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	095b      	lsrs	r3, r3, #5
 8001110:	2001      	movs	r0, #1
 8001112:	fa00 f202 	lsl.w	r2, r0, r2
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000e100 	.word	0xe000e100

0800112c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	2b00      	cmp	r3, #0
 800113e:	db0a      	blt.n	8001156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	490c      	ldr	r1, [pc, #48]	; (8001178 <__NVIC_SetPriority+0x4c>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	0112      	lsls	r2, r2, #4
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	440b      	add	r3, r1
 8001150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001154:	e00a      	b.n	800116c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4908      	ldr	r1, [pc, #32]	; (800117c <__NVIC_SetPriority+0x50>)
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	3b04      	subs	r3, #4
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	440b      	add	r3, r1
 800116a:	761a      	strb	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000e100 	.word	0xe000e100
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800118a:	695a      	ldr	r2, [r3, #20]
 800118c:	4907      	ldr	r1, [pc, #28]	; (80011ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4313      	orrs	r3, r2
 8001192:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001196:	695a      	ldr	r2, [r3, #20]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4013      	ands	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800119e:	68fb      	ldr	r3, [r7, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	40021000 	.word	0x40021000

080011b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80011b4:	2001      	movs	r0, #1
 80011b6:	f7ff ffe3 	bl	8001180 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, 0);
 80011ba:	2100      	movs	r1, #0
 80011bc:	2010      	movs	r0, #16
 80011be:	f7ff ffb5 	bl	800112c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80011c2:	2010      	movs	r0, #16
 80011c4:	f7ff ff94 	bl	80010f0 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, 0);
 80011c8:	2100      	movs	r1, #0
 80011ca:	2011      	movs	r0, #17
 80011cc:	f7ff ffae 	bl	800112c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80011d0:	2011      	movs	r0, #17
 80011d2:	f7ff ff8d 	bl	80010f0 <__NVIC_EnableIRQ>

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <LL_AHB1_GRP1_EnableClock>:
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011e6:	695a      	ldr	r2, [r3, #20]
 80011e8:	4907      	ldr	r1, [pc, #28]	; (8001208 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011f2:	695a      	ldr	r2, [r3, #20]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4013      	ands	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011fa:	68fb      	ldr	r3, [r7, #12]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	40021000 	.word	0x40021000

0800120c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa93 f3a3 	rbit	r3, r3
 8001226:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	fab3 f383 	clz	r3, r3
 800122e:	b2db      	uxtb	r3, r3
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2103      	movs	r1, #3
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	401a      	ands	r2, r3
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	fa93 f3a3 	rbit	r3, r3
 8001246:	61bb      	str	r3, [r7, #24]
  return result;
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	fab3 f383 	clz	r3, r3
 800124e:	b2db      	uxtb	r3, r3
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	fa01 f303 	lsl.w	r3, r1, r3
 8001258:	431a      	orrs	r2, r3
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	601a      	str	r2, [r3, #0]
}
 800125e:	bf00      	nop
 8001260:	3724      	adds	r7, #36	; 0x24
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	619a      	str	r2, [r3, #24]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */

  /* LED pin configuration */
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_3, LL_GPIO_MODE_OUTPUT);
 80012aa:	2201      	movs	r2, #1
 80012ac:	2108      	movs	r1, #8
 80012ae:	4817      	ldr	r0, [pc, #92]	; (800130c <MX_GPIO_Init+0x68>)
 80012b0:	f7ff ffac 	bl	800120c <LL_GPIO_SetPinMode>
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_3);
 80012b4:	2108      	movs	r1, #8
 80012b6:	4815      	ldr	r0, [pc, #84]	; (800130c <MX_GPIO_Init+0x68>)
 80012b8:	f7ff ffd7 	bl	800126a <LL_GPIO_SetOutputPin>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	463b      	mov	r3, r7
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]
 80012ca:	615a      	str	r2, [r3, #20]

    /* GPIO Ports Clock Enable */
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80012cc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80012d0:	f7ff ff84 	bl	80011dc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80012d4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80012d8:	f7ff ff80 	bl	80011dc <LL_AHB1_GRP1_EnableClock>

	/**/
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 80012dc:	2108      	movs	r1, #8
 80012de:	480b      	ldr	r0, [pc, #44]	; (800130c <MX_GPIO_Init+0x68>)
 80012e0:	f7ff ffd1 	bl	8001286 <LL_GPIO_ResetOutputPin>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80012e4:	2308      	movs	r3, #8
 80012e6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012e8:	2301      	movs	r3, #1
 80012ea:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f8:	463b      	mov	r3, r7
 80012fa:	4619      	mov	r1, r3
 80012fc:	4803      	ldr	r0, [pc, #12]	; (800130c <MX_GPIO_Init+0x68>)
 80012fe:	f001 fe33 	bl	8002f68 <LL_GPIO_Init>

}
 8001302:	bf00      	nop
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	48000400 	.word	0x48000400

08001310 <__NVIC_GetPriorityGrouping>:
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001314:	4b04      	ldr	r3, [pc, #16]	; (8001328 <__NVIC_GetPriorityGrouping+0x18>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	0a1b      	lsrs	r3, r3, #8
 800131a:	f003 0307 	and.w	r3, r3, #7
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_EnableIRQ>:
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	2b00      	cmp	r3, #0
 800133c:	db0b      	blt.n	8001356 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	f003 021f 	and.w	r2, r3, #31
 8001344:	4907      	ldr	r1, [pc, #28]	; (8001364 <__NVIC_EnableIRQ+0x38>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	2001      	movs	r0, #1
 800134e:	fa00 f202 	lsl.w	r2, r0, r2
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000e100 	.word	0xe000e100

08001368 <__NVIC_SetPriority>:
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	2b00      	cmp	r3, #0
 800137a:	db0a      	blt.n	8001392 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	490c      	ldr	r1, [pc, #48]	; (80013b4 <__NVIC_SetPriority+0x4c>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	0112      	lsls	r2, r2, #4
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	440b      	add	r3, r1
 800138c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001390:	e00a      	b.n	80013a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4908      	ldr	r1, [pc, #32]	; (80013b8 <__NVIC_SetPriority+0x50>)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	3b04      	subs	r3, #4
 80013a0:	0112      	lsls	r2, r2, #4
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	440b      	add	r3, r1
 80013a6:	761a      	strb	r2, [r3, #24]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000e100 	.word	0xe000e100
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b089      	sub	sp, #36	; 0x24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f1c3 0307 	rsb	r3, r3, #7
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	bf28      	it	cs
 80013da:	2304      	movcs	r3, #4
 80013dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3304      	adds	r3, #4
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	d902      	bls.n	80013ec <NVIC_EncodePriority+0x30>
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3b03      	subs	r3, #3
 80013ea:	e000      	b.n	80013ee <NVIC_EncodePriority+0x32>
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	f04f 32ff 	mov.w	r2, #4294967295
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	401a      	ands	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001404:	f04f 31ff 	mov.w	r1, #4294967295
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa01 f303 	lsl.w	r3, r1, r3
 800140e:	43d9      	mvns	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	4313      	orrs	r3, r2
         );
}
 8001416:	4618      	mov	r0, r3
 8001418:	3724      	adds	r7, #36	; 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f043 0201 	orr.w	r2, r3, #1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	601a      	str	r2, [r3, #0]
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	601a      	str	r2, [r3, #0]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	601a      	str	r2, [r3, #0]
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8001482:	b480      	push	{r7}
 8001484:	b085      	sub	sp, #20
 8001486:	af00      	add	r7, sp, #0
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001496:	f023 0306 	bic.w	r3, r3, #6
 800149a:	68b9      	ldr	r1, [r7, #8]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	430a      	orrs	r2, r1
 80014a0:	431a      	orrs	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	60da      	str	r2, [r3, #12]
}
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	60da      	str	r2, [r3, #12]
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f043 0204 	orr.w	r2, r3, #4
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	601a      	str	r2, [r3, #0]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f023 0204 	bic.w	r2, r3, #4
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	601a      	str	r2, [r3, #0]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(const I2C_TypeDef *I2Cx)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b02      	cmp	r3, #2
 8001524:	d101      	bne.n	800152a <LL_I2C_IsActiveFlag_TXIS+0x18>
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <LL_I2C_IsActiveFlag_TXIS+0x1a>
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b04      	cmp	r3, #4
 800154a:	d101      	bne.n	8001550 <LL_I2C_IsActiveFlag_RXNE+0x18>
 800154c:	2301      	movs	r3, #1
 800154e:	e000      	b.n	8001552 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(const I2C_TypeDef *I2Cx)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	f003 0320 	and.w	r3, r3, #32
 800156e:	2b20      	cmp	r3, #32
 8001570:	d101      	bne.n	8001576 <LL_I2C_IsActiveFlag_STOP+0x18>
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <LL_I2C_ClearFlag_NACK>:
  * @rmtoll ICR          NACKCF        LL_I2C_ClearFlag_NACK
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_NACK(I2C_TypeDef *I2Cx)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	f043 0210 	orr.w	r2, r3, #16
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	61da      	str	r2, [r3, #28]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	f043 0220 	orr.w	r2, r3, #32
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	61da      	str	r2, [r3, #28]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	605a      	str	r2, [r3, #4]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	0d5b      	lsrs	r3, r3, #21
 80015fa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <LL_I2C_HandleTransfer+0x48>)
 8001600:	430b      	orrs	r3, r1
 8001602:	43db      	mvns	r3, r3
 8001604:	401a      	ands	r2, r3
 8001606:	68b9      	ldr	r1, [r7, #8]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4319      	orrs	r1, r3
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	041b      	lsls	r3, r3, #16
 8001610:	4319      	orrs	r1, r3
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	4319      	orrs	r1, r3
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	430b      	orrs	r3, r1
 800161a:	431a      	orrs	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	03ff7bff 	.word	0x03ff7bff

08001630 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	b2db      	uxtb	r3, r3
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	460b      	mov	r3, r1
 8001654:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001656:	78fa      	ldrb	r2, [r7, #3]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_AHB1_GRP1_EnableClock>:
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001672:	695a      	ldr	r2, [r3, #20]
 8001674:	4907      	ldr	r1, [pc, #28]	; (8001694 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4313      	orrs	r3, r2
 800167a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800167e:	695a      	ldr	r2, [r3, #20]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4013      	ands	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001686:	68fb      	ldr	r3, [r7, #12]
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	40021000 	.word	0x40021000

08001698 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80016a2:	69da      	ldr	r2, [r3, #28]
 80016a4:	4907      	ldr	r1, [pc, #28]	; (80016c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80016ae:	69da      	ldr	r2, [r3, #28]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4013      	ands	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016b6:	68fb      	ldr	r3, [r7, #12]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	40021000 	.word	0x40021000

080016c8 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08e      	sub	sp, #56	; 0x38
 80016cc:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80016ce:	f107 031c 	add.w	r3, r7, #28
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
 80016dc:	611a      	str	r2, [r3, #16]
 80016de:	615a      	str	r2, [r3, #20]
 80016e0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
 80016f0:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80016f2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80016f6:	f7ff ffb7 	bl	8001668 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80016fa:	23c0      	movs	r3, #192	; 0xc0
 80016fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80016fe:	2302      	movs	r3, #2
 8001700:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001702:	2303      	movs	r3, #3
 8001704:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001706:	2301      	movs	r3, #1
 8001708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800170a:	2301      	movs	r3, #1
 800170c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800170e:	2304      	movs	r3, #4
 8001710:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	4619      	mov	r1, r3
 8001716:	4821      	ldr	r0, [pc, #132]	; (800179c <MX_I2C1_Init+0xd4>)
 8001718:	f001 fc26 	bl	8002f68 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800171c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001720:	f7ff ffba 	bl	8001698 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001724:	f7ff fdf4 	bl	8001310 <__NVIC_GetPriorityGrouping>
 8001728:	4603      	mov	r3, r0
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fe44 	bl	80013bc <NVIC_EncodePriority>
 8001734:	4603      	mov	r3, r0
 8001736:	4619      	mov	r1, r3
 8001738:	201f      	movs	r0, #31
 800173a:	f7ff fe15 	bl	8001368 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800173e:	201f      	movs	r0, #31
 8001740:	f7ff fdf4 	bl	800132c <__NVIC_EnableIRQ>

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001744:	4816      	ldr	r0, [pc, #88]	; (80017a0 <MX_I2C1_Init+0xd8>)
 8001746:	f7ff ff3d 	bl	80015c4 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 800174a:	4815      	ldr	r0, [pc, #84]	; (80017a0 <MX_I2C1_Init+0xd8>)
 800174c:	f7ff feb1 	bl	80014b2 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001750:	4813      	ldr	r0, [pc, #76]	; (80017a0 <MX_I2C1_Init+0xd8>)
 8001752:	f7ff fe86 	bl	8001462 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001756:	4812      	ldr	r0, [pc, #72]	; (80017a0 <MX_I2C1_Init+0xd8>)
 8001758:	f7ff fe73 	bl	8001442 <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8001760:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <MX_I2C1_Init+0xdc>)
 8001762:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 800176c:	2302      	movs	r3, #2
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001770:	2300      	movs	r3, #0
 8001772:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001774:	2300      	movs	r3, #0
 8001776:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001778:	f107 031c 	add.w	r3, r7, #28
 800177c:	4619      	mov	r1, r3
 800177e:	4808      	ldr	r0, [pc, #32]	; (80017a0 <MX_I2C1_Init+0xd8>)
 8001780:	f001 fd05 	bl	800318e <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001784:	2200      	movs	r2, #0
 8001786:	2100      	movs	r1, #0
 8001788:	4805      	ldr	r0, [pc, #20]	; (80017a0 <MX_I2C1_Init+0xd8>)
 800178a:	f7ff fe7a 	bl	8001482 <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 800178e:	4804      	ldr	r0, [pc, #16]	; (80017a0 <MX_I2C1_Init+0xd8>)
 8001790:	f7ff fe47 	bl	8001422 <LL_I2C_Enable>
}
 8001794:	bf00      	nop
 8001796:	3738      	adds	r7, #56	; 0x38
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	48000400 	.word	0x48000400
 80017a0:	40005400 	.word	0x40005400
 80017a4:	2000090e 	.word	0x2000090e

080017a8 <read_multi_byte>:
//		i2c_rx_data = LL_I2C_ReceiveData8(I2C1);
//	}
//}

void read_multi_byte(uint8_t *data, uint8_t len, uint8_t slave_address, uint8_t register_address)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	4608      	mov	r0, r1
 80017b2:	4611      	mov	r1, r2
 80017b4:	461a      	mov	r2, r3
 80017b6:	4603      	mov	r3, r0
 80017b8:	70fb      	strb	r3, [r7, #3]
 80017ba:	460b      	mov	r3, r1
 80017bc:	70bb      	strb	r3, [r7, #2]
 80017be:	4613      	mov	r3, r2
 80017c0:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = data;
 80017c2:	4a27      	ldr	r2, [pc, #156]	; (8001860 <read_multi_byte+0xb8>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6013      	str	r3, [r2, #0]

	LL_I2C_EnableIT_RX(I2C1);
 80017c8:	4826      	ldr	r0, [pc, #152]	; (8001864 <read_multi_byte+0xbc>)
 80017ca:	f7ff fe82 	bl	80014d2 <LL_I2C_EnableIT_RX>
		// Initialize communication
	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80017ce:	78b9      	ldrb	r1, [r7, #2]
 80017d0:	4b25      	ldr	r3, [pc, #148]	; (8001868 <read_multi_byte+0xc0>)
 80017d2:	9301      	str	r3, [sp, #4]
 80017d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2301      	movs	r3, #1
 80017dc:	2200      	movs	r2, #0
 80017de:	4821      	ldr	r0, [pc, #132]	; (8001864 <read_multi_byte+0xbc>)
 80017e0:	f7ff ff00 	bl	80015e4 <LL_I2C_HandleTransfer>
	// Send register address
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80017e4:	e00a      	b.n	80017fc <read_multi_byte+0x54>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 80017e6:	481f      	ldr	r0, [pc, #124]	; (8001864 <read_multi_byte+0xbc>)
 80017e8:	f7ff fe93 	bl	8001512 <LL_I2C_IsActiveFlag_TXIS>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d004      	beq.n	80017fc <read_multi_byte+0x54>
		{
			LL_I2C_TransmitData8(I2C1, register_address);
 80017f2:	787b      	ldrb	r3, [r7, #1]
 80017f4:	4619      	mov	r1, r3
 80017f6:	481b      	ldr	r0, [pc, #108]	; (8001864 <read_multi_byte+0xbc>)
 80017f8:	f7ff ff27 	bl	800164a <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80017fc:	4819      	ldr	r0, [pc, #100]	; (8001864 <read_multi_byte+0xbc>)
 80017fe:	f7ff feae 	bl	800155e <LL_I2C_IsActiveFlag_STOP>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0ee      	beq.n	80017e6 <read_multi_byte+0x3e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001808:	4816      	ldr	r0, [pc, #88]	; (8001864 <read_multi_byte+0xbc>)
 800180a:	f7ff fecb 	bl	80015a4 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){};
 800180e:	bf00      	nop
 8001810:	4814      	ldr	r0, [pc, #80]	; (8001864 <read_multi_byte+0xbc>)
 8001812:	f7ff fea4 	bl	800155e <LL_I2C_IsActiveFlag_STOP>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1f9      	bne.n	8001810 <read_multi_byte+0x68>

	// Receive data from slave device
	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 800181c:	78b9      	ldrb	r1, [r7, #2]
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <read_multi_byte+0xc4>)
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	2301      	movs	r3, #1
 800182a:	2200      	movs	r2, #0
 800182c:	480d      	ldr	r0, [pc, #52]	; (8001864 <read_multi_byte+0xbc>)
 800182e:	f7ff fed9 	bl	80015e4 <LL_I2C_HandleTransfer>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8001832:	bf00      	nop
 8001834:	480b      	ldr	r0, [pc, #44]	; (8001864 <read_multi_byte+0xbc>)
 8001836:	f7ff fe92 	bl	800155e <LL_I2C_IsActiveFlag_STOP>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f9      	beq.n	8001834 <read_multi_byte+0x8c>

	//End of transfer
	LL_I2C_DisableIT_RX(I2C1);
 8001840:	4808      	ldr	r0, [pc, #32]	; (8001864 <read_multi_byte+0xbc>)
 8001842:	f7ff fe56 	bl	80014f2 <LL_I2C_DisableIT_RX>
	LL_I2C_ClearFlag_STOP(I2C1);
 8001846:	4807      	ldr	r0, [pc, #28]	; (8001864 <read_multi_byte+0xbc>)
 8001848:	f7ff feac 	bl	80015a4 <LL_I2C_ClearFlag_STOP>
	LL_I2C_ClearFlag_NACK(I2C1);
 800184c:	4805      	ldr	r0, [pc, #20]	; (8001864 <read_multi_byte+0xbc>)
 800184e:	f7ff fe99 	bl	8001584 <LL_I2C_ClearFlag_NACK>
	ubReceiveIndex = 0;
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <read_multi_byte+0xc8>)
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]


}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	2000029c 	.word	0x2000029c
 8001864:	40005400 	.word	0x40005400
 8001868:	80002000 	.word	0x80002000
 800186c:	80002400 	.word	0x80002400
 8001870:	200002a0 	.word	0x200002a0

08001874 <write_multi_byte>:
void write_multi_byte(uint8_t *data, uint8_t len, uint8_t slave_address, uint8_t register_address)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af02      	add	r7, sp, #8
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	4608      	mov	r0, r1
 800187e:	4611      	mov	r1, r2
 8001880:	461a      	mov	r2, r3
 8001882:	4603      	mov	r3, r0
 8001884:	70fb      	strb	r3, [r7, #3]
 8001886:	460b      	mov	r3, r1
 8001888:	70bb      	strb	r3, [r7, #2]
 800188a:	4613      	mov	r3, r2
 800188c:	707b      	strb	r3, [r7, #1]
	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 800188e:	78b9      	ldrb	r1, [r7, #2]
 8001890:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <write_multi_byte+0x88>)
 8001892:	9301      	str	r3, [sp, #4]
 8001894:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	2302      	movs	r3, #2
 800189c:	2200      	movs	r2, #0
 800189e:	4818      	ldr	r0, [pc, #96]	; (8001900 <write_multi_byte+0x8c>)
 80018a0:	f7ff fea0 	bl	80015e4 <LL_I2C_HandleTransfer>

		LL_I2C_TransmitData8(I2C1, register_address);
 80018a4:	787b      	ldrb	r3, [r7, #1]
 80018a6:	4619      	mov	r1, r3
 80018a8:	4815      	ldr	r0, [pc, #84]	; (8001900 <write_multi_byte+0x8c>)
 80018aa:	f7ff fece 	bl	800164a <LL_I2C_TransmitData8>

		while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80018ae:	e017      	b.n	80018e0 <write_multi_byte+0x6c>
		{
			for (size_t i = 0; i < len;i++) {
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	e010      	b.n	80018d8 <write_multi_byte+0x64>
				if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 80018b6:	4812      	ldr	r0, [pc, #72]	; (8001900 <write_multi_byte+0x8c>)
 80018b8:	f7ff fe2b 	bl	8001512 <LL_I2C_IsActiveFlag_TXIS>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d007      	beq.n	80018d2 <write_multi_byte+0x5e>
				{
					LL_I2C_TransmitData8(I2C1, data[i]);
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	4619      	mov	r1, r3
 80018cc:	480c      	ldr	r0, [pc, #48]	; (8001900 <write_multi_byte+0x8c>)
 80018ce:	f7ff febc 	bl	800164a <LL_I2C_TransmitData8>
			for (size_t i = 0; i < len;i++) {
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	3301      	adds	r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d3ea      	bcc.n	80018b6 <write_multi_byte+0x42>
		while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80018e0:	4807      	ldr	r0, [pc, #28]	; (8001900 <write_multi_byte+0x8c>)
 80018e2:	f7ff fe3c 	bl	800155e <LL_I2C_IsActiveFlag_STOP>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0e1      	beq.n	80018b0 <write_multi_byte+0x3c>
				}
			}
		}
		LL_I2C_ClearFlag_STOP(I2C1);
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <write_multi_byte+0x8c>)
 80018ee:	f7ff fe59 	bl	80015a4 <LL_I2C_ClearFlag_STOP>
}
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	80002000 	.word	0x80002000
 8001900:	40005400 	.word	0x40005400

08001904 <I2C_IRQHandler>:

void I2C_IRQHandler(void)
{
 8001904:	b598      	push	{r3, r4, r7, lr}
 8001906:	af00      	add	r7, sp, #0
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8001908:	4810      	ldr	r0, [pc, #64]	; (800194c <I2C_IRQHandler+0x48>)
 800190a:	f7ff fe15 	bl	8001538 <LL_I2C_IsActiveFlag_RXNE>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d019      	beq.n	8001948 <I2C_IRQHandler+0x44>
	{
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <I2C_IRQHandler+0x4c>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <I2C_IRQHandler+0x50>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	1c59      	adds	r1, r3, #1
 8001920:	b2c8      	uxtb	r0, r1
 8001922:	490c      	ldr	r1, [pc, #48]	; (8001954 <I2C_IRQHandler+0x50>)
 8001924:	7008      	strb	r0, [r1, #0]
 8001926:	18d4      	adds	r4, r2, r3
 8001928:	4808      	ldr	r0, [pc, #32]	; (800194c <I2C_IRQHandler+0x48>)
 800192a:	f7ff fe81 	bl	8001630 <LL_I2C_ReceiveData8>
 800192e:	4603      	mov	r3, r0
 8001930:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex>19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <I2C_IRQHandler+0x50>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b13      	cmp	r3, #19
 800193a:	d903      	bls.n	8001944 <I2C_IRQHandler+0x40>
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <I2C_IRQHandler+0x50>)
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
	}
}
 8001942:	e001      	b.n	8001948 <I2C_IRQHandler+0x44>
		(ubReceiveIndex>19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <I2C_IRQHandler+0x50>)
 8001946:	781b      	ldrb	r3, [r3, #0]
}
 8001948:	bf00      	nop
 800194a:	bd98      	pop	{r3, r4, r7, pc}
 800194c:	40005400 	.word	0x40005400
 8001950:	2000029c 	.word	0x2000029c
 8001954:	200002a0 	.word	0x200002a0

08001958 <__NVIC_SetPriorityGrouping>:
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001974:	4013      	ands	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198a:	4a04      	ldr	r2, [pc, #16]	; (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	60d3      	str	r3, [r2, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <LL_RCC_HSI_Enable+0x1c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a04      	ldr	r2, [pc, #16]	; (80019bc <LL_RCC_HSI_Enable+0x1c>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	6013      	str	r3, [r2, #0]
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000

080019c0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <LL_RCC_HSI_IsReady+0x20>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	bf0c      	ite	eq
 80019d0:	2301      	moveq	r3, #1
 80019d2:	2300      	movne	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	40021000 	.word	0x40021000

080019e4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4904      	ldr	r1, [pc, #16]	; (8001a0c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	600b      	str	r3, [r1, #0]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000

08001a10 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <LL_RCC_SetSysClkSource+0x24>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f023 0203 	bic.w	r2, r3, #3
 8001a20:	4904      	ldr	r1, [pc, #16]	; (8001a34 <LL_RCC_SetSysClkSource+0x24>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	40021000 	.word	0x40021000

08001a38 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <LL_RCC_GetSysClkSource+0x18>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 030c 	and.w	r3, r3, #12
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40021000 	.word	0x40021000

08001a54 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <LL_RCC_SetAHBPrescaler+0x24>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a64:	4904      	ldr	r1, [pc, #16]	; (8001a78 <LL_RCC_SetAHBPrescaler+0x24>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	40021000 	.word	0x40021000

08001a7c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a8c:	4904      	ldr	r1, [pc, #16]	; (8001aa0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ab4:	4904      	ldr	r1, [pc, #16]	; (8001ac8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	604b      	str	r3, [r1, #4]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	40021000 	.word	0x40021000

08001acc <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <LL_RCC_SetI2CClockSource+0x2c>)
 8001ad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	0e1b      	lsrs	r3, r3, #24
 8001adc:	43db      	mvns	r3, r3
 8001ade:	401a      	ands	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001ae6:	4904      	ldr	r1, [pc, #16]	; (8001af8 <LL_RCC_SetI2CClockSource+0x2c>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	40021000 	.word	0x40021000

08001afc <LL_APB1_GRP1_EnableClock>:
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b06:	69da      	ldr	r2, [r3, #28]
 8001b08:	4907      	ldr	r1, [pc, #28]	; (8001b28 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b12:	69da      	ldr	r2, [r3, #28]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4013      	ands	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	40021000 	.word	0x40021000

08001b2c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b36:	699a      	ldr	r2, [r3, #24]
 8001b38:	4907      	ldr	r1, [pc, #28]	; (8001b58 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b42:	699a      	ldr	r2, [r3, #24]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4013      	ands	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	40021000 	.word	0x40021000

08001b5c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <LL_FLASH_SetLatency+0x24>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f023 0207 	bic.w	r2, r3, #7
 8001b6c:	4904      	ldr	r1, [pc, #16]	; (8001b80 <LL_FLASH_SetLatency+0x24>)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	40022000 	.word	0x40022000

08001b84 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001b88:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <LL_FLASH_GetLatency+0x18>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40022000 	.word	0x40022000

08001ba0 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d106      	bne.n	8001bbc <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <LL_SYSTICK_SetClkSource+0x34>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a08      	ldr	r2, [pc, #32]	; (8001bd4 <LL_SYSTICK_SetClkSource+0x34>)
 8001bb4:	f043 0304 	orr.w	r3, r3, #4
 8001bb8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8001bba:	e005      	b.n	8001bc8 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <LL_SYSTICK_SetClkSource+0x34>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <LL_SYSTICK_SetClkSource+0x34>)
 8001bc2:	f023 0304 	bic.w	r3, r3, #4
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000e010 	.word	0xe000e010

08001bd8 <main>:
char statusMessage[128];
float temp,humid,pressure,altitude;


int main(void)
{
 8001bd8:	b5b0      	push	{r4, r5, r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af02      	add	r7, sp, #8
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001bde:	2001      	movs	r0, #1
 8001be0:	f7ff ffa4 	bl	8001b2c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001be4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001be8:	f7ff ff88 	bl	8001afc <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bec:	2003      	movs	r0, #3
 8001bee:	f7ff feb3 	bl	8001958 <__NVIC_SetPriorityGrouping>

  SystemClock_Config();
 8001bf2:	f000 f889 	bl	8001d08 <SystemClock_Config>

  MX_GPIO_Init();
 8001bf6:	f7ff fb55 	bl	80012a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001bfa:	f7ff fd65 	bl	80016c8 <MX_I2C1_Init>
  MX_DMA_Init();
 8001bfe:	f7ff fad7 	bl	80011b0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001c02:	f000 ff1f 	bl	8002a44 <MX_USART2_UART_Init>

  USART2_RegisterCallback(proccesDmaData);
 8001c06:	4835      	ldr	r0, [pc, #212]	; (8001cdc <main+0x104>)
 8001c08:	f000 ff0a 	bl	8002a20 <USART2_RegisterCallback>
  USART2_PutBuffer("start", strlen("start"));
 8001c0c:	2105      	movs	r1, #5
 8001c0e:	4834      	ldr	r0, [pc, #208]	; (8001ce0 <main+0x108>)
 8001c10:	f000 fffa 	bl	8002c08 <USART2_PutBuffer>
  uint8_t hts_good = hts221_init();
 8001c14:	f7ff f82a 	bl	8000c6c <hts221_init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	71fb      	strb	r3, [r7, #7]
  uint8_t lp_good = lps25hb_init();
 8001c1c:	f7ff f9c4 	bl	8000fa8 <lps25hb_init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	71bb      	strb	r3, [r7, #6]

  uint8_t *buffer;
  uint8_t len = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	717b      	strb	r3, [r7, #5]

  if(hts_good)
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d004      	beq.n	8001c38 <main+0x60>
  {
	  USART2_PutBuffer("HTS good", strlen("HTS good"));
 8001c2e:	2108      	movs	r1, #8
 8001c30:	482c      	ldr	r0, [pc, #176]	; (8001ce4 <main+0x10c>)
 8001c32:	f000 ffe9 	bl	8002c08 <USART2_PutBuffer>
 8001c36:	e003      	b.n	8001c40 <main+0x68>
  }
  else
  {
	  USART2_PutBuffer("HTS bad", strlen("HTS bad"));
 8001c38:	2107      	movs	r1, #7
 8001c3a:	482b      	ldr	r0, [pc, #172]	; (8001ce8 <main+0x110>)
 8001c3c:	f000 ffe4 	bl	8002c08 <USART2_PutBuffer>
  }

  if(lp_good)
 8001c40:	79bb      	ldrb	r3, [r7, #6]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d004      	beq.n	8001c50 <main+0x78>
  {
	  USART2_PutBuffer("LP good", strlen("LP good"));
 8001c46:	2107      	movs	r1, #7
 8001c48:	4828      	ldr	r0, [pc, #160]	; (8001cec <main+0x114>)
 8001c4a:	f000 ffdd 	bl	8002c08 <USART2_PutBuffer>
 8001c4e:	e003      	b.n	8001c58 <main+0x80>

  }
  else
  {
	  USART2_PutBuffer("LP bad", strlen("LP bad"));
 8001c50:	2106      	movs	r1, #6
 8001c52:	4827      	ldr	r0, [pc, #156]	; (8001cf0 <main+0x118>)
 8001c54:	f000 ffd8 	bl	8002c08 <USART2_PutBuffer>
//	  {
//		  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_3);
//	  }


	  temp = hts221_read_temp();
 8001c58:	f7ff f8b4 	bl	8000dc4 <hts221_read_temp>
 8001c5c:	eef0 7a40 	vmov.f32	s15, s0
 8001c60:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <main+0x11c>)
 8001c62:	edc3 7a00 	vstr	s15, [r3]
	  humid = hts221_read_humid();
 8001c66:	f7ff f8e5 	bl	8000e34 <hts221_read_humid>
 8001c6a:	eef0 7a40 	vmov.f32	s15, s0
 8001c6e:	4b22      	ldr	r3, [pc, #136]	; (8001cf8 <main+0x120>)
 8001c70:	edc3 7a00 	vstr	s15, [r3]
	  pressure = lps25hb_read_pressure();
 8001c74:	f7ff f9c2 	bl	8000ffc <lps25hb_read_pressure>
 8001c78:	eef0 7a40 	vmov.f32	s15, s0
 8001c7c:	4b1f      	ldr	r3, [pc, #124]	; (8001cfc <main+0x124>)
 8001c7e:	edc3 7a00 	vstr	s15, [r3]
	  altitude = lps25hb_read_altitude();
 8001c82:	f7ff f9e9 	bl	8001058 <lps25hb_read_altitude>
 8001c86:	eef0 7a40 	vmov.f32	s15, s0
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <main+0x128>)
 8001c8c:	edc3 7a00 	vstr	s15, [r3]


	  buffer = malloc(32*sizeof(uint8_t));
 8001c90:	2020      	movs	r0, #32
 8001c92:	f001 fd73 	bl	800377c <malloc>
 8001c96:	4603      	mov	r3, r0
 8001c98:	603b      	str	r3, [r7, #0]
	  len = sprintf(buffer, "%2.1f,%2f,%4.2f,%3.2f\n", temp, humid);
 8001c9a:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <main+0x11c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fc52 	bl	8000548 <__aeabi_f2d>
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	460d      	mov	r5, r1
 8001ca8:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <main+0x120>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc4b 	bl	8000548 <__aeabi_f2d>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	e9cd 2300 	strd	r2, r3, [sp]
 8001cba:	4622      	mov	r2, r4
 8001cbc:	462b      	mov	r3, r5
 8001cbe:	4911      	ldr	r1, [pc, #68]	; (8001d04 <main+0x12c>)
 8001cc0:	6838      	ldr	r0, [r7, #0]
 8001cc2:	f002 fb3f 	bl	8004344 <siprintf>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	717b      	strb	r3, [r7, #5]
	  USART2_PutBuffer(buffer,len);
 8001cca:	797b      	ldrb	r3, [r7, #5]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	6838      	ldr	r0, [r7, #0]
 8001cd0:	f000 ff9a 	bl	8002c08 <USART2_PutBuffer>
	  free(buffer);
 8001cd4:	6838      	ldr	r0, [r7, #0]
 8001cd6:	f001 fd59 	bl	800378c <free>
  {
 8001cda:	e7bd      	b.n	8001c58 <main+0x80>
 8001cdc:	08001d7d 	.word	0x08001d7d
 8001ce0:	08007320 	.word	0x08007320
 8001ce4:	08007328 	.word	0x08007328
 8001ce8:	08007334 	.word	0x08007334
 8001cec:	0800733c 	.word	0x0800733c
 8001cf0:	08007344 	.word	0x08007344
 8001cf4:	200002d8 	.word	0x200002d8
 8001cf8:	200002dc 	.word	0x200002dc
 8001cfc:	200002e0 	.word	0x200002e0
 8001d00:	200002e4 	.word	0x200002e4
 8001d04:	0800734c 	.word	0x0800734c

08001d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f7ff ff25 	bl	8001b5c <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8001d12:	f7ff ff37 	bl	8001b84 <LL_FLASH_GetLatency>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <SystemClock_Config+0x18>
  {
  Error_Handler();
 8001d1c:	f000 f8cc 	bl	8001eb8 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8001d20:	f7ff fe3e 	bl	80019a0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001d24:	bf00      	nop
 8001d26:	f7ff fe4b 	bl	80019c0 <LL_RCC_HSI_IsReady>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d1fa      	bne.n	8001d26 <SystemClock_Config+0x1e>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001d30:	2010      	movs	r0, #16
 8001d32:	f7ff fe57 	bl	80019e4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001d36:	2000      	movs	r0, #0
 8001d38:	f7ff fe8c 	bl	8001a54 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f7ff fe9d 	bl	8001a7c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001d42:	2000      	movs	r0, #0
 8001d44:	f7ff feae 	bl	8001aa4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f7ff fe61 	bl	8001a10 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001d4e:	bf00      	nop
 8001d50:	f7ff fe72 	bl	8001a38 <LL_RCC_GetSysClkSource>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1fa      	bne.n	8001d50 <SystemClock_Config+0x48>
  {

  }
  LL_Init1msTick(8000000);
 8001d5a:	4807      	ldr	r0, [pc, #28]	; (8001d78 <SystemClock_Config+0x70>)
 8001d5c:	f001 fcf0 	bl	8003740 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8001d60:	2004      	movs	r0, #4
 8001d62:	f7ff ff1d 	bl	8001ba0 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8001d66:	4804      	ldr	r0, [pc, #16]	; (8001d78 <SystemClock_Config+0x70>)
 8001d68:	f001 fcf8 	bl	800375c <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001d6c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001d70:	f7ff feac 	bl	8001acc <LL_RCC_SetI2CClockSource>
}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	007a1200 	.word	0x007a1200

08001d7c <proccesDmaData>:

void proccesDmaData(uint8_t sign)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
	if(transimissionEnabled)
 8001d86:	4b45      	ldr	r3, [pc, #276]	; (8001e9c <proccesDmaData+0x120>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d064      	beq.n	8001e58 <proccesDmaData+0xdc>
		{
			if(sign >= 'a' && sign <= 'z')
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	2b60      	cmp	r3, #96	; 0x60
 8001d92:	d916      	bls.n	8001dc2 <proccesDmaData+0x46>
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	2b7a      	cmp	r3, #122	; 0x7a
 8001d98:	d813      	bhi.n	8001dc2 <proccesDmaData+0x46>
			{
				thisLetterCount.small_letter++;
 8001d9a:	4b41      	ldr	r3, [pc, #260]	; (8001ea0 <proccesDmaData+0x124>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4b3f      	ldr	r3, [pc, #252]	; (8001ea0 <proccesDmaData+0x124>)
 8001da4:	701a      	strb	r2, [r3, #0]
				processedSignsCount++;
 8001da6:	4b3f      	ldr	r3, [pc, #252]	; (8001ea4 <proccesDmaData+0x128>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	3301      	adds	r3, #1
 8001dac:	4a3d      	ldr	r2, [pc, #244]	; (8001ea4 <proccesDmaData+0x128>)
 8001dae:	6013      	str	r3, [r2, #0]
				messageBuffer[messageBufferIndex++] = sign;
 8001db0:	4b3d      	ldr	r3, [pc, #244]	; (8001ea8 <proccesDmaData+0x12c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	493c      	ldr	r1, [pc, #240]	; (8001ea8 <proccesDmaData+0x12c>)
 8001db8:	600a      	str	r2, [r1, #0]
 8001dba:	493c      	ldr	r1, [pc, #240]	; (8001eac <proccesDmaData+0x130>)
 8001dbc:	79fa      	ldrb	r2, [r7, #7]
 8001dbe:	54ca      	strb	r2, [r1, r3]
 8001dc0:	e04a      	b.n	8001e58 <proccesDmaData+0xdc>
			}
			else if(sign >= 'A' && sign <= 'Z')
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	2b40      	cmp	r3, #64	; 0x40
 8001dc6:	d916      	bls.n	8001df6 <proccesDmaData+0x7a>
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	2b5a      	cmp	r3, #90	; 0x5a
 8001dcc:	d813      	bhi.n	8001df6 <proccesDmaData+0x7a>
			{
				thisLetterCount.capital_letter++;
 8001dce:	4b34      	ldr	r3, [pc, #208]	; (8001ea0 <proccesDmaData+0x124>)
 8001dd0:	785b      	ldrb	r3, [r3, #1]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4b32      	ldr	r3, [pc, #200]	; (8001ea0 <proccesDmaData+0x124>)
 8001dd8:	705a      	strb	r2, [r3, #1]
				processedSignsCount++;
 8001dda:	4b32      	ldr	r3, [pc, #200]	; (8001ea4 <proccesDmaData+0x128>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	3301      	adds	r3, #1
 8001de0:	4a30      	ldr	r2, [pc, #192]	; (8001ea4 <proccesDmaData+0x128>)
 8001de2:	6013      	str	r3, [r2, #0]
				messageBuffer[messageBufferIndex++] = sign;
 8001de4:	4b30      	ldr	r3, [pc, #192]	; (8001ea8 <proccesDmaData+0x12c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	492f      	ldr	r1, [pc, #188]	; (8001ea8 <proccesDmaData+0x12c>)
 8001dec:	600a      	str	r2, [r1, #0]
 8001dee:	492f      	ldr	r1, [pc, #188]	; (8001eac <proccesDmaData+0x130>)
 8001df0:	79fa      	ldrb	r2, [r7, #7]
 8001df2:	54ca      	strb	r2, [r1, r3]
 8001df4:	e030      	b.n	8001e58 <proccesDmaData+0xdc>
			}
			else if(sign == END_SIGN)
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	2b24      	cmp	r3, #36	; 0x24
 8001dfa:	d120      	bne.n	8001e3e <proccesDmaData+0xc2>
			{
				transimissionEnabled = 0;
 8001dfc:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <proccesDmaData+0x120>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
				processedSignsCount = 0;
 8001e02:	4b28      	ldr	r3, [pc, #160]	; (8001ea4 <proccesDmaData+0x128>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
				sprintf(messageToBeSent,"Valid string: %s, lower-case: %d, upper-case: %d \r\n",messageBuffer,thisLetterCount.small_letter,thisLetterCount.capital_letter);
 8001e08:	4b25      	ldr	r3, [pc, #148]	; (8001ea0 <proccesDmaData+0x124>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b24      	ldr	r3, [pc, #144]	; (8001ea0 <proccesDmaData+0x124>)
 8001e10:	785b      	ldrb	r3, [r3, #1]
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	4613      	mov	r3, r2
 8001e16:	4a25      	ldr	r2, [pc, #148]	; (8001eac <proccesDmaData+0x130>)
 8001e18:	4925      	ldr	r1, [pc, #148]	; (8001eb0 <proccesDmaData+0x134>)
 8001e1a:	4826      	ldr	r0, [pc, #152]	; (8001eb4 <proccesDmaData+0x138>)
 8001e1c:	f002 fa92 	bl	8004344 <siprintf>
				thisLetterCount.small_letter = 0;
 8001e20:	4b1f      	ldr	r3, [pc, #124]	; (8001ea0 <proccesDmaData+0x124>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	701a      	strb	r2, [r3, #0]
				thisLetterCount.capital_letter = 0;
 8001e26:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <proccesDmaData+0x124>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	705a      	strb	r2, [r3, #1]
				memset(messageBuffer, 0, MAX_MSG_LEN);
 8001e2c:	2223      	movs	r2, #35	; 0x23
 8001e2e:	2100      	movs	r1, #0
 8001e30:	481e      	ldr	r0, [pc, #120]	; (8001eac <proccesDmaData+0x130>)
 8001e32:	f002 faea 	bl	800440a <memset>
				messageBufferIndex = 0;
 8001e36:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <proccesDmaData+0x12c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	e00c      	b.n	8001e58 <proccesDmaData+0xdc>
			}
			else
			{
				processedSignsCount++;
 8001e3e:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <proccesDmaData+0x128>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	3301      	adds	r3, #1
 8001e44:	4a17      	ldr	r2, [pc, #92]	; (8001ea4 <proccesDmaData+0x128>)
 8001e46:	6013      	str	r3, [r2, #0]
				messageBuffer[messageBufferIndex++] = sign;
 8001e48:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <proccesDmaData+0x12c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	4916      	ldr	r1, [pc, #88]	; (8001ea8 <proccesDmaData+0x12c>)
 8001e50:	600a      	str	r2, [r1, #0]
 8001e52:	4916      	ldr	r1, [pc, #88]	; (8001eac <proccesDmaData+0x130>)
 8001e54:	79fa      	ldrb	r2, [r7, #7]
 8001e56:	54ca      	strb	r2, [r1, r3]
			}
		}
		if(processedSignsCount > MAX_MSG_LEN)
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <proccesDmaData+0x128>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b23      	cmp	r3, #35	; 0x23
 8001e5e:	dd13      	ble.n	8001e88 <proccesDmaData+0x10c>
		{
			transimissionEnabled = 0;
 8001e60:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <proccesDmaData+0x120>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
			processedSignsCount = 0;
 8001e66:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <proccesDmaData+0x128>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
			thisLetterCount.small_letter = 0;
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <proccesDmaData+0x124>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]
			thisLetterCount.capital_letter = 0;
 8001e72:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <proccesDmaData+0x124>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	705a      	strb	r2, [r3, #1]
			memset(messageBuffer, 0, MAX_MSG_LEN);
 8001e78:	2223      	movs	r2, #35	; 0x23
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	480b      	ldr	r0, [pc, #44]	; (8001eac <proccesDmaData+0x130>)
 8001e7e:	f002 fac4 	bl	800440a <memset>
			messageBufferIndex = 0;
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <proccesDmaData+0x12c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
		}
		if(sign == START_SIGN)
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	2b23      	cmp	r3, #35	; 0x23
 8001e8c:	d102      	bne.n	8001e94 <proccesDmaData+0x118>
		{
			transimissionEnabled = 1;
 8001e8e:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <proccesDmaData+0x120>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	701a      	strb	r2, [r3, #0]
		}
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	200002a8 	.word	0x200002a8
 8001ea0:	200002d4 	.word	0x200002d4
 8001ea4:	200002a4 	.word	0x200002a4
 8001ea8:	200002d0 	.word	0x200002d0
 8001eac:	200002ac 	.word	0x200002ac
 8001eb0:	08007364 	.word	0x08007364
 8001eb4:	20000004 	.word	0x20000004

08001eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	4a0b      	ldr	r2, [pc, #44]	; (8001f04 <LL_DMA_DisableChannel+0x3c>)
 8001ed8:	5cd3      	ldrb	r3, [r2, r3]
 8001eda:	461a      	mov	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4413      	add	r3, r2
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	3a01      	subs	r2, #1
 8001ee6:	4907      	ldr	r1, [pc, #28]	; (8001f04 <LL_DMA_DisableChannel+0x3c>)
 8001ee8:	5c8a      	ldrb	r2, [r1, r2]
 8001eea:	4611      	mov	r1, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	440a      	add	r2, r1
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	6013      	str	r3, [r2, #0]
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	08007398 	.word	0x08007398

08001f08 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f1c:	bf0c      	ite	eq
 8001f1e:	2301      	moveq	r3, #1
 8001f20:	2300      	movne	r3, #0
 8001f22:	b2db      	uxtb	r3, r3
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f44:	bf0c      	ite	eq
 8001f46:	2301      	moveq	r3, #1
 8001f48:	2300      	movne	r3, #0
 8001f4a:	b2db      	uxtb	r3, r3
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f6c:	bf0c      	ite	eq
 8001f6e:	2301      	moveq	r3, #1
 8001f70:	2300      	movne	r3, #0
 8001f72:	b2db      	uxtb	r3, r3
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f8e:	605a      	str	r2, [r3, #4]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001faa:	605a      	str	r2, [r3, #4]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001fc6:	605a      	str	r2, [r3, #4]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	f003 0310 	and.w	r3, r3, #16
 8001fe4:	2b10      	cmp	r3, #16
 8001fe6:	d101      	bne.n	8001fec <LL_USART_IsActiveFlag_IDLE+0x18>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <LL_USART_IsActiveFlag_IDLE+0x1a>
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200a:	2b40      	cmp	r3, #64	; 0x40
 800200c:	d101      	bne.n	8002012 <LL_USART_IsActiveFlag_TC+0x18>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <LL_USART_IsActiveFlag_TC+0x1a>
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2210      	movs	r2, #16
 800202c:	621a      	str	r2, [r3, #32]
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204c:	e7fe      	b.n	800204c <HardFault_Handler+0x4>

0800204e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002052:	e7fe      	b.n	8002052 <MemManage_Handler+0x4>

08002054 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <BusFault_Handler+0x4>

0800205a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800205e:	e7fe      	b.n	800205e <UsageFault_Handler+0x4>

08002060 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
	I2C_IRQHandler();
 800209c:	f7ff fc32 	bl	8001904 <I2C_IRQHandler>
}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 80020a8:	480c      	ldr	r0, [pc, #48]	; (80020dc <DMA1_Channel6_IRQHandler+0x38>)
 80020aa:	f7ff ff2d 	bl	8001f08 <LL_DMA_IsActiveFlag_TC6>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d105      	bne.n	80020c0 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 80020b4:	f000 fdc8 	bl	8002c48 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 80020b8:	4808      	ldr	r0, [pc, #32]	; (80020dc <DMA1_Channel6_IRQHandler+0x38>)
 80020ba:	f7ff ff61 	bl	8001f80 <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 80020be:	e00a      	b.n	80020d6 <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 80020c0:	4806      	ldr	r0, [pc, #24]	; (80020dc <DMA1_Channel6_IRQHandler+0x38>)
 80020c2:	f7ff ff49 	bl	8001f58 <LL_DMA_IsActiveFlag_HT6>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d104      	bne.n	80020d6 <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 80020cc:	f000 fdbc 	bl	8002c48 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 80020d0:	4802      	ldr	r0, [pc, #8]	; (80020dc <DMA1_Channel6_IRQHandler+0x38>)
 80020d2:	f7ff ff71 	bl	8001fb8 <LL_DMA_ClearFlag_HT6>
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40020000 	.word	0x40020000

080020e0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 80020e4:	480a      	ldr	r0, [pc, #40]	; (8002110 <DMA1_Channel7_IRQHandler+0x30>)
 80020e6:	f7ff ff23 	bl	8001f30 <LL_DMA_IsActiveFlag_TC7>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d10d      	bne.n	800210c <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 80020f0:	4807      	ldr	r0, [pc, #28]	; (8002110 <DMA1_Channel7_IRQHandler+0x30>)
 80020f2:	f7ff ff53 	bl	8001f9c <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 80020f6:	bf00      	nop
 80020f8:	4806      	ldr	r0, [pc, #24]	; (8002114 <DMA1_Channel7_IRQHandler+0x34>)
 80020fa:	f7ff ff7e 	bl	8001ffa <LL_USART_IsActiveFlag_TC>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0f9      	beq.n	80020f8 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8002104:	2107      	movs	r1, #7
 8002106:	4802      	ldr	r0, [pc, #8]	; (8002110 <DMA1_Channel7_IRQHandler+0x30>)
 8002108:	f7ff fede 	bl	8001ec8 <LL_DMA_DisableChannel>
	}
}
 800210c:	bf00      	nop
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40020000 	.word	0x40020000
 8002114:	40004400 	.word	0x40004400

08002118 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 800211c:	4806      	ldr	r0, [pc, #24]	; (8002138 <USART2_IRQHandler+0x20>)
 800211e:	f7ff ff59 	bl	8001fd4 <LL_USART_IsActiveFlag_IDLE>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d004      	beq.n	8002132 <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8002128:	f000 fd8e 	bl	8002c48 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 800212c:	4802      	ldr	r0, [pc, #8]	; (8002138 <USART2_IRQHandler+0x20>)
 800212e:	f7ff ff77 	bl	8002020 <LL_USART_ClearFlag_IDLE>
	}
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40004400 	.word	0x40004400

0800213c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return 1;
 8002140:	2301      	movs	r3, #1
}
 8002142:	4618      	mov	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <_kill>:

int _kill(int pid, int sig)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002156:	f002 f9bb 	bl	80044d0 <__errno>
 800215a:	4603      	mov	r3, r0
 800215c:	2216      	movs	r2, #22
 800215e:	601a      	str	r2, [r3, #0]
  return -1;
 8002160:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <_exit>:

void _exit (int status)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002174:	f04f 31ff 	mov.w	r1, #4294967295
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ffe7 	bl	800214c <_kill>
  while (1) {}    /* Make sure we hang here */
 800217e:	e7fe      	b.n	800217e <_exit+0x12>

08002180 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	e00a      	b.n	80021a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002192:	f3af 8000 	nop.w
 8002196:	4601      	mov	r1, r0
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	60ba      	str	r2, [r7, #8]
 800219e:	b2ca      	uxtb	r2, r1
 80021a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	3301      	adds	r3, #1
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	dbf0      	blt.n	8002192 <_read+0x12>
  }

  return len;
 80021b0:	687b      	ldr	r3, [r7, #4]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b086      	sub	sp, #24
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	e009      	b.n	80021e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	60ba      	str	r2, [r7, #8]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	3301      	adds	r3, #1
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	dbf1      	blt.n	80021cc <_write+0x12>
  }
  return len;
 80021e8:	687b      	ldr	r3, [r7, #4]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <_close>:

int _close(int file)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800221a:	605a      	str	r2, [r3, #4]
  return 0;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <_isatty>:

int _isatty(int file)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002232:	2301      	movs	r3, #1
}
 8002234:	4618      	mov	r0, r3
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002264:	4a14      	ldr	r2, [pc, #80]	; (80022b8 <_sbrk+0x5c>)
 8002266:	4b15      	ldr	r3, [pc, #84]	; (80022bc <_sbrk+0x60>)
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002270:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <_sbrk+0x64>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d102      	bne.n	800227e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002278:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <_sbrk+0x64>)
 800227a:	4a12      	ldr	r2, [pc, #72]	; (80022c4 <_sbrk+0x68>)
 800227c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <_sbrk+0x64>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	429a      	cmp	r2, r3
 800228a:	d207      	bcs.n	800229c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800228c:	f002 f920 	bl	80044d0 <__errno>
 8002290:	4603      	mov	r3, r0
 8002292:	220c      	movs	r2, #12
 8002294:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002296:	f04f 33ff 	mov.w	r3, #4294967295
 800229a:	e009      	b.n	80022b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800229c:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <_sbrk+0x64>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <_sbrk+0x64>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	4a05      	ldr	r2, [pc, #20]	; (80022c0 <_sbrk+0x64>)
 80022ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ae:	68fb      	ldr	r3, [r7, #12]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20003000 	.word	0x20003000
 80022bc:	00000400 	.word	0x00000400
 80022c0:	200002e8 	.word	0x200002e8
 80022c4:	200004c0 	.word	0x200004c0

080022c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <SystemInit+0x20>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d2:	4a05      	ldr	r2, [pc, #20]	; (80022e8 <SystemInit+0x20>)
 80022d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <__NVIC_EnableIRQ>:
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	db0b      	blt.n	8002316 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	f003 021f 	and.w	r2, r3, #31
 8002304:	4907      	ldr	r1, [pc, #28]	; (8002324 <__NVIC_EnableIRQ+0x38>)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	2001      	movs	r0, #1
 800230e:	fa00 f202 	lsl.w	r2, r0, r2
 8002312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	e000e100 	.word	0xe000e100

08002328 <__NVIC_SetPriority>:
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	6039      	str	r1, [r7, #0]
 8002332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002338:	2b00      	cmp	r3, #0
 800233a:	db0a      	blt.n	8002352 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	b2da      	uxtb	r2, r3
 8002340:	490c      	ldr	r1, [pc, #48]	; (8002374 <__NVIC_SetPriority+0x4c>)
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	0112      	lsls	r2, r2, #4
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	440b      	add	r3, r1
 800234c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002350:	e00a      	b.n	8002368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	b2da      	uxtb	r2, r3
 8002356:	4908      	ldr	r1, [pc, #32]	; (8002378 <__NVIC_SetPriority+0x50>)
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	3b04      	subs	r3, #4
 8002360:	0112      	lsls	r2, r2, #4
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	440b      	add	r3, r1
 8002366:	761a      	strb	r2, [r3, #24]
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000e100 	.word	0xe000e100
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <LL_AHB1_GRP1_EnableClock>:
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002384:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002386:	695a      	ldr	r2, [r3, #20]
 8002388:	4907      	ldr	r1, [pc, #28]	; (80023a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4313      	orrs	r3, r2
 800238e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002392:	695a      	ldr	r2, [r3, #20]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4013      	ands	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800239a:	68fb      	ldr	r3, [r7, #12]
}
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40021000 	.word	0x40021000

080023ac <LL_APB1_GRP1_EnableClock>:
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80023b4:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023b6:	69da      	ldr	r2, [r3, #28]
 80023b8:	4907      	ldr	r1, [pc, #28]	; (80023d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023c2:	69da      	ldr	r2, [r3, #28]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4013      	ands	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023ca:	68fb      	ldr	r3, [r7, #12]
}
 80023cc:	bf00      	nop
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	40021000 	.word	0x40021000

080023dc <LL_DMA_EnableChannel>:
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	4a0b      	ldr	r2, [pc, #44]	; (8002418 <LL_DMA_EnableChannel+0x3c>)
 80023ec:	5cd3      	ldrb	r3, [r2, r3]
 80023ee:	461a      	mov	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4413      	add	r3, r2
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	3a01      	subs	r2, #1
 80023fa:	4907      	ldr	r1, [pc, #28]	; (8002418 <LL_DMA_EnableChannel+0x3c>)
 80023fc:	5c8a      	ldrb	r2, [r1, r2]
 80023fe:	4611      	mov	r1, r2
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	440a      	add	r2, r1
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6013      	str	r3, [r2, #0]
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	080073b8 	.word	0x080073b8

0800241c <LL_DMA_DisableChannel>:
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	3b01      	subs	r3, #1
 800242a:	4a0b      	ldr	r2, [pc, #44]	; (8002458 <LL_DMA_DisableChannel+0x3c>)
 800242c:	5cd3      	ldrb	r3, [r2, r3]
 800242e:	461a      	mov	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4413      	add	r3, r2
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	3a01      	subs	r2, #1
 800243a:	4907      	ldr	r1, [pc, #28]	; (8002458 <LL_DMA_DisableChannel+0x3c>)
 800243c:	5c8a      	ldrb	r2, [r1, r2]
 800243e:	4611      	mov	r1, r2
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	440a      	add	r2, r1
 8002444:	f023 0301 	bic.w	r3, r3, #1
 8002448:	6013      	str	r3, [r2, #0]
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	080073b8 	.word	0x080073b8

0800245c <LL_DMA_SetDataTransferDirection>:
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	3b01      	subs	r3, #1
 800246c:	4a0d      	ldr	r2, [pc, #52]	; (80024a4 <LL_DMA_SetDataTransferDirection+0x48>)
 800246e:	5cd3      	ldrb	r3, [r2, r3]
 8002470:	461a      	mov	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	4413      	add	r3, r2
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800247c:	f023 0310 	bic.w	r3, r3, #16
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	3a01      	subs	r2, #1
 8002484:	4907      	ldr	r1, [pc, #28]	; (80024a4 <LL_DMA_SetDataTransferDirection+0x48>)
 8002486:	5c8a      	ldrb	r2, [r1, r2]
 8002488:	4611      	mov	r1, r2
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	440a      	add	r2, r1
 800248e:	4611      	mov	r1, r2
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	4313      	orrs	r3, r2
 8002494:	600b      	str	r3, [r1, #0]
}
 8002496:	bf00      	nop
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	080073b8 	.word	0x080073b8

080024a8 <LL_DMA_GetDataTransferDirection>:
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	3b01      	subs	r3, #1
 80024b6:	4a07      	ldr	r2, [pc, #28]	; (80024d4 <LL_DMA_GetDataTransferDirection+0x2c>)
 80024b8:	5cd3      	ldrb	r3, [r2, r3]
 80024ba:	461a      	mov	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4413      	add	r3, r2
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	f244 0310 	movw	r3, #16400	; 0x4010
 80024c6:	4013      	ands	r3, r2
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	080073b8 	.word	0x080073b8

080024d8 <LL_DMA_SetMode>:
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	4a0c      	ldr	r2, [pc, #48]	; (800251c <LL_DMA_SetMode+0x44>)
 80024ea:	5cd3      	ldrb	r3, [r2, r3]
 80024ec:	461a      	mov	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4413      	add	r3, r2
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f023 0220 	bic.w	r2, r3, #32
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	4907      	ldr	r1, [pc, #28]	; (800251c <LL_DMA_SetMode+0x44>)
 80024fe:	5ccb      	ldrb	r3, [r1, r3]
 8002500:	4619      	mov	r1, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	440b      	add	r3, r1
 8002506:	4619      	mov	r1, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]
}
 800250e:	bf00      	nop
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	080073b8 	.word	0x080073b8

08002520 <LL_DMA_SetPeriphIncMode>:
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	3b01      	subs	r3, #1
 8002530:	4a0c      	ldr	r2, [pc, #48]	; (8002564 <LL_DMA_SetPeriphIncMode+0x44>)
 8002532:	5cd3      	ldrb	r3, [r2, r3]
 8002534:	461a      	mov	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	4413      	add	r3, r2
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	3b01      	subs	r3, #1
 8002544:	4907      	ldr	r1, [pc, #28]	; (8002564 <LL_DMA_SetPeriphIncMode+0x44>)
 8002546:	5ccb      	ldrb	r3, [r1, r3]
 8002548:	4619      	mov	r1, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	440b      	add	r3, r1
 800254e:	4619      	mov	r1, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]
}
 8002556:	bf00      	nop
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	080073b8 	.word	0x080073b8

08002568 <LL_DMA_SetMemoryIncMode>:
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	3b01      	subs	r3, #1
 8002578:	4a0c      	ldr	r2, [pc, #48]	; (80025ac <LL_DMA_SetMemoryIncMode+0x44>)
 800257a:	5cd3      	ldrb	r3, [r2, r3]
 800257c:	461a      	mov	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4413      	add	r3, r2
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	3b01      	subs	r3, #1
 800258c:	4907      	ldr	r1, [pc, #28]	; (80025ac <LL_DMA_SetMemoryIncMode+0x44>)
 800258e:	5ccb      	ldrb	r3, [r1, r3]
 8002590:	4619      	mov	r1, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	440b      	add	r3, r1
 8002596:	4619      	mov	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]
}
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	080073b8 	.word	0x080073b8

080025b0 <LL_DMA_SetPeriphSize>:
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	3b01      	subs	r3, #1
 80025c0:	4a0c      	ldr	r2, [pc, #48]	; (80025f4 <LL_DMA_SetPeriphSize+0x44>)
 80025c2:	5cd3      	ldrb	r3, [r2, r3]
 80025c4:	461a      	mov	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4413      	add	r3, r2
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	4907      	ldr	r1, [pc, #28]	; (80025f4 <LL_DMA_SetPeriphSize+0x44>)
 80025d6:	5ccb      	ldrb	r3, [r1, r3]
 80025d8:	4619      	mov	r1, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	440b      	add	r3, r1
 80025de:	4619      	mov	r1, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]
}
 80025e6:	bf00      	nop
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	080073b8 	.word	0x080073b8

080025f8 <LL_DMA_SetMemorySize>:
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	3b01      	subs	r3, #1
 8002608:	4a0c      	ldr	r2, [pc, #48]	; (800263c <LL_DMA_SetMemorySize+0x44>)
 800260a:	5cd3      	ldrb	r3, [r2, r3]
 800260c:	461a      	mov	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4413      	add	r3, r2
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	3b01      	subs	r3, #1
 800261c:	4907      	ldr	r1, [pc, #28]	; (800263c <LL_DMA_SetMemorySize+0x44>)
 800261e:	5ccb      	ldrb	r3, [r1, r3]
 8002620:	4619      	mov	r1, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	440b      	add	r3, r1
 8002626:	4619      	mov	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]
}
 800262e:	bf00      	nop
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	080073b8 	.word	0x080073b8

08002640 <LL_DMA_SetChannelPriorityLevel>:
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	3b01      	subs	r3, #1
 8002650:	4a0c      	ldr	r2, [pc, #48]	; (8002684 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002652:	5cd3      	ldrb	r3, [r2, r3]
 8002654:	461a      	mov	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4413      	add	r3, r2
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	3b01      	subs	r3, #1
 8002664:	4907      	ldr	r1, [pc, #28]	; (8002684 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002666:	5ccb      	ldrb	r3, [r1, r3]
 8002668:	4619      	mov	r1, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	440b      	add	r3, r1
 800266e:	4619      	mov	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]
}
 8002676:	bf00      	nop
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	080073b8 	.word	0x080073b8

08002688 <LL_DMA_SetDataLength>:
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	3b01      	subs	r3, #1
 8002698:	4a0c      	ldr	r2, [pc, #48]	; (80026cc <LL_DMA_SetDataLength+0x44>)
 800269a:	5cd3      	ldrb	r3, [r2, r3]
 800269c:	461a      	mov	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4413      	add	r3, r2
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	0c1b      	lsrs	r3, r3, #16
 80026a6:	041b      	lsls	r3, r3, #16
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	3a01      	subs	r2, #1
 80026ac:	4907      	ldr	r1, [pc, #28]	; (80026cc <LL_DMA_SetDataLength+0x44>)
 80026ae:	5c8a      	ldrb	r2, [r1, r2]
 80026b0:	4611      	mov	r1, r2
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	440a      	add	r2, r1
 80026b6:	4611      	mov	r1, r2
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
}
 80026be:	bf00      	nop
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	080073b8 	.word	0x080073b8

080026d0 <LL_DMA_GetDataLength>:
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	3b01      	subs	r3, #1
 80026de:	4a06      	ldr	r2, [pc, #24]	; (80026f8 <LL_DMA_GetDataLength+0x28>)
 80026e0:	5cd3      	ldrb	r3, [r2, r3]
 80026e2:	461a      	mov	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4413      	add	r3, r2
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	b29b      	uxth	r3, r3
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	080073b8 	.word	0x080073b8

080026fc <LL_DMA_ConfigAddresses>:
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	2b10      	cmp	r3, #16
 800270e:	d114      	bne.n	800273a <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	3b01      	subs	r3, #1
 8002714:	4a16      	ldr	r2, [pc, #88]	; (8002770 <LL_DMA_ConfigAddresses+0x74>)
 8002716:	5cd3      	ldrb	r3, [r2, r3]
 8002718:	461a      	mov	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4413      	add	r3, r2
 800271e:	461a      	mov	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	3b01      	subs	r3, #1
 8002728:	4a11      	ldr	r2, [pc, #68]	; (8002770 <LL_DMA_ConfigAddresses+0x74>)
 800272a:	5cd3      	ldrb	r3, [r2, r3]
 800272c:	461a      	mov	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4413      	add	r3, r2
 8002732:	461a      	mov	r2, r3
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	6093      	str	r3, [r2, #8]
}
 8002738:	e013      	b.n	8002762 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	3b01      	subs	r3, #1
 800273e:	4a0c      	ldr	r2, [pc, #48]	; (8002770 <LL_DMA_ConfigAddresses+0x74>)
 8002740:	5cd3      	ldrb	r3, [r2, r3]
 8002742:	461a      	mov	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4413      	add	r3, r2
 8002748:	461a      	mov	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	3b01      	subs	r3, #1
 8002752:	4a07      	ldr	r2, [pc, #28]	; (8002770 <LL_DMA_ConfigAddresses+0x74>)
 8002754:	5cd3      	ldrb	r3, [r2, r3]
 8002756:	461a      	mov	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4413      	add	r3, r2
 800275c:	461a      	mov	r2, r3
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	60d3      	str	r3, [r2, #12]
}
 8002762:	bf00      	nop
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	080073b8 	.word	0x080073b8

08002774 <LL_DMA_SetMemoryAddress>:
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	3b01      	subs	r3, #1
 8002784:	4a06      	ldr	r2, [pc, #24]	; (80027a0 <LL_DMA_SetMemoryAddress+0x2c>)
 8002786:	5cd3      	ldrb	r3, [r2, r3]
 8002788:	461a      	mov	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4413      	add	r3, r2
 800278e:	461a      	mov	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	60d3      	str	r3, [r2, #12]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	080073b8 	.word	0x080073b8

080027a4 <LL_DMA_SetPeriphAddress>:
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	4a06      	ldr	r2, [pc, #24]	; (80027d0 <LL_DMA_SetPeriphAddress+0x2c>)
 80027b6:	5cd3      	ldrb	r3, [r2, r3]
 80027b8:	461a      	mov	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4413      	add	r3, r2
 80027be:	461a      	mov	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6093      	str	r3, [r2, #8]
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	080073b8 	.word	0x080073b8

080027d4 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	3b01      	subs	r3, #1
 80027e2:	4a0b      	ldr	r2, [pc, #44]	; (8002810 <LL_DMA_EnableIT_TC+0x3c>)
 80027e4:	5cd3      	ldrb	r3, [r2, r3]
 80027e6:	461a      	mov	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4413      	add	r3, r2
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	3a01      	subs	r2, #1
 80027f2:	4907      	ldr	r1, [pc, #28]	; (8002810 <LL_DMA_EnableIT_TC+0x3c>)
 80027f4:	5c8a      	ldrb	r2, [r1, r2]
 80027f6:	4611      	mov	r1, r2
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	440a      	add	r2, r1
 80027fc:	f043 0302 	orr.w	r3, r3, #2
 8002800:	6013      	str	r3, [r2, #0]
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	080073b8 	.word	0x080073b8

08002814 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	3b01      	subs	r3, #1
 8002822:	4a0b      	ldr	r2, [pc, #44]	; (8002850 <LL_DMA_EnableIT_HT+0x3c>)
 8002824:	5cd3      	ldrb	r3, [r2, r3]
 8002826:	461a      	mov	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4413      	add	r3, r2
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	3a01      	subs	r2, #1
 8002832:	4907      	ldr	r1, [pc, #28]	; (8002850 <LL_DMA_EnableIT_HT+0x3c>)
 8002834:	5c8a      	ldrb	r2, [r1, r2]
 8002836:	4611      	mov	r1, r2
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	440a      	add	r2, r1
 800283c:	f043 0304 	orr.w	r3, r3, #4
 8002840:	6013      	str	r3, [r2, #0]
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	080073b8 	.word	0x080073b8

08002854 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	3b01      	subs	r3, #1
 8002862:	4a0b      	ldr	r2, [pc, #44]	; (8002890 <LL_DMA_EnableIT_TE+0x3c>)
 8002864:	5cd3      	ldrb	r3, [r2, r3]
 8002866:	461a      	mov	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4413      	add	r3, r2
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	3a01      	subs	r2, #1
 8002872:	4907      	ldr	r1, [pc, #28]	; (8002890 <LL_DMA_EnableIT_TE+0x3c>)
 8002874:	5c8a      	ldrb	r2, [r1, r2]
 8002876:	4611      	mov	r1, r2
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	440a      	add	r2, r1
 800287c:	f043 0308 	orr.w	r3, r3, #8
 8002880:	6013      	str	r3, [r2, #0]
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	080073b8 	.word	0x080073b8

08002894 <LL_USART_Enable>:
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f043 0201 	orr.w	r2, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	601a      	str	r2, [r3, #0]
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <LL_USART_ConfigAsyncMode>:
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	609a      	str	r2, [r3, #8]
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b089      	sub	sp, #36	; 0x24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	e853 3f00 	ldrex	r3, [r3]
 80028f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f043 0310 	orr.w	r3, r3, #16
 80028fa:	61fb      	str	r3, [r7, #28]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	61ba      	str	r2, [r7, #24]
 8002902:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002904:	6979      	ldr	r1, [r7, #20]
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	e841 2300 	strex	r3, r2, [r1]
 800290c:	613b      	str	r3, [r7, #16]
   return(result);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1e9      	bne.n	80028e8 <LL_USART_EnableIT_IDLE+0x8>
}
 8002914:	bf00      	nop
 8002916:	bf00      	nop
 8002918:	3724      	adds	r7, #36	; 0x24
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8002922:	b480      	push	{r7}
 8002924:	b089      	sub	sp, #36	; 0x24
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3308      	adds	r3, #8
 800292e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	e853 3f00 	ldrex	r3, [r3]
 8002936:	60bb      	str	r3, [r7, #8]
   return(result);
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800293e:	61fb      	str	r3, [r7, #28]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3308      	adds	r3, #8
 8002944:	69fa      	ldr	r2, [r7, #28]
 8002946:	61ba      	str	r2, [r7, #24]
 8002948:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294a:	6979      	ldr	r1, [r7, #20]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	e841 2300 	strex	r3, r2, [r1]
 8002952:	613b      	str	r3, [r7, #16]
   return(result);
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1e7      	bne.n	800292a <LL_USART_DisableIT_CTS+0x8>
}
 800295a:	bf00      	nop
 800295c:	bf00      	nop
 800295e:	3724      	adds	r7, #36	; 0x24
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8002968:	b480      	push	{r7}
 800296a:	b089      	sub	sp, #36	; 0x24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3308      	adds	r3, #8
 8002974:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	e853 3f00 	ldrex	r3, [r3]
 800297c:	60bb      	str	r3, [r7, #8]
   return(result);
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002984:	61fb      	str	r3, [r7, #28]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3308      	adds	r3, #8
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	61ba      	str	r2, [r7, #24]
 800298e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002990:	6979      	ldr	r1, [r7, #20]
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	e841 2300 	strex	r3, r2, [r1]
 8002998:	613b      	str	r3, [r7, #16]
   return(result);
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1e7      	bne.n	8002970 <LL_USART_EnableDMAReq_RX+0x8>
}
 80029a0:	bf00      	nop
 80029a2:	bf00      	nop
 80029a4:	3724      	adds	r7, #36	; 0x24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b089      	sub	sp, #36	; 0x24
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3308      	adds	r3, #8
 80029ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	e853 3f00 	ldrex	r3, [r3]
 80029c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ca:	61fb      	str	r3, [r7, #28]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3308      	adds	r3, #8
 80029d0:	69fa      	ldr	r2, [r7, #28]
 80029d2:	61ba      	str	r2, [r7, #24]
 80029d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d6:	6979      	ldr	r1, [r7, #20]
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	e841 2300 	strex	r3, r2, [r1]
 80029de:	613b      	str	r3, [r7, #16]
   return(result);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1e7      	bne.n	80029b6 <LL_USART_EnableDMAReq_TX+0x8>
}
 80029e6:	bf00      	nop
 80029e8:	bf00      	nop
 80029ea:	3724      	adds	r7, #36	; 0x24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d103      	bne.n	8002a0c <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3328      	adds	r3, #40	; 0x28
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	e002      	b.n	8002a12 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3324      	adds	r3, #36	; 0x24
 8002a10:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8002a12:	68fb      	ldr	r3, [r7, #12]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <USART2_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(uint8_t data) = 0;

/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d002      	beq.n	8002a34 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a03      	ldr	r2, [pc, #12]	; (8002a40 <USART2_RegisterCallback+0x20>)
 8002a32:	6013      	str	r3, [r2, #0]
	}
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	2000036c 	.word	0x2000036c

08002a44 <MX_USART2_UART_Init>:
	// type global variables here


/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8002a44:	b5b0      	push	{r4, r5, r7, lr}
 8002a46:	b090      	sub	sp, #64	; 0x40
 8002a48:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002a4a:	f107 031c 	add.w	r3, r7, #28
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	605a      	str	r2, [r3, #4]
 8002a54:	609a      	str	r2, [r3, #8]
 8002a56:	60da      	str	r2, [r3, #12]
 8002a58:	611a      	str	r2, [r3, #16]
 8002a5a:	615a      	str	r2, [r3, #20]
 8002a5c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5e:	1d3b      	adds	r3, r7, #4
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	611a      	str	r2, [r3, #16]
 8002a6c:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002a6e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002a72:	f7ff fc9b 	bl	80023ac <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002a76:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002a7a:	f7ff fc7f 	bl	800237c <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8002a7e:	f248 0304 	movw	r3, #32772	; 0x8004
 8002a82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a84:	2302      	movs	r3, #2
 8002a86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002a94:	2307      	movs	r3, #7
 8002a96:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a98:	1d3b      	adds	r3, r7, #4
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aa0:	f000 fa62 	bl	8002f68 <LL_GPIO_Init>
   * Rx memory buffer will be handled in normal mode, not circular!
   * You can use configuration from example program and modify it.
   * For more information about DMA registers, refer to reference manual.
   */

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2106      	movs	r1, #6
 8002aa8:	4854      	ldr	r0, [pc, #336]	; (8002bfc <MX_USART2_UART_Init+0x1b8>)
 8002aaa:	f7ff fcd7 	bl	800245c <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8002aae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ab2:	2106      	movs	r1, #6
 8002ab4:	4851      	ldr	r0, [pc, #324]	; (8002bfc <MX_USART2_UART_Init+0x1b8>)
 8002ab6:	f7ff fdc3 	bl	8002640 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8002aba:	2200      	movs	r2, #0
 8002abc:	2106      	movs	r1, #6
 8002abe:	484f      	ldr	r0, [pc, #316]	; (8002bfc <MX_USART2_UART_Init+0x1b8>)
 8002ac0:	f7ff fd0a 	bl	80024d8 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2106      	movs	r1, #6
 8002ac8:	484c      	ldr	r0, [pc, #304]	; (8002bfc <MX_USART2_UART_Init+0x1b8>)
 8002aca:	f7ff fd29 	bl	8002520 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8002ace:	2280      	movs	r2, #128	; 0x80
 8002ad0:	2106      	movs	r1, #6
 8002ad2:	484a      	ldr	r0, [pc, #296]	; (8002bfc <MX_USART2_UART_Init+0x1b8>)
 8002ad4:	f7ff fd48 	bl	8002568 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2106      	movs	r1, #6
 8002adc:	4847      	ldr	r0, [pc, #284]	; (8002bfc <MX_USART2_UART_Init+0x1b8>)
 8002ade:	f7ff fd67 	bl	80025b0 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2106      	movs	r1, #6
 8002ae6:	4845      	ldr	r0, [pc, #276]	; (8002bfc <MX_USART2_UART_Init+0x1b8>)
 8002ae8:	f7ff fd86 	bl	80025f8 <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8002aec:	2101      	movs	r1, #1
 8002aee:	4844      	ldr	r0, [pc, #272]	; (8002c00 <MX_USART2_UART_Init+0x1bc>)
 8002af0:	f7ff ff80 	bl	80029f4 <LL_USART_DMA_GetRegAddr>
 8002af4:	4604      	mov	r4, r0
 8002af6:	4d43      	ldr	r5, [pc, #268]	; (8002c04 <MX_USART2_UART_Init+0x1c0>)
 8002af8:	2106      	movs	r1, #6
 8002afa:	4840      	ldr	r0, [pc, #256]	; (8002bfc <MX_USART2_UART_Init+0x1b8>)
 8002afc:	f7ff fcd4 	bl	80024a8 <LL_DMA_GetDataTransferDirection>
 8002b00:	4603      	mov	r3, r0
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	462b      	mov	r3, r5
 8002b06:	4622      	mov	r2, r4
 8002b08:	2106      	movs	r1, #6
 8002b0a:	483c      	ldr	r0, [pc, #240]	; (8002bfc <MX_USART2_UART_Init+0x1b8>)
 8002b0c:	f7ff fdf6 	bl	80026fc <LL_DMA_ConfigAddresses>
						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
							(uint32_t)bufferUSART2dma,
							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8002b10:	2280      	movs	r2, #128	; 0x80
 8002b12:	2106      	movs	r1, #6
 8002b14:	4839      	ldr	r0, [pc, #228]	; (8002bfc <MX_USART2_UART_Init+0x1b8>)
 8002b16:	f7ff fdb7 	bl	8002688 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002b1a:	2106      	movs	r1, #6
 8002b1c:	4837      	ldr	r0, [pc, #220]	; (8002bfc <MX_USART2_UART_Init+0x1b8>)
 8002b1e:	f7ff fc5d 	bl	80023dc <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 8002b22:	4837      	ldr	r0, [pc, #220]	; (8002c00 <MX_USART2_UART_Init+0x1bc>)
 8002b24:	f7ff ff20 	bl	8002968 <LL_USART_EnableDMAReq_RX>

  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 8002b28:	2106      	movs	r1, #6
 8002b2a:	4834      	ldr	r0, [pc, #208]	; (8002bfc <MX_USART2_UART_Init+0x1b8>)
 8002b2c:	f7ff fe52 	bl	80027d4 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 8002b30:	2106      	movs	r1, #6
 8002b32:	4832      	ldr	r0, [pc, #200]	; (8002bfc <MX_USART2_UART_Init+0x1b8>)
 8002b34:	f7ff fe6e 	bl	8002814 <LL_DMA_EnableIT_HT>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002b38:	2210      	movs	r2, #16
 8002b3a:	2107      	movs	r1, #7
 8002b3c:	482f      	ldr	r0, [pc, #188]	; (8002bfc <MX_USART2_UART_Init+0x1b8>)
 8002b3e:	f7ff fc8d 	bl	800245c <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8002b42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b46:	2107      	movs	r1, #7
 8002b48:	482c      	ldr	r0, [pc, #176]	; (8002bfc <MX_USART2_UART_Init+0x1b8>)
 8002b4a:	f7ff fd79 	bl	8002640 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2107      	movs	r1, #7
 8002b52:	482a      	ldr	r0, [pc, #168]	; (8002bfc <MX_USART2_UART_Init+0x1b8>)
 8002b54:	f7ff fcc0 	bl	80024d8 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2107      	movs	r1, #7
 8002b5c:	4827      	ldr	r0, [pc, #156]	; (8002bfc <MX_USART2_UART_Init+0x1b8>)
 8002b5e:	f7ff fcdf 	bl	8002520 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8002b62:	2280      	movs	r2, #128	; 0x80
 8002b64:	2107      	movs	r1, #7
 8002b66:	4825      	ldr	r0, [pc, #148]	; (8002bfc <MX_USART2_UART_Init+0x1b8>)
 8002b68:	f7ff fcfe 	bl	8002568 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2107      	movs	r1, #7
 8002b70:	4822      	ldr	r0, [pc, #136]	; (8002bfc <MX_USART2_UART_Init+0x1b8>)
 8002b72:	f7ff fd1d 	bl	80025b0 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2107      	movs	r1, #7
 8002b7a:	4820      	ldr	r0, [pc, #128]	; (8002bfc <MX_USART2_UART_Init+0x1b8>)
 8002b7c:	f7ff fd3c 	bl	80025f8 <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8002b80:	2100      	movs	r1, #0
 8002b82:	481f      	ldr	r0, [pc, #124]	; (8002c00 <MX_USART2_UART_Init+0x1bc>)
 8002b84:	f7ff ff36 	bl	80029f4 <LL_USART_DMA_GetRegAddr>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	2107      	movs	r1, #7
 8002b8e:	481b      	ldr	r0, [pc, #108]	; (8002bfc <MX_USART2_UART_Init+0x1b8>)
 8002b90:	f7ff fe08 	bl	80027a4 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 8002b94:	481a      	ldr	r0, [pc, #104]	; (8002c00 <MX_USART2_UART_Init+0x1bc>)
 8002b96:	f7ff ff0a 	bl	80029ae <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8002b9a:	2107      	movs	r1, #7
 8002b9c:	4817      	ldr	r0, [pc, #92]	; (8002bfc <MX_USART2_UART_Init+0x1b8>)
 8002b9e:	f7ff fe59 	bl	8002854 <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	2026      	movs	r0, #38	; 0x26
 8002ba6:	f7ff fbbf 	bl	8002328 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002baa:	2026      	movs	r0, #38	; 0x26
 8002bac:	f7ff fb9e 	bl	80022ec <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8002bb0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002bb4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002bc2:	230c      	movs	r3, #12
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002bce:	f107 031c 	add.w	r3, r7, #28
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	480a      	ldr	r0, [pc, #40]	; (8002c00 <MX_USART2_UART_Init+0x1bc>)
 8002bd6:	f000 fd2d 	bl	8003634 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002bda:	4809      	ldr	r0, [pc, #36]	; (8002c00 <MX_USART2_UART_Init+0x1bc>)
 8002bdc:	f7ff fe6a 	bl	80028b4 <LL_USART_ConfigAsyncMode>
  LL_USART_DisableIT_CTS(USART2);
 8002be0:	4807      	ldr	r0, [pc, #28]	; (8002c00 <MX_USART2_UART_Init+0x1bc>)
 8002be2:	f7ff fe9e 	bl	8002922 <LL_USART_DisableIT_CTS>

  /* Enable USART2 peripheral and interrupts*/
  LL_USART_EnableIT_IDLE(USART2);
 8002be6:	4806      	ldr	r0, [pc, #24]	; (8002c00 <MX_USART2_UART_Init+0x1bc>)
 8002be8:	f7ff fe7a 	bl	80028e0 <LL_USART_EnableIT_IDLE>
  LL_USART_Enable(USART2);
 8002bec:	4804      	ldr	r0, [pc, #16]	; (8002c00 <MX_USART2_UART_Init+0x1bc>)
 8002bee:	f7ff fe51 	bl	8002894 <LL_USART_Enable>
  	  //type your code here:
}
 8002bf2:	bf00      	nop
 8002bf4:	3738      	adds	r7, #56	; 0x38
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40020000 	.word	0x40020000
 8002c00:	40004400 	.word	0x40004400
 8002c04:	200002ec 	.word	0x200002ec

08002c08 <USART2_PutBuffer>:

// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	461a      	mov	r2, r3
 8002c18:	2107      	movs	r1, #7
 8002c1a:	480a      	ldr	r0, [pc, #40]	; (8002c44 <USART2_PutBuffer+0x3c>)
 8002c1c:	f7ff fdaa 	bl	8002774 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	461a      	mov	r2, r3
 8002c24:	2107      	movs	r1, #7
 8002c26:	4807      	ldr	r0, [pc, #28]	; (8002c44 <USART2_PutBuffer+0x3c>)
 8002c28:	f7ff fd2e 	bl	8002688 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8002c2c:	2107      	movs	r1, #7
 8002c2e:	4805      	ldr	r0, [pc, #20]	; (8002c44 <USART2_PutBuffer+0x3c>)
 8002c30:	f7ff fdd0 	bl	80027d4 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8002c34:	2107      	movs	r1, #7
 8002c36:	4803      	ldr	r0, [pc, #12]	; (8002c44 <USART2_PutBuffer+0x3c>)
 8002c38:	f7ff fbd0 	bl	80023dc <LL_DMA_EnableChannel>
}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40020000 	.word	0x40020000

08002c48 <USART2_CheckDmaReception>:
 */

uint16_t buf_read_pos = 0;

void USART2_CheckDmaReception(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 8002c4e:	2106      	movs	r1, #6
 8002c50:	482a      	ldr	r0, [pc, #168]	; (8002cfc <USART2_CheckDmaReception+0xb4>)
 8002c52:	f7ff fd3d 	bl	80026d0 <LL_DMA_GetDataLength>
 8002c56:	4603      	mov	r3, r0
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002c5e:	80fb      	strh	r3, [r7, #6]

	if (pos >= DMA_USART2_BUFFER_SIZE)
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	2b7f      	cmp	r3, #127	; 0x7f
 8002c64:	d941      	bls.n	8002cea <USART2_CheckDmaReception+0xa2>
	{
		// set the DMA address pointer back to the beginning of the buffer
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002c66:	2106      	movs	r1, #6
 8002c68:	4824      	ldr	r0, [pc, #144]	; (8002cfc <USART2_CheckDmaReception+0xb4>)
 8002c6a:	f7ff fbd7 	bl	800241c <LL_DMA_DisableChannel>
		LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_6, (uint32_t)bufferUSART2dma);
 8002c6e:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <USART2_CheckDmaReception+0xb8>)
 8002c70:	461a      	mov	r2, r3
 8002c72:	2106      	movs	r1, #6
 8002c74:	4821      	ldr	r0, [pc, #132]	; (8002cfc <USART2_CheckDmaReception+0xb4>)
 8002c76:	f7ff fd7d 	bl	8002774 <LL_DMA_SetMemoryAddress>
		LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8002c7a:	2280      	movs	r2, #128	; 0x80
 8002c7c:	2106      	movs	r1, #6
 8002c7e:	481f      	ldr	r0, [pc, #124]	; (8002cfc <USART2_CheckDmaReception+0xb4>)
 8002c80:	f7ff fd02 	bl	8002688 <LL_DMA_SetDataLength>
		LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002c84:	2106      	movs	r1, #6
 8002c86:	481d      	ldr	r0, [pc, #116]	; (8002cfc <USART2_CheckDmaReception+0xb4>)
 8002c88:	f7ff fba8 	bl	80023dc <LL_DMA_EnableChannel>

		// process all data until the end of the buffer
		while(buf_read_pos < DMA_USART2_BUFFER_SIZE)
 8002c8c:	e012      	b.n	8002cb4 <USART2_CheckDmaReception+0x6c>
		{
			if(USART2_ProcessData != 0)
 8002c8e:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <USART2_CheckDmaReception+0xbc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d008      	beq.n	8002ca8 <USART2_CheckDmaReception+0x60>
			{
				USART2_ProcessData(bufferUSART2dma[buf_read_pos]);
 8002c96:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <USART2_CheckDmaReception+0xbc>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a1b      	ldr	r2, [pc, #108]	; (8002d08 <USART2_CheckDmaReception+0xc0>)
 8002c9c:	8812      	ldrh	r2, [r2, #0]
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	4a17      	ldr	r2, [pc, #92]	; (8002d00 <USART2_CheckDmaReception+0xb8>)
 8002ca2:	5c52      	ldrb	r2, [r2, r1]
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	4798      	blx	r3
			}
			buf_read_pos++;
 8002ca8:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <USART2_CheckDmaReception+0xc0>)
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	3301      	adds	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <USART2_CheckDmaReception+0xc0>)
 8002cb2:	801a      	strh	r2, [r3, #0]
		while(buf_read_pos < DMA_USART2_BUFFER_SIZE)
 8002cb4:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <USART2_CheckDmaReception+0xc0>)
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	2b7f      	cmp	r3, #127	; 0x7f
 8002cba:	d9e8      	bls.n	8002c8e <USART2_CheckDmaReception+0x46>
		}

		buf_read_pos = 0;
 8002cbc:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <USART2_CheckDmaReception+0xc0>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	801a      	strh	r2, [r3, #0]
				USART2_ProcessData(bufferUSART2dma[buf_read_pos]);
			}
			buf_read_pos++;
		}
	}
}
 8002cc2:	e017      	b.n	8002cf4 <USART2_CheckDmaReception+0xac>
			if(USART2_ProcessData != 0)
 8002cc4:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <USART2_CheckDmaReception+0xbc>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d008      	beq.n	8002cde <USART2_CheckDmaReception+0x96>
				USART2_ProcessData(bufferUSART2dma[buf_read_pos]);
 8002ccc:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <USART2_CheckDmaReception+0xbc>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a0d      	ldr	r2, [pc, #52]	; (8002d08 <USART2_CheckDmaReception+0xc0>)
 8002cd2:	8812      	ldrh	r2, [r2, #0]
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <USART2_CheckDmaReception+0xb8>)
 8002cd8:	5c52      	ldrb	r2, [r2, r1]
 8002cda:	4610      	mov	r0, r2
 8002cdc:	4798      	blx	r3
			buf_read_pos++;
 8002cde:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <USART2_CheckDmaReception+0xc0>)
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <USART2_CheckDmaReception+0xc0>)
 8002ce8:	801a      	strh	r2, [r3, #0]
		while(buf_read_pos < pos)
 8002cea:	4b07      	ldr	r3, [pc, #28]	; (8002d08 <USART2_CheckDmaReception+0xc0>)
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	88fa      	ldrh	r2, [r7, #6]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d8e7      	bhi.n	8002cc4 <USART2_CheckDmaReception+0x7c>
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40020000 	.word	0x40020000
 8002d00:	200002ec 	.word	0x200002ec
 8002d04:	2000036c 	.word	0x2000036c
 8002d08:	20000370 	.word	0x20000370

08002d0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d44 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d10:	f7ff fada 	bl	80022c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d14:	480c      	ldr	r0, [pc, #48]	; (8002d48 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d16:	490d      	ldr	r1, [pc, #52]	; (8002d4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d18:	4a0d      	ldr	r2, [pc, #52]	; (8002d50 <LoopForever+0xe>)
  movs r3, #0
 8002d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d1c:	e002      	b.n	8002d24 <LoopCopyDataInit>

08002d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d22:	3304      	adds	r3, #4

08002d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d28:	d3f9      	bcc.n	8002d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d2a:	4a0a      	ldr	r2, [pc, #40]	; (8002d54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d2c:	4c0a      	ldr	r4, [pc, #40]	; (8002d58 <LoopForever+0x16>)
  movs r3, #0
 8002d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d30:	e001      	b.n	8002d36 <LoopFillZerobss>

08002d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d34:	3204      	adds	r2, #4

08002d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d38:	d3fb      	bcc.n	8002d32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d3a:	f001 fbcf 	bl	80044dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d3e:	f7fe ff4b 	bl	8001bd8 <main>

08002d42 <LoopForever>:

LoopForever:
    b LoopForever
 8002d42:	e7fe      	b.n	8002d42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d44:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d4c:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 8002d50:	08007770 	.word	0x08007770
  ldr r2, =_sbss
 8002d54:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 8002d58:	200004c0 	.word	0x200004c0

08002d5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d5c:	e7fe      	b.n	8002d5c <ADC1_2_IRQHandler>

08002d5e <LL_GPIO_SetPinMode>:
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b089      	sub	sp, #36	; 0x24
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	fa93 f3a3 	rbit	r3, r3
 8002d78:	613b      	str	r3, [r7, #16]
  return result;
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	fab3 f383 	clz	r3, r3
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	2103      	movs	r1, #3
 8002d86:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	401a      	ands	r2, r3
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	fa93 f3a3 	rbit	r3, r3
 8002d98:	61bb      	str	r3, [r7, #24]
  return result;
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	fab3 f383 	clz	r3, r3
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	fa01 f303 	lsl.w	r3, r1, r3
 8002daa:	431a      	orrs	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	601a      	str	r2, [r3, #0]
}
 8002db0:	bf00      	nop
 8002db2:	3724      	adds	r7, #36	; 0x24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <LL_GPIO_SetPinOutputType>:
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	401a      	ands	r2, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	fb01 f303 	mul.w	r3, r1, r3
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	605a      	str	r2, [r3, #4]
}
 8002de0:	bf00      	nop
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <LL_GPIO_SetPinSpeed>:
{
 8002dec:	b480      	push	{r7}
 8002dee:	b089      	sub	sp, #36	; 0x24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	613b      	str	r3, [r7, #16]
  return result;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	fab3 f383 	clz	r3, r3
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	2103      	movs	r1, #3
 8002e14:	fa01 f303 	lsl.w	r3, r1, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	61bb      	str	r3, [r7, #24]
  return result;
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	fab3 f383 	clz	r3, r3
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	fa01 f303 	lsl.w	r3, r1, r3
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	609a      	str	r2, [r3, #8]
}
 8002e3e:	bf00      	nop
 8002e40:	3724      	adds	r7, #36	; 0x24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <LL_GPIO_SetPinPull>:
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b089      	sub	sp, #36	; 0x24
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	fa93 f3a3 	rbit	r3, r3
 8002e64:	613b      	str	r3, [r7, #16]
  return result;
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	fab3 f383 	clz	r3, r3
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	2103      	movs	r1, #3
 8002e72:	fa01 f303 	lsl.w	r3, r1, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	401a      	ands	r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	fa93 f3a3 	rbit	r3, r3
 8002e84:	61bb      	str	r3, [r7, #24]
  return result;
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	fab3 f383 	clz	r3, r3
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	fa01 f303 	lsl.w	r3, r1, r3
 8002e96:	431a      	orrs	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	60da      	str	r2, [r3, #12]
}
 8002e9c:	bf00      	nop
 8002e9e:	3724      	adds	r7, #36	; 0x24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_GPIO_SetAFPin_0_7>:
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b089      	sub	sp, #36	; 0x24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a1a      	ldr	r2, [r3, #32]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	613b      	str	r3, [r7, #16]
  return result;
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	fab3 f383 	clz	r3, r3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	210f      	movs	r1, #15
 8002ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	401a      	ands	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	fa93 f3a3 	rbit	r3, r3
 8002ee2:	61bb      	str	r3, [r7, #24]
  return result;
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	fab3 f383 	clz	r3, r3
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	621a      	str	r2, [r3, #32]
}
 8002efa:	bf00      	nop
 8002efc:	3724      	adds	r7, #36	; 0x24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <LL_GPIO_SetAFPin_8_15>:
{
 8002f06:	b480      	push	{r7}
 8002f08:	b089      	sub	sp, #36	; 0x24
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	60f8      	str	r0, [r7, #12]
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	0a1b      	lsrs	r3, r3, #8
 8002f1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	fa93 f3a3 	rbit	r3, r3
 8002f22:	613b      	str	r3, [r7, #16]
  return result;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	210f      	movs	r1, #15
 8002f30:	fa01 f303 	lsl.w	r3, r1, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	401a      	ands	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	0a1b      	lsrs	r3, r3, #8
 8002f3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	61bb      	str	r3, [r7, #24]
  return result;
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	fab3 f383 	clz	r3, r3
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	431a      	orrs	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002f5c:	bf00      	nop
 8002f5e:	3724      	adds	r7, #36	; 0x24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	fa93 f3a3 	rbit	r3, r3
 8002f7e:	613b      	str	r3, [r7, #16]
  return result;
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	fab3 f383 	clz	r3, r3
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002f8a:	e051      	b.n	8003030 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	2101      	movs	r1, #1
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa01 f303 	lsl.w	r3, r1, r3
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d043      	beq.n	800302a <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d003      	beq.n	8002fb2 <LL_GPIO_Init+0x4a>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d10e      	bne.n	8002fd0 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	69b9      	ldr	r1, [r7, #24]
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff ff16 	bl	8002dec <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	6819      	ldr	r1, [r3, #0]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7ff fef6 	bl	8002dbc <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	69b9      	ldr	r1, [r7, #24]
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff ff36 	bl	8002e4a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d11a      	bne.n	800301c <LL_GPIO_Init+0xb4>
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	fa93 f3a3 	rbit	r3, r3
 8002ff0:	60bb      	str	r3, [r7, #8]
  return result;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002ff4:	fab3 f383 	clz	r3, r3
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b07      	cmp	r3, #7
 8002ffc:	d807      	bhi.n	800300e <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	461a      	mov	r2, r3
 8003004:	69b9      	ldr	r1, [r7, #24]
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff ff4e 	bl	8002ea8 <LL_GPIO_SetAFPin_0_7>
 800300c:	e006      	b.n	800301c <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	461a      	mov	r2, r3
 8003014:	69b9      	ldr	r1, [r7, #24]
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff ff75 	bl	8002f06 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	461a      	mov	r2, r3
 8003022:	69b9      	ldr	r1, [r7, #24]
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff fe9a 	bl	8002d5e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	3301      	adds	r3, #1
 800302e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	fa22 f303 	lsr.w	r3, r2, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1a6      	bne.n	8002f8c <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3720      	adds	r7, #32
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <LL_I2C_Enable>:
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f043 0201 	orr.w	r2, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	601a      	str	r2, [r3, #0]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <LL_I2C_Disable>:
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f023 0201 	bic.w	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	601a      	str	r2, [r3, #0]
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <LL_I2C_ConfigFilters>:
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	0219      	lsls	r1, r3, #8
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	430b      	orrs	r3, r1
 80030a4:	431a      	orrs	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	601a      	str	r2, [r3, #0]
}
 80030aa:	bf00      	nop
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <LL_I2C_SetOwnAddress1>:
{
 80030b6:	b480      	push	{r7}
 80030b8:	b085      	sub	sp, #20
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80030ca:	f023 0307 	bic.w	r3, r3, #7
 80030ce:	68b9      	ldr	r1, [r7, #8]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	431a      	orrs	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	609a      	str	r2, [r3, #8]
}
 80030da:	bf00      	nop
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <LL_I2C_EnableOwnAddress1>:
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	609a      	str	r2, [r3, #8]
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <LL_I2C_DisableOwnAddress1>:
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	609a      	str	r2, [r3, #8]
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <LL_I2C_SetTiming>:
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	611a      	str	r2, [r3, #16]
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <LL_I2C_SetMode>:
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	601a      	str	r2, [r3, #0]
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <LL_I2C_AcknowledgeNextData>:
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	431a      	orrs	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	605a      	str	r2, [r3, #4]
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ff65 	bl	8003068 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	6899      	ldr	r1, [r3, #8]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	461a      	mov	r2, r3
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff ff6d 	bl	8003088 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	4619      	mov	r1, r3
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7ff ffb6 	bl	8003126 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7ff ff44 	bl	8003048 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff ffa0 	bl	8003106 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	6919      	ldr	r1, [r3, #16]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	461a      	mov	r2, r3
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7ff ff70 	bl	80030b6 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7ff ff81 	bl	80030e6 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4619      	mov	r1, r3
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff ffa9 	bl	8003142 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	4619      	mov	r1, r3
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff ffb6 	bl	8003168 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <LL_RCC_HSI_IsReady>:
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <LL_RCC_HSI_IsReady+0x20>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b02      	cmp	r3, #2
 8003216:	bf0c      	ite	eq
 8003218:	2301      	moveq	r3, #1
 800321a:	2300      	movne	r3, #0
 800321c:	b2db      	uxtb	r3, r3
}
 800321e:	4618      	mov	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	40021000 	.word	0x40021000

0800322c <LL_RCC_LSE_IsReady>:
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8003230:	4b06      	ldr	r3, [pc, #24]	; (800324c <LL_RCC_LSE_IsReady+0x20>)
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b02      	cmp	r3, #2
 800323a:	bf0c      	ite	eq
 800323c:	2301      	moveq	r3, #1
 800323e:	2300      	movne	r3, #0
 8003240:	b2db      	uxtb	r3, r3
}
 8003242:	4618      	mov	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	40021000 	.word	0x40021000

08003250 <LL_RCC_GetSysClkSource>:
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003254:	4b04      	ldr	r3, [pc, #16]	; (8003268 <LL_RCC_GetSysClkSource+0x18>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 030c 	and.w	r3, r3, #12
}
 800325c:	4618      	mov	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40021000 	.word	0x40021000

0800326c <LL_RCC_GetAHBPrescaler>:
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003270:	4b04      	ldr	r3, [pc, #16]	; (8003284 <LL_RCC_GetAHBPrescaler+0x18>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40021000 	.word	0x40021000

08003288 <LL_RCC_GetAPB1Prescaler>:
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800328c:	4b04      	ldr	r3, [pc, #16]	; (80032a0 <LL_RCC_GetAPB1Prescaler+0x18>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003294:	4618      	mov	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40021000 	.word	0x40021000

080032a4 <LL_RCC_GetAPB2Prescaler>:
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80032a8:	4b04      	ldr	r3, [pc, #16]	; (80032bc <LL_RCC_GetAPB2Prescaler+0x18>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	40021000 	.word	0x40021000

080032c0 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80032c8:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <LL_RCC_GetUSARTClockSource+0x28>)
 80032ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032cc:	2103      	movs	r1, #3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	fa01 f303 	lsl.w	r3, r1, r3
 80032d4:	401a      	ands	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	061b      	lsls	r3, r3, #24
 80032da:	4313      	orrs	r3, r2
}
 80032dc:	4618      	mov	r0, r3
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	40021000 	.word	0x40021000

080032ec <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80032f0:	4b04      	ldr	r3, [pc, #16]	; (8003304 <LL_RCC_PLL_GetMainSource+0x18>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40021000 	.word	0x40021000

08003308 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 800330c:	4b04      	ldr	r3, [pc, #16]	; (8003320 <LL_RCC_PLL_GetMultiplicator+0x18>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8003314:	4618      	mov	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40021000 	.word	0x40021000

08003324 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8003328:	4b04      	ldr	r3, [pc, #16]	; (800333c <LL_RCC_PLL_GetPrediv+0x18>)
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	f003 030f 	and.w	r3, r3, #15
}
 8003330:	4618      	mov	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40021000 	.word	0x40021000

08003340 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003348:	f000 f862 	bl	8003410 <RCC_GetSystemClockFreq>
 800334c:	4602      	mov	r2, r0
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f000 f880 	bl	800345c <RCC_GetHCLKClockFreq>
 800335c:	4602      	mov	r2, r0
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4618      	mov	r0, r3
 8003368:	f000 f88e 	bl	8003488 <RCC_GetPCLK1ClockFreq>
 800336c:	4602      	mov	r2, r0
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	4618      	mov	r0, r3
 8003378:	f000 f89a 	bl	80034b0 <RCC_GetPCLK2ClockFreq>
 800337c:	4602      	mov	r2, r0
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	60da      	str	r2, [r3, #12]
}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d130      	bne.n	8003400 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff ff8e 	bl	80032c0 <LL_RCC_GetUSARTClockSource>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d00a      	beq.n	80033c0 <LL_RCC_GetUSARTClockFreq+0x34>
 80033aa:	2b03      	cmp	r3, #3
 80033ac:	d819      	bhi.n	80033e2 <LL_RCC_GetUSARTClockFreq+0x56>
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d002      	beq.n	80033b8 <LL_RCC_GetUSARTClockFreq+0x2c>
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d00c      	beq.n	80033d0 <LL_RCC_GetUSARTClockFreq+0x44>
 80033b6:	e014      	b.n	80033e2 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80033b8:	f000 f82a 	bl	8003410 <RCC_GetSystemClockFreq>
 80033bc:	60f8      	str	r0, [r7, #12]
        break;
 80033be:	e01f      	b.n	8003400 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80033c0:	f7ff ff22 	bl	8003208 <LL_RCC_HSI_IsReady>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d017      	beq.n	80033fa <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 80033ca:	4b10      	ldr	r3, [pc, #64]	; (800340c <LL_RCC_GetUSARTClockFreq+0x80>)
 80033cc:	60fb      	str	r3, [r7, #12]
        }
        break;
 80033ce:	e014      	b.n	80033fa <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80033d0:	f7ff ff2c 	bl	800322c <LL_RCC_LSE_IsReady>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d011      	beq.n	80033fe <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 80033da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033de:	60fb      	str	r3, [r7, #12]
        }
        break;
 80033e0:	e00d      	b.n	80033fe <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80033e2:	f000 f815 	bl	8003410 <RCC_GetSystemClockFreq>
 80033e6:	4603      	mov	r3, r0
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 f837 	bl	800345c <RCC_GetHCLKClockFreq>
 80033ee:	4603      	mov	r3, r0
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 f849 	bl	8003488 <RCC_GetPCLK1ClockFreq>
 80033f6:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 80033f8:	e002      	b.n	8003400 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 80033fa:	bf00      	nop
 80033fc:	e000      	b.n	8003400 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 80033fe:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8003400:	68fb      	ldr	r3, [r7, #12]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	007a1200 	.word	0x007a1200

08003410 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800341a:	f7ff ff19 	bl	8003250 <LL_RCC_GetSysClkSource>
 800341e:	4603      	mov	r3, r0
 8003420:	2b08      	cmp	r3, #8
 8003422:	d00c      	beq.n	800343e <RCC_GetSystemClockFreq+0x2e>
 8003424:	2b08      	cmp	r3, #8
 8003426:	d80e      	bhi.n	8003446 <RCC_GetSystemClockFreq+0x36>
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <RCC_GetSystemClockFreq+0x22>
 800342c:	2b04      	cmp	r3, #4
 800342e:	d003      	beq.n	8003438 <RCC_GetSystemClockFreq+0x28>
 8003430:	e009      	b.n	8003446 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003432:	4b09      	ldr	r3, [pc, #36]	; (8003458 <RCC_GetSystemClockFreq+0x48>)
 8003434:	607b      	str	r3, [r7, #4]
      break;
 8003436:	e009      	b.n	800344c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003438:	4b07      	ldr	r3, [pc, #28]	; (8003458 <RCC_GetSystemClockFreq+0x48>)
 800343a:	607b      	str	r3, [r7, #4]
      break;
 800343c:	e006      	b.n	800344c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800343e:	f000 f84b 	bl	80034d8 <RCC_PLL_GetFreqDomain_SYS>
 8003442:	6078      	str	r0, [r7, #4]
      break;
 8003444:	e002      	b.n	800344c <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8003446:	4b04      	ldr	r3, [pc, #16]	; (8003458 <RCC_GetSystemClockFreq+0x48>)
 8003448:	607b      	str	r3, [r7, #4]
      break;
 800344a:	bf00      	nop
  }

  return frequency;
 800344c:	687b      	ldr	r3, [r7, #4]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	007a1200 	.word	0x007a1200

0800345c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003464:	f7ff ff02 	bl	800326c <LL_RCC_GetAHBPrescaler>
 8003468:	4603      	mov	r3, r0
 800346a:	091b      	lsrs	r3, r3, #4
 800346c:	f003 030f 	and.w	r3, r3, #15
 8003470:	4a04      	ldr	r2, [pc, #16]	; (8003484 <RCC_GetHCLKClockFreq+0x28>)
 8003472:	5cd3      	ldrb	r3, [r2, r3]
 8003474:	461a      	mov	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	40d3      	lsrs	r3, r2
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	080073a0 	.word	0x080073a0

08003488 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003490:	f7ff fefa 	bl	8003288 <LL_RCC_GetAPB1Prescaler>
 8003494:	4603      	mov	r3, r0
 8003496:	0a1b      	lsrs	r3, r3, #8
 8003498:	4a04      	ldr	r2, [pc, #16]	; (80034ac <RCC_GetPCLK1ClockFreq+0x24>)
 800349a:	5cd3      	ldrb	r3, [r2, r3]
 800349c:	461a      	mov	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	40d3      	lsrs	r3, r2
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	080073b0 	.word	0x080073b0

080034b0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80034b8:	f7ff fef4 	bl	80032a4 <LL_RCC_GetAPB2Prescaler>
 80034bc:	4603      	mov	r3, r0
 80034be:	0adb      	lsrs	r3, r3, #11
 80034c0:	4a04      	ldr	r2, [pc, #16]	; (80034d4 <RCC_GetPCLK2ClockFreq+0x24>)
 80034c2:	5cd3      	ldrb	r3, [r2, r3]
 80034c4:	461a      	mov	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	40d3      	lsrs	r3, r2
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	080073b0 	.word	0x080073b0

080034d8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	2300      	movs	r3, #0
 80034e4:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80034e6:	f7ff ff01 	bl	80032ec <LL_RCC_PLL_GetMainSource>
 80034ea:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d004      	beq.n	80034fc <RCC_PLL_GetFreqDomain_SYS+0x24>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f8:	d003      	beq.n	8003502 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80034fa:	e005      	b.n	8003508 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80034fc:	4b13      	ldr	r3, [pc, #76]	; (800354c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80034fe:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8003500:	e005      	b.n	800350e <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003502:	4b13      	ldr	r3, [pc, #76]	; (8003550 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003504:	60fb      	str	r3, [r7, #12]
      break;
 8003506:	e002      	b.n	800350e <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8003508:	4b10      	ldr	r3, [pc, #64]	; (800354c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800350a:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800350c:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 800350e:	f7ff ff09 	bl	8003324 <LL_RCC_PLL_GetPrediv>
 8003512:	4603      	mov	r3, r0
 8003514:	3301      	adds	r3, #1
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	fbb2 f4f3 	udiv	r4, r2, r3
 800351c:	f7ff fef4 	bl	8003308 <LL_RCC_PLL_GetMultiplicator>
 8003520:	4603      	mov	r3, r0
 8003522:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003526:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800352a:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	fa92 f2a2 	rbit	r2, r2
 8003532:	603a      	str	r2, [r7, #0]
  return result;
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	fab2 f282 	clz	r2, r2
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	40d3      	lsrs	r3, r2
 800353e:	3302      	adds	r3, #2
 8003540:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8003544:	4618      	mov	r0, r3
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	bd90      	pop	{r4, r7, pc}
 800354c:	003d0900 	.word	0x003d0900
 8003550:	007a1200 	.word	0x007a1200

08003554 <LL_USART_IsEnabled>:
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <LL_USART_IsEnabled+0x18>
 8003568:	2301      	movs	r3, #1
 800356a:	e000      	b.n	800356e <LL_USART_IsEnabled+0x1a>
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <LL_USART_SetStopBitsLength>:
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	605a      	str	r2, [r3, #4]
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <LL_USART_SetHWFlowCtrl>:
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	609a      	str	r2, [r3, #8]
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <LL_USART_SetBaudRate>:
{
 80035c6:	b480      	push	{r7}
 80035c8:	b087      	sub	sp, #28
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
 80035d2:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035da:	d11a      	bne.n	8003612 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	005a      	lsls	r2, r3, #1
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	085b      	lsrs	r3, r3, #1
 80035e4:	441a      	add	r2, r3
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80035f6:	4013      	ands	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	085b      	lsrs	r3, r3, #1
 80035fe:	b29b      	uxth	r3, r3
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	60da      	str	r2, [r3, #12]
}
 8003610:	e00a      	b.n	8003628 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	085a      	lsrs	r2, r3, #1
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	441a      	add	r2, r3
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003620:	b29b      	uxth	r3, r3
 8003622:	461a      	mov	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	60da      	str	r2, [r3, #12]
}
 8003628:	bf00      	nop
 800362a:	371c      	adds	r7, #28
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003642:	2300      	movs	r3, #0
 8003644:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7ff ff84 	bl	8003554 <LL_USART_IsEnabled>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d14e      	bne.n	80036f0 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	4b29      	ldr	r3, [pc, #164]	; (80036fc <LL_USART_Init+0xc8>)
 8003658:	4013      	ands	r3, r2
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	6851      	ldr	r1, [r2, #4]
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	68d2      	ldr	r2, [r2, #12]
 8003662:	4311      	orrs	r1, r2
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	6912      	ldr	r2, [r2, #16]
 8003668:	4311      	orrs	r1, r2
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	6992      	ldr	r2, [r2, #24]
 800366e:	430a      	orrs	r2, r1
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	4619      	mov	r1, r3
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff ff7c 	bl	800357a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	4619      	mov	r1, r3
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff ff89 	bl	80035a0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a1b      	ldr	r2, [pc, #108]	; (8003700 <LL_USART_Init+0xcc>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d104      	bne.n	80036a0 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8003696:	2000      	movs	r0, #0
 8003698:	f7ff fe78 	bl	800338c <LL_RCC_GetUSARTClockFreq>
 800369c:	61b8      	str	r0, [r7, #24]
 800369e:	e016      	b.n	80036ce <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a18      	ldr	r2, [pc, #96]	; (8003704 <LL_USART_Init+0xd0>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d107      	bne.n	80036b8 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80036a8:	f107 0308 	add.w	r3, r7, #8
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff fe47 	bl	8003340 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	61bb      	str	r3, [r7, #24]
 80036b6:	e00a      	b.n	80036ce <LL_USART_Init+0x9a>
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a13      	ldr	r2, [pc, #76]	; (8003708 <LL_USART_Init+0xd4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d106      	bne.n	80036ce <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80036c0:	f107 0308 	add.w	r3, r7, #8
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff fe3b 	bl	8003340 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00d      	beq.n	80036f0 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d009      	beq.n	80036f0 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 80036dc:	2300      	movs	r3, #0
 80036de:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80036e8:	69b9      	ldr	r1, [r7, #24]
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff ff6b 	bl	80035c6 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80036f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3720      	adds	r7, #32
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	efff69f3 	.word	0xefff69f3
 8003700:	40013800 	.word	0x40013800
 8003704:	40004400 	.word	0x40004400
 8003708:	40004800 	.word	0x40004800

0800370c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	fbb2 f3f3 	udiv	r3, r2, r3
 800371e:	4a07      	ldr	r2, [pc, #28]	; (800373c <LL_InitTick+0x30>)
 8003720:	3b01      	subs	r3, #1
 8003722:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <LL_InitTick+0x30>)
 8003726:	2200      	movs	r2, #0
 8003728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800372a:	4b04      	ldr	r3, [pc, #16]	; (800373c <LL_InitTick+0x30>)
 800372c:	2205      	movs	r2, #5
 800372e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	e000e010 	.word	0xe000e010

08003740 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003748:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7ff ffdd 	bl	800370c <LL_InitTick>
}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003764:	4a04      	ldr	r2, [pc, #16]	; (8003778 <LL_SetSystemCoreClock+0x1c>)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6013      	str	r3, [r2, #0]
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	20000084 	.word	0x20000084

0800377c <malloc>:
 800377c:	4b02      	ldr	r3, [pc, #8]	; (8003788 <malloc+0xc>)
 800377e:	4601      	mov	r1, r0
 8003780:	6818      	ldr	r0, [r3, #0]
 8003782:	f000 b82b 	b.w	80037dc <_malloc_r>
 8003786:	bf00      	nop
 8003788:	200000e0 	.word	0x200000e0

0800378c <free>:
 800378c:	4b02      	ldr	r3, [pc, #8]	; (8003798 <free+0xc>)
 800378e:	4601      	mov	r1, r0
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	f001 bd47 	b.w	8005224 <_free_r>
 8003796:	bf00      	nop
 8003798:	200000e0 	.word	0x200000e0

0800379c <sbrk_aligned>:
 800379c:	b570      	push	{r4, r5, r6, lr}
 800379e:	4e0e      	ldr	r6, [pc, #56]	; (80037d8 <sbrk_aligned+0x3c>)
 80037a0:	460c      	mov	r4, r1
 80037a2:	6831      	ldr	r1, [r6, #0]
 80037a4:	4605      	mov	r5, r0
 80037a6:	b911      	cbnz	r1, 80037ae <sbrk_aligned+0x12>
 80037a8:	f000 fe70 	bl	800448c <_sbrk_r>
 80037ac:	6030      	str	r0, [r6, #0]
 80037ae:	4621      	mov	r1, r4
 80037b0:	4628      	mov	r0, r5
 80037b2:	f000 fe6b 	bl	800448c <_sbrk_r>
 80037b6:	1c43      	adds	r3, r0, #1
 80037b8:	d00a      	beq.n	80037d0 <sbrk_aligned+0x34>
 80037ba:	1cc4      	adds	r4, r0, #3
 80037bc:	f024 0403 	bic.w	r4, r4, #3
 80037c0:	42a0      	cmp	r0, r4
 80037c2:	d007      	beq.n	80037d4 <sbrk_aligned+0x38>
 80037c4:	1a21      	subs	r1, r4, r0
 80037c6:	4628      	mov	r0, r5
 80037c8:	f000 fe60 	bl	800448c <_sbrk_r>
 80037cc:	3001      	adds	r0, #1
 80037ce:	d101      	bne.n	80037d4 <sbrk_aligned+0x38>
 80037d0:	f04f 34ff 	mov.w	r4, #4294967295
 80037d4:	4620      	mov	r0, r4
 80037d6:	bd70      	pop	{r4, r5, r6, pc}
 80037d8:	20000378 	.word	0x20000378

080037dc <_malloc_r>:
 80037dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037e0:	1ccd      	adds	r5, r1, #3
 80037e2:	f025 0503 	bic.w	r5, r5, #3
 80037e6:	3508      	adds	r5, #8
 80037e8:	2d0c      	cmp	r5, #12
 80037ea:	bf38      	it	cc
 80037ec:	250c      	movcc	r5, #12
 80037ee:	2d00      	cmp	r5, #0
 80037f0:	4607      	mov	r7, r0
 80037f2:	db01      	blt.n	80037f8 <_malloc_r+0x1c>
 80037f4:	42a9      	cmp	r1, r5
 80037f6:	d905      	bls.n	8003804 <_malloc_r+0x28>
 80037f8:	230c      	movs	r3, #12
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	2600      	movs	r6, #0
 80037fe:	4630      	mov	r0, r6
 8003800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003804:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80038d8 <_malloc_r+0xfc>
 8003808:	f000 f868 	bl	80038dc <__malloc_lock>
 800380c:	f8d8 3000 	ldr.w	r3, [r8]
 8003810:	461c      	mov	r4, r3
 8003812:	bb5c      	cbnz	r4, 800386c <_malloc_r+0x90>
 8003814:	4629      	mov	r1, r5
 8003816:	4638      	mov	r0, r7
 8003818:	f7ff ffc0 	bl	800379c <sbrk_aligned>
 800381c:	1c43      	adds	r3, r0, #1
 800381e:	4604      	mov	r4, r0
 8003820:	d155      	bne.n	80038ce <_malloc_r+0xf2>
 8003822:	f8d8 4000 	ldr.w	r4, [r8]
 8003826:	4626      	mov	r6, r4
 8003828:	2e00      	cmp	r6, #0
 800382a:	d145      	bne.n	80038b8 <_malloc_r+0xdc>
 800382c:	2c00      	cmp	r4, #0
 800382e:	d048      	beq.n	80038c2 <_malloc_r+0xe6>
 8003830:	6823      	ldr	r3, [r4, #0]
 8003832:	4631      	mov	r1, r6
 8003834:	4638      	mov	r0, r7
 8003836:	eb04 0903 	add.w	r9, r4, r3
 800383a:	f000 fe27 	bl	800448c <_sbrk_r>
 800383e:	4581      	cmp	r9, r0
 8003840:	d13f      	bne.n	80038c2 <_malloc_r+0xe6>
 8003842:	6821      	ldr	r1, [r4, #0]
 8003844:	1a6d      	subs	r5, r5, r1
 8003846:	4629      	mov	r1, r5
 8003848:	4638      	mov	r0, r7
 800384a:	f7ff ffa7 	bl	800379c <sbrk_aligned>
 800384e:	3001      	adds	r0, #1
 8003850:	d037      	beq.n	80038c2 <_malloc_r+0xe6>
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	442b      	add	r3, r5
 8003856:	6023      	str	r3, [r4, #0]
 8003858:	f8d8 3000 	ldr.w	r3, [r8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d038      	beq.n	80038d2 <_malloc_r+0xf6>
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	42a2      	cmp	r2, r4
 8003864:	d12b      	bne.n	80038be <_malloc_r+0xe2>
 8003866:	2200      	movs	r2, #0
 8003868:	605a      	str	r2, [r3, #4]
 800386a:	e00f      	b.n	800388c <_malloc_r+0xb0>
 800386c:	6822      	ldr	r2, [r4, #0]
 800386e:	1b52      	subs	r2, r2, r5
 8003870:	d41f      	bmi.n	80038b2 <_malloc_r+0xd6>
 8003872:	2a0b      	cmp	r2, #11
 8003874:	d917      	bls.n	80038a6 <_malloc_r+0xca>
 8003876:	1961      	adds	r1, r4, r5
 8003878:	42a3      	cmp	r3, r4
 800387a:	6025      	str	r5, [r4, #0]
 800387c:	bf18      	it	ne
 800387e:	6059      	strne	r1, [r3, #4]
 8003880:	6863      	ldr	r3, [r4, #4]
 8003882:	bf08      	it	eq
 8003884:	f8c8 1000 	streq.w	r1, [r8]
 8003888:	5162      	str	r2, [r4, r5]
 800388a:	604b      	str	r3, [r1, #4]
 800388c:	4638      	mov	r0, r7
 800388e:	f104 060b 	add.w	r6, r4, #11
 8003892:	f000 f829 	bl	80038e8 <__malloc_unlock>
 8003896:	f026 0607 	bic.w	r6, r6, #7
 800389a:	1d23      	adds	r3, r4, #4
 800389c:	1af2      	subs	r2, r6, r3
 800389e:	d0ae      	beq.n	80037fe <_malloc_r+0x22>
 80038a0:	1b9b      	subs	r3, r3, r6
 80038a2:	50a3      	str	r3, [r4, r2]
 80038a4:	e7ab      	b.n	80037fe <_malloc_r+0x22>
 80038a6:	42a3      	cmp	r3, r4
 80038a8:	6862      	ldr	r2, [r4, #4]
 80038aa:	d1dd      	bne.n	8003868 <_malloc_r+0x8c>
 80038ac:	f8c8 2000 	str.w	r2, [r8]
 80038b0:	e7ec      	b.n	800388c <_malloc_r+0xb0>
 80038b2:	4623      	mov	r3, r4
 80038b4:	6864      	ldr	r4, [r4, #4]
 80038b6:	e7ac      	b.n	8003812 <_malloc_r+0x36>
 80038b8:	4634      	mov	r4, r6
 80038ba:	6876      	ldr	r6, [r6, #4]
 80038bc:	e7b4      	b.n	8003828 <_malloc_r+0x4c>
 80038be:	4613      	mov	r3, r2
 80038c0:	e7cc      	b.n	800385c <_malloc_r+0x80>
 80038c2:	230c      	movs	r3, #12
 80038c4:	603b      	str	r3, [r7, #0]
 80038c6:	4638      	mov	r0, r7
 80038c8:	f000 f80e 	bl	80038e8 <__malloc_unlock>
 80038cc:	e797      	b.n	80037fe <_malloc_r+0x22>
 80038ce:	6025      	str	r5, [r4, #0]
 80038d0:	e7dc      	b.n	800388c <_malloc_r+0xb0>
 80038d2:	605b      	str	r3, [r3, #4]
 80038d4:	deff      	udf	#255	; 0xff
 80038d6:	bf00      	nop
 80038d8:	20000374 	.word	0x20000374

080038dc <__malloc_lock>:
 80038dc:	4801      	ldr	r0, [pc, #4]	; (80038e4 <__malloc_lock+0x8>)
 80038de:	f000 be22 	b.w	8004526 <__retarget_lock_acquire_recursive>
 80038e2:	bf00      	nop
 80038e4:	200004bc 	.word	0x200004bc

080038e8 <__malloc_unlock>:
 80038e8:	4801      	ldr	r0, [pc, #4]	; (80038f0 <__malloc_unlock+0x8>)
 80038ea:	f000 be1d 	b.w	8004528 <__retarget_lock_release_recursive>
 80038ee:	bf00      	nop
 80038f0:	200004bc 	.word	0x200004bc

080038f4 <__cvt>:
 80038f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038f8:	ec55 4b10 	vmov	r4, r5, d0
 80038fc:	2d00      	cmp	r5, #0
 80038fe:	460e      	mov	r6, r1
 8003900:	4619      	mov	r1, r3
 8003902:	462b      	mov	r3, r5
 8003904:	bfbb      	ittet	lt
 8003906:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800390a:	461d      	movlt	r5, r3
 800390c:	2300      	movge	r3, #0
 800390e:	232d      	movlt	r3, #45	; 0x2d
 8003910:	700b      	strb	r3, [r1, #0]
 8003912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003914:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003918:	4691      	mov	r9, r2
 800391a:	f023 0820 	bic.w	r8, r3, #32
 800391e:	bfbc      	itt	lt
 8003920:	4622      	movlt	r2, r4
 8003922:	4614      	movlt	r4, r2
 8003924:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003928:	d005      	beq.n	8003936 <__cvt+0x42>
 800392a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800392e:	d100      	bne.n	8003932 <__cvt+0x3e>
 8003930:	3601      	adds	r6, #1
 8003932:	2102      	movs	r1, #2
 8003934:	e000      	b.n	8003938 <__cvt+0x44>
 8003936:	2103      	movs	r1, #3
 8003938:	ab03      	add	r3, sp, #12
 800393a:	9301      	str	r3, [sp, #4]
 800393c:	ab02      	add	r3, sp, #8
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	ec45 4b10 	vmov	d0, r4, r5
 8003944:	4653      	mov	r3, sl
 8003946:	4632      	mov	r2, r6
 8003948:	f000 fe7a 	bl	8004640 <_dtoa_r>
 800394c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003950:	4607      	mov	r7, r0
 8003952:	d102      	bne.n	800395a <__cvt+0x66>
 8003954:	f019 0f01 	tst.w	r9, #1
 8003958:	d022      	beq.n	80039a0 <__cvt+0xac>
 800395a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800395e:	eb07 0906 	add.w	r9, r7, r6
 8003962:	d110      	bne.n	8003986 <__cvt+0x92>
 8003964:	783b      	ldrb	r3, [r7, #0]
 8003966:	2b30      	cmp	r3, #48	; 0x30
 8003968:	d10a      	bne.n	8003980 <__cvt+0x8c>
 800396a:	2200      	movs	r2, #0
 800396c:	2300      	movs	r3, #0
 800396e:	4620      	mov	r0, r4
 8003970:	4629      	mov	r1, r5
 8003972:	f7fd f8a9 	bl	8000ac8 <__aeabi_dcmpeq>
 8003976:	b918      	cbnz	r0, 8003980 <__cvt+0x8c>
 8003978:	f1c6 0601 	rsb	r6, r6, #1
 800397c:	f8ca 6000 	str.w	r6, [sl]
 8003980:	f8da 3000 	ldr.w	r3, [sl]
 8003984:	4499      	add	r9, r3
 8003986:	2200      	movs	r2, #0
 8003988:	2300      	movs	r3, #0
 800398a:	4620      	mov	r0, r4
 800398c:	4629      	mov	r1, r5
 800398e:	f7fd f89b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003992:	b108      	cbz	r0, 8003998 <__cvt+0xa4>
 8003994:	f8cd 900c 	str.w	r9, [sp, #12]
 8003998:	2230      	movs	r2, #48	; 0x30
 800399a:	9b03      	ldr	r3, [sp, #12]
 800399c:	454b      	cmp	r3, r9
 800399e:	d307      	bcc.n	80039b0 <__cvt+0xbc>
 80039a0:	9b03      	ldr	r3, [sp, #12]
 80039a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80039a4:	1bdb      	subs	r3, r3, r7
 80039a6:	4638      	mov	r0, r7
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	b004      	add	sp, #16
 80039ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039b0:	1c59      	adds	r1, r3, #1
 80039b2:	9103      	str	r1, [sp, #12]
 80039b4:	701a      	strb	r2, [r3, #0]
 80039b6:	e7f0      	b.n	800399a <__cvt+0xa6>

080039b8 <__exponent>:
 80039b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039ba:	4603      	mov	r3, r0
 80039bc:	2900      	cmp	r1, #0
 80039be:	bfb8      	it	lt
 80039c0:	4249      	neglt	r1, r1
 80039c2:	f803 2b02 	strb.w	r2, [r3], #2
 80039c6:	bfb4      	ite	lt
 80039c8:	222d      	movlt	r2, #45	; 0x2d
 80039ca:	222b      	movge	r2, #43	; 0x2b
 80039cc:	2909      	cmp	r1, #9
 80039ce:	7042      	strb	r2, [r0, #1]
 80039d0:	dd2a      	ble.n	8003a28 <__exponent+0x70>
 80039d2:	f10d 0207 	add.w	r2, sp, #7
 80039d6:	4617      	mov	r7, r2
 80039d8:	260a      	movs	r6, #10
 80039da:	4694      	mov	ip, r2
 80039dc:	fb91 f5f6 	sdiv	r5, r1, r6
 80039e0:	fb06 1415 	mls	r4, r6, r5, r1
 80039e4:	3430      	adds	r4, #48	; 0x30
 80039e6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80039ea:	460c      	mov	r4, r1
 80039ec:	2c63      	cmp	r4, #99	; 0x63
 80039ee:	f102 32ff 	add.w	r2, r2, #4294967295
 80039f2:	4629      	mov	r1, r5
 80039f4:	dcf1      	bgt.n	80039da <__exponent+0x22>
 80039f6:	3130      	adds	r1, #48	; 0x30
 80039f8:	f1ac 0402 	sub.w	r4, ip, #2
 80039fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003a00:	1c41      	adds	r1, r0, #1
 8003a02:	4622      	mov	r2, r4
 8003a04:	42ba      	cmp	r2, r7
 8003a06:	d30a      	bcc.n	8003a1e <__exponent+0x66>
 8003a08:	f10d 0209 	add.w	r2, sp, #9
 8003a0c:	eba2 020c 	sub.w	r2, r2, ip
 8003a10:	42bc      	cmp	r4, r7
 8003a12:	bf88      	it	hi
 8003a14:	2200      	movhi	r2, #0
 8003a16:	4413      	add	r3, r2
 8003a18:	1a18      	subs	r0, r3, r0
 8003a1a:	b003      	add	sp, #12
 8003a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a1e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003a22:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003a26:	e7ed      	b.n	8003a04 <__exponent+0x4c>
 8003a28:	2330      	movs	r3, #48	; 0x30
 8003a2a:	3130      	adds	r1, #48	; 0x30
 8003a2c:	7083      	strb	r3, [r0, #2]
 8003a2e:	70c1      	strb	r1, [r0, #3]
 8003a30:	1d03      	adds	r3, r0, #4
 8003a32:	e7f1      	b.n	8003a18 <__exponent+0x60>

08003a34 <_printf_float>:
 8003a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a38:	ed2d 8b02 	vpush	{d8}
 8003a3c:	b08d      	sub	sp, #52	; 0x34
 8003a3e:	460c      	mov	r4, r1
 8003a40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003a44:	4616      	mov	r6, r2
 8003a46:	461f      	mov	r7, r3
 8003a48:	4605      	mov	r5, r0
 8003a4a:	f000 fce7 	bl	800441c <_localeconv_r>
 8003a4e:	f8d0 a000 	ldr.w	sl, [r0]
 8003a52:	4650      	mov	r0, sl
 8003a54:	f7fc fc0c 	bl	8000270 <strlen>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	930a      	str	r3, [sp, #40]	; 0x28
 8003a5c:	6823      	ldr	r3, [r4, #0]
 8003a5e:	9305      	str	r3, [sp, #20]
 8003a60:	f8d8 3000 	ldr.w	r3, [r8]
 8003a64:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003a68:	3307      	adds	r3, #7
 8003a6a:	f023 0307 	bic.w	r3, r3, #7
 8003a6e:	f103 0208 	add.w	r2, r3, #8
 8003a72:	f8c8 2000 	str.w	r2, [r8]
 8003a76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003a7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003a7e:	9307      	str	r3, [sp, #28]
 8003a80:	f8cd 8018 	str.w	r8, [sp, #24]
 8003a84:	ee08 0a10 	vmov	s16, r0
 8003a88:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003a8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a90:	4b9e      	ldr	r3, [pc, #632]	; (8003d0c <_printf_float+0x2d8>)
 8003a92:	f04f 32ff 	mov.w	r2, #4294967295
 8003a96:	f7fd f849 	bl	8000b2c <__aeabi_dcmpun>
 8003a9a:	bb88      	cbnz	r0, 8003b00 <_printf_float+0xcc>
 8003a9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003aa0:	4b9a      	ldr	r3, [pc, #616]	; (8003d0c <_printf_float+0x2d8>)
 8003aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa6:	f7fd f823 	bl	8000af0 <__aeabi_dcmple>
 8003aaa:	bb48      	cbnz	r0, 8003b00 <_printf_float+0xcc>
 8003aac:	2200      	movs	r2, #0
 8003aae:	2300      	movs	r3, #0
 8003ab0:	4640      	mov	r0, r8
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	f7fd f812 	bl	8000adc <__aeabi_dcmplt>
 8003ab8:	b110      	cbz	r0, 8003ac0 <_printf_float+0x8c>
 8003aba:	232d      	movs	r3, #45	; 0x2d
 8003abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ac0:	4a93      	ldr	r2, [pc, #588]	; (8003d10 <_printf_float+0x2dc>)
 8003ac2:	4b94      	ldr	r3, [pc, #592]	; (8003d14 <_printf_float+0x2e0>)
 8003ac4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003ac8:	bf94      	ite	ls
 8003aca:	4690      	movls	r8, r2
 8003acc:	4698      	movhi	r8, r3
 8003ace:	2303      	movs	r3, #3
 8003ad0:	6123      	str	r3, [r4, #16]
 8003ad2:	9b05      	ldr	r3, [sp, #20]
 8003ad4:	f023 0304 	bic.w	r3, r3, #4
 8003ad8:	6023      	str	r3, [r4, #0]
 8003ada:	f04f 0900 	mov.w	r9, #0
 8003ade:	9700      	str	r7, [sp, #0]
 8003ae0:	4633      	mov	r3, r6
 8003ae2:	aa0b      	add	r2, sp, #44	; 0x2c
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	4628      	mov	r0, r5
 8003ae8:	f000 f9da 	bl	8003ea0 <_printf_common>
 8003aec:	3001      	adds	r0, #1
 8003aee:	f040 8090 	bne.w	8003c12 <_printf_float+0x1de>
 8003af2:	f04f 30ff 	mov.w	r0, #4294967295
 8003af6:	b00d      	add	sp, #52	; 0x34
 8003af8:	ecbd 8b02 	vpop	{d8}
 8003afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b00:	4642      	mov	r2, r8
 8003b02:	464b      	mov	r3, r9
 8003b04:	4640      	mov	r0, r8
 8003b06:	4649      	mov	r1, r9
 8003b08:	f7fd f810 	bl	8000b2c <__aeabi_dcmpun>
 8003b0c:	b140      	cbz	r0, 8003b20 <_printf_float+0xec>
 8003b0e:	464b      	mov	r3, r9
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	bfbc      	itt	lt
 8003b14:	232d      	movlt	r3, #45	; 0x2d
 8003b16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003b1a:	4a7f      	ldr	r2, [pc, #508]	; (8003d18 <_printf_float+0x2e4>)
 8003b1c:	4b7f      	ldr	r3, [pc, #508]	; (8003d1c <_printf_float+0x2e8>)
 8003b1e:	e7d1      	b.n	8003ac4 <_printf_float+0x90>
 8003b20:	6863      	ldr	r3, [r4, #4]
 8003b22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003b26:	9206      	str	r2, [sp, #24]
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	d13f      	bne.n	8003bac <_printf_float+0x178>
 8003b2c:	2306      	movs	r3, #6
 8003b2e:	6063      	str	r3, [r4, #4]
 8003b30:	9b05      	ldr	r3, [sp, #20]
 8003b32:	6861      	ldr	r1, [r4, #4]
 8003b34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003b38:	2300      	movs	r3, #0
 8003b3a:	9303      	str	r3, [sp, #12]
 8003b3c:	ab0a      	add	r3, sp, #40	; 0x28
 8003b3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003b42:	ab09      	add	r3, sp, #36	; 0x24
 8003b44:	ec49 8b10 	vmov	d0, r8, r9
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	6022      	str	r2, [r4, #0]
 8003b4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003b50:	4628      	mov	r0, r5
 8003b52:	f7ff fecf 	bl	80038f4 <__cvt>
 8003b56:	9b06      	ldr	r3, [sp, #24]
 8003b58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003b5a:	2b47      	cmp	r3, #71	; 0x47
 8003b5c:	4680      	mov	r8, r0
 8003b5e:	d108      	bne.n	8003b72 <_printf_float+0x13e>
 8003b60:	1cc8      	adds	r0, r1, #3
 8003b62:	db02      	blt.n	8003b6a <_printf_float+0x136>
 8003b64:	6863      	ldr	r3, [r4, #4]
 8003b66:	4299      	cmp	r1, r3
 8003b68:	dd41      	ble.n	8003bee <_printf_float+0x1ba>
 8003b6a:	f1ab 0302 	sub.w	r3, fp, #2
 8003b6e:	fa5f fb83 	uxtb.w	fp, r3
 8003b72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003b76:	d820      	bhi.n	8003bba <_printf_float+0x186>
 8003b78:	3901      	subs	r1, #1
 8003b7a:	465a      	mov	r2, fp
 8003b7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003b80:	9109      	str	r1, [sp, #36]	; 0x24
 8003b82:	f7ff ff19 	bl	80039b8 <__exponent>
 8003b86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b88:	1813      	adds	r3, r2, r0
 8003b8a:	2a01      	cmp	r2, #1
 8003b8c:	4681      	mov	r9, r0
 8003b8e:	6123      	str	r3, [r4, #16]
 8003b90:	dc02      	bgt.n	8003b98 <_printf_float+0x164>
 8003b92:	6822      	ldr	r2, [r4, #0]
 8003b94:	07d2      	lsls	r2, r2, #31
 8003b96:	d501      	bpl.n	8003b9c <_printf_float+0x168>
 8003b98:	3301      	adds	r3, #1
 8003b9a:	6123      	str	r3, [r4, #16]
 8003b9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d09c      	beq.n	8003ade <_printf_float+0xaa>
 8003ba4:	232d      	movs	r3, #45	; 0x2d
 8003ba6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003baa:	e798      	b.n	8003ade <_printf_float+0xaa>
 8003bac:	9a06      	ldr	r2, [sp, #24]
 8003bae:	2a47      	cmp	r2, #71	; 0x47
 8003bb0:	d1be      	bne.n	8003b30 <_printf_float+0xfc>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1bc      	bne.n	8003b30 <_printf_float+0xfc>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e7b9      	b.n	8003b2e <_printf_float+0xfa>
 8003bba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003bbe:	d118      	bne.n	8003bf2 <_printf_float+0x1be>
 8003bc0:	2900      	cmp	r1, #0
 8003bc2:	6863      	ldr	r3, [r4, #4]
 8003bc4:	dd0b      	ble.n	8003bde <_printf_float+0x1aa>
 8003bc6:	6121      	str	r1, [r4, #16]
 8003bc8:	b913      	cbnz	r3, 8003bd0 <_printf_float+0x19c>
 8003bca:	6822      	ldr	r2, [r4, #0]
 8003bcc:	07d0      	lsls	r0, r2, #31
 8003bce:	d502      	bpl.n	8003bd6 <_printf_float+0x1a2>
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	440b      	add	r3, r1
 8003bd4:	6123      	str	r3, [r4, #16]
 8003bd6:	65a1      	str	r1, [r4, #88]	; 0x58
 8003bd8:	f04f 0900 	mov.w	r9, #0
 8003bdc:	e7de      	b.n	8003b9c <_printf_float+0x168>
 8003bde:	b913      	cbnz	r3, 8003be6 <_printf_float+0x1b2>
 8003be0:	6822      	ldr	r2, [r4, #0]
 8003be2:	07d2      	lsls	r2, r2, #31
 8003be4:	d501      	bpl.n	8003bea <_printf_float+0x1b6>
 8003be6:	3302      	adds	r3, #2
 8003be8:	e7f4      	b.n	8003bd4 <_printf_float+0x1a0>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e7f2      	b.n	8003bd4 <_printf_float+0x1a0>
 8003bee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bf4:	4299      	cmp	r1, r3
 8003bf6:	db05      	blt.n	8003c04 <_printf_float+0x1d0>
 8003bf8:	6823      	ldr	r3, [r4, #0]
 8003bfa:	6121      	str	r1, [r4, #16]
 8003bfc:	07d8      	lsls	r0, r3, #31
 8003bfe:	d5ea      	bpl.n	8003bd6 <_printf_float+0x1a2>
 8003c00:	1c4b      	adds	r3, r1, #1
 8003c02:	e7e7      	b.n	8003bd4 <_printf_float+0x1a0>
 8003c04:	2900      	cmp	r1, #0
 8003c06:	bfd4      	ite	le
 8003c08:	f1c1 0202 	rsble	r2, r1, #2
 8003c0c:	2201      	movgt	r2, #1
 8003c0e:	4413      	add	r3, r2
 8003c10:	e7e0      	b.n	8003bd4 <_printf_float+0x1a0>
 8003c12:	6823      	ldr	r3, [r4, #0]
 8003c14:	055a      	lsls	r2, r3, #21
 8003c16:	d407      	bmi.n	8003c28 <_printf_float+0x1f4>
 8003c18:	6923      	ldr	r3, [r4, #16]
 8003c1a:	4642      	mov	r2, r8
 8003c1c:	4631      	mov	r1, r6
 8003c1e:	4628      	mov	r0, r5
 8003c20:	47b8      	blx	r7
 8003c22:	3001      	adds	r0, #1
 8003c24:	d12c      	bne.n	8003c80 <_printf_float+0x24c>
 8003c26:	e764      	b.n	8003af2 <_printf_float+0xbe>
 8003c28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003c2c:	f240 80e0 	bls.w	8003df0 <_printf_float+0x3bc>
 8003c30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c34:	2200      	movs	r2, #0
 8003c36:	2300      	movs	r3, #0
 8003c38:	f7fc ff46 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c3c:	2800      	cmp	r0, #0
 8003c3e:	d034      	beq.n	8003caa <_printf_float+0x276>
 8003c40:	4a37      	ldr	r2, [pc, #220]	; (8003d20 <_printf_float+0x2ec>)
 8003c42:	2301      	movs	r3, #1
 8003c44:	4631      	mov	r1, r6
 8003c46:	4628      	mov	r0, r5
 8003c48:	47b8      	blx	r7
 8003c4a:	3001      	adds	r0, #1
 8003c4c:	f43f af51 	beq.w	8003af2 <_printf_float+0xbe>
 8003c50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c54:	429a      	cmp	r2, r3
 8003c56:	db02      	blt.n	8003c5e <_printf_float+0x22a>
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	07d8      	lsls	r0, r3, #31
 8003c5c:	d510      	bpl.n	8003c80 <_printf_float+0x24c>
 8003c5e:	ee18 3a10 	vmov	r3, s16
 8003c62:	4652      	mov	r2, sl
 8003c64:	4631      	mov	r1, r6
 8003c66:	4628      	mov	r0, r5
 8003c68:	47b8      	blx	r7
 8003c6a:	3001      	adds	r0, #1
 8003c6c:	f43f af41 	beq.w	8003af2 <_printf_float+0xbe>
 8003c70:	f04f 0800 	mov.w	r8, #0
 8003c74:	f104 091a 	add.w	r9, r4, #26
 8003c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	4543      	cmp	r3, r8
 8003c7e:	dc09      	bgt.n	8003c94 <_printf_float+0x260>
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	079b      	lsls	r3, r3, #30
 8003c84:	f100 8107 	bmi.w	8003e96 <_printf_float+0x462>
 8003c88:	68e0      	ldr	r0, [r4, #12]
 8003c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c8c:	4298      	cmp	r0, r3
 8003c8e:	bfb8      	it	lt
 8003c90:	4618      	movlt	r0, r3
 8003c92:	e730      	b.n	8003af6 <_printf_float+0xc2>
 8003c94:	2301      	movs	r3, #1
 8003c96:	464a      	mov	r2, r9
 8003c98:	4631      	mov	r1, r6
 8003c9a:	4628      	mov	r0, r5
 8003c9c:	47b8      	blx	r7
 8003c9e:	3001      	adds	r0, #1
 8003ca0:	f43f af27 	beq.w	8003af2 <_printf_float+0xbe>
 8003ca4:	f108 0801 	add.w	r8, r8, #1
 8003ca8:	e7e6      	b.n	8003c78 <_printf_float+0x244>
 8003caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	dc39      	bgt.n	8003d24 <_printf_float+0x2f0>
 8003cb0:	4a1b      	ldr	r2, [pc, #108]	; (8003d20 <_printf_float+0x2ec>)
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	4631      	mov	r1, r6
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	47b8      	blx	r7
 8003cba:	3001      	adds	r0, #1
 8003cbc:	f43f af19 	beq.w	8003af2 <_printf_float+0xbe>
 8003cc0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	d102      	bne.n	8003cce <_printf_float+0x29a>
 8003cc8:	6823      	ldr	r3, [r4, #0]
 8003cca:	07d9      	lsls	r1, r3, #31
 8003ccc:	d5d8      	bpl.n	8003c80 <_printf_float+0x24c>
 8003cce:	ee18 3a10 	vmov	r3, s16
 8003cd2:	4652      	mov	r2, sl
 8003cd4:	4631      	mov	r1, r6
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	47b8      	blx	r7
 8003cda:	3001      	adds	r0, #1
 8003cdc:	f43f af09 	beq.w	8003af2 <_printf_float+0xbe>
 8003ce0:	f04f 0900 	mov.w	r9, #0
 8003ce4:	f104 0a1a 	add.w	sl, r4, #26
 8003ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cea:	425b      	negs	r3, r3
 8003cec:	454b      	cmp	r3, r9
 8003cee:	dc01      	bgt.n	8003cf4 <_printf_float+0x2c0>
 8003cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cf2:	e792      	b.n	8003c1a <_printf_float+0x1e6>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	4652      	mov	r2, sl
 8003cf8:	4631      	mov	r1, r6
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	47b8      	blx	r7
 8003cfe:	3001      	adds	r0, #1
 8003d00:	f43f aef7 	beq.w	8003af2 <_printf_float+0xbe>
 8003d04:	f109 0901 	add.w	r9, r9, #1
 8003d08:	e7ee      	b.n	8003ce8 <_printf_float+0x2b4>
 8003d0a:	bf00      	nop
 8003d0c:	7fefffff 	.word	0x7fefffff
 8003d10:	080073bf 	.word	0x080073bf
 8003d14:	080073c3 	.word	0x080073c3
 8003d18:	080073c7 	.word	0x080073c7
 8003d1c:	080073cb 	.word	0x080073cb
 8003d20:	080073cf 	.word	0x080073cf
 8003d24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	bfa8      	it	ge
 8003d2c:	461a      	movge	r2, r3
 8003d2e:	2a00      	cmp	r2, #0
 8003d30:	4691      	mov	r9, r2
 8003d32:	dc37      	bgt.n	8003da4 <_printf_float+0x370>
 8003d34:	f04f 0b00 	mov.w	fp, #0
 8003d38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d3c:	f104 021a 	add.w	r2, r4, #26
 8003d40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d42:	9305      	str	r3, [sp, #20]
 8003d44:	eba3 0309 	sub.w	r3, r3, r9
 8003d48:	455b      	cmp	r3, fp
 8003d4a:	dc33      	bgt.n	8003db4 <_printf_float+0x380>
 8003d4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d50:	429a      	cmp	r2, r3
 8003d52:	db3b      	blt.n	8003dcc <_printf_float+0x398>
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	07da      	lsls	r2, r3, #31
 8003d58:	d438      	bmi.n	8003dcc <_printf_float+0x398>
 8003d5a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003d5e:	eba2 0903 	sub.w	r9, r2, r3
 8003d62:	9b05      	ldr	r3, [sp, #20]
 8003d64:	1ad2      	subs	r2, r2, r3
 8003d66:	4591      	cmp	r9, r2
 8003d68:	bfa8      	it	ge
 8003d6a:	4691      	movge	r9, r2
 8003d6c:	f1b9 0f00 	cmp.w	r9, #0
 8003d70:	dc35      	bgt.n	8003dde <_printf_float+0x3aa>
 8003d72:	f04f 0800 	mov.w	r8, #0
 8003d76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d7a:	f104 0a1a 	add.w	sl, r4, #26
 8003d7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	eba3 0309 	sub.w	r3, r3, r9
 8003d88:	4543      	cmp	r3, r8
 8003d8a:	f77f af79 	ble.w	8003c80 <_printf_float+0x24c>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	4652      	mov	r2, sl
 8003d92:	4631      	mov	r1, r6
 8003d94:	4628      	mov	r0, r5
 8003d96:	47b8      	blx	r7
 8003d98:	3001      	adds	r0, #1
 8003d9a:	f43f aeaa 	beq.w	8003af2 <_printf_float+0xbe>
 8003d9e:	f108 0801 	add.w	r8, r8, #1
 8003da2:	e7ec      	b.n	8003d7e <_printf_float+0x34a>
 8003da4:	4613      	mov	r3, r2
 8003da6:	4631      	mov	r1, r6
 8003da8:	4642      	mov	r2, r8
 8003daa:	4628      	mov	r0, r5
 8003dac:	47b8      	blx	r7
 8003dae:	3001      	adds	r0, #1
 8003db0:	d1c0      	bne.n	8003d34 <_printf_float+0x300>
 8003db2:	e69e      	b.n	8003af2 <_printf_float+0xbe>
 8003db4:	2301      	movs	r3, #1
 8003db6:	4631      	mov	r1, r6
 8003db8:	4628      	mov	r0, r5
 8003dba:	9205      	str	r2, [sp, #20]
 8003dbc:	47b8      	blx	r7
 8003dbe:	3001      	adds	r0, #1
 8003dc0:	f43f ae97 	beq.w	8003af2 <_printf_float+0xbe>
 8003dc4:	9a05      	ldr	r2, [sp, #20]
 8003dc6:	f10b 0b01 	add.w	fp, fp, #1
 8003dca:	e7b9      	b.n	8003d40 <_printf_float+0x30c>
 8003dcc:	ee18 3a10 	vmov	r3, s16
 8003dd0:	4652      	mov	r2, sl
 8003dd2:	4631      	mov	r1, r6
 8003dd4:	4628      	mov	r0, r5
 8003dd6:	47b8      	blx	r7
 8003dd8:	3001      	adds	r0, #1
 8003dda:	d1be      	bne.n	8003d5a <_printf_float+0x326>
 8003ddc:	e689      	b.n	8003af2 <_printf_float+0xbe>
 8003dde:	9a05      	ldr	r2, [sp, #20]
 8003de0:	464b      	mov	r3, r9
 8003de2:	4442      	add	r2, r8
 8003de4:	4631      	mov	r1, r6
 8003de6:	4628      	mov	r0, r5
 8003de8:	47b8      	blx	r7
 8003dea:	3001      	adds	r0, #1
 8003dec:	d1c1      	bne.n	8003d72 <_printf_float+0x33e>
 8003dee:	e680      	b.n	8003af2 <_printf_float+0xbe>
 8003df0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003df2:	2a01      	cmp	r2, #1
 8003df4:	dc01      	bgt.n	8003dfa <_printf_float+0x3c6>
 8003df6:	07db      	lsls	r3, r3, #31
 8003df8:	d53a      	bpl.n	8003e70 <_printf_float+0x43c>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	4642      	mov	r2, r8
 8003dfe:	4631      	mov	r1, r6
 8003e00:	4628      	mov	r0, r5
 8003e02:	47b8      	blx	r7
 8003e04:	3001      	adds	r0, #1
 8003e06:	f43f ae74 	beq.w	8003af2 <_printf_float+0xbe>
 8003e0a:	ee18 3a10 	vmov	r3, s16
 8003e0e:	4652      	mov	r2, sl
 8003e10:	4631      	mov	r1, r6
 8003e12:	4628      	mov	r0, r5
 8003e14:	47b8      	blx	r7
 8003e16:	3001      	adds	r0, #1
 8003e18:	f43f ae6b 	beq.w	8003af2 <_printf_float+0xbe>
 8003e1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e20:	2200      	movs	r2, #0
 8003e22:	2300      	movs	r3, #0
 8003e24:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003e28:	f7fc fe4e 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e2c:	b9d8      	cbnz	r0, 8003e66 <_printf_float+0x432>
 8003e2e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003e32:	f108 0201 	add.w	r2, r8, #1
 8003e36:	4631      	mov	r1, r6
 8003e38:	4628      	mov	r0, r5
 8003e3a:	47b8      	blx	r7
 8003e3c:	3001      	adds	r0, #1
 8003e3e:	d10e      	bne.n	8003e5e <_printf_float+0x42a>
 8003e40:	e657      	b.n	8003af2 <_printf_float+0xbe>
 8003e42:	2301      	movs	r3, #1
 8003e44:	4652      	mov	r2, sl
 8003e46:	4631      	mov	r1, r6
 8003e48:	4628      	mov	r0, r5
 8003e4a:	47b8      	blx	r7
 8003e4c:	3001      	adds	r0, #1
 8003e4e:	f43f ae50 	beq.w	8003af2 <_printf_float+0xbe>
 8003e52:	f108 0801 	add.w	r8, r8, #1
 8003e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	4543      	cmp	r3, r8
 8003e5c:	dcf1      	bgt.n	8003e42 <_printf_float+0x40e>
 8003e5e:	464b      	mov	r3, r9
 8003e60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003e64:	e6da      	b.n	8003c1c <_printf_float+0x1e8>
 8003e66:	f04f 0800 	mov.w	r8, #0
 8003e6a:	f104 0a1a 	add.w	sl, r4, #26
 8003e6e:	e7f2      	b.n	8003e56 <_printf_float+0x422>
 8003e70:	2301      	movs	r3, #1
 8003e72:	4642      	mov	r2, r8
 8003e74:	e7df      	b.n	8003e36 <_printf_float+0x402>
 8003e76:	2301      	movs	r3, #1
 8003e78:	464a      	mov	r2, r9
 8003e7a:	4631      	mov	r1, r6
 8003e7c:	4628      	mov	r0, r5
 8003e7e:	47b8      	blx	r7
 8003e80:	3001      	adds	r0, #1
 8003e82:	f43f ae36 	beq.w	8003af2 <_printf_float+0xbe>
 8003e86:	f108 0801 	add.w	r8, r8, #1
 8003e8a:	68e3      	ldr	r3, [r4, #12]
 8003e8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e8e:	1a5b      	subs	r3, r3, r1
 8003e90:	4543      	cmp	r3, r8
 8003e92:	dcf0      	bgt.n	8003e76 <_printf_float+0x442>
 8003e94:	e6f8      	b.n	8003c88 <_printf_float+0x254>
 8003e96:	f04f 0800 	mov.w	r8, #0
 8003e9a:	f104 0919 	add.w	r9, r4, #25
 8003e9e:	e7f4      	b.n	8003e8a <_printf_float+0x456>

08003ea0 <_printf_common>:
 8003ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea4:	4616      	mov	r6, r2
 8003ea6:	4699      	mov	r9, r3
 8003ea8:	688a      	ldr	r2, [r1, #8]
 8003eaa:	690b      	ldr	r3, [r1, #16]
 8003eac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	bfb8      	it	lt
 8003eb4:	4613      	movlt	r3, r2
 8003eb6:	6033      	str	r3, [r6, #0]
 8003eb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ebc:	4607      	mov	r7, r0
 8003ebe:	460c      	mov	r4, r1
 8003ec0:	b10a      	cbz	r2, 8003ec6 <_printf_common+0x26>
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	6033      	str	r3, [r6, #0]
 8003ec6:	6823      	ldr	r3, [r4, #0]
 8003ec8:	0699      	lsls	r1, r3, #26
 8003eca:	bf42      	ittt	mi
 8003ecc:	6833      	ldrmi	r3, [r6, #0]
 8003ece:	3302      	addmi	r3, #2
 8003ed0:	6033      	strmi	r3, [r6, #0]
 8003ed2:	6825      	ldr	r5, [r4, #0]
 8003ed4:	f015 0506 	ands.w	r5, r5, #6
 8003ed8:	d106      	bne.n	8003ee8 <_printf_common+0x48>
 8003eda:	f104 0a19 	add.w	sl, r4, #25
 8003ede:	68e3      	ldr	r3, [r4, #12]
 8003ee0:	6832      	ldr	r2, [r6, #0]
 8003ee2:	1a9b      	subs	r3, r3, r2
 8003ee4:	42ab      	cmp	r3, r5
 8003ee6:	dc26      	bgt.n	8003f36 <_printf_common+0x96>
 8003ee8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003eec:	1e13      	subs	r3, r2, #0
 8003eee:	6822      	ldr	r2, [r4, #0]
 8003ef0:	bf18      	it	ne
 8003ef2:	2301      	movne	r3, #1
 8003ef4:	0692      	lsls	r2, r2, #26
 8003ef6:	d42b      	bmi.n	8003f50 <_printf_common+0xb0>
 8003ef8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003efc:	4649      	mov	r1, r9
 8003efe:	4638      	mov	r0, r7
 8003f00:	47c0      	blx	r8
 8003f02:	3001      	adds	r0, #1
 8003f04:	d01e      	beq.n	8003f44 <_printf_common+0xa4>
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	6922      	ldr	r2, [r4, #16]
 8003f0a:	f003 0306 	and.w	r3, r3, #6
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	bf02      	ittt	eq
 8003f12:	68e5      	ldreq	r5, [r4, #12]
 8003f14:	6833      	ldreq	r3, [r6, #0]
 8003f16:	1aed      	subeq	r5, r5, r3
 8003f18:	68a3      	ldr	r3, [r4, #8]
 8003f1a:	bf0c      	ite	eq
 8003f1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f20:	2500      	movne	r5, #0
 8003f22:	4293      	cmp	r3, r2
 8003f24:	bfc4      	itt	gt
 8003f26:	1a9b      	subgt	r3, r3, r2
 8003f28:	18ed      	addgt	r5, r5, r3
 8003f2a:	2600      	movs	r6, #0
 8003f2c:	341a      	adds	r4, #26
 8003f2e:	42b5      	cmp	r5, r6
 8003f30:	d11a      	bne.n	8003f68 <_printf_common+0xc8>
 8003f32:	2000      	movs	r0, #0
 8003f34:	e008      	b.n	8003f48 <_printf_common+0xa8>
 8003f36:	2301      	movs	r3, #1
 8003f38:	4652      	mov	r2, sl
 8003f3a:	4649      	mov	r1, r9
 8003f3c:	4638      	mov	r0, r7
 8003f3e:	47c0      	blx	r8
 8003f40:	3001      	adds	r0, #1
 8003f42:	d103      	bne.n	8003f4c <_printf_common+0xac>
 8003f44:	f04f 30ff 	mov.w	r0, #4294967295
 8003f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f4c:	3501      	adds	r5, #1
 8003f4e:	e7c6      	b.n	8003ede <_printf_common+0x3e>
 8003f50:	18e1      	adds	r1, r4, r3
 8003f52:	1c5a      	adds	r2, r3, #1
 8003f54:	2030      	movs	r0, #48	; 0x30
 8003f56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f5a:	4422      	add	r2, r4
 8003f5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f64:	3302      	adds	r3, #2
 8003f66:	e7c7      	b.n	8003ef8 <_printf_common+0x58>
 8003f68:	2301      	movs	r3, #1
 8003f6a:	4622      	mov	r2, r4
 8003f6c:	4649      	mov	r1, r9
 8003f6e:	4638      	mov	r0, r7
 8003f70:	47c0      	blx	r8
 8003f72:	3001      	adds	r0, #1
 8003f74:	d0e6      	beq.n	8003f44 <_printf_common+0xa4>
 8003f76:	3601      	adds	r6, #1
 8003f78:	e7d9      	b.n	8003f2e <_printf_common+0x8e>
	...

08003f7c <_printf_i>:
 8003f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f80:	7e0f      	ldrb	r7, [r1, #24]
 8003f82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f84:	2f78      	cmp	r7, #120	; 0x78
 8003f86:	4691      	mov	r9, r2
 8003f88:	4680      	mov	r8, r0
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	469a      	mov	sl, r3
 8003f8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f92:	d807      	bhi.n	8003fa4 <_printf_i+0x28>
 8003f94:	2f62      	cmp	r7, #98	; 0x62
 8003f96:	d80a      	bhi.n	8003fae <_printf_i+0x32>
 8003f98:	2f00      	cmp	r7, #0
 8003f9a:	f000 80d4 	beq.w	8004146 <_printf_i+0x1ca>
 8003f9e:	2f58      	cmp	r7, #88	; 0x58
 8003fa0:	f000 80c0 	beq.w	8004124 <_printf_i+0x1a8>
 8003fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fac:	e03a      	b.n	8004024 <_printf_i+0xa8>
 8003fae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fb2:	2b15      	cmp	r3, #21
 8003fb4:	d8f6      	bhi.n	8003fa4 <_printf_i+0x28>
 8003fb6:	a101      	add	r1, pc, #4	; (adr r1, 8003fbc <_printf_i+0x40>)
 8003fb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fbc:	08004015 	.word	0x08004015
 8003fc0:	08004029 	.word	0x08004029
 8003fc4:	08003fa5 	.word	0x08003fa5
 8003fc8:	08003fa5 	.word	0x08003fa5
 8003fcc:	08003fa5 	.word	0x08003fa5
 8003fd0:	08003fa5 	.word	0x08003fa5
 8003fd4:	08004029 	.word	0x08004029
 8003fd8:	08003fa5 	.word	0x08003fa5
 8003fdc:	08003fa5 	.word	0x08003fa5
 8003fe0:	08003fa5 	.word	0x08003fa5
 8003fe4:	08003fa5 	.word	0x08003fa5
 8003fe8:	0800412d 	.word	0x0800412d
 8003fec:	08004055 	.word	0x08004055
 8003ff0:	080040e7 	.word	0x080040e7
 8003ff4:	08003fa5 	.word	0x08003fa5
 8003ff8:	08003fa5 	.word	0x08003fa5
 8003ffc:	0800414f 	.word	0x0800414f
 8004000:	08003fa5 	.word	0x08003fa5
 8004004:	08004055 	.word	0x08004055
 8004008:	08003fa5 	.word	0x08003fa5
 800400c:	08003fa5 	.word	0x08003fa5
 8004010:	080040ef 	.word	0x080040ef
 8004014:	682b      	ldr	r3, [r5, #0]
 8004016:	1d1a      	adds	r2, r3, #4
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	602a      	str	r2, [r5, #0]
 800401c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004020:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004024:	2301      	movs	r3, #1
 8004026:	e09f      	b.n	8004168 <_printf_i+0x1ec>
 8004028:	6820      	ldr	r0, [r4, #0]
 800402a:	682b      	ldr	r3, [r5, #0]
 800402c:	0607      	lsls	r7, r0, #24
 800402e:	f103 0104 	add.w	r1, r3, #4
 8004032:	6029      	str	r1, [r5, #0]
 8004034:	d501      	bpl.n	800403a <_printf_i+0xbe>
 8004036:	681e      	ldr	r6, [r3, #0]
 8004038:	e003      	b.n	8004042 <_printf_i+0xc6>
 800403a:	0646      	lsls	r6, r0, #25
 800403c:	d5fb      	bpl.n	8004036 <_printf_i+0xba>
 800403e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004042:	2e00      	cmp	r6, #0
 8004044:	da03      	bge.n	800404e <_printf_i+0xd2>
 8004046:	232d      	movs	r3, #45	; 0x2d
 8004048:	4276      	negs	r6, r6
 800404a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800404e:	485a      	ldr	r0, [pc, #360]	; (80041b8 <_printf_i+0x23c>)
 8004050:	230a      	movs	r3, #10
 8004052:	e012      	b.n	800407a <_printf_i+0xfe>
 8004054:	682b      	ldr	r3, [r5, #0]
 8004056:	6820      	ldr	r0, [r4, #0]
 8004058:	1d19      	adds	r1, r3, #4
 800405a:	6029      	str	r1, [r5, #0]
 800405c:	0605      	lsls	r5, r0, #24
 800405e:	d501      	bpl.n	8004064 <_printf_i+0xe8>
 8004060:	681e      	ldr	r6, [r3, #0]
 8004062:	e002      	b.n	800406a <_printf_i+0xee>
 8004064:	0641      	lsls	r1, r0, #25
 8004066:	d5fb      	bpl.n	8004060 <_printf_i+0xe4>
 8004068:	881e      	ldrh	r6, [r3, #0]
 800406a:	4853      	ldr	r0, [pc, #332]	; (80041b8 <_printf_i+0x23c>)
 800406c:	2f6f      	cmp	r7, #111	; 0x6f
 800406e:	bf0c      	ite	eq
 8004070:	2308      	moveq	r3, #8
 8004072:	230a      	movne	r3, #10
 8004074:	2100      	movs	r1, #0
 8004076:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800407a:	6865      	ldr	r5, [r4, #4]
 800407c:	60a5      	str	r5, [r4, #8]
 800407e:	2d00      	cmp	r5, #0
 8004080:	bfa2      	ittt	ge
 8004082:	6821      	ldrge	r1, [r4, #0]
 8004084:	f021 0104 	bicge.w	r1, r1, #4
 8004088:	6021      	strge	r1, [r4, #0]
 800408a:	b90e      	cbnz	r6, 8004090 <_printf_i+0x114>
 800408c:	2d00      	cmp	r5, #0
 800408e:	d04b      	beq.n	8004128 <_printf_i+0x1ac>
 8004090:	4615      	mov	r5, r2
 8004092:	fbb6 f1f3 	udiv	r1, r6, r3
 8004096:	fb03 6711 	mls	r7, r3, r1, r6
 800409a:	5dc7      	ldrb	r7, [r0, r7]
 800409c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040a0:	4637      	mov	r7, r6
 80040a2:	42bb      	cmp	r3, r7
 80040a4:	460e      	mov	r6, r1
 80040a6:	d9f4      	bls.n	8004092 <_printf_i+0x116>
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d10b      	bne.n	80040c4 <_printf_i+0x148>
 80040ac:	6823      	ldr	r3, [r4, #0]
 80040ae:	07de      	lsls	r6, r3, #31
 80040b0:	d508      	bpl.n	80040c4 <_printf_i+0x148>
 80040b2:	6923      	ldr	r3, [r4, #16]
 80040b4:	6861      	ldr	r1, [r4, #4]
 80040b6:	4299      	cmp	r1, r3
 80040b8:	bfde      	ittt	le
 80040ba:	2330      	movle	r3, #48	; 0x30
 80040bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80040c4:	1b52      	subs	r2, r2, r5
 80040c6:	6122      	str	r2, [r4, #16]
 80040c8:	f8cd a000 	str.w	sl, [sp]
 80040cc:	464b      	mov	r3, r9
 80040ce:	aa03      	add	r2, sp, #12
 80040d0:	4621      	mov	r1, r4
 80040d2:	4640      	mov	r0, r8
 80040d4:	f7ff fee4 	bl	8003ea0 <_printf_common>
 80040d8:	3001      	adds	r0, #1
 80040da:	d14a      	bne.n	8004172 <_printf_i+0x1f6>
 80040dc:	f04f 30ff 	mov.w	r0, #4294967295
 80040e0:	b004      	add	sp, #16
 80040e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	f043 0320 	orr.w	r3, r3, #32
 80040ec:	6023      	str	r3, [r4, #0]
 80040ee:	4833      	ldr	r0, [pc, #204]	; (80041bc <_printf_i+0x240>)
 80040f0:	2778      	movs	r7, #120	; 0x78
 80040f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	6829      	ldr	r1, [r5, #0]
 80040fa:	061f      	lsls	r7, r3, #24
 80040fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8004100:	d402      	bmi.n	8004108 <_printf_i+0x18c>
 8004102:	065f      	lsls	r7, r3, #25
 8004104:	bf48      	it	mi
 8004106:	b2b6      	uxthmi	r6, r6
 8004108:	07df      	lsls	r7, r3, #31
 800410a:	bf48      	it	mi
 800410c:	f043 0320 	orrmi.w	r3, r3, #32
 8004110:	6029      	str	r1, [r5, #0]
 8004112:	bf48      	it	mi
 8004114:	6023      	strmi	r3, [r4, #0]
 8004116:	b91e      	cbnz	r6, 8004120 <_printf_i+0x1a4>
 8004118:	6823      	ldr	r3, [r4, #0]
 800411a:	f023 0320 	bic.w	r3, r3, #32
 800411e:	6023      	str	r3, [r4, #0]
 8004120:	2310      	movs	r3, #16
 8004122:	e7a7      	b.n	8004074 <_printf_i+0xf8>
 8004124:	4824      	ldr	r0, [pc, #144]	; (80041b8 <_printf_i+0x23c>)
 8004126:	e7e4      	b.n	80040f2 <_printf_i+0x176>
 8004128:	4615      	mov	r5, r2
 800412a:	e7bd      	b.n	80040a8 <_printf_i+0x12c>
 800412c:	682b      	ldr	r3, [r5, #0]
 800412e:	6826      	ldr	r6, [r4, #0]
 8004130:	6961      	ldr	r1, [r4, #20]
 8004132:	1d18      	adds	r0, r3, #4
 8004134:	6028      	str	r0, [r5, #0]
 8004136:	0635      	lsls	r5, r6, #24
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	d501      	bpl.n	8004140 <_printf_i+0x1c4>
 800413c:	6019      	str	r1, [r3, #0]
 800413e:	e002      	b.n	8004146 <_printf_i+0x1ca>
 8004140:	0670      	lsls	r0, r6, #25
 8004142:	d5fb      	bpl.n	800413c <_printf_i+0x1c0>
 8004144:	8019      	strh	r1, [r3, #0]
 8004146:	2300      	movs	r3, #0
 8004148:	6123      	str	r3, [r4, #16]
 800414a:	4615      	mov	r5, r2
 800414c:	e7bc      	b.n	80040c8 <_printf_i+0x14c>
 800414e:	682b      	ldr	r3, [r5, #0]
 8004150:	1d1a      	adds	r2, r3, #4
 8004152:	602a      	str	r2, [r5, #0]
 8004154:	681d      	ldr	r5, [r3, #0]
 8004156:	6862      	ldr	r2, [r4, #4]
 8004158:	2100      	movs	r1, #0
 800415a:	4628      	mov	r0, r5
 800415c:	f7fc f838 	bl	80001d0 <memchr>
 8004160:	b108      	cbz	r0, 8004166 <_printf_i+0x1ea>
 8004162:	1b40      	subs	r0, r0, r5
 8004164:	6060      	str	r0, [r4, #4]
 8004166:	6863      	ldr	r3, [r4, #4]
 8004168:	6123      	str	r3, [r4, #16]
 800416a:	2300      	movs	r3, #0
 800416c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004170:	e7aa      	b.n	80040c8 <_printf_i+0x14c>
 8004172:	6923      	ldr	r3, [r4, #16]
 8004174:	462a      	mov	r2, r5
 8004176:	4649      	mov	r1, r9
 8004178:	4640      	mov	r0, r8
 800417a:	47d0      	blx	sl
 800417c:	3001      	adds	r0, #1
 800417e:	d0ad      	beq.n	80040dc <_printf_i+0x160>
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	079b      	lsls	r3, r3, #30
 8004184:	d413      	bmi.n	80041ae <_printf_i+0x232>
 8004186:	68e0      	ldr	r0, [r4, #12]
 8004188:	9b03      	ldr	r3, [sp, #12]
 800418a:	4298      	cmp	r0, r3
 800418c:	bfb8      	it	lt
 800418e:	4618      	movlt	r0, r3
 8004190:	e7a6      	b.n	80040e0 <_printf_i+0x164>
 8004192:	2301      	movs	r3, #1
 8004194:	4632      	mov	r2, r6
 8004196:	4649      	mov	r1, r9
 8004198:	4640      	mov	r0, r8
 800419a:	47d0      	blx	sl
 800419c:	3001      	adds	r0, #1
 800419e:	d09d      	beq.n	80040dc <_printf_i+0x160>
 80041a0:	3501      	adds	r5, #1
 80041a2:	68e3      	ldr	r3, [r4, #12]
 80041a4:	9903      	ldr	r1, [sp, #12]
 80041a6:	1a5b      	subs	r3, r3, r1
 80041a8:	42ab      	cmp	r3, r5
 80041aa:	dcf2      	bgt.n	8004192 <_printf_i+0x216>
 80041ac:	e7eb      	b.n	8004186 <_printf_i+0x20a>
 80041ae:	2500      	movs	r5, #0
 80041b0:	f104 0619 	add.w	r6, r4, #25
 80041b4:	e7f5      	b.n	80041a2 <_printf_i+0x226>
 80041b6:	bf00      	nop
 80041b8:	080073d1 	.word	0x080073d1
 80041bc:	080073e2 	.word	0x080073e2

080041c0 <std>:
 80041c0:	2300      	movs	r3, #0
 80041c2:	b510      	push	{r4, lr}
 80041c4:	4604      	mov	r4, r0
 80041c6:	e9c0 3300 	strd	r3, r3, [r0]
 80041ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041ce:	6083      	str	r3, [r0, #8]
 80041d0:	8181      	strh	r1, [r0, #12]
 80041d2:	6643      	str	r3, [r0, #100]	; 0x64
 80041d4:	81c2      	strh	r2, [r0, #14]
 80041d6:	6183      	str	r3, [r0, #24]
 80041d8:	4619      	mov	r1, r3
 80041da:	2208      	movs	r2, #8
 80041dc:	305c      	adds	r0, #92	; 0x5c
 80041de:	f000 f914 	bl	800440a <memset>
 80041e2:	4b0d      	ldr	r3, [pc, #52]	; (8004218 <std+0x58>)
 80041e4:	6263      	str	r3, [r4, #36]	; 0x24
 80041e6:	4b0d      	ldr	r3, [pc, #52]	; (800421c <std+0x5c>)
 80041e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80041ea:	4b0d      	ldr	r3, [pc, #52]	; (8004220 <std+0x60>)
 80041ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80041ee:	4b0d      	ldr	r3, [pc, #52]	; (8004224 <std+0x64>)
 80041f0:	6323      	str	r3, [r4, #48]	; 0x30
 80041f2:	4b0d      	ldr	r3, [pc, #52]	; (8004228 <std+0x68>)
 80041f4:	6224      	str	r4, [r4, #32]
 80041f6:	429c      	cmp	r4, r3
 80041f8:	d006      	beq.n	8004208 <std+0x48>
 80041fa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80041fe:	4294      	cmp	r4, r2
 8004200:	d002      	beq.n	8004208 <std+0x48>
 8004202:	33d0      	adds	r3, #208	; 0xd0
 8004204:	429c      	cmp	r4, r3
 8004206:	d105      	bne.n	8004214 <std+0x54>
 8004208:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800420c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004210:	f000 b988 	b.w	8004524 <__retarget_lock_init_recursive>
 8004214:	bd10      	pop	{r4, pc}
 8004216:	bf00      	nop
 8004218:	08004385 	.word	0x08004385
 800421c:	080043a7 	.word	0x080043a7
 8004220:	080043df 	.word	0x080043df
 8004224:	08004403 	.word	0x08004403
 8004228:	2000037c 	.word	0x2000037c

0800422c <stdio_exit_handler>:
 800422c:	4a02      	ldr	r2, [pc, #8]	; (8004238 <stdio_exit_handler+0xc>)
 800422e:	4903      	ldr	r1, [pc, #12]	; (800423c <stdio_exit_handler+0x10>)
 8004230:	4803      	ldr	r0, [pc, #12]	; (8004240 <stdio_exit_handler+0x14>)
 8004232:	f000 b869 	b.w	8004308 <_fwalk_sglue>
 8004236:	bf00      	nop
 8004238:	20000088 	.word	0x20000088
 800423c:	08005d71 	.word	0x08005d71
 8004240:	20000094 	.word	0x20000094

08004244 <cleanup_stdio>:
 8004244:	6841      	ldr	r1, [r0, #4]
 8004246:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <cleanup_stdio+0x34>)
 8004248:	4299      	cmp	r1, r3
 800424a:	b510      	push	{r4, lr}
 800424c:	4604      	mov	r4, r0
 800424e:	d001      	beq.n	8004254 <cleanup_stdio+0x10>
 8004250:	f001 fd8e 	bl	8005d70 <_fflush_r>
 8004254:	68a1      	ldr	r1, [r4, #8]
 8004256:	4b09      	ldr	r3, [pc, #36]	; (800427c <cleanup_stdio+0x38>)
 8004258:	4299      	cmp	r1, r3
 800425a:	d002      	beq.n	8004262 <cleanup_stdio+0x1e>
 800425c:	4620      	mov	r0, r4
 800425e:	f001 fd87 	bl	8005d70 <_fflush_r>
 8004262:	68e1      	ldr	r1, [r4, #12]
 8004264:	4b06      	ldr	r3, [pc, #24]	; (8004280 <cleanup_stdio+0x3c>)
 8004266:	4299      	cmp	r1, r3
 8004268:	d004      	beq.n	8004274 <cleanup_stdio+0x30>
 800426a:	4620      	mov	r0, r4
 800426c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004270:	f001 bd7e 	b.w	8005d70 <_fflush_r>
 8004274:	bd10      	pop	{r4, pc}
 8004276:	bf00      	nop
 8004278:	2000037c 	.word	0x2000037c
 800427c:	200003e4 	.word	0x200003e4
 8004280:	2000044c 	.word	0x2000044c

08004284 <global_stdio_init.part.0>:
 8004284:	b510      	push	{r4, lr}
 8004286:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <global_stdio_init.part.0+0x30>)
 8004288:	4c0b      	ldr	r4, [pc, #44]	; (80042b8 <global_stdio_init.part.0+0x34>)
 800428a:	4a0c      	ldr	r2, [pc, #48]	; (80042bc <global_stdio_init.part.0+0x38>)
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	4620      	mov	r0, r4
 8004290:	2200      	movs	r2, #0
 8004292:	2104      	movs	r1, #4
 8004294:	f7ff ff94 	bl	80041c0 <std>
 8004298:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800429c:	2201      	movs	r2, #1
 800429e:	2109      	movs	r1, #9
 80042a0:	f7ff ff8e 	bl	80041c0 <std>
 80042a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80042a8:	2202      	movs	r2, #2
 80042aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042ae:	2112      	movs	r1, #18
 80042b0:	f7ff bf86 	b.w	80041c0 <std>
 80042b4:	200004b4 	.word	0x200004b4
 80042b8:	2000037c 	.word	0x2000037c
 80042bc:	0800422d 	.word	0x0800422d

080042c0 <__sfp_lock_acquire>:
 80042c0:	4801      	ldr	r0, [pc, #4]	; (80042c8 <__sfp_lock_acquire+0x8>)
 80042c2:	f000 b930 	b.w	8004526 <__retarget_lock_acquire_recursive>
 80042c6:	bf00      	nop
 80042c8:	200004bd 	.word	0x200004bd

080042cc <__sfp_lock_release>:
 80042cc:	4801      	ldr	r0, [pc, #4]	; (80042d4 <__sfp_lock_release+0x8>)
 80042ce:	f000 b92b 	b.w	8004528 <__retarget_lock_release_recursive>
 80042d2:	bf00      	nop
 80042d4:	200004bd 	.word	0x200004bd

080042d8 <__sinit>:
 80042d8:	b510      	push	{r4, lr}
 80042da:	4604      	mov	r4, r0
 80042dc:	f7ff fff0 	bl	80042c0 <__sfp_lock_acquire>
 80042e0:	6a23      	ldr	r3, [r4, #32]
 80042e2:	b11b      	cbz	r3, 80042ec <__sinit+0x14>
 80042e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042e8:	f7ff bff0 	b.w	80042cc <__sfp_lock_release>
 80042ec:	4b04      	ldr	r3, [pc, #16]	; (8004300 <__sinit+0x28>)
 80042ee:	6223      	str	r3, [r4, #32]
 80042f0:	4b04      	ldr	r3, [pc, #16]	; (8004304 <__sinit+0x2c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1f5      	bne.n	80042e4 <__sinit+0xc>
 80042f8:	f7ff ffc4 	bl	8004284 <global_stdio_init.part.0>
 80042fc:	e7f2      	b.n	80042e4 <__sinit+0xc>
 80042fe:	bf00      	nop
 8004300:	08004245 	.word	0x08004245
 8004304:	200004b4 	.word	0x200004b4

08004308 <_fwalk_sglue>:
 8004308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800430c:	4607      	mov	r7, r0
 800430e:	4688      	mov	r8, r1
 8004310:	4614      	mov	r4, r2
 8004312:	2600      	movs	r6, #0
 8004314:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004318:	f1b9 0901 	subs.w	r9, r9, #1
 800431c:	d505      	bpl.n	800432a <_fwalk_sglue+0x22>
 800431e:	6824      	ldr	r4, [r4, #0]
 8004320:	2c00      	cmp	r4, #0
 8004322:	d1f7      	bne.n	8004314 <_fwalk_sglue+0xc>
 8004324:	4630      	mov	r0, r6
 8004326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800432a:	89ab      	ldrh	r3, [r5, #12]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d907      	bls.n	8004340 <_fwalk_sglue+0x38>
 8004330:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004334:	3301      	adds	r3, #1
 8004336:	d003      	beq.n	8004340 <_fwalk_sglue+0x38>
 8004338:	4629      	mov	r1, r5
 800433a:	4638      	mov	r0, r7
 800433c:	47c0      	blx	r8
 800433e:	4306      	orrs	r6, r0
 8004340:	3568      	adds	r5, #104	; 0x68
 8004342:	e7e9      	b.n	8004318 <_fwalk_sglue+0x10>

08004344 <siprintf>:
 8004344:	b40e      	push	{r1, r2, r3}
 8004346:	b500      	push	{lr}
 8004348:	b09c      	sub	sp, #112	; 0x70
 800434a:	ab1d      	add	r3, sp, #116	; 0x74
 800434c:	9002      	str	r0, [sp, #8]
 800434e:	9006      	str	r0, [sp, #24]
 8004350:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004354:	4809      	ldr	r0, [pc, #36]	; (800437c <siprintf+0x38>)
 8004356:	9107      	str	r1, [sp, #28]
 8004358:	9104      	str	r1, [sp, #16]
 800435a:	4909      	ldr	r1, [pc, #36]	; (8004380 <siprintf+0x3c>)
 800435c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004360:	9105      	str	r1, [sp, #20]
 8004362:	6800      	ldr	r0, [r0, #0]
 8004364:	9301      	str	r3, [sp, #4]
 8004366:	a902      	add	r1, sp, #8
 8004368:	f001 fb7e 	bl	8005a68 <_svfiprintf_r>
 800436c:	9b02      	ldr	r3, [sp, #8]
 800436e:	2200      	movs	r2, #0
 8004370:	701a      	strb	r2, [r3, #0]
 8004372:	b01c      	add	sp, #112	; 0x70
 8004374:	f85d eb04 	ldr.w	lr, [sp], #4
 8004378:	b003      	add	sp, #12
 800437a:	4770      	bx	lr
 800437c:	200000e0 	.word	0x200000e0
 8004380:	ffff0208 	.word	0xffff0208

08004384 <__sread>:
 8004384:	b510      	push	{r4, lr}
 8004386:	460c      	mov	r4, r1
 8004388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800438c:	f000 f86c 	bl	8004468 <_read_r>
 8004390:	2800      	cmp	r0, #0
 8004392:	bfab      	itete	ge
 8004394:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004396:	89a3      	ldrhlt	r3, [r4, #12]
 8004398:	181b      	addge	r3, r3, r0
 800439a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800439e:	bfac      	ite	ge
 80043a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80043a2:	81a3      	strhlt	r3, [r4, #12]
 80043a4:	bd10      	pop	{r4, pc}

080043a6 <__swrite>:
 80043a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043aa:	461f      	mov	r7, r3
 80043ac:	898b      	ldrh	r3, [r1, #12]
 80043ae:	05db      	lsls	r3, r3, #23
 80043b0:	4605      	mov	r5, r0
 80043b2:	460c      	mov	r4, r1
 80043b4:	4616      	mov	r6, r2
 80043b6:	d505      	bpl.n	80043c4 <__swrite+0x1e>
 80043b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043bc:	2302      	movs	r3, #2
 80043be:	2200      	movs	r2, #0
 80043c0:	f000 f840 	bl	8004444 <_lseek_r>
 80043c4:	89a3      	ldrh	r3, [r4, #12]
 80043c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043ce:	81a3      	strh	r3, [r4, #12]
 80043d0:	4632      	mov	r2, r6
 80043d2:	463b      	mov	r3, r7
 80043d4:	4628      	mov	r0, r5
 80043d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043da:	f000 b867 	b.w	80044ac <_write_r>

080043de <__sseek>:
 80043de:	b510      	push	{r4, lr}
 80043e0:	460c      	mov	r4, r1
 80043e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043e6:	f000 f82d 	bl	8004444 <_lseek_r>
 80043ea:	1c43      	adds	r3, r0, #1
 80043ec:	89a3      	ldrh	r3, [r4, #12]
 80043ee:	bf15      	itete	ne
 80043f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80043f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80043f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80043fa:	81a3      	strheq	r3, [r4, #12]
 80043fc:	bf18      	it	ne
 80043fe:	81a3      	strhne	r3, [r4, #12]
 8004400:	bd10      	pop	{r4, pc}

08004402 <__sclose>:
 8004402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004406:	f000 b80d 	b.w	8004424 <_close_r>

0800440a <memset>:
 800440a:	4402      	add	r2, r0
 800440c:	4603      	mov	r3, r0
 800440e:	4293      	cmp	r3, r2
 8004410:	d100      	bne.n	8004414 <memset+0xa>
 8004412:	4770      	bx	lr
 8004414:	f803 1b01 	strb.w	r1, [r3], #1
 8004418:	e7f9      	b.n	800440e <memset+0x4>
	...

0800441c <_localeconv_r>:
 800441c:	4800      	ldr	r0, [pc, #0]	; (8004420 <_localeconv_r+0x4>)
 800441e:	4770      	bx	lr
 8004420:	200001d4 	.word	0x200001d4

08004424 <_close_r>:
 8004424:	b538      	push	{r3, r4, r5, lr}
 8004426:	4d06      	ldr	r5, [pc, #24]	; (8004440 <_close_r+0x1c>)
 8004428:	2300      	movs	r3, #0
 800442a:	4604      	mov	r4, r0
 800442c:	4608      	mov	r0, r1
 800442e:	602b      	str	r3, [r5, #0]
 8004430:	f7fd fedf 	bl	80021f2 <_close>
 8004434:	1c43      	adds	r3, r0, #1
 8004436:	d102      	bne.n	800443e <_close_r+0x1a>
 8004438:	682b      	ldr	r3, [r5, #0]
 800443a:	b103      	cbz	r3, 800443e <_close_r+0x1a>
 800443c:	6023      	str	r3, [r4, #0]
 800443e:	bd38      	pop	{r3, r4, r5, pc}
 8004440:	200004b8 	.word	0x200004b8

08004444 <_lseek_r>:
 8004444:	b538      	push	{r3, r4, r5, lr}
 8004446:	4d07      	ldr	r5, [pc, #28]	; (8004464 <_lseek_r+0x20>)
 8004448:	4604      	mov	r4, r0
 800444a:	4608      	mov	r0, r1
 800444c:	4611      	mov	r1, r2
 800444e:	2200      	movs	r2, #0
 8004450:	602a      	str	r2, [r5, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	f7fd fef4 	bl	8002240 <_lseek>
 8004458:	1c43      	adds	r3, r0, #1
 800445a:	d102      	bne.n	8004462 <_lseek_r+0x1e>
 800445c:	682b      	ldr	r3, [r5, #0]
 800445e:	b103      	cbz	r3, 8004462 <_lseek_r+0x1e>
 8004460:	6023      	str	r3, [r4, #0]
 8004462:	bd38      	pop	{r3, r4, r5, pc}
 8004464:	200004b8 	.word	0x200004b8

08004468 <_read_r>:
 8004468:	b538      	push	{r3, r4, r5, lr}
 800446a:	4d07      	ldr	r5, [pc, #28]	; (8004488 <_read_r+0x20>)
 800446c:	4604      	mov	r4, r0
 800446e:	4608      	mov	r0, r1
 8004470:	4611      	mov	r1, r2
 8004472:	2200      	movs	r2, #0
 8004474:	602a      	str	r2, [r5, #0]
 8004476:	461a      	mov	r2, r3
 8004478:	f7fd fe82 	bl	8002180 <_read>
 800447c:	1c43      	adds	r3, r0, #1
 800447e:	d102      	bne.n	8004486 <_read_r+0x1e>
 8004480:	682b      	ldr	r3, [r5, #0]
 8004482:	b103      	cbz	r3, 8004486 <_read_r+0x1e>
 8004484:	6023      	str	r3, [r4, #0]
 8004486:	bd38      	pop	{r3, r4, r5, pc}
 8004488:	200004b8 	.word	0x200004b8

0800448c <_sbrk_r>:
 800448c:	b538      	push	{r3, r4, r5, lr}
 800448e:	4d06      	ldr	r5, [pc, #24]	; (80044a8 <_sbrk_r+0x1c>)
 8004490:	2300      	movs	r3, #0
 8004492:	4604      	mov	r4, r0
 8004494:	4608      	mov	r0, r1
 8004496:	602b      	str	r3, [r5, #0]
 8004498:	f7fd fee0 	bl	800225c <_sbrk>
 800449c:	1c43      	adds	r3, r0, #1
 800449e:	d102      	bne.n	80044a6 <_sbrk_r+0x1a>
 80044a0:	682b      	ldr	r3, [r5, #0]
 80044a2:	b103      	cbz	r3, 80044a6 <_sbrk_r+0x1a>
 80044a4:	6023      	str	r3, [r4, #0]
 80044a6:	bd38      	pop	{r3, r4, r5, pc}
 80044a8:	200004b8 	.word	0x200004b8

080044ac <_write_r>:
 80044ac:	b538      	push	{r3, r4, r5, lr}
 80044ae:	4d07      	ldr	r5, [pc, #28]	; (80044cc <_write_r+0x20>)
 80044b0:	4604      	mov	r4, r0
 80044b2:	4608      	mov	r0, r1
 80044b4:	4611      	mov	r1, r2
 80044b6:	2200      	movs	r2, #0
 80044b8:	602a      	str	r2, [r5, #0]
 80044ba:	461a      	mov	r2, r3
 80044bc:	f7fd fe7d 	bl	80021ba <_write>
 80044c0:	1c43      	adds	r3, r0, #1
 80044c2:	d102      	bne.n	80044ca <_write_r+0x1e>
 80044c4:	682b      	ldr	r3, [r5, #0]
 80044c6:	b103      	cbz	r3, 80044ca <_write_r+0x1e>
 80044c8:	6023      	str	r3, [r4, #0]
 80044ca:	bd38      	pop	{r3, r4, r5, pc}
 80044cc:	200004b8 	.word	0x200004b8

080044d0 <__errno>:
 80044d0:	4b01      	ldr	r3, [pc, #4]	; (80044d8 <__errno+0x8>)
 80044d2:	6818      	ldr	r0, [r3, #0]
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	200000e0 	.word	0x200000e0

080044dc <__libc_init_array>:
 80044dc:	b570      	push	{r4, r5, r6, lr}
 80044de:	4d0d      	ldr	r5, [pc, #52]	; (8004514 <__libc_init_array+0x38>)
 80044e0:	4c0d      	ldr	r4, [pc, #52]	; (8004518 <__libc_init_array+0x3c>)
 80044e2:	1b64      	subs	r4, r4, r5
 80044e4:	10a4      	asrs	r4, r4, #2
 80044e6:	2600      	movs	r6, #0
 80044e8:	42a6      	cmp	r6, r4
 80044ea:	d109      	bne.n	8004500 <__libc_init_array+0x24>
 80044ec:	4d0b      	ldr	r5, [pc, #44]	; (800451c <__libc_init_array+0x40>)
 80044ee:	4c0c      	ldr	r4, [pc, #48]	; (8004520 <__libc_init_array+0x44>)
 80044f0:	f002 ff0a 	bl	8007308 <_init>
 80044f4:	1b64      	subs	r4, r4, r5
 80044f6:	10a4      	asrs	r4, r4, #2
 80044f8:	2600      	movs	r6, #0
 80044fa:	42a6      	cmp	r6, r4
 80044fc:	d105      	bne.n	800450a <__libc_init_array+0x2e>
 80044fe:	bd70      	pop	{r4, r5, r6, pc}
 8004500:	f855 3b04 	ldr.w	r3, [r5], #4
 8004504:	4798      	blx	r3
 8004506:	3601      	adds	r6, #1
 8004508:	e7ee      	b.n	80044e8 <__libc_init_array+0xc>
 800450a:	f855 3b04 	ldr.w	r3, [r5], #4
 800450e:	4798      	blx	r3
 8004510:	3601      	adds	r6, #1
 8004512:	e7f2      	b.n	80044fa <__libc_init_array+0x1e>
 8004514:	08007768 	.word	0x08007768
 8004518:	08007768 	.word	0x08007768
 800451c:	08007768 	.word	0x08007768
 8004520:	0800776c 	.word	0x0800776c

08004524 <__retarget_lock_init_recursive>:
 8004524:	4770      	bx	lr

08004526 <__retarget_lock_acquire_recursive>:
 8004526:	4770      	bx	lr

08004528 <__retarget_lock_release_recursive>:
 8004528:	4770      	bx	lr

0800452a <quorem>:
 800452a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800452e:	6903      	ldr	r3, [r0, #16]
 8004530:	690c      	ldr	r4, [r1, #16]
 8004532:	42a3      	cmp	r3, r4
 8004534:	4607      	mov	r7, r0
 8004536:	db7e      	blt.n	8004636 <quorem+0x10c>
 8004538:	3c01      	subs	r4, #1
 800453a:	f101 0814 	add.w	r8, r1, #20
 800453e:	f100 0514 	add.w	r5, r0, #20
 8004542:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004546:	9301      	str	r3, [sp, #4]
 8004548:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800454c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004550:	3301      	adds	r3, #1
 8004552:	429a      	cmp	r2, r3
 8004554:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004558:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800455c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004560:	d331      	bcc.n	80045c6 <quorem+0x9c>
 8004562:	f04f 0e00 	mov.w	lr, #0
 8004566:	4640      	mov	r0, r8
 8004568:	46ac      	mov	ip, r5
 800456a:	46f2      	mov	sl, lr
 800456c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004570:	b293      	uxth	r3, r2
 8004572:	fb06 e303 	mla	r3, r6, r3, lr
 8004576:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800457a:	0c1a      	lsrs	r2, r3, #16
 800457c:	b29b      	uxth	r3, r3
 800457e:	ebaa 0303 	sub.w	r3, sl, r3
 8004582:	f8dc a000 	ldr.w	sl, [ip]
 8004586:	fa13 f38a 	uxtah	r3, r3, sl
 800458a:	fb06 220e 	mla	r2, r6, lr, r2
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	9b00      	ldr	r3, [sp, #0]
 8004592:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004596:	b292      	uxth	r2, r2
 8004598:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800459c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80045a0:	f8bd 3000 	ldrh.w	r3, [sp]
 80045a4:	4581      	cmp	r9, r0
 80045a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80045aa:	f84c 3b04 	str.w	r3, [ip], #4
 80045ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80045b2:	d2db      	bcs.n	800456c <quorem+0x42>
 80045b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80045b8:	b92b      	cbnz	r3, 80045c6 <quorem+0x9c>
 80045ba:	9b01      	ldr	r3, [sp, #4]
 80045bc:	3b04      	subs	r3, #4
 80045be:	429d      	cmp	r5, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	d32c      	bcc.n	800461e <quorem+0xf4>
 80045c4:	613c      	str	r4, [r7, #16]
 80045c6:	4638      	mov	r0, r7
 80045c8:	f001 f8f4 	bl	80057b4 <__mcmp>
 80045cc:	2800      	cmp	r0, #0
 80045ce:	db22      	blt.n	8004616 <quorem+0xec>
 80045d0:	3601      	adds	r6, #1
 80045d2:	4629      	mov	r1, r5
 80045d4:	2000      	movs	r0, #0
 80045d6:	f858 2b04 	ldr.w	r2, [r8], #4
 80045da:	f8d1 c000 	ldr.w	ip, [r1]
 80045de:	b293      	uxth	r3, r2
 80045e0:	1ac3      	subs	r3, r0, r3
 80045e2:	0c12      	lsrs	r2, r2, #16
 80045e4:	fa13 f38c 	uxtah	r3, r3, ip
 80045e8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80045ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80045f6:	45c1      	cmp	r9, r8
 80045f8:	f841 3b04 	str.w	r3, [r1], #4
 80045fc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004600:	d2e9      	bcs.n	80045d6 <quorem+0xac>
 8004602:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004606:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800460a:	b922      	cbnz	r2, 8004616 <quorem+0xec>
 800460c:	3b04      	subs	r3, #4
 800460e:	429d      	cmp	r5, r3
 8004610:	461a      	mov	r2, r3
 8004612:	d30a      	bcc.n	800462a <quorem+0x100>
 8004614:	613c      	str	r4, [r7, #16]
 8004616:	4630      	mov	r0, r6
 8004618:	b003      	add	sp, #12
 800461a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	3b04      	subs	r3, #4
 8004622:	2a00      	cmp	r2, #0
 8004624:	d1ce      	bne.n	80045c4 <quorem+0x9a>
 8004626:	3c01      	subs	r4, #1
 8004628:	e7c9      	b.n	80045be <quorem+0x94>
 800462a:	6812      	ldr	r2, [r2, #0]
 800462c:	3b04      	subs	r3, #4
 800462e:	2a00      	cmp	r2, #0
 8004630:	d1f0      	bne.n	8004614 <quorem+0xea>
 8004632:	3c01      	subs	r4, #1
 8004634:	e7eb      	b.n	800460e <quorem+0xe4>
 8004636:	2000      	movs	r0, #0
 8004638:	e7ee      	b.n	8004618 <quorem+0xee>
 800463a:	0000      	movs	r0, r0
 800463c:	0000      	movs	r0, r0
	...

08004640 <_dtoa_r>:
 8004640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004644:	ed2d 8b04 	vpush	{d8-d9}
 8004648:	69c5      	ldr	r5, [r0, #28]
 800464a:	b093      	sub	sp, #76	; 0x4c
 800464c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004650:	ec57 6b10 	vmov	r6, r7, d0
 8004654:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004658:	9107      	str	r1, [sp, #28]
 800465a:	4604      	mov	r4, r0
 800465c:	920a      	str	r2, [sp, #40]	; 0x28
 800465e:	930d      	str	r3, [sp, #52]	; 0x34
 8004660:	b975      	cbnz	r5, 8004680 <_dtoa_r+0x40>
 8004662:	2010      	movs	r0, #16
 8004664:	f7ff f88a 	bl	800377c <malloc>
 8004668:	4602      	mov	r2, r0
 800466a:	61e0      	str	r0, [r4, #28]
 800466c:	b920      	cbnz	r0, 8004678 <_dtoa_r+0x38>
 800466e:	4bae      	ldr	r3, [pc, #696]	; (8004928 <_dtoa_r+0x2e8>)
 8004670:	21ef      	movs	r1, #239	; 0xef
 8004672:	48ae      	ldr	r0, [pc, #696]	; (800492c <_dtoa_r+0x2ec>)
 8004674:	f001 fbcc 	bl	8005e10 <__assert_func>
 8004678:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800467c:	6005      	str	r5, [r0, #0]
 800467e:	60c5      	str	r5, [r0, #12]
 8004680:	69e3      	ldr	r3, [r4, #28]
 8004682:	6819      	ldr	r1, [r3, #0]
 8004684:	b151      	cbz	r1, 800469c <_dtoa_r+0x5c>
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	604a      	str	r2, [r1, #4]
 800468a:	2301      	movs	r3, #1
 800468c:	4093      	lsls	r3, r2
 800468e:	608b      	str	r3, [r1, #8]
 8004690:	4620      	mov	r0, r4
 8004692:	f000 fe53 	bl	800533c <_Bfree>
 8004696:	69e3      	ldr	r3, [r4, #28]
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	1e3b      	subs	r3, r7, #0
 800469e:	bfbb      	ittet	lt
 80046a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80046a4:	9303      	strlt	r3, [sp, #12]
 80046a6:	2300      	movge	r3, #0
 80046a8:	2201      	movlt	r2, #1
 80046aa:	bfac      	ite	ge
 80046ac:	f8c8 3000 	strge.w	r3, [r8]
 80046b0:	f8c8 2000 	strlt.w	r2, [r8]
 80046b4:	4b9e      	ldr	r3, [pc, #632]	; (8004930 <_dtoa_r+0x2f0>)
 80046b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80046ba:	ea33 0308 	bics.w	r3, r3, r8
 80046be:	d11b      	bne.n	80046f8 <_dtoa_r+0xb8>
 80046c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80046c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80046cc:	4333      	orrs	r3, r6
 80046ce:	f000 8593 	beq.w	80051f8 <_dtoa_r+0xbb8>
 80046d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80046d4:	b963      	cbnz	r3, 80046f0 <_dtoa_r+0xb0>
 80046d6:	4b97      	ldr	r3, [pc, #604]	; (8004934 <_dtoa_r+0x2f4>)
 80046d8:	e027      	b.n	800472a <_dtoa_r+0xea>
 80046da:	4b97      	ldr	r3, [pc, #604]	; (8004938 <_dtoa_r+0x2f8>)
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	3308      	adds	r3, #8
 80046e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	9800      	ldr	r0, [sp, #0]
 80046e6:	b013      	add	sp, #76	; 0x4c
 80046e8:	ecbd 8b04 	vpop	{d8-d9}
 80046ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046f0:	4b90      	ldr	r3, [pc, #576]	; (8004934 <_dtoa_r+0x2f4>)
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	3303      	adds	r3, #3
 80046f6:	e7f3      	b.n	80046e0 <_dtoa_r+0xa0>
 80046f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80046fc:	2200      	movs	r2, #0
 80046fe:	ec51 0b17 	vmov	r0, r1, d7
 8004702:	eeb0 8a47 	vmov.f32	s16, s14
 8004706:	eef0 8a67 	vmov.f32	s17, s15
 800470a:	2300      	movs	r3, #0
 800470c:	f7fc f9dc 	bl	8000ac8 <__aeabi_dcmpeq>
 8004710:	4681      	mov	r9, r0
 8004712:	b160      	cbz	r0, 800472e <_dtoa_r+0xee>
 8004714:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004716:	2301      	movs	r3, #1
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 8568 	beq.w	80051f2 <_dtoa_r+0xbb2>
 8004722:	4b86      	ldr	r3, [pc, #536]	; (800493c <_dtoa_r+0x2fc>)
 8004724:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	3b01      	subs	r3, #1
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	e7da      	b.n	80046e4 <_dtoa_r+0xa4>
 800472e:	aa10      	add	r2, sp, #64	; 0x40
 8004730:	a911      	add	r1, sp, #68	; 0x44
 8004732:	4620      	mov	r0, r4
 8004734:	eeb0 0a48 	vmov.f32	s0, s16
 8004738:	eef0 0a68 	vmov.f32	s1, s17
 800473c:	f001 f8e0 	bl	8005900 <__d2b>
 8004740:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004744:	4682      	mov	sl, r0
 8004746:	2d00      	cmp	r5, #0
 8004748:	d07f      	beq.n	800484a <_dtoa_r+0x20a>
 800474a:	ee18 3a90 	vmov	r3, s17
 800474e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004752:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004756:	ec51 0b18 	vmov	r0, r1, d8
 800475a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800475e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004762:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004766:	4619      	mov	r1, r3
 8004768:	2200      	movs	r2, #0
 800476a:	4b75      	ldr	r3, [pc, #468]	; (8004940 <_dtoa_r+0x300>)
 800476c:	f7fb fd8c 	bl	8000288 <__aeabi_dsub>
 8004770:	a367      	add	r3, pc, #412	; (adr r3, 8004910 <_dtoa_r+0x2d0>)
 8004772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004776:	f7fb ff3f 	bl	80005f8 <__aeabi_dmul>
 800477a:	a367      	add	r3, pc, #412	; (adr r3, 8004918 <_dtoa_r+0x2d8>)
 800477c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004780:	f7fb fd84 	bl	800028c <__adddf3>
 8004784:	4606      	mov	r6, r0
 8004786:	4628      	mov	r0, r5
 8004788:	460f      	mov	r7, r1
 800478a:	f7fb fecb 	bl	8000524 <__aeabi_i2d>
 800478e:	a364      	add	r3, pc, #400	; (adr r3, 8004920 <_dtoa_r+0x2e0>)
 8004790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004794:	f7fb ff30 	bl	80005f8 <__aeabi_dmul>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	4630      	mov	r0, r6
 800479e:	4639      	mov	r1, r7
 80047a0:	f7fb fd74 	bl	800028c <__adddf3>
 80047a4:	4606      	mov	r6, r0
 80047a6:	460f      	mov	r7, r1
 80047a8:	f7fc f9d6 	bl	8000b58 <__aeabi_d2iz>
 80047ac:	2200      	movs	r2, #0
 80047ae:	4683      	mov	fp, r0
 80047b0:	2300      	movs	r3, #0
 80047b2:	4630      	mov	r0, r6
 80047b4:	4639      	mov	r1, r7
 80047b6:	f7fc f991 	bl	8000adc <__aeabi_dcmplt>
 80047ba:	b148      	cbz	r0, 80047d0 <_dtoa_r+0x190>
 80047bc:	4658      	mov	r0, fp
 80047be:	f7fb feb1 	bl	8000524 <__aeabi_i2d>
 80047c2:	4632      	mov	r2, r6
 80047c4:	463b      	mov	r3, r7
 80047c6:	f7fc f97f 	bl	8000ac8 <__aeabi_dcmpeq>
 80047ca:	b908      	cbnz	r0, 80047d0 <_dtoa_r+0x190>
 80047cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80047d0:	f1bb 0f16 	cmp.w	fp, #22
 80047d4:	d857      	bhi.n	8004886 <_dtoa_r+0x246>
 80047d6:	4b5b      	ldr	r3, [pc, #364]	; (8004944 <_dtoa_r+0x304>)
 80047d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80047dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e0:	ec51 0b18 	vmov	r0, r1, d8
 80047e4:	f7fc f97a 	bl	8000adc <__aeabi_dcmplt>
 80047e8:	2800      	cmp	r0, #0
 80047ea:	d04e      	beq.n	800488a <_dtoa_r+0x24a>
 80047ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80047f0:	2300      	movs	r3, #0
 80047f2:	930c      	str	r3, [sp, #48]	; 0x30
 80047f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80047f6:	1b5b      	subs	r3, r3, r5
 80047f8:	1e5a      	subs	r2, r3, #1
 80047fa:	bf45      	ittet	mi
 80047fc:	f1c3 0301 	rsbmi	r3, r3, #1
 8004800:	9305      	strmi	r3, [sp, #20]
 8004802:	2300      	movpl	r3, #0
 8004804:	2300      	movmi	r3, #0
 8004806:	9206      	str	r2, [sp, #24]
 8004808:	bf54      	ite	pl
 800480a:	9305      	strpl	r3, [sp, #20]
 800480c:	9306      	strmi	r3, [sp, #24]
 800480e:	f1bb 0f00 	cmp.w	fp, #0
 8004812:	db3c      	blt.n	800488e <_dtoa_r+0x24e>
 8004814:	9b06      	ldr	r3, [sp, #24]
 8004816:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800481a:	445b      	add	r3, fp
 800481c:	9306      	str	r3, [sp, #24]
 800481e:	2300      	movs	r3, #0
 8004820:	9308      	str	r3, [sp, #32]
 8004822:	9b07      	ldr	r3, [sp, #28]
 8004824:	2b09      	cmp	r3, #9
 8004826:	d868      	bhi.n	80048fa <_dtoa_r+0x2ba>
 8004828:	2b05      	cmp	r3, #5
 800482a:	bfc4      	itt	gt
 800482c:	3b04      	subgt	r3, #4
 800482e:	9307      	strgt	r3, [sp, #28]
 8004830:	9b07      	ldr	r3, [sp, #28]
 8004832:	f1a3 0302 	sub.w	r3, r3, #2
 8004836:	bfcc      	ite	gt
 8004838:	2500      	movgt	r5, #0
 800483a:	2501      	movle	r5, #1
 800483c:	2b03      	cmp	r3, #3
 800483e:	f200 8085 	bhi.w	800494c <_dtoa_r+0x30c>
 8004842:	e8df f003 	tbb	[pc, r3]
 8004846:	3b2e      	.short	0x3b2e
 8004848:	5839      	.short	0x5839
 800484a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800484e:	441d      	add	r5, r3
 8004850:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004854:	2b20      	cmp	r3, #32
 8004856:	bfc1      	itttt	gt
 8004858:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800485c:	fa08 f803 	lslgt.w	r8, r8, r3
 8004860:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8004864:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004868:	bfd6      	itet	le
 800486a:	f1c3 0320 	rsble	r3, r3, #32
 800486e:	ea48 0003 	orrgt.w	r0, r8, r3
 8004872:	fa06 f003 	lslle.w	r0, r6, r3
 8004876:	f7fb fe45 	bl	8000504 <__aeabi_ui2d>
 800487a:	2201      	movs	r2, #1
 800487c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004880:	3d01      	subs	r5, #1
 8004882:	920e      	str	r2, [sp, #56]	; 0x38
 8004884:	e76f      	b.n	8004766 <_dtoa_r+0x126>
 8004886:	2301      	movs	r3, #1
 8004888:	e7b3      	b.n	80047f2 <_dtoa_r+0x1b2>
 800488a:	900c      	str	r0, [sp, #48]	; 0x30
 800488c:	e7b2      	b.n	80047f4 <_dtoa_r+0x1b4>
 800488e:	9b05      	ldr	r3, [sp, #20]
 8004890:	eba3 030b 	sub.w	r3, r3, fp
 8004894:	9305      	str	r3, [sp, #20]
 8004896:	f1cb 0300 	rsb	r3, fp, #0
 800489a:	9308      	str	r3, [sp, #32]
 800489c:	2300      	movs	r3, #0
 800489e:	930b      	str	r3, [sp, #44]	; 0x2c
 80048a0:	e7bf      	b.n	8004822 <_dtoa_r+0x1e2>
 80048a2:	2300      	movs	r3, #0
 80048a4:	9309      	str	r3, [sp, #36]	; 0x24
 80048a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	dc52      	bgt.n	8004952 <_dtoa_r+0x312>
 80048ac:	2301      	movs	r3, #1
 80048ae:	9301      	str	r3, [sp, #4]
 80048b0:	9304      	str	r3, [sp, #16]
 80048b2:	461a      	mov	r2, r3
 80048b4:	920a      	str	r2, [sp, #40]	; 0x28
 80048b6:	e00b      	b.n	80048d0 <_dtoa_r+0x290>
 80048b8:	2301      	movs	r3, #1
 80048ba:	e7f3      	b.n	80048a4 <_dtoa_r+0x264>
 80048bc:	2300      	movs	r3, #0
 80048be:	9309      	str	r3, [sp, #36]	; 0x24
 80048c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048c2:	445b      	add	r3, fp
 80048c4:	9301      	str	r3, [sp, #4]
 80048c6:	3301      	adds	r3, #1
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	9304      	str	r3, [sp, #16]
 80048cc:	bfb8      	it	lt
 80048ce:	2301      	movlt	r3, #1
 80048d0:	69e0      	ldr	r0, [r4, #28]
 80048d2:	2100      	movs	r1, #0
 80048d4:	2204      	movs	r2, #4
 80048d6:	f102 0614 	add.w	r6, r2, #20
 80048da:	429e      	cmp	r6, r3
 80048dc:	d93d      	bls.n	800495a <_dtoa_r+0x31a>
 80048de:	6041      	str	r1, [r0, #4]
 80048e0:	4620      	mov	r0, r4
 80048e2:	f000 fceb 	bl	80052bc <_Balloc>
 80048e6:	9000      	str	r0, [sp, #0]
 80048e8:	2800      	cmp	r0, #0
 80048ea:	d139      	bne.n	8004960 <_dtoa_r+0x320>
 80048ec:	4b16      	ldr	r3, [pc, #88]	; (8004948 <_dtoa_r+0x308>)
 80048ee:	4602      	mov	r2, r0
 80048f0:	f240 11af 	movw	r1, #431	; 0x1af
 80048f4:	e6bd      	b.n	8004672 <_dtoa_r+0x32>
 80048f6:	2301      	movs	r3, #1
 80048f8:	e7e1      	b.n	80048be <_dtoa_r+0x27e>
 80048fa:	2501      	movs	r5, #1
 80048fc:	2300      	movs	r3, #0
 80048fe:	9307      	str	r3, [sp, #28]
 8004900:	9509      	str	r5, [sp, #36]	; 0x24
 8004902:	f04f 33ff 	mov.w	r3, #4294967295
 8004906:	9301      	str	r3, [sp, #4]
 8004908:	9304      	str	r3, [sp, #16]
 800490a:	2200      	movs	r2, #0
 800490c:	2312      	movs	r3, #18
 800490e:	e7d1      	b.n	80048b4 <_dtoa_r+0x274>
 8004910:	636f4361 	.word	0x636f4361
 8004914:	3fd287a7 	.word	0x3fd287a7
 8004918:	8b60c8b3 	.word	0x8b60c8b3
 800491c:	3fc68a28 	.word	0x3fc68a28
 8004920:	509f79fb 	.word	0x509f79fb
 8004924:	3fd34413 	.word	0x3fd34413
 8004928:	08007400 	.word	0x08007400
 800492c:	08007417 	.word	0x08007417
 8004930:	7ff00000 	.word	0x7ff00000
 8004934:	080073fc 	.word	0x080073fc
 8004938:	080073f3 	.word	0x080073f3
 800493c:	080073d0 	.word	0x080073d0
 8004940:	3ff80000 	.word	0x3ff80000
 8004944:	08007508 	.word	0x08007508
 8004948:	0800746f 	.word	0x0800746f
 800494c:	2301      	movs	r3, #1
 800494e:	9309      	str	r3, [sp, #36]	; 0x24
 8004950:	e7d7      	b.n	8004902 <_dtoa_r+0x2c2>
 8004952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004954:	9301      	str	r3, [sp, #4]
 8004956:	9304      	str	r3, [sp, #16]
 8004958:	e7ba      	b.n	80048d0 <_dtoa_r+0x290>
 800495a:	3101      	adds	r1, #1
 800495c:	0052      	lsls	r2, r2, #1
 800495e:	e7ba      	b.n	80048d6 <_dtoa_r+0x296>
 8004960:	69e3      	ldr	r3, [r4, #28]
 8004962:	9a00      	ldr	r2, [sp, #0]
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	9b04      	ldr	r3, [sp, #16]
 8004968:	2b0e      	cmp	r3, #14
 800496a:	f200 80a8 	bhi.w	8004abe <_dtoa_r+0x47e>
 800496e:	2d00      	cmp	r5, #0
 8004970:	f000 80a5 	beq.w	8004abe <_dtoa_r+0x47e>
 8004974:	f1bb 0f00 	cmp.w	fp, #0
 8004978:	dd38      	ble.n	80049ec <_dtoa_r+0x3ac>
 800497a:	4bc0      	ldr	r3, [pc, #768]	; (8004c7c <_dtoa_r+0x63c>)
 800497c:	f00b 020f 	and.w	r2, fp, #15
 8004980:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004984:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004988:	e9d3 6700 	ldrd	r6, r7, [r3]
 800498c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8004990:	d019      	beq.n	80049c6 <_dtoa_r+0x386>
 8004992:	4bbb      	ldr	r3, [pc, #748]	; (8004c80 <_dtoa_r+0x640>)
 8004994:	ec51 0b18 	vmov	r0, r1, d8
 8004998:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800499c:	f7fb ff56 	bl	800084c <__aeabi_ddiv>
 80049a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049a4:	f008 080f 	and.w	r8, r8, #15
 80049a8:	2503      	movs	r5, #3
 80049aa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8004c80 <_dtoa_r+0x640>
 80049ae:	f1b8 0f00 	cmp.w	r8, #0
 80049b2:	d10a      	bne.n	80049ca <_dtoa_r+0x38a>
 80049b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049b8:	4632      	mov	r2, r6
 80049ba:	463b      	mov	r3, r7
 80049bc:	f7fb ff46 	bl	800084c <__aeabi_ddiv>
 80049c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049c4:	e02b      	b.n	8004a1e <_dtoa_r+0x3de>
 80049c6:	2502      	movs	r5, #2
 80049c8:	e7ef      	b.n	80049aa <_dtoa_r+0x36a>
 80049ca:	f018 0f01 	tst.w	r8, #1
 80049ce:	d008      	beq.n	80049e2 <_dtoa_r+0x3a2>
 80049d0:	4630      	mov	r0, r6
 80049d2:	4639      	mov	r1, r7
 80049d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80049d8:	f7fb fe0e 	bl	80005f8 <__aeabi_dmul>
 80049dc:	3501      	adds	r5, #1
 80049de:	4606      	mov	r6, r0
 80049e0:	460f      	mov	r7, r1
 80049e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80049e6:	f109 0908 	add.w	r9, r9, #8
 80049ea:	e7e0      	b.n	80049ae <_dtoa_r+0x36e>
 80049ec:	f000 809f 	beq.w	8004b2e <_dtoa_r+0x4ee>
 80049f0:	f1cb 0600 	rsb	r6, fp, #0
 80049f4:	4ba1      	ldr	r3, [pc, #644]	; (8004c7c <_dtoa_r+0x63c>)
 80049f6:	4fa2      	ldr	r7, [pc, #648]	; (8004c80 <_dtoa_r+0x640>)
 80049f8:	f006 020f 	and.w	r2, r6, #15
 80049fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a04:	ec51 0b18 	vmov	r0, r1, d8
 8004a08:	f7fb fdf6 	bl	80005f8 <__aeabi_dmul>
 8004a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a10:	1136      	asrs	r6, r6, #4
 8004a12:	2300      	movs	r3, #0
 8004a14:	2502      	movs	r5, #2
 8004a16:	2e00      	cmp	r6, #0
 8004a18:	d17e      	bne.n	8004b18 <_dtoa_r+0x4d8>
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1d0      	bne.n	80049c0 <_dtoa_r+0x380>
 8004a1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a20:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 8084 	beq.w	8004b32 <_dtoa_r+0x4f2>
 8004a2a:	4b96      	ldr	r3, [pc, #600]	; (8004c84 <_dtoa_r+0x644>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	4640      	mov	r0, r8
 8004a30:	4649      	mov	r1, r9
 8004a32:	f7fc f853 	bl	8000adc <__aeabi_dcmplt>
 8004a36:	2800      	cmp	r0, #0
 8004a38:	d07b      	beq.n	8004b32 <_dtoa_r+0x4f2>
 8004a3a:	9b04      	ldr	r3, [sp, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d078      	beq.n	8004b32 <_dtoa_r+0x4f2>
 8004a40:	9b01      	ldr	r3, [sp, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	dd39      	ble.n	8004aba <_dtoa_r+0x47a>
 8004a46:	4b90      	ldr	r3, [pc, #576]	; (8004c88 <_dtoa_r+0x648>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	4640      	mov	r0, r8
 8004a4c:	4649      	mov	r1, r9
 8004a4e:	f7fb fdd3 	bl	80005f8 <__aeabi_dmul>
 8004a52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a56:	9e01      	ldr	r6, [sp, #4]
 8004a58:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004a5c:	3501      	adds	r5, #1
 8004a5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004a62:	4628      	mov	r0, r5
 8004a64:	f7fb fd5e 	bl	8000524 <__aeabi_i2d>
 8004a68:	4642      	mov	r2, r8
 8004a6a:	464b      	mov	r3, r9
 8004a6c:	f7fb fdc4 	bl	80005f8 <__aeabi_dmul>
 8004a70:	4b86      	ldr	r3, [pc, #536]	; (8004c8c <_dtoa_r+0x64c>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	f7fb fc0a 	bl	800028c <__adddf3>
 8004a78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004a7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a80:	9303      	str	r3, [sp, #12]
 8004a82:	2e00      	cmp	r6, #0
 8004a84:	d158      	bne.n	8004b38 <_dtoa_r+0x4f8>
 8004a86:	4b82      	ldr	r3, [pc, #520]	; (8004c90 <_dtoa_r+0x650>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	4640      	mov	r0, r8
 8004a8c:	4649      	mov	r1, r9
 8004a8e:	f7fb fbfb 	bl	8000288 <__aeabi_dsub>
 8004a92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a96:	4680      	mov	r8, r0
 8004a98:	4689      	mov	r9, r1
 8004a9a:	f7fc f83d 	bl	8000b18 <__aeabi_dcmpgt>
 8004a9e:	2800      	cmp	r0, #0
 8004aa0:	f040 8296 	bne.w	8004fd0 <_dtoa_r+0x990>
 8004aa4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004aa8:	4640      	mov	r0, r8
 8004aaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004aae:	4649      	mov	r1, r9
 8004ab0:	f7fc f814 	bl	8000adc <__aeabi_dcmplt>
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	f040 8289 	bne.w	8004fcc <_dtoa_r+0x98c>
 8004aba:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004abe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f2c0 814e 	blt.w	8004d62 <_dtoa_r+0x722>
 8004ac6:	f1bb 0f0e 	cmp.w	fp, #14
 8004aca:	f300 814a 	bgt.w	8004d62 <_dtoa_r+0x722>
 8004ace:	4b6b      	ldr	r3, [pc, #428]	; (8004c7c <_dtoa_r+0x63c>)
 8004ad0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004ad4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f280 80dc 	bge.w	8004c98 <_dtoa_r+0x658>
 8004ae0:	9b04      	ldr	r3, [sp, #16]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f300 80d8 	bgt.w	8004c98 <_dtoa_r+0x658>
 8004ae8:	f040 826f 	bne.w	8004fca <_dtoa_r+0x98a>
 8004aec:	4b68      	ldr	r3, [pc, #416]	; (8004c90 <_dtoa_r+0x650>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	4640      	mov	r0, r8
 8004af2:	4649      	mov	r1, r9
 8004af4:	f7fb fd80 	bl	80005f8 <__aeabi_dmul>
 8004af8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004afc:	f7fc f802 	bl	8000b04 <__aeabi_dcmpge>
 8004b00:	9e04      	ldr	r6, [sp, #16]
 8004b02:	4637      	mov	r7, r6
 8004b04:	2800      	cmp	r0, #0
 8004b06:	f040 8245 	bne.w	8004f94 <_dtoa_r+0x954>
 8004b0a:	9d00      	ldr	r5, [sp, #0]
 8004b0c:	2331      	movs	r3, #49	; 0x31
 8004b0e:	f805 3b01 	strb.w	r3, [r5], #1
 8004b12:	f10b 0b01 	add.w	fp, fp, #1
 8004b16:	e241      	b.n	8004f9c <_dtoa_r+0x95c>
 8004b18:	07f2      	lsls	r2, r6, #31
 8004b1a:	d505      	bpl.n	8004b28 <_dtoa_r+0x4e8>
 8004b1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b20:	f7fb fd6a 	bl	80005f8 <__aeabi_dmul>
 8004b24:	3501      	adds	r5, #1
 8004b26:	2301      	movs	r3, #1
 8004b28:	1076      	asrs	r6, r6, #1
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	e773      	b.n	8004a16 <_dtoa_r+0x3d6>
 8004b2e:	2502      	movs	r5, #2
 8004b30:	e775      	b.n	8004a1e <_dtoa_r+0x3de>
 8004b32:	9e04      	ldr	r6, [sp, #16]
 8004b34:	465f      	mov	r7, fp
 8004b36:	e792      	b.n	8004a5e <_dtoa_r+0x41e>
 8004b38:	9900      	ldr	r1, [sp, #0]
 8004b3a:	4b50      	ldr	r3, [pc, #320]	; (8004c7c <_dtoa_r+0x63c>)
 8004b3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004b40:	4431      	add	r1, r6
 8004b42:	9102      	str	r1, [sp, #8]
 8004b44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b46:	eeb0 9a47 	vmov.f32	s18, s14
 8004b4a:	eef0 9a67 	vmov.f32	s19, s15
 8004b4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004b52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004b56:	2900      	cmp	r1, #0
 8004b58:	d044      	beq.n	8004be4 <_dtoa_r+0x5a4>
 8004b5a:	494e      	ldr	r1, [pc, #312]	; (8004c94 <_dtoa_r+0x654>)
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	f7fb fe75 	bl	800084c <__aeabi_ddiv>
 8004b62:	ec53 2b19 	vmov	r2, r3, d9
 8004b66:	f7fb fb8f 	bl	8000288 <__aeabi_dsub>
 8004b6a:	9d00      	ldr	r5, [sp, #0]
 8004b6c:	ec41 0b19 	vmov	d9, r0, r1
 8004b70:	4649      	mov	r1, r9
 8004b72:	4640      	mov	r0, r8
 8004b74:	f7fb fff0 	bl	8000b58 <__aeabi_d2iz>
 8004b78:	4606      	mov	r6, r0
 8004b7a:	f7fb fcd3 	bl	8000524 <__aeabi_i2d>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	460b      	mov	r3, r1
 8004b82:	4640      	mov	r0, r8
 8004b84:	4649      	mov	r1, r9
 8004b86:	f7fb fb7f 	bl	8000288 <__aeabi_dsub>
 8004b8a:	3630      	adds	r6, #48	; 0x30
 8004b8c:	f805 6b01 	strb.w	r6, [r5], #1
 8004b90:	ec53 2b19 	vmov	r2, r3, d9
 8004b94:	4680      	mov	r8, r0
 8004b96:	4689      	mov	r9, r1
 8004b98:	f7fb ffa0 	bl	8000adc <__aeabi_dcmplt>
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	d164      	bne.n	8004c6a <_dtoa_r+0x62a>
 8004ba0:	4642      	mov	r2, r8
 8004ba2:	464b      	mov	r3, r9
 8004ba4:	4937      	ldr	r1, [pc, #220]	; (8004c84 <_dtoa_r+0x644>)
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	f7fb fb6e 	bl	8000288 <__aeabi_dsub>
 8004bac:	ec53 2b19 	vmov	r2, r3, d9
 8004bb0:	f7fb ff94 	bl	8000adc <__aeabi_dcmplt>
 8004bb4:	2800      	cmp	r0, #0
 8004bb6:	f040 80b6 	bne.w	8004d26 <_dtoa_r+0x6e6>
 8004bba:	9b02      	ldr	r3, [sp, #8]
 8004bbc:	429d      	cmp	r5, r3
 8004bbe:	f43f af7c 	beq.w	8004aba <_dtoa_r+0x47a>
 8004bc2:	4b31      	ldr	r3, [pc, #196]	; (8004c88 <_dtoa_r+0x648>)
 8004bc4:	ec51 0b19 	vmov	r0, r1, d9
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f7fb fd15 	bl	80005f8 <__aeabi_dmul>
 8004bce:	4b2e      	ldr	r3, [pc, #184]	; (8004c88 <_dtoa_r+0x648>)
 8004bd0:	ec41 0b19 	vmov	d9, r0, r1
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	4640      	mov	r0, r8
 8004bd8:	4649      	mov	r1, r9
 8004bda:	f7fb fd0d 	bl	80005f8 <__aeabi_dmul>
 8004bde:	4680      	mov	r8, r0
 8004be0:	4689      	mov	r9, r1
 8004be2:	e7c5      	b.n	8004b70 <_dtoa_r+0x530>
 8004be4:	ec51 0b17 	vmov	r0, r1, d7
 8004be8:	f7fb fd06 	bl	80005f8 <__aeabi_dmul>
 8004bec:	9b02      	ldr	r3, [sp, #8]
 8004bee:	9d00      	ldr	r5, [sp, #0]
 8004bf0:	930f      	str	r3, [sp, #60]	; 0x3c
 8004bf2:	ec41 0b19 	vmov	d9, r0, r1
 8004bf6:	4649      	mov	r1, r9
 8004bf8:	4640      	mov	r0, r8
 8004bfa:	f7fb ffad 	bl	8000b58 <__aeabi_d2iz>
 8004bfe:	4606      	mov	r6, r0
 8004c00:	f7fb fc90 	bl	8000524 <__aeabi_i2d>
 8004c04:	3630      	adds	r6, #48	; 0x30
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4640      	mov	r0, r8
 8004c0c:	4649      	mov	r1, r9
 8004c0e:	f7fb fb3b 	bl	8000288 <__aeabi_dsub>
 8004c12:	f805 6b01 	strb.w	r6, [r5], #1
 8004c16:	9b02      	ldr	r3, [sp, #8]
 8004c18:	429d      	cmp	r5, r3
 8004c1a:	4680      	mov	r8, r0
 8004c1c:	4689      	mov	r9, r1
 8004c1e:	f04f 0200 	mov.w	r2, #0
 8004c22:	d124      	bne.n	8004c6e <_dtoa_r+0x62e>
 8004c24:	4b1b      	ldr	r3, [pc, #108]	; (8004c94 <_dtoa_r+0x654>)
 8004c26:	ec51 0b19 	vmov	r0, r1, d9
 8004c2a:	f7fb fb2f 	bl	800028c <__adddf3>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	4640      	mov	r0, r8
 8004c34:	4649      	mov	r1, r9
 8004c36:	f7fb ff6f 	bl	8000b18 <__aeabi_dcmpgt>
 8004c3a:	2800      	cmp	r0, #0
 8004c3c:	d173      	bne.n	8004d26 <_dtoa_r+0x6e6>
 8004c3e:	ec53 2b19 	vmov	r2, r3, d9
 8004c42:	4914      	ldr	r1, [pc, #80]	; (8004c94 <_dtoa_r+0x654>)
 8004c44:	2000      	movs	r0, #0
 8004c46:	f7fb fb1f 	bl	8000288 <__aeabi_dsub>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4640      	mov	r0, r8
 8004c50:	4649      	mov	r1, r9
 8004c52:	f7fb ff43 	bl	8000adc <__aeabi_dcmplt>
 8004c56:	2800      	cmp	r0, #0
 8004c58:	f43f af2f 	beq.w	8004aba <_dtoa_r+0x47a>
 8004c5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004c5e:	1e6b      	subs	r3, r5, #1
 8004c60:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004c66:	2b30      	cmp	r3, #48	; 0x30
 8004c68:	d0f8      	beq.n	8004c5c <_dtoa_r+0x61c>
 8004c6a:	46bb      	mov	fp, r7
 8004c6c:	e04a      	b.n	8004d04 <_dtoa_r+0x6c4>
 8004c6e:	4b06      	ldr	r3, [pc, #24]	; (8004c88 <_dtoa_r+0x648>)
 8004c70:	f7fb fcc2 	bl	80005f8 <__aeabi_dmul>
 8004c74:	4680      	mov	r8, r0
 8004c76:	4689      	mov	r9, r1
 8004c78:	e7bd      	b.n	8004bf6 <_dtoa_r+0x5b6>
 8004c7a:	bf00      	nop
 8004c7c:	08007508 	.word	0x08007508
 8004c80:	080074e0 	.word	0x080074e0
 8004c84:	3ff00000 	.word	0x3ff00000
 8004c88:	40240000 	.word	0x40240000
 8004c8c:	401c0000 	.word	0x401c0000
 8004c90:	40140000 	.word	0x40140000
 8004c94:	3fe00000 	.word	0x3fe00000
 8004c98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004c9c:	9d00      	ldr	r5, [sp, #0]
 8004c9e:	4642      	mov	r2, r8
 8004ca0:	464b      	mov	r3, r9
 8004ca2:	4630      	mov	r0, r6
 8004ca4:	4639      	mov	r1, r7
 8004ca6:	f7fb fdd1 	bl	800084c <__aeabi_ddiv>
 8004caa:	f7fb ff55 	bl	8000b58 <__aeabi_d2iz>
 8004cae:	9001      	str	r0, [sp, #4]
 8004cb0:	f7fb fc38 	bl	8000524 <__aeabi_i2d>
 8004cb4:	4642      	mov	r2, r8
 8004cb6:	464b      	mov	r3, r9
 8004cb8:	f7fb fc9e 	bl	80005f8 <__aeabi_dmul>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4630      	mov	r0, r6
 8004cc2:	4639      	mov	r1, r7
 8004cc4:	f7fb fae0 	bl	8000288 <__aeabi_dsub>
 8004cc8:	9e01      	ldr	r6, [sp, #4]
 8004cca:	9f04      	ldr	r7, [sp, #16]
 8004ccc:	3630      	adds	r6, #48	; 0x30
 8004cce:	f805 6b01 	strb.w	r6, [r5], #1
 8004cd2:	9e00      	ldr	r6, [sp, #0]
 8004cd4:	1bae      	subs	r6, r5, r6
 8004cd6:	42b7      	cmp	r7, r6
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	d134      	bne.n	8004d48 <_dtoa_r+0x708>
 8004cde:	f7fb fad5 	bl	800028c <__adddf3>
 8004ce2:	4642      	mov	r2, r8
 8004ce4:	464b      	mov	r3, r9
 8004ce6:	4606      	mov	r6, r0
 8004ce8:	460f      	mov	r7, r1
 8004cea:	f7fb ff15 	bl	8000b18 <__aeabi_dcmpgt>
 8004cee:	b9c8      	cbnz	r0, 8004d24 <_dtoa_r+0x6e4>
 8004cf0:	4642      	mov	r2, r8
 8004cf2:	464b      	mov	r3, r9
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	4639      	mov	r1, r7
 8004cf8:	f7fb fee6 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cfc:	b110      	cbz	r0, 8004d04 <_dtoa_r+0x6c4>
 8004cfe:	9b01      	ldr	r3, [sp, #4]
 8004d00:	07db      	lsls	r3, r3, #31
 8004d02:	d40f      	bmi.n	8004d24 <_dtoa_r+0x6e4>
 8004d04:	4651      	mov	r1, sl
 8004d06:	4620      	mov	r0, r4
 8004d08:	f000 fb18 	bl	800533c <_Bfree>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004d10:	702b      	strb	r3, [r5, #0]
 8004d12:	f10b 0301 	add.w	r3, fp, #1
 8004d16:	6013      	str	r3, [r2, #0]
 8004d18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f43f ace2 	beq.w	80046e4 <_dtoa_r+0xa4>
 8004d20:	601d      	str	r5, [r3, #0]
 8004d22:	e4df      	b.n	80046e4 <_dtoa_r+0xa4>
 8004d24:	465f      	mov	r7, fp
 8004d26:	462b      	mov	r3, r5
 8004d28:	461d      	mov	r5, r3
 8004d2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d2e:	2a39      	cmp	r2, #57	; 0x39
 8004d30:	d106      	bne.n	8004d40 <_dtoa_r+0x700>
 8004d32:	9a00      	ldr	r2, [sp, #0]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d1f7      	bne.n	8004d28 <_dtoa_r+0x6e8>
 8004d38:	9900      	ldr	r1, [sp, #0]
 8004d3a:	2230      	movs	r2, #48	; 0x30
 8004d3c:	3701      	adds	r7, #1
 8004d3e:	700a      	strb	r2, [r1, #0]
 8004d40:	781a      	ldrb	r2, [r3, #0]
 8004d42:	3201      	adds	r2, #1
 8004d44:	701a      	strb	r2, [r3, #0]
 8004d46:	e790      	b.n	8004c6a <_dtoa_r+0x62a>
 8004d48:	4ba3      	ldr	r3, [pc, #652]	; (8004fd8 <_dtoa_r+0x998>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f7fb fc54 	bl	80005f8 <__aeabi_dmul>
 8004d50:	2200      	movs	r2, #0
 8004d52:	2300      	movs	r3, #0
 8004d54:	4606      	mov	r6, r0
 8004d56:	460f      	mov	r7, r1
 8004d58:	f7fb feb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	d09e      	beq.n	8004c9e <_dtoa_r+0x65e>
 8004d60:	e7d0      	b.n	8004d04 <_dtoa_r+0x6c4>
 8004d62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d64:	2a00      	cmp	r2, #0
 8004d66:	f000 80ca 	beq.w	8004efe <_dtoa_r+0x8be>
 8004d6a:	9a07      	ldr	r2, [sp, #28]
 8004d6c:	2a01      	cmp	r2, #1
 8004d6e:	f300 80ad 	bgt.w	8004ecc <_dtoa_r+0x88c>
 8004d72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d74:	2a00      	cmp	r2, #0
 8004d76:	f000 80a5 	beq.w	8004ec4 <_dtoa_r+0x884>
 8004d7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004d7e:	9e08      	ldr	r6, [sp, #32]
 8004d80:	9d05      	ldr	r5, [sp, #20]
 8004d82:	9a05      	ldr	r2, [sp, #20]
 8004d84:	441a      	add	r2, r3
 8004d86:	9205      	str	r2, [sp, #20]
 8004d88:	9a06      	ldr	r2, [sp, #24]
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	441a      	add	r2, r3
 8004d8e:	4620      	mov	r0, r4
 8004d90:	9206      	str	r2, [sp, #24]
 8004d92:	f000 fb89 	bl	80054a8 <__i2b>
 8004d96:	4607      	mov	r7, r0
 8004d98:	b165      	cbz	r5, 8004db4 <_dtoa_r+0x774>
 8004d9a:	9b06      	ldr	r3, [sp, #24]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	dd09      	ble.n	8004db4 <_dtoa_r+0x774>
 8004da0:	42ab      	cmp	r3, r5
 8004da2:	9a05      	ldr	r2, [sp, #20]
 8004da4:	bfa8      	it	ge
 8004da6:	462b      	movge	r3, r5
 8004da8:	1ad2      	subs	r2, r2, r3
 8004daa:	9205      	str	r2, [sp, #20]
 8004dac:	9a06      	ldr	r2, [sp, #24]
 8004dae:	1aed      	subs	r5, r5, r3
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	9306      	str	r3, [sp, #24]
 8004db4:	9b08      	ldr	r3, [sp, #32]
 8004db6:	b1f3      	cbz	r3, 8004df6 <_dtoa_r+0x7b6>
 8004db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 80a3 	beq.w	8004f06 <_dtoa_r+0x8c6>
 8004dc0:	2e00      	cmp	r6, #0
 8004dc2:	dd10      	ble.n	8004de6 <_dtoa_r+0x7a6>
 8004dc4:	4639      	mov	r1, r7
 8004dc6:	4632      	mov	r2, r6
 8004dc8:	4620      	mov	r0, r4
 8004dca:	f000 fc2d 	bl	8005628 <__pow5mult>
 8004dce:	4652      	mov	r2, sl
 8004dd0:	4601      	mov	r1, r0
 8004dd2:	4607      	mov	r7, r0
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	f000 fb7d 	bl	80054d4 <__multiply>
 8004dda:	4651      	mov	r1, sl
 8004ddc:	4680      	mov	r8, r0
 8004dde:	4620      	mov	r0, r4
 8004de0:	f000 faac 	bl	800533c <_Bfree>
 8004de4:	46c2      	mov	sl, r8
 8004de6:	9b08      	ldr	r3, [sp, #32]
 8004de8:	1b9a      	subs	r2, r3, r6
 8004dea:	d004      	beq.n	8004df6 <_dtoa_r+0x7b6>
 8004dec:	4651      	mov	r1, sl
 8004dee:	4620      	mov	r0, r4
 8004df0:	f000 fc1a 	bl	8005628 <__pow5mult>
 8004df4:	4682      	mov	sl, r0
 8004df6:	2101      	movs	r1, #1
 8004df8:	4620      	mov	r0, r4
 8004dfa:	f000 fb55 	bl	80054a8 <__i2b>
 8004dfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	4606      	mov	r6, r0
 8004e04:	f340 8081 	ble.w	8004f0a <_dtoa_r+0x8ca>
 8004e08:	461a      	mov	r2, r3
 8004e0a:	4601      	mov	r1, r0
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	f000 fc0b 	bl	8005628 <__pow5mult>
 8004e12:	9b07      	ldr	r3, [sp, #28]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	4606      	mov	r6, r0
 8004e18:	dd7a      	ble.n	8004f10 <_dtoa_r+0x8d0>
 8004e1a:	f04f 0800 	mov.w	r8, #0
 8004e1e:	6933      	ldr	r3, [r6, #16]
 8004e20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004e24:	6918      	ldr	r0, [r3, #16]
 8004e26:	f000 faf1 	bl	800540c <__hi0bits>
 8004e2a:	f1c0 0020 	rsb	r0, r0, #32
 8004e2e:	9b06      	ldr	r3, [sp, #24]
 8004e30:	4418      	add	r0, r3
 8004e32:	f010 001f 	ands.w	r0, r0, #31
 8004e36:	f000 8094 	beq.w	8004f62 <_dtoa_r+0x922>
 8004e3a:	f1c0 0320 	rsb	r3, r0, #32
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	f340 8085 	ble.w	8004f4e <_dtoa_r+0x90e>
 8004e44:	9b05      	ldr	r3, [sp, #20]
 8004e46:	f1c0 001c 	rsb	r0, r0, #28
 8004e4a:	4403      	add	r3, r0
 8004e4c:	9305      	str	r3, [sp, #20]
 8004e4e:	9b06      	ldr	r3, [sp, #24]
 8004e50:	4403      	add	r3, r0
 8004e52:	4405      	add	r5, r0
 8004e54:	9306      	str	r3, [sp, #24]
 8004e56:	9b05      	ldr	r3, [sp, #20]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	dd05      	ble.n	8004e68 <_dtoa_r+0x828>
 8004e5c:	4651      	mov	r1, sl
 8004e5e:	461a      	mov	r2, r3
 8004e60:	4620      	mov	r0, r4
 8004e62:	f000 fc3b 	bl	80056dc <__lshift>
 8004e66:	4682      	mov	sl, r0
 8004e68:	9b06      	ldr	r3, [sp, #24]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	dd05      	ble.n	8004e7a <_dtoa_r+0x83a>
 8004e6e:	4631      	mov	r1, r6
 8004e70:	461a      	mov	r2, r3
 8004e72:	4620      	mov	r0, r4
 8004e74:	f000 fc32 	bl	80056dc <__lshift>
 8004e78:	4606      	mov	r6, r0
 8004e7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d072      	beq.n	8004f66 <_dtoa_r+0x926>
 8004e80:	4631      	mov	r1, r6
 8004e82:	4650      	mov	r0, sl
 8004e84:	f000 fc96 	bl	80057b4 <__mcmp>
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	da6c      	bge.n	8004f66 <_dtoa_r+0x926>
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	4651      	mov	r1, sl
 8004e90:	220a      	movs	r2, #10
 8004e92:	4620      	mov	r0, r4
 8004e94:	f000 fa74 	bl	8005380 <__multadd>
 8004e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004e9e:	4682      	mov	sl, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 81b0 	beq.w	8005206 <_dtoa_r+0xbc6>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	4639      	mov	r1, r7
 8004eaa:	220a      	movs	r2, #10
 8004eac:	4620      	mov	r0, r4
 8004eae:	f000 fa67 	bl	8005380 <__multadd>
 8004eb2:	9b01      	ldr	r3, [sp, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	4607      	mov	r7, r0
 8004eb8:	f300 8096 	bgt.w	8004fe8 <_dtoa_r+0x9a8>
 8004ebc:	9b07      	ldr	r3, [sp, #28]
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	dc59      	bgt.n	8004f76 <_dtoa_r+0x936>
 8004ec2:	e091      	b.n	8004fe8 <_dtoa_r+0x9a8>
 8004ec4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004ec6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004eca:	e758      	b.n	8004d7e <_dtoa_r+0x73e>
 8004ecc:	9b04      	ldr	r3, [sp, #16]
 8004ece:	1e5e      	subs	r6, r3, #1
 8004ed0:	9b08      	ldr	r3, [sp, #32]
 8004ed2:	42b3      	cmp	r3, r6
 8004ed4:	bfbf      	itttt	lt
 8004ed6:	9b08      	ldrlt	r3, [sp, #32]
 8004ed8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8004eda:	9608      	strlt	r6, [sp, #32]
 8004edc:	1af3      	sublt	r3, r6, r3
 8004ede:	bfb4      	ite	lt
 8004ee0:	18d2      	addlt	r2, r2, r3
 8004ee2:	1b9e      	subge	r6, r3, r6
 8004ee4:	9b04      	ldr	r3, [sp, #16]
 8004ee6:	bfbc      	itt	lt
 8004ee8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8004eea:	2600      	movlt	r6, #0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	bfb7      	itett	lt
 8004ef0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8004ef4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8004ef8:	1a9d      	sublt	r5, r3, r2
 8004efa:	2300      	movlt	r3, #0
 8004efc:	e741      	b.n	8004d82 <_dtoa_r+0x742>
 8004efe:	9e08      	ldr	r6, [sp, #32]
 8004f00:	9d05      	ldr	r5, [sp, #20]
 8004f02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004f04:	e748      	b.n	8004d98 <_dtoa_r+0x758>
 8004f06:	9a08      	ldr	r2, [sp, #32]
 8004f08:	e770      	b.n	8004dec <_dtoa_r+0x7ac>
 8004f0a:	9b07      	ldr	r3, [sp, #28]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	dc19      	bgt.n	8004f44 <_dtoa_r+0x904>
 8004f10:	9b02      	ldr	r3, [sp, #8]
 8004f12:	b9bb      	cbnz	r3, 8004f44 <_dtoa_r+0x904>
 8004f14:	9b03      	ldr	r3, [sp, #12]
 8004f16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f1a:	b99b      	cbnz	r3, 8004f44 <_dtoa_r+0x904>
 8004f1c:	9b03      	ldr	r3, [sp, #12]
 8004f1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f22:	0d1b      	lsrs	r3, r3, #20
 8004f24:	051b      	lsls	r3, r3, #20
 8004f26:	b183      	cbz	r3, 8004f4a <_dtoa_r+0x90a>
 8004f28:	9b05      	ldr	r3, [sp, #20]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	9305      	str	r3, [sp, #20]
 8004f2e:	9b06      	ldr	r3, [sp, #24]
 8004f30:	3301      	adds	r3, #1
 8004f32:	9306      	str	r3, [sp, #24]
 8004f34:	f04f 0801 	mov.w	r8, #1
 8004f38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f47f af6f 	bne.w	8004e1e <_dtoa_r+0x7de>
 8004f40:	2001      	movs	r0, #1
 8004f42:	e774      	b.n	8004e2e <_dtoa_r+0x7ee>
 8004f44:	f04f 0800 	mov.w	r8, #0
 8004f48:	e7f6      	b.n	8004f38 <_dtoa_r+0x8f8>
 8004f4a:	4698      	mov	r8, r3
 8004f4c:	e7f4      	b.n	8004f38 <_dtoa_r+0x8f8>
 8004f4e:	d082      	beq.n	8004e56 <_dtoa_r+0x816>
 8004f50:	9a05      	ldr	r2, [sp, #20]
 8004f52:	331c      	adds	r3, #28
 8004f54:	441a      	add	r2, r3
 8004f56:	9205      	str	r2, [sp, #20]
 8004f58:	9a06      	ldr	r2, [sp, #24]
 8004f5a:	441a      	add	r2, r3
 8004f5c:	441d      	add	r5, r3
 8004f5e:	9206      	str	r2, [sp, #24]
 8004f60:	e779      	b.n	8004e56 <_dtoa_r+0x816>
 8004f62:	4603      	mov	r3, r0
 8004f64:	e7f4      	b.n	8004f50 <_dtoa_r+0x910>
 8004f66:	9b04      	ldr	r3, [sp, #16]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	dc37      	bgt.n	8004fdc <_dtoa_r+0x99c>
 8004f6c:	9b07      	ldr	r3, [sp, #28]
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	dd34      	ble.n	8004fdc <_dtoa_r+0x99c>
 8004f72:	9b04      	ldr	r3, [sp, #16]
 8004f74:	9301      	str	r3, [sp, #4]
 8004f76:	9b01      	ldr	r3, [sp, #4]
 8004f78:	b963      	cbnz	r3, 8004f94 <_dtoa_r+0x954>
 8004f7a:	4631      	mov	r1, r6
 8004f7c:	2205      	movs	r2, #5
 8004f7e:	4620      	mov	r0, r4
 8004f80:	f000 f9fe 	bl	8005380 <__multadd>
 8004f84:	4601      	mov	r1, r0
 8004f86:	4606      	mov	r6, r0
 8004f88:	4650      	mov	r0, sl
 8004f8a:	f000 fc13 	bl	80057b4 <__mcmp>
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	f73f adbb 	bgt.w	8004b0a <_dtoa_r+0x4ca>
 8004f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f96:	9d00      	ldr	r5, [sp, #0]
 8004f98:	ea6f 0b03 	mvn.w	fp, r3
 8004f9c:	f04f 0800 	mov.w	r8, #0
 8004fa0:	4631      	mov	r1, r6
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	f000 f9ca 	bl	800533c <_Bfree>
 8004fa8:	2f00      	cmp	r7, #0
 8004faa:	f43f aeab 	beq.w	8004d04 <_dtoa_r+0x6c4>
 8004fae:	f1b8 0f00 	cmp.w	r8, #0
 8004fb2:	d005      	beq.n	8004fc0 <_dtoa_r+0x980>
 8004fb4:	45b8      	cmp	r8, r7
 8004fb6:	d003      	beq.n	8004fc0 <_dtoa_r+0x980>
 8004fb8:	4641      	mov	r1, r8
 8004fba:	4620      	mov	r0, r4
 8004fbc:	f000 f9be 	bl	800533c <_Bfree>
 8004fc0:	4639      	mov	r1, r7
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f000 f9ba 	bl	800533c <_Bfree>
 8004fc8:	e69c      	b.n	8004d04 <_dtoa_r+0x6c4>
 8004fca:	2600      	movs	r6, #0
 8004fcc:	4637      	mov	r7, r6
 8004fce:	e7e1      	b.n	8004f94 <_dtoa_r+0x954>
 8004fd0:	46bb      	mov	fp, r7
 8004fd2:	4637      	mov	r7, r6
 8004fd4:	e599      	b.n	8004b0a <_dtoa_r+0x4ca>
 8004fd6:	bf00      	nop
 8004fd8:	40240000 	.word	0x40240000
 8004fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 80c8 	beq.w	8005174 <_dtoa_r+0xb34>
 8004fe4:	9b04      	ldr	r3, [sp, #16]
 8004fe6:	9301      	str	r3, [sp, #4]
 8004fe8:	2d00      	cmp	r5, #0
 8004fea:	dd05      	ble.n	8004ff8 <_dtoa_r+0x9b8>
 8004fec:	4639      	mov	r1, r7
 8004fee:	462a      	mov	r2, r5
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	f000 fb73 	bl	80056dc <__lshift>
 8004ff6:	4607      	mov	r7, r0
 8004ff8:	f1b8 0f00 	cmp.w	r8, #0
 8004ffc:	d05b      	beq.n	80050b6 <_dtoa_r+0xa76>
 8004ffe:	6879      	ldr	r1, [r7, #4]
 8005000:	4620      	mov	r0, r4
 8005002:	f000 f95b 	bl	80052bc <_Balloc>
 8005006:	4605      	mov	r5, r0
 8005008:	b928      	cbnz	r0, 8005016 <_dtoa_r+0x9d6>
 800500a:	4b83      	ldr	r3, [pc, #524]	; (8005218 <_dtoa_r+0xbd8>)
 800500c:	4602      	mov	r2, r0
 800500e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005012:	f7ff bb2e 	b.w	8004672 <_dtoa_r+0x32>
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	3202      	adds	r2, #2
 800501a:	0092      	lsls	r2, r2, #2
 800501c:	f107 010c 	add.w	r1, r7, #12
 8005020:	300c      	adds	r0, #12
 8005022:	f000 fee7 	bl	8005df4 <memcpy>
 8005026:	2201      	movs	r2, #1
 8005028:	4629      	mov	r1, r5
 800502a:	4620      	mov	r0, r4
 800502c:	f000 fb56 	bl	80056dc <__lshift>
 8005030:	9b00      	ldr	r3, [sp, #0]
 8005032:	3301      	adds	r3, #1
 8005034:	9304      	str	r3, [sp, #16]
 8005036:	e9dd 2300 	ldrd	r2, r3, [sp]
 800503a:	4413      	add	r3, r2
 800503c:	9308      	str	r3, [sp, #32]
 800503e:	9b02      	ldr	r3, [sp, #8]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	46b8      	mov	r8, r7
 8005046:	9306      	str	r3, [sp, #24]
 8005048:	4607      	mov	r7, r0
 800504a:	9b04      	ldr	r3, [sp, #16]
 800504c:	4631      	mov	r1, r6
 800504e:	3b01      	subs	r3, #1
 8005050:	4650      	mov	r0, sl
 8005052:	9301      	str	r3, [sp, #4]
 8005054:	f7ff fa69 	bl	800452a <quorem>
 8005058:	4641      	mov	r1, r8
 800505a:	9002      	str	r0, [sp, #8]
 800505c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005060:	4650      	mov	r0, sl
 8005062:	f000 fba7 	bl	80057b4 <__mcmp>
 8005066:	463a      	mov	r2, r7
 8005068:	9005      	str	r0, [sp, #20]
 800506a:	4631      	mov	r1, r6
 800506c:	4620      	mov	r0, r4
 800506e:	f000 fbbd 	bl	80057ec <__mdiff>
 8005072:	68c2      	ldr	r2, [r0, #12]
 8005074:	4605      	mov	r5, r0
 8005076:	bb02      	cbnz	r2, 80050ba <_dtoa_r+0xa7a>
 8005078:	4601      	mov	r1, r0
 800507a:	4650      	mov	r0, sl
 800507c:	f000 fb9a 	bl	80057b4 <__mcmp>
 8005080:	4602      	mov	r2, r0
 8005082:	4629      	mov	r1, r5
 8005084:	4620      	mov	r0, r4
 8005086:	9209      	str	r2, [sp, #36]	; 0x24
 8005088:	f000 f958 	bl	800533c <_Bfree>
 800508c:	9b07      	ldr	r3, [sp, #28]
 800508e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005090:	9d04      	ldr	r5, [sp, #16]
 8005092:	ea43 0102 	orr.w	r1, r3, r2
 8005096:	9b06      	ldr	r3, [sp, #24]
 8005098:	4319      	orrs	r1, r3
 800509a:	d110      	bne.n	80050be <_dtoa_r+0xa7e>
 800509c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80050a0:	d029      	beq.n	80050f6 <_dtoa_r+0xab6>
 80050a2:	9b05      	ldr	r3, [sp, #20]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	dd02      	ble.n	80050ae <_dtoa_r+0xa6e>
 80050a8:	9b02      	ldr	r3, [sp, #8]
 80050aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80050ae:	9b01      	ldr	r3, [sp, #4]
 80050b0:	f883 9000 	strb.w	r9, [r3]
 80050b4:	e774      	b.n	8004fa0 <_dtoa_r+0x960>
 80050b6:	4638      	mov	r0, r7
 80050b8:	e7ba      	b.n	8005030 <_dtoa_r+0x9f0>
 80050ba:	2201      	movs	r2, #1
 80050bc:	e7e1      	b.n	8005082 <_dtoa_r+0xa42>
 80050be:	9b05      	ldr	r3, [sp, #20]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	db04      	blt.n	80050ce <_dtoa_r+0xa8e>
 80050c4:	9907      	ldr	r1, [sp, #28]
 80050c6:	430b      	orrs	r3, r1
 80050c8:	9906      	ldr	r1, [sp, #24]
 80050ca:	430b      	orrs	r3, r1
 80050cc:	d120      	bne.n	8005110 <_dtoa_r+0xad0>
 80050ce:	2a00      	cmp	r2, #0
 80050d0:	dded      	ble.n	80050ae <_dtoa_r+0xa6e>
 80050d2:	4651      	mov	r1, sl
 80050d4:	2201      	movs	r2, #1
 80050d6:	4620      	mov	r0, r4
 80050d8:	f000 fb00 	bl	80056dc <__lshift>
 80050dc:	4631      	mov	r1, r6
 80050de:	4682      	mov	sl, r0
 80050e0:	f000 fb68 	bl	80057b4 <__mcmp>
 80050e4:	2800      	cmp	r0, #0
 80050e6:	dc03      	bgt.n	80050f0 <_dtoa_r+0xab0>
 80050e8:	d1e1      	bne.n	80050ae <_dtoa_r+0xa6e>
 80050ea:	f019 0f01 	tst.w	r9, #1
 80050ee:	d0de      	beq.n	80050ae <_dtoa_r+0xa6e>
 80050f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80050f4:	d1d8      	bne.n	80050a8 <_dtoa_r+0xa68>
 80050f6:	9a01      	ldr	r2, [sp, #4]
 80050f8:	2339      	movs	r3, #57	; 0x39
 80050fa:	7013      	strb	r3, [r2, #0]
 80050fc:	462b      	mov	r3, r5
 80050fe:	461d      	mov	r5, r3
 8005100:	3b01      	subs	r3, #1
 8005102:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005106:	2a39      	cmp	r2, #57	; 0x39
 8005108:	d06c      	beq.n	80051e4 <_dtoa_r+0xba4>
 800510a:	3201      	adds	r2, #1
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	e747      	b.n	8004fa0 <_dtoa_r+0x960>
 8005110:	2a00      	cmp	r2, #0
 8005112:	dd07      	ble.n	8005124 <_dtoa_r+0xae4>
 8005114:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005118:	d0ed      	beq.n	80050f6 <_dtoa_r+0xab6>
 800511a:	9a01      	ldr	r2, [sp, #4]
 800511c:	f109 0301 	add.w	r3, r9, #1
 8005120:	7013      	strb	r3, [r2, #0]
 8005122:	e73d      	b.n	8004fa0 <_dtoa_r+0x960>
 8005124:	9b04      	ldr	r3, [sp, #16]
 8005126:	9a08      	ldr	r2, [sp, #32]
 8005128:	f803 9c01 	strb.w	r9, [r3, #-1]
 800512c:	4293      	cmp	r3, r2
 800512e:	d043      	beq.n	80051b8 <_dtoa_r+0xb78>
 8005130:	4651      	mov	r1, sl
 8005132:	2300      	movs	r3, #0
 8005134:	220a      	movs	r2, #10
 8005136:	4620      	mov	r0, r4
 8005138:	f000 f922 	bl	8005380 <__multadd>
 800513c:	45b8      	cmp	r8, r7
 800513e:	4682      	mov	sl, r0
 8005140:	f04f 0300 	mov.w	r3, #0
 8005144:	f04f 020a 	mov.w	r2, #10
 8005148:	4641      	mov	r1, r8
 800514a:	4620      	mov	r0, r4
 800514c:	d107      	bne.n	800515e <_dtoa_r+0xb1e>
 800514e:	f000 f917 	bl	8005380 <__multadd>
 8005152:	4680      	mov	r8, r0
 8005154:	4607      	mov	r7, r0
 8005156:	9b04      	ldr	r3, [sp, #16]
 8005158:	3301      	adds	r3, #1
 800515a:	9304      	str	r3, [sp, #16]
 800515c:	e775      	b.n	800504a <_dtoa_r+0xa0a>
 800515e:	f000 f90f 	bl	8005380 <__multadd>
 8005162:	4639      	mov	r1, r7
 8005164:	4680      	mov	r8, r0
 8005166:	2300      	movs	r3, #0
 8005168:	220a      	movs	r2, #10
 800516a:	4620      	mov	r0, r4
 800516c:	f000 f908 	bl	8005380 <__multadd>
 8005170:	4607      	mov	r7, r0
 8005172:	e7f0      	b.n	8005156 <_dtoa_r+0xb16>
 8005174:	9b04      	ldr	r3, [sp, #16]
 8005176:	9301      	str	r3, [sp, #4]
 8005178:	9d00      	ldr	r5, [sp, #0]
 800517a:	4631      	mov	r1, r6
 800517c:	4650      	mov	r0, sl
 800517e:	f7ff f9d4 	bl	800452a <quorem>
 8005182:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005186:	9b00      	ldr	r3, [sp, #0]
 8005188:	f805 9b01 	strb.w	r9, [r5], #1
 800518c:	1aea      	subs	r2, r5, r3
 800518e:	9b01      	ldr	r3, [sp, #4]
 8005190:	4293      	cmp	r3, r2
 8005192:	dd07      	ble.n	80051a4 <_dtoa_r+0xb64>
 8005194:	4651      	mov	r1, sl
 8005196:	2300      	movs	r3, #0
 8005198:	220a      	movs	r2, #10
 800519a:	4620      	mov	r0, r4
 800519c:	f000 f8f0 	bl	8005380 <__multadd>
 80051a0:	4682      	mov	sl, r0
 80051a2:	e7ea      	b.n	800517a <_dtoa_r+0xb3a>
 80051a4:	9b01      	ldr	r3, [sp, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	bfc8      	it	gt
 80051aa:	461d      	movgt	r5, r3
 80051ac:	9b00      	ldr	r3, [sp, #0]
 80051ae:	bfd8      	it	le
 80051b0:	2501      	movle	r5, #1
 80051b2:	441d      	add	r5, r3
 80051b4:	f04f 0800 	mov.w	r8, #0
 80051b8:	4651      	mov	r1, sl
 80051ba:	2201      	movs	r2, #1
 80051bc:	4620      	mov	r0, r4
 80051be:	f000 fa8d 	bl	80056dc <__lshift>
 80051c2:	4631      	mov	r1, r6
 80051c4:	4682      	mov	sl, r0
 80051c6:	f000 faf5 	bl	80057b4 <__mcmp>
 80051ca:	2800      	cmp	r0, #0
 80051cc:	dc96      	bgt.n	80050fc <_dtoa_r+0xabc>
 80051ce:	d102      	bne.n	80051d6 <_dtoa_r+0xb96>
 80051d0:	f019 0f01 	tst.w	r9, #1
 80051d4:	d192      	bne.n	80050fc <_dtoa_r+0xabc>
 80051d6:	462b      	mov	r3, r5
 80051d8:	461d      	mov	r5, r3
 80051da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051de:	2a30      	cmp	r2, #48	; 0x30
 80051e0:	d0fa      	beq.n	80051d8 <_dtoa_r+0xb98>
 80051e2:	e6dd      	b.n	8004fa0 <_dtoa_r+0x960>
 80051e4:	9a00      	ldr	r2, [sp, #0]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d189      	bne.n	80050fe <_dtoa_r+0xabe>
 80051ea:	f10b 0b01 	add.w	fp, fp, #1
 80051ee:	2331      	movs	r3, #49	; 0x31
 80051f0:	e796      	b.n	8005120 <_dtoa_r+0xae0>
 80051f2:	4b0a      	ldr	r3, [pc, #40]	; (800521c <_dtoa_r+0xbdc>)
 80051f4:	f7ff ba99 	b.w	800472a <_dtoa_r+0xea>
 80051f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f47f aa6d 	bne.w	80046da <_dtoa_r+0x9a>
 8005200:	4b07      	ldr	r3, [pc, #28]	; (8005220 <_dtoa_r+0xbe0>)
 8005202:	f7ff ba92 	b.w	800472a <_dtoa_r+0xea>
 8005206:	9b01      	ldr	r3, [sp, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	dcb5      	bgt.n	8005178 <_dtoa_r+0xb38>
 800520c:	9b07      	ldr	r3, [sp, #28]
 800520e:	2b02      	cmp	r3, #2
 8005210:	f73f aeb1 	bgt.w	8004f76 <_dtoa_r+0x936>
 8005214:	e7b0      	b.n	8005178 <_dtoa_r+0xb38>
 8005216:	bf00      	nop
 8005218:	0800746f 	.word	0x0800746f
 800521c:	080073cf 	.word	0x080073cf
 8005220:	080073f3 	.word	0x080073f3

08005224 <_free_r>:
 8005224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005226:	2900      	cmp	r1, #0
 8005228:	d044      	beq.n	80052b4 <_free_r+0x90>
 800522a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800522e:	9001      	str	r0, [sp, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	f1a1 0404 	sub.w	r4, r1, #4
 8005236:	bfb8      	it	lt
 8005238:	18e4      	addlt	r4, r4, r3
 800523a:	f7fe fb4f 	bl	80038dc <__malloc_lock>
 800523e:	4a1e      	ldr	r2, [pc, #120]	; (80052b8 <_free_r+0x94>)
 8005240:	9801      	ldr	r0, [sp, #4]
 8005242:	6813      	ldr	r3, [r2, #0]
 8005244:	b933      	cbnz	r3, 8005254 <_free_r+0x30>
 8005246:	6063      	str	r3, [r4, #4]
 8005248:	6014      	str	r4, [r2, #0]
 800524a:	b003      	add	sp, #12
 800524c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005250:	f7fe bb4a 	b.w	80038e8 <__malloc_unlock>
 8005254:	42a3      	cmp	r3, r4
 8005256:	d908      	bls.n	800526a <_free_r+0x46>
 8005258:	6825      	ldr	r5, [r4, #0]
 800525a:	1961      	adds	r1, r4, r5
 800525c:	428b      	cmp	r3, r1
 800525e:	bf01      	itttt	eq
 8005260:	6819      	ldreq	r1, [r3, #0]
 8005262:	685b      	ldreq	r3, [r3, #4]
 8005264:	1949      	addeq	r1, r1, r5
 8005266:	6021      	streq	r1, [r4, #0]
 8005268:	e7ed      	b.n	8005246 <_free_r+0x22>
 800526a:	461a      	mov	r2, r3
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	b10b      	cbz	r3, 8005274 <_free_r+0x50>
 8005270:	42a3      	cmp	r3, r4
 8005272:	d9fa      	bls.n	800526a <_free_r+0x46>
 8005274:	6811      	ldr	r1, [r2, #0]
 8005276:	1855      	adds	r5, r2, r1
 8005278:	42a5      	cmp	r5, r4
 800527a:	d10b      	bne.n	8005294 <_free_r+0x70>
 800527c:	6824      	ldr	r4, [r4, #0]
 800527e:	4421      	add	r1, r4
 8005280:	1854      	adds	r4, r2, r1
 8005282:	42a3      	cmp	r3, r4
 8005284:	6011      	str	r1, [r2, #0]
 8005286:	d1e0      	bne.n	800524a <_free_r+0x26>
 8005288:	681c      	ldr	r4, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	6053      	str	r3, [r2, #4]
 800528e:	440c      	add	r4, r1
 8005290:	6014      	str	r4, [r2, #0]
 8005292:	e7da      	b.n	800524a <_free_r+0x26>
 8005294:	d902      	bls.n	800529c <_free_r+0x78>
 8005296:	230c      	movs	r3, #12
 8005298:	6003      	str	r3, [r0, #0]
 800529a:	e7d6      	b.n	800524a <_free_r+0x26>
 800529c:	6825      	ldr	r5, [r4, #0]
 800529e:	1961      	adds	r1, r4, r5
 80052a0:	428b      	cmp	r3, r1
 80052a2:	bf04      	itt	eq
 80052a4:	6819      	ldreq	r1, [r3, #0]
 80052a6:	685b      	ldreq	r3, [r3, #4]
 80052a8:	6063      	str	r3, [r4, #4]
 80052aa:	bf04      	itt	eq
 80052ac:	1949      	addeq	r1, r1, r5
 80052ae:	6021      	streq	r1, [r4, #0]
 80052b0:	6054      	str	r4, [r2, #4]
 80052b2:	e7ca      	b.n	800524a <_free_r+0x26>
 80052b4:	b003      	add	sp, #12
 80052b6:	bd30      	pop	{r4, r5, pc}
 80052b8:	20000374 	.word	0x20000374

080052bc <_Balloc>:
 80052bc:	b570      	push	{r4, r5, r6, lr}
 80052be:	69c6      	ldr	r6, [r0, #28]
 80052c0:	4604      	mov	r4, r0
 80052c2:	460d      	mov	r5, r1
 80052c4:	b976      	cbnz	r6, 80052e4 <_Balloc+0x28>
 80052c6:	2010      	movs	r0, #16
 80052c8:	f7fe fa58 	bl	800377c <malloc>
 80052cc:	4602      	mov	r2, r0
 80052ce:	61e0      	str	r0, [r4, #28]
 80052d0:	b920      	cbnz	r0, 80052dc <_Balloc+0x20>
 80052d2:	4b18      	ldr	r3, [pc, #96]	; (8005334 <_Balloc+0x78>)
 80052d4:	4818      	ldr	r0, [pc, #96]	; (8005338 <_Balloc+0x7c>)
 80052d6:	216b      	movs	r1, #107	; 0x6b
 80052d8:	f000 fd9a 	bl	8005e10 <__assert_func>
 80052dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80052e0:	6006      	str	r6, [r0, #0]
 80052e2:	60c6      	str	r6, [r0, #12]
 80052e4:	69e6      	ldr	r6, [r4, #28]
 80052e6:	68f3      	ldr	r3, [r6, #12]
 80052e8:	b183      	cbz	r3, 800530c <_Balloc+0x50>
 80052ea:	69e3      	ldr	r3, [r4, #28]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80052f2:	b9b8      	cbnz	r0, 8005324 <_Balloc+0x68>
 80052f4:	2101      	movs	r1, #1
 80052f6:	fa01 f605 	lsl.w	r6, r1, r5
 80052fa:	1d72      	adds	r2, r6, #5
 80052fc:	0092      	lsls	r2, r2, #2
 80052fe:	4620      	mov	r0, r4
 8005300:	f000 fda4 	bl	8005e4c <_calloc_r>
 8005304:	b160      	cbz	r0, 8005320 <_Balloc+0x64>
 8005306:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800530a:	e00e      	b.n	800532a <_Balloc+0x6e>
 800530c:	2221      	movs	r2, #33	; 0x21
 800530e:	2104      	movs	r1, #4
 8005310:	4620      	mov	r0, r4
 8005312:	f000 fd9b 	bl	8005e4c <_calloc_r>
 8005316:	69e3      	ldr	r3, [r4, #28]
 8005318:	60f0      	str	r0, [r6, #12]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1e4      	bne.n	80052ea <_Balloc+0x2e>
 8005320:	2000      	movs	r0, #0
 8005322:	bd70      	pop	{r4, r5, r6, pc}
 8005324:	6802      	ldr	r2, [r0, #0]
 8005326:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800532a:	2300      	movs	r3, #0
 800532c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005330:	e7f7      	b.n	8005322 <_Balloc+0x66>
 8005332:	bf00      	nop
 8005334:	08007400 	.word	0x08007400
 8005338:	08007480 	.word	0x08007480

0800533c <_Bfree>:
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	69c6      	ldr	r6, [r0, #28]
 8005340:	4605      	mov	r5, r0
 8005342:	460c      	mov	r4, r1
 8005344:	b976      	cbnz	r6, 8005364 <_Bfree+0x28>
 8005346:	2010      	movs	r0, #16
 8005348:	f7fe fa18 	bl	800377c <malloc>
 800534c:	4602      	mov	r2, r0
 800534e:	61e8      	str	r0, [r5, #28]
 8005350:	b920      	cbnz	r0, 800535c <_Bfree+0x20>
 8005352:	4b09      	ldr	r3, [pc, #36]	; (8005378 <_Bfree+0x3c>)
 8005354:	4809      	ldr	r0, [pc, #36]	; (800537c <_Bfree+0x40>)
 8005356:	218f      	movs	r1, #143	; 0x8f
 8005358:	f000 fd5a 	bl	8005e10 <__assert_func>
 800535c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005360:	6006      	str	r6, [r0, #0]
 8005362:	60c6      	str	r6, [r0, #12]
 8005364:	b13c      	cbz	r4, 8005376 <_Bfree+0x3a>
 8005366:	69eb      	ldr	r3, [r5, #28]
 8005368:	6862      	ldr	r2, [r4, #4]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005370:	6021      	str	r1, [r4, #0]
 8005372:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005376:	bd70      	pop	{r4, r5, r6, pc}
 8005378:	08007400 	.word	0x08007400
 800537c:	08007480 	.word	0x08007480

08005380 <__multadd>:
 8005380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005384:	690d      	ldr	r5, [r1, #16]
 8005386:	4607      	mov	r7, r0
 8005388:	460c      	mov	r4, r1
 800538a:	461e      	mov	r6, r3
 800538c:	f101 0c14 	add.w	ip, r1, #20
 8005390:	2000      	movs	r0, #0
 8005392:	f8dc 3000 	ldr.w	r3, [ip]
 8005396:	b299      	uxth	r1, r3
 8005398:	fb02 6101 	mla	r1, r2, r1, r6
 800539c:	0c1e      	lsrs	r6, r3, #16
 800539e:	0c0b      	lsrs	r3, r1, #16
 80053a0:	fb02 3306 	mla	r3, r2, r6, r3
 80053a4:	b289      	uxth	r1, r1
 80053a6:	3001      	adds	r0, #1
 80053a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80053ac:	4285      	cmp	r5, r0
 80053ae:	f84c 1b04 	str.w	r1, [ip], #4
 80053b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80053b6:	dcec      	bgt.n	8005392 <__multadd+0x12>
 80053b8:	b30e      	cbz	r6, 80053fe <__multadd+0x7e>
 80053ba:	68a3      	ldr	r3, [r4, #8]
 80053bc:	42ab      	cmp	r3, r5
 80053be:	dc19      	bgt.n	80053f4 <__multadd+0x74>
 80053c0:	6861      	ldr	r1, [r4, #4]
 80053c2:	4638      	mov	r0, r7
 80053c4:	3101      	adds	r1, #1
 80053c6:	f7ff ff79 	bl	80052bc <_Balloc>
 80053ca:	4680      	mov	r8, r0
 80053cc:	b928      	cbnz	r0, 80053da <__multadd+0x5a>
 80053ce:	4602      	mov	r2, r0
 80053d0:	4b0c      	ldr	r3, [pc, #48]	; (8005404 <__multadd+0x84>)
 80053d2:	480d      	ldr	r0, [pc, #52]	; (8005408 <__multadd+0x88>)
 80053d4:	21ba      	movs	r1, #186	; 0xba
 80053d6:	f000 fd1b 	bl	8005e10 <__assert_func>
 80053da:	6922      	ldr	r2, [r4, #16]
 80053dc:	3202      	adds	r2, #2
 80053de:	f104 010c 	add.w	r1, r4, #12
 80053e2:	0092      	lsls	r2, r2, #2
 80053e4:	300c      	adds	r0, #12
 80053e6:	f000 fd05 	bl	8005df4 <memcpy>
 80053ea:	4621      	mov	r1, r4
 80053ec:	4638      	mov	r0, r7
 80053ee:	f7ff ffa5 	bl	800533c <_Bfree>
 80053f2:	4644      	mov	r4, r8
 80053f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80053f8:	3501      	adds	r5, #1
 80053fa:	615e      	str	r6, [r3, #20]
 80053fc:	6125      	str	r5, [r4, #16]
 80053fe:	4620      	mov	r0, r4
 8005400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005404:	0800746f 	.word	0x0800746f
 8005408:	08007480 	.word	0x08007480

0800540c <__hi0bits>:
 800540c:	0c03      	lsrs	r3, r0, #16
 800540e:	041b      	lsls	r3, r3, #16
 8005410:	b9d3      	cbnz	r3, 8005448 <__hi0bits+0x3c>
 8005412:	0400      	lsls	r0, r0, #16
 8005414:	2310      	movs	r3, #16
 8005416:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800541a:	bf04      	itt	eq
 800541c:	0200      	lsleq	r0, r0, #8
 800541e:	3308      	addeq	r3, #8
 8005420:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005424:	bf04      	itt	eq
 8005426:	0100      	lsleq	r0, r0, #4
 8005428:	3304      	addeq	r3, #4
 800542a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800542e:	bf04      	itt	eq
 8005430:	0080      	lsleq	r0, r0, #2
 8005432:	3302      	addeq	r3, #2
 8005434:	2800      	cmp	r0, #0
 8005436:	db05      	blt.n	8005444 <__hi0bits+0x38>
 8005438:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800543c:	f103 0301 	add.w	r3, r3, #1
 8005440:	bf08      	it	eq
 8005442:	2320      	moveq	r3, #32
 8005444:	4618      	mov	r0, r3
 8005446:	4770      	bx	lr
 8005448:	2300      	movs	r3, #0
 800544a:	e7e4      	b.n	8005416 <__hi0bits+0xa>

0800544c <__lo0bits>:
 800544c:	6803      	ldr	r3, [r0, #0]
 800544e:	f013 0207 	ands.w	r2, r3, #7
 8005452:	d00c      	beq.n	800546e <__lo0bits+0x22>
 8005454:	07d9      	lsls	r1, r3, #31
 8005456:	d422      	bmi.n	800549e <__lo0bits+0x52>
 8005458:	079a      	lsls	r2, r3, #30
 800545a:	bf49      	itett	mi
 800545c:	085b      	lsrmi	r3, r3, #1
 800545e:	089b      	lsrpl	r3, r3, #2
 8005460:	6003      	strmi	r3, [r0, #0]
 8005462:	2201      	movmi	r2, #1
 8005464:	bf5c      	itt	pl
 8005466:	6003      	strpl	r3, [r0, #0]
 8005468:	2202      	movpl	r2, #2
 800546a:	4610      	mov	r0, r2
 800546c:	4770      	bx	lr
 800546e:	b299      	uxth	r1, r3
 8005470:	b909      	cbnz	r1, 8005476 <__lo0bits+0x2a>
 8005472:	0c1b      	lsrs	r3, r3, #16
 8005474:	2210      	movs	r2, #16
 8005476:	b2d9      	uxtb	r1, r3
 8005478:	b909      	cbnz	r1, 800547e <__lo0bits+0x32>
 800547a:	3208      	adds	r2, #8
 800547c:	0a1b      	lsrs	r3, r3, #8
 800547e:	0719      	lsls	r1, r3, #28
 8005480:	bf04      	itt	eq
 8005482:	091b      	lsreq	r3, r3, #4
 8005484:	3204      	addeq	r2, #4
 8005486:	0799      	lsls	r1, r3, #30
 8005488:	bf04      	itt	eq
 800548a:	089b      	lsreq	r3, r3, #2
 800548c:	3202      	addeq	r2, #2
 800548e:	07d9      	lsls	r1, r3, #31
 8005490:	d403      	bmi.n	800549a <__lo0bits+0x4e>
 8005492:	085b      	lsrs	r3, r3, #1
 8005494:	f102 0201 	add.w	r2, r2, #1
 8005498:	d003      	beq.n	80054a2 <__lo0bits+0x56>
 800549a:	6003      	str	r3, [r0, #0]
 800549c:	e7e5      	b.n	800546a <__lo0bits+0x1e>
 800549e:	2200      	movs	r2, #0
 80054a0:	e7e3      	b.n	800546a <__lo0bits+0x1e>
 80054a2:	2220      	movs	r2, #32
 80054a4:	e7e1      	b.n	800546a <__lo0bits+0x1e>
	...

080054a8 <__i2b>:
 80054a8:	b510      	push	{r4, lr}
 80054aa:	460c      	mov	r4, r1
 80054ac:	2101      	movs	r1, #1
 80054ae:	f7ff ff05 	bl	80052bc <_Balloc>
 80054b2:	4602      	mov	r2, r0
 80054b4:	b928      	cbnz	r0, 80054c2 <__i2b+0x1a>
 80054b6:	4b05      	ldr	r3, [pc, #20]	; (80054cc <__i2b+0x24>)
 80054b8:	4805      	ldr	r0, [pc, #20]	; (80054d0 <__i2b+0x28>)
 80054ba:	f240 1145 	movw	r1, #325	; 0x145
 80054be:	f000 fca7 	bl	8005e10 <__assert_func>
 80054c2:	2301      	movs	r3, #1
 80054c4:	6144      	str	r4, [r0, #20]
 80054c6:	6103      	str	r3, [r0, #16]
 80054c8:	bd10      	pop	{r4, pc}
 80054ca:	bf00      	nop
 80054cc:	0800746f 	.word	0x0800746f
 80054d0:	08007480 	.word	0x08007480

080054d4 <__multiply>:
 80054d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d8:	4691      	mov	r9, r2
 80054da:	690a      	ldr	r2, [r1, #16]
 80054dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	bfb8      	it	lt
 80054e4:	460b      	movlt	r3, r1
 80054e6:	460c      	mov	r4, r1
 80054e8:	bfbc      	itt	lt
 80054ea:	464c      	movlt	r4, r9
 80054ec:	4699      	movlt	r9, r3
 80054ee:	6927      	ldr	r7, [r4, #16]
 80054f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80054f4:	68a3      	ldr	r3, [r4, #8]
 80054f6:	6861      	ldr	r1, [r4, #4]
 80054f8:	eb07 060a 	add.w	r6, r7, sl
 80054fc:	42b3      	cmp	r3, r6
 80054fe:	b085      	sub	sp, #20
 8005500:	bfb8      	it	lt
 8005502:	3101      	addlt	r1, #1
 8005504:	f7ff feda 	bl	80052bc <_Balloc>
 8005508:	b930      	cbnz	r0, 8005518 <__multiply+0x44>
 800550a:	4602      	mov	r2, r0
 800550c:	4b44      	ldr	r3, [pc, #272]	; (8005620 <__multiply+0x14c>)
 800550e:	4845      	ldr	r0, [pc, #276]	; (8005624 <__multiply+0x150>)
 8005510:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005514:	f000 fc7c 	bl	8005e10 <__assert_func>
 8005518:	f100 0514 	add.w	r5, r0, #20
 800551c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005520:	462b      	mov	r3, r5
 8005522:	2200      	movs	r2, #0
 8005524:	4543      	cmp	r3, r8
 8005526:	d321      	bcc.n	800556c <__multiply+0x98>
 8005528:	f104 0314 	add.w	r3, r4, #20
 800552c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005530:	f109 0314 	add.w	r3, r9, #20
 8005534:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005538:	9202      	str	r2, [sp, #8]
 800553a:	1b3a      	subs	r2, r7, r4
 800553c:	3a15      	subs	r2, #21
 800553e:	f022 0203 	bic.w	r2, r2, #3
 8005542:	3204      	adds	r2, #4
 8005544:	f104 0115 	add.w	r1, r4, #21
 8005548:	428f      	cmp	r7, r1
 800554a:	bf38      	it	cc
 800554c:	2204      	movcc	r2, #4
 800554e:	9201      	str	r2, [sp, #4]
 8005550:	9a02      	ldr	r2, [sp, #8]
 8005552:	9303      	str	r3, [sp, #12]
 8005554:	429a      	cmp	r2, r3
 8005556:	d80c      	bhi.n	8005572 <__multiply+0x9e>
 8005558:	2e00      	cmp	r6, #0
 800555a:	dd03      	ble.n	8005564 <__multiply+0x90>
 800555c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005560:	2b00      	cmp	r3, #0
 8005562:	d05b      	beq.n	800561c <__multiply+0x148>
 8005564:	6106      	str	r6, [r0, #16]
 8005566:	b005      	add	sp, #20
 8005568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800556c:	f843 2b04 	str.w	r2, [r3], #4
 8005570:	e7d8      	b.n	8005524 <__multiply+0x50>
 8005572:	f8b3 a000 	ldrh.w	sl, [r3]
 8005576:	f1ba 0f00 	cmp.w	sl, #0
 800557a:	d024      	beq.n	80055c6 <__multiply+0xf2>
 800557c:	f104 0e14 	add.w	lr, r4, #20
 8005580:	46a9      	mov	r9, r5
 8005582:	f04f 0c00 	mov.w	ip, #0
 8005586:	f85e 2b04 	ldr.w	r2, [lr], #4
 800558a:	f8d9 1000 	ldr.w	r1, [r9]
 800558e:	fa1f fb82 	uxth.w	fp, r2
 8005592:	b289      	uxth	r1, r1
 8005594:	fb0a 110b 	mla	r1, sl, fp, r1
 8005598:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800559c:	f8d9 2000 	ldr.w	r2, [r9]
 80055a0:	4461      	add	r1, ip
 80055a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80055a6:	fb0a c20b 	mla	r2, sl, fp, ip
 80055aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80055ae:	b289      	uxth	r1, r1
 80055b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80055b4:	4577      	cmp	r7, lr
 80055b6:	f849 1b04 	str.w	r1, [r9], #4
 80055ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80055be:	d8e2      	bhi.n	8005586 <__multiply+0xb2>
 80055c0:	9a01      	ldr	r2, [sp, #4]
 80055c2:	f845 c002 	str.w	ip, [r5, r2]
 80055c6:	9a03      	ldr	r2, [sp, #12]
 80055c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80055cc:	3304      	adds	r3, #4
 80055ce:	f1b9 0f00 	cmp.w	r9, #0
 80055d2:	d021      	beq.n	8005618 <__multiply+0x144>
 80055d4:	6829      	ldr	r1, [r5, #0]
 80055d6:	f104 0c14 	add.w	ip, r4, #20
 80055da:	46ae      	mov	lr, r5
 80055dc:	f04f 0a00 	mov.w	sl, #0
 80055e0:	f8bc b000 	ldrh.w	fp, [ip]
 80055e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80055e8:	fb09 220b 	mla	r2, r9, fp, r2
 80055ec:	4452      	add	r2, sl
 80055ee:	b289      	uxth	r1, r1
 80055f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80055f4:	f84e 1b04 	str.w	r1, [lr], #4
 80055f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80055fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005600:	f8be 1000 	ldrh.w	r1, [lr]
 8005604:	fb09 110a 	mla	r1, r9, sl, r1
 8005608:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800560c:	4567      	cmp	r7, ip
 800560e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005612:	d8e5      	bhi.n	80055e0 <__multiply+0x10c>
 8005614:	9a01      	ldr	r2, [sp, #4]
 8005616:	50a9      	str	r1, [r5, r2]
 8005618:	3504      	adds	r5, #4
 800561a:	e799      	b.n	8005550 <__multiply+0x7c>
 800561c:	3e01      	subs	r6, #1
 800561e:	e79b      	b.n	8005558 <__multiply+0x84>
 8005620:	0800746f 	.word	0x0800746f
 8005624:	08007480 	.word	0x08007480

08005628 <__pow5mult>:
 8005628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800562c:	4615      	mov	r5, r2
 800562e:	f012 0203 	ands.w	r2, r2, #3
 8005632:	4606      	mov	r6, r0
 8005634:	460f      	mov	r7, r1
 8005636:	d007      	beq.n	8005648 <__pow5mult+0x20>
 8005638:	4c25      	ldr	r4, [pc, #148]	; (80056d0 <__pow5mult+0xa8>)
 800563a:	3a01      	subs	r2, #1
 800563c:	2300      	movs	r3, #0
 800563e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005642:	f7ff fe9d 	bl	8005380 <__multadd>
 8005646:	4607      	mov	r7, r0
 8005648:	10ad      	asrs	r5, r5, #2
 800564a:	d03d      	beq.n	80056c8 <__pow5mult+0xa0>
 800564c:	69f4      	ldr	r4, [r6, #28]
 800564e:	b97c      	cbnz	r4, 8005670 <__pow5mult+0x48>
 8005650:	2010      	movs	r0, #16
 8005652:	f7fe f893 	bl	800377c <malloc>
 8005656:	4602      	mov	r2, r0
 8005658:	61f0      	str	r0, [r6, #28]
 800565a:	b928      	cbnz	r0, 8005668 <__pow5mult+0x40>
 800565c:	4b1d      	ldr	r3, [pc, #116]	; (80056d4 <__pow5mult+0xac>)
 800565e:	481e      	ldr	r0, [pc, #120]	; (80056d8 <__pow5mult+0xb0>)
 8005660:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005664:	f000 fbd4 	bl	8005e10 <__assert_func>
 8005668:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800566c:	6004      	str	r4, [r0, #0]
 800566e:	60c4      	str	r4, [r0, #12]
 8005670:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005674:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005678:	b94c      	cbnz	r4, 800568e <__pow5mult+0x66>
 800567a:	f240 2171 	movw	r1, #625	; 0x271
 800567e:	4630      	mov	r0, r6
 8005680:	f7ff ff12 	bl	80054a8 <__i2b>
 8005684:	2300      	movs	r3, #0
 8005686:	f8c8 0008 	str.w	r0, [r8, #8]
 800568a:	4604      	mov	r4, r0
 800568c:	6003      	str	r3, [r0, #0]
 800568e:	f04f 0900 	mov.w	r9, #0
 8005692:	07eb      	lsls	r3, r5, #31
 8005694:	d50a      	bpl.n	80056ac <__pow5mult+0x84>
 8005696:	4639      	mov	r1, r7
 8005698:	4622      	mov	r2, r4
 800569a:	4630      	mov	r0, r6
 800569c:	f7ff ff1a 	bl	80054d4 <__multiply>
 80056a0:	4639      	mov	r1, r7
 80056a2:	4680      	mov	r8, r0
 80056a4:	4630      	mov	r0, r6
 80056a6:	f7ff fe49 	bl	800533c <_Bfree>
 80056aa:	4647      	mov	r7, r8
 80056ac:	106d      	asrs	r5, r5, #1
 80056ae:	d00b      	beq.n	80056c8 <__pow5mult+0xa0>
 80056b0:	6820      	ldr	r0, [r4, #0]
 80056b2:	b938      	cbnz	r0, 80056c4 <__pow5mult+0x9c>
 80056b4:	4622      	mov	r2, r4
 80056b6:	4621      	mov	r1, r4
 80056b8:	4630      	mov	r0, r6
 80056ba:	f7ff ff0b 	bl	80054d4 <__multiply>
 80056be:	6020      	str	r0, [r4, #0]
 80056c0:	f8c0 9000 	str.w	r9, [r0]
 80056c4:	4604      	mov	r4, r0
 80056c6:	e7e4      	b.n	8005692 <__pow5mult+0x6a>
 80056c8:	4638      	mov	r0, r7
 80056ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056ce:	bf00      	nop
 80056d0:	080075d0 	.word	0x080075d0
 80056d4:	08007400 	.word	0x08007400
 80056d8:	08007480 	.word	0x08007480

080056dc <__lshift>:
 80056dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056e0:	460c      	mov	r4, r1
 80056e2:	6849      	ldr	r1, [r1, #4]
 80056e4:	6923      	ldr	r3, [r4, #16]
 80056e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80056ea:	68a3      	ldr	r3, [r4, #8]
 80056ec:	4607      	mov	r7, r0
 80056ee:	4691      	mov	r9, r2
 80056f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80056f4:	f108 0601 	add.w	r6, r8, #1
 80056f8:	42b3      	cmp	r3, r6
 80056fa:	db0b      	blt.n	8005714 <__lshift+0x38>
 80056fc:	4638      	mov	r0, r7
 80056fe:	f7ff fddd 	bl	80052bc <_Balloc>
 8005702:	4605      	mov	r5, r0
 8005704:	b948      	cbnz	r0, 800571a <__lshift+0x3e>
 8005706:	4602      	mov	r2, r0
 8005708:	4b28      	ldr	r3, [pc, #160]	; (80057ac <__lshift+0xd0>)
 800570a:	4829      	ldr	r0, [pc, #164]	; (80057b0 <__lshift+0xd4>)
 800570c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005710:	f000 fb7e 	bl	8005e10 <__assert_func>
 8005714:	3101      	adds	r1, #1
 8005716:	005b      	lsls	r3, r3, #1
 8005718:	e7ee      	b.n	80056f8 <__lshift+0x1c>
 800571a:	2300      	movs	r3, #0
 800571c:	f100 0114 	add.w	r1, r0, #20
 8005720:	f100 0210 	add.w	r2, r0, #16
 8005724:	4618      	mov	r0, r3
 8005726:	4553      	cmp	r3, sl
 8005728:	db33      	blt.n	8005792 <__lshift+0xb6>
 800572a:	6920      	ldr	r0, [r4, #16]
 800572c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005730:	f104 0314 	add.w	r3, r4, #20
 8005734:	f019 091f 	ands.w	r9, r9, #31
 8005738:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800573c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005740:	d02b      	beq.n	800579a <__lshift+0xbe>
 8005742:	f1c9 0e20 	rsb	lr, r9, #32
 8005746:	468a      	mov	sl, r1
 8005748:	2200      	movs	r2, #0
 800574a:	6818      	ldr	r0, [r3, #0]
 800574c:	fa00 f009 	lsl.w	r0, r0, r9
 8005750:	4310      	orrs	r0, r2
 8005752:	f84a 0b04 	str.w	r0, [sl], #4
 8005756:	f853 2b04 	ldr.w	r2, [r3], #4
 800575a:	459c      	cmp	ip, r3
 800575c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005760:	d8f3      	bhi.n	800574a <__lshift+0x6e>
 8005762:	ebac 0304 	sub.w	r3, ip, r4
 8005766:	3b15      	subs	r3, #21
 8005768:	f023 0303 	bic.w	r3, r3, #3
 800576c:	3304      	adds	r3, #4
 800576e:	f104 0015 	add.w	r0, r4, #21
 8005772:	4584      	cmp	ip, r0
 8005774:	bf38      	it	cc
 8005776:	2304      	movcc	r3, #4
 8005778:	50ca      	str	r2, [r1, r3]
 800577a:	b10a      	cbz	r2, 8005780 <__lshift+0xa4>
 800577c:	f108 0602 	add.w	r6, r8, #2
 8005780:	3e01      	subs	r6, #1
 8005782:	4638      	mov	r0, r7
 8005784:	612e      	str	r6, [r5, #16]
 8005786:	4621      	mov	r1, r4
 8005788:	f7ff fdd8 	bl	800533c <_Bfree>
 800578c:	4628      	mov	r0, r5
 800578e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005792:	f842 0f04 	str.w	r0, [r2, #4]!
 8005796:	3301      	adds	r3, #1
 8005798:	e7c5      	b.n	8005726 <__lshift+0x4a>
 800579a:	3904      	subs	r1, #4
 800579c:	f853 2b04 	ldr.w	r2, [r3], #4
 80057a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80057a4:	459c      	cmp	ip, r3
 80057a6:	d8f9      	bhi.n	800579c <__lshift+0xc0>
 80057a8:	e7ea      	b.n	8005780 <__lshift+0xa4>
 80057aa:	bf00      	nop
 80057ac:	0800746f 	.word	0x0800746f
 80057b0:	08007480 	.word	0x08007480

080057b4 <__mcmp>:
 80057b4:	b530      	push	{r4, r5, lr}
 80057b6:	6902      	ldr	r2, [r0, #16]
 80057b8:	690c      	ldr	r4, [r1, #16]
 80057ba:	1b12      	subs	r2, r2, r4
 80057bc:	d10e      	bne.n	80057dc <__mcmp+0x28>
 80057be:	f100 0314 	add.w	r3, r0, #20
 80057c2:	3114      	adds	r1, #20
 80057c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80057c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80057cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80057d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80057d4:	42a5      	cmp	r5, r4
 80057d6:	d003      	beq.n	80057e0 <__mcmp+0x2c>
 80057d8:	d305      	bcc.n	80057e6 <__mcmp+0x32>
 80057da:	2201      	movs	r2, #1
 80057dc:	4610      	mov	r0, r2
 80057de:	bd30      	pop	{r4, r5, pc}
 80057e0:	4283      	cmp	r3, r0
 80057e2:	d3f3      	bcc.n	80057cc <__mcmp+0x18>
 80057e4:	e7fa      	b.n	80057dc <__mcmp+0x28>
 80057e6:	f04f 32ff 	mov.w	r2, #4294967295
 80057ea:	e7f7      	b.n	80057dc <__mcmp+0x28>

080057ec <__mdiff>:
 80057ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f0:	460c      	mov	r4, r1
 80057f2:	4606      	mov	r6, r0
 80057f4:	4611      	mov	r1, r2
 80057f6:	4620      	mov	r0, r4
 80057f8:	4690      	mov	r8, r2
 80057fa:	f7ff ffdb 	bl	80057b4 <__mcmp>
 80057fe:	1e05      	subs	r5, r0, #0
 8005800:	d110      	bne.n	8005824 <__mdiff+0x38>
 8005802:	4629      	mov	r1, r5
 8005804:	4630      	mov	r0, r6
 8005806:	f7ff fd59 	bl	80052bc <_Balloc>
 800580a:	b930      	cbnz	r0, 800581a <__mdiff+0x2e>
 800580c:	4b3a      	ldr	r3, [pc, #232]	; (80058f8 <__mdiff+0x10c>)
 800580e:	4602      	mov	r2, r0
 8005810:	f240 2137 	movw	r1, #567	; 0x237
 8005814:	4839      	ldr	r0, [pc, #228]	; (80058fc <__mdiff+0x110>)
 8005816:	f000 fafb 	bl	8005e10 <__assert_func>
 800581a:	2301      	movs	r3, #1
 800581c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005820:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005824:	bfa4      	itt	ge
 8005826:	4643      	movge	r3, r8
 8005828:	46a0      	movge	r8, r4
 800582a:	4630      	mov	r0, r6
 800582c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005830:	bfa6      	itte	ge
 8005832:	461c      	movge	r4, r3
 8005834:	2500      	movge	r5, #0
 8005836:	2501      	movlt	r5, #1
 8005838:	f7ff fd40 	bl	80052bc <_Balloc>
 800583c:	b920      	cbnz	r0, 8005848 <__mdiff+0x5c>
 800583e:	4b2e      	ldr	r3, [pc, #184]	; (80058f8 <__mdiff+0x10c>)
 8005840:	4602      	mov	r2, r0
 8005842:	f240 2145 	movw	r1, #581	; 0x245
 8005846:	e7e5      	b.n	8005814 <__mdiff+0x28>
 8005848:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800584c:	6926      	ldr	r6, [r4, #16]
 800584e:	60c5      	str	r5, [r0, #12]
 8005850:	f104 0914 	add.w	r9, r4, #20
 8005854:	f108 0514 	add.w	r5, r8, #20
 8005858:	f100 0e14 	add.w	lr, r0, #20
 800585c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005860:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005864:	f108 0210 	add.w	r2, r8, #16
 8005868:	46f2      	mov	sl, lr
 800586a:	2100      	movs	r1, #0
 800586c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005870:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005874:	fa11 f88b 	uxtah	r8, r1, fp
 8005878:	b299      	uxth	r1, r3
 800587a:	0c1b      	lsrs	r3, r3, #16
 800587c:	eba8 0801 	sub.w	r8, r8, r1
 8005880:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005884:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005888:	fa1f f888 	uxth.w	r8, r8
 800588c:	1419      	asrs	r1, r3, #16
 800588e:	454e      	cmp	r6, r9
 8005890:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005894:	f84a 3b04 	str.w	r3, [sl], #4
 8005898:	d8e8      	bhi.n	800586c <__mdiff+0x80>
 800589a:	1b33      	subs	r3, r6, r4
 800589c:	3b15      	subs	r3, #21
 800589e:	f023 0303 	bic.w	r3, r3, #3
 80058a2:	3304      	adds	r3, #4
 80058a4:	3415      	adds	r4, #21
 80058a6:	42a6      	cmp	r6, r4
 80058a8:	bf38      	it	cc
 80058aa:	2304      	movcc	r3, #4
 80058ac:	441d      	add	r5, r3
 80058ae:	4473      	add	r3, lr
 80058b0:	469e      	mov	lr, r3
 80058b2:	462e      	mov	r6, r5
 80058b4:	4566      	cmp	r6, ip
 80058b6:	d30e      	bcc.n	80058d6 <__mdiff+0xea>
 80058b8:	f10c 0203 	add.w	r2, ip, #3
 80058bc:	1b52      	subs	r2, r2, r5
 80058be:	f022 0203 	bic.w	r2, r2, #3
 80058c2:	3d03      	subs	r5, #3
 80058c4:	45ac      	cmp	ip, r5
 80058c6:	bf38      	it	cc
 80058c8:	2200      	movcc	r2, #0
 80058ca:	4413      	add	r3, r2
 80058cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80058d0:	b17a      	cbz	r2, 80058f2 <__mdiff+0x106>
 80058d2:	6107      	str	r7, [r0, #16]
 80058d4:	e7a4      	b.n	8005820 <__mdiff+0x34>
 80058d6:	f856 8b04 	ldr.w	r8, [r6], #4
 80058da:	fa11 f288 	uxtah	r2, r1, r8
 80058de:	1414      	asrs	r4, r2, #16
 80058e0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80058e4:	b292      	uxth	r2, r2
 80058e6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80058ea:	f84e 2b04 	str.w	r2, [lr], #4
 80058ee:	1421      	asrs	r1, r4, #16
 80058f0:	e7e0      	b.n	80058b4 <__mdiff+0xc8>
 80058f2:	3f01      	subs	r7, #1
 80058f4:	e7ea      	b.n	80058cc <__mdiff+0xe0>
 80058f6:	bf00      	nop
 80058f8:	0800746f 	.word	0x0800746f
 80058fc:	08007480 	.word	0x08007480

08005900 <__d2b>:
 8005900:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005904:	460f      	mov	r7, r1
 8005906:	2101      	movs	r1, #1
 8005908:	ec59 8b10 	vmov	r8, r9, d0
 800590c:	4616      	mov	r6, r2
 800590e:	f7ff fcd5 	bl	80052bc <_Balloc>
 8005912:	4604      	mov	r4, r0
 8005914:	b930      	cbnz	r0, 8005924 <__d2b+0x24>
 8005916:	4602      	mov	r2, r0
 8005918:	4b24      	ldr	r3, [pc, #144]	; (80059ac <__d2b+0xac>)
 800591a:	4825      	ldr	r0, [pc, #148]	; (80059b0 <__d2b+0xb0>)
 800591c:	f240 310f 	movw	r1, #783	; 0x30f
 8005920:	f000 fa76 	bl	8005e10 <__assert_func>
 8005924:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005928:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800592c:	bb2d      	cbnz	r5, 800597a <__d2b+0x7a>
 800592e:	9301      	str	r3, [sp, #4]
 8005930:	f1b8 0300 	subs.w	r3, r8, #0
 8005934:	d026      	beq.n	8005984 <__d2b+0x84>
 8005936:	4668      	mov	r0, sp
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	f7ff fd87 	bl	800544c <__lo0bits>
 800593e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005942:	b1e8      	cbz	r0, 8005980 <__d2b+0x80>
 8005944:	f1c0 0320 	rsb	r3, r0, #32
 8005948:	fa02 f303 	lsl.w	r3, r2, r3
 800594c:	430b      	orrs	r3, r1
 800594e:	40c2      	lsrs	r2, r0
 8005950:	6163      	str	r3, [r4, #20]
 8005952:	9201      	str	r2, [sp, #4]
 8005954:	9b01      	ldr	r3, [sp, #4]
 8005956:	61a3      	str	r3, [r4, #24]
 8005958:	2b00      	cmp	r3, #0
 800595a:	bf14      	ite	ne
 800595c:	2202      	movne	r2, #2
 800595e:	2201      	moveq	r2, #1
 8005960:	6122      	str	r2, [r4, #16]
 8005962:	b1bd      	cbz	r5, 8005994 <__d2b+0x94>
 8005964:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005968:	4405      	add	r5, r0
 800596a:	603d      	str	r5, [r7, #0]
 800596c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005970:	6030      	str	r0, [r6, #0]
 8005972:	4620      	mov	r0, r4
 8005974:	b003      	add	sp, #12
 8005976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800597a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800597e:	e7d6      	b.n	800592e <__d2b+0x2e>
 8005980:	6161      	str	r1, [r4, #20]
 8005982:	e7e7      	b.n	8005954 <__d2b+0x54>
 8005984:	a801      	add	r0, sp, #4
 8005986:	f7ff fd61 	bl	800544c <__lo0bits>
 800598a:	9b01      	ldr	r3, [sp, #4]
 800598c:	6163      	str	r3, [r4, #20]
 800598e:	3020      	adds	r0, #32
 8005990:	2201      	movs	r2, #1
 8005992:	e7e5      	b.n	8005960 <__d2b+0x60>
 8005994:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005998:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800599c:	6038      	str	r0, [r7, #0]
 800599e:	6918      	ldr	r0, [r3, #16]
 80059a0:	f7ff fd34 	bl	800540c <__hi0bits>
 80059a4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80059a8:	e7e2      	b.n	8005970 <__d2b+0x70>
 80059aa:	bf00      	nop
 80059ac:	0800746f 	.word	0x0800746f
 80059b0:	08007480 	.word	0x08007480

080059b4 <__ssputs_r>:
 80059b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059b8:	688e      	ldr	r6, [r1, #8]
 80059ba:	461f      	mov	r7, r3
 80059bc:	42be      	cmp	r6, r7
 80059be:	680b      	ldr	r3, [r1, #0]
 80059c0:	4682      	mov	sl, r0
 80059c2:	460c      	mov	r4, r1
 80059c4:	4690      	mov	r8, r2
 80059c6:	d82c      	bhi.n	8005a22 <__ssputs_r+0x6e>
 80059c8:	898a      	ldrh	r2, [r1, #12]
 80059ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80059ce:	d026      	beq.n	8005a1e <__ssputs_r+0x6a>
 80059d0:	6965      	ldr	r5, [r4, #20]
 80059d2:	6909      	ldr	r1, [r1, #16]
 80059d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059d8:	eba3 0901 	sub.w	r9, r3, r1
 80059dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059e0:	1c7b      	adds	r3, r7, #1
 80059e2:	444b      	add	r3, r9
 80059e4:	106d      	asrs	r5, r5, #1
 80059e6:	429d      	cmp	r5, r3
 80059e8:	bf38      	it	cc
 80059ea:	461d      	movcc	r5, r3
 80059ec:	0553      	lsls	r3, r2, #21
 80059ee:	d527      	bpl.n	8005a40 <__ssputs_r+0x8c>
 80059f0:	4629      	mov	r1, r5
 80059f2:	f7fd fef3 	bl	80037dc <_malloc_r>
 80059f6:	4606      	mov	r6, r0
 80059f8:	b360      	cbz	r0, 8005a54 <__ssputs_r+0xa0>
 80059fa:	6921      	ldr	r1, [r4, #16]
 80059fc:	464a      	mov	r2, r9
 80059fe:	f000 f9f9 	bl	8005df4 <memcpy>
 8005a02:	89a3      	ldrh	r3, [r4, #12]
 8005a04:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a0c:	81a3      	strh	r3, [r4, #12]
 8005a0e:	6126      	str	r6, [r4, #16]
 8005a10:	6165      	str	r5, [r4, #20]
 8005a12:	444e      	add	r6, r9
 8005a14:	eba5 0509 	sub.w	r5, r5, r9
 8005a18:	6026      	str	r6, [r4, #0]
 8005a1a:	60a5      	str	r5, [r4, #8]
 8005a1c:	463e      	mov	r6, r7
 8005a1e:	42be      	cmp	r6, r7
 8005a20:	d900      	bls.n	8005a24 <__ssputs_r+0x70>
 8005a22:	463e      	mov	r6, r7
 8005a24:	6820      	ldr	r0, [r4, #0]
 8005a26:	4632      	mov	r2, r6
 8005a28:	4641      	mov	r1, r8
 8005a2a:	f000 f9c9 	bl	8005dc0 <memmove>
 8005a2e:	68a3      	ldr	r3, [r4, #8]
 8005a30:	1b9b      	subs	r3, r3, r6
 8005a32:	60a3      	str	r3, [r4, #8]
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	4433      	add	r3, r6
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a40:	462a      	mov	r2, r5
 8005a42:	f000 fa2b 	bl	8005e9c <_realloc_r>
 8005a46:	4606      	mov	r6, r0
 8005a48:	2800      	cmp	r0, #0
 8005a4a:	d1e0      	bne.n	8005a0e <__ssputs_r+0x5a>
 8005a4c:	6921      	ldr	r1, [r4, #16]
 8005a4e:	4650      	mov	r0, sl
 8005a50:	f7ff fbe8 	bl	8005224 <_free_r>
 8005a54:	230c      	movs	r3, #12
 8005a56:	f8ca 3000 	str.w	r3, [sl]
 8005a5a:	89a3      	ldrh	r3, [r4, #12]
 8005a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a60:	81a3      	strh	r3, [r4, #12]
 8005a62:	f04f 30ff 	mov.w	r0, #4294967295
 8005a66:	e7e9      	b.n	8005a3c <__ssputs_r+0x88>

08005a68 <_svfiprintf_r>:
 8005a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a6c:	4698      	mov	r8, r3
 8005a6e:	898b      	ldrh	r3, [r1, #12]
 8005a70:	061b      	lsls	r3, r3, #24
 8005a72:	b09d      	sub	sp, #116	; 0x74
 8005a74:	4607      	mov	r7, r0
 8005a76:	460d      	mov	r5, r1
 8005a78:	4614      	mov	r4, r2
 8005a7a:	d50e      	bpl.n	8005a9a <_svfiprintf_r+0x32>
 8005a7c:	690b      	ldr	r3, [r1, #16]
 8005a7e:	b963      	cbnz	r3, 8005a9a <_svfiprintf_r+0x32>
 8005a80:	2140      	movs	r1, #64	; 0x40
 8005a82:	f7fd feab 	bl	80037dc <_malloc_r>
 8005a86:	6028      	str	r0, [r5, #0]
 8005a88:	6128      	str	r0, [r5, #16]
 8005a8a:	b920      	cbnz	r0, 8005a96 <_svfiprintf_r+0x2e>
 8005a8c:	230c      	movs	r3, #12
 8005a8e:	603b      	str	r3, [r7, #0]
 8005a90:	f04f 30ff 	mov.w	r0, #4294967295
 8005a94:	e0d0      	b.n	8005c38 <_svfiprintf_r+0x1d0>
 8005a96:	2340      	movs	r3, #64	; 0x40
 8005a98:	616b      	str	r3, [r5, #20]
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a9e:	2320      	movs	r3, #32
 8005aa0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005aa4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005aa8:	2330      	movs	r3, #48	; 0x30
 8005aaa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005c50 <_svfiprintf_r+0x1e8>
 8005aae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ab2:	f04f 0901 	mov.w	r9, #1
 8005ab6:	4623      	mov	r3, r4
 8005ab8:	469a      	mov	sl, r3
 8005aba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005abe:	b10a      	cbz	r2, 8005ac4 <_svfiprintf_r+0x5c>
 8005ac0:	2a25      	cmp	r2, #37	; 0x25
 8005ac2:	d1f9      	bne.n	8005ab8 <_svfiprintf_r+0x50>
 8005ac4:	ebba 0b04 	subs.w	fp, sl, r4
 8005ac8:	d00b      	beq.n	8005ae2 <_svfiprintf_r+0x7a>
 8005aca:	465b      	mov	r3, fp
 8005acc:	4622      	mov	r2, r4
 8005ace:	4629      	mov	r1, r5
 8005ad0:	4638      	mov	r0, r7
 8005ad2:	f7ff ff6f 	bl	80059b4 <__ssputs_r>
 8005ad6:	3001      	adds	r0, #1
 8005ad8:	f000 80a9 	beq.w	8005c2e <_svfiprintf_r+0x1c6>
 8005adc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ade:	445a      	add	r2, fp
 8005ae0:	9209      	str	r2, [sp, #36]	; 0x24
 8005ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f000 80a1 	beq.w	8005c2e <_svfiprintf_r+0x1c6>
 8005aec:	2300      	movs	r3, #0
 8005aee:	f04f 32ff 	mov.w	r2, #4294967295
 8005af2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005af6:	f10a 0a01 	add.w	sl, sl, #1
 8005afa:	9304      	str	r3, [sp, #16]
 8005afc:	9307      	str	r3, [sp, #28]
 8005afe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b02:	931a      	str	r3, [sp, #104]	; 0x68
 8005b04:	4654      	mov	r4, sl
 8005b06:	2205      	movs	r2, #5
 8005b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b0c:	4850      	ldr	r0, [pc, #320]	; (8005c50 <_svfiprintf_r+0x1e8>)
 8005b0e:	f7fa fb5f 	bl	80001d0 <memchr>
 8005b12:	9a04      	ldr	r2, [sp, #16]
 8005b14:	b9d8      	cbnz	r0, 8005b4e <_svfiprintf_r+0xe6>
 8005b16:	06d0      	lsls	r0, r2, #27
 8005b18:	bf44      	itt	mi
 8005b1a:	2320      	movmi	r3, #32
 8005b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b20:	0711      	lsls	r1, r2, #28
 8005b22:	bf44      	itt	mi
 8005b24:	232b      	movmi	r3, #43	; 0x2b
 8005b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8005b30:	d015      	beq.n	8005b5e <_svfiprintf_r+0xf6>
 8005b32:	9a07      	ldr	r2, [sp, #28]
 8005b34:	4654      	mov	r4, sl
 8005b36:	2000      	movs	r0, #0
 8005b38:	f04f 0c0a 	mov.w	ip, #10
 8005b3c:	4621      	mov	r1, r4
 8005b3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b42:	3b30      	subs	r3, #48	; 0x30
 8005b44:	2b09      	cmp	r3, #9
 8005b46:	d94d      	bls.n	8005be4 <_svfiprintf_r+0x17c>
 8005b48:	b1b0      	cbz	r0, 8005b78 <_svfiprintf_r+0x110>
 8005b4a:	9207      	str	r2, [sp, #28]
 8005b4c:	e014      	b.n	8005b78 <_svfiprintf_r+0x110>
 8005b4e:	eba0 0308 	sub.w	r3, r0, r8
 8005b52:	fa09 f303 	lsl.w	r3, r9, r3
 8005b56:	4313      	orrs	r3, r2
 8005b58:	9304      	str	r3, [sp, #16]
 8005b5a:	46a2      	mov	sl, r4
 8005b5c:	e7d2      	b.n	8005b04 <_svfiprintf_r+0x9c>
 8005b5e:	9b03      	ldr	r3, [sp, #12]
 8005b60:	1d19      	adds	r1, r3, #4
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	9103      	str	r1, [sp, #12]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	bfbb      	ittet	lt
 8005b6a:	425b      	neglt	r3, r3
 8005b6c:	f042 0202 	orrlt.w	r2, r2, #2
 8005b70:	9307      	strge	r3, [sp, #28]
 8005b72:	9307      	strlt	r3, [sp, #28]
 8005b74:	bfb8      	it	lt
 8005b76:	9204      	strlt	r2, [sp, #16]
 8005b78:	7823      	ldrb	r3, [r4, #0]
 8005b7a:	2b2e      	cmp	r3, #46	; 0x2e
 8005b7c:	d10c      	bne.n	8005b98 <_svfiprintf_r+0x130>
 8005b7e:	7863      	ldrb	r3, [r4, #1]
 8005b80:	2b2a      	cmp	r3, #42	; 0x2a
 8005b82:	d134      	bne.n	8005bee <_svfiprintf_r+0x186>
 8005b84:	9b03      	ldr	r3, [sp, #12]
 8005b86:	1d1a      	adds	r2, r3, #4
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	9203      	str	r2, [sp, #12]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	bfb8      	it	lt
 8005b90:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b94:	3402      	adds	r4, #2
 8005b96:	9305      	str	r3, [sp, #20]
 8005b98:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005c60 <_svfiprintf_r+0x1f8>
 8005b9c:	7821      	ldrb	r1, [r4, #0]
 8005b9e:	2203      	movs	r2, #3
 8005ba0:	4650      	mov	r0, sl
 8005ba2:	f7fa fb15 	bl	80001d0 <memchr>
 8005ba6:	b138      	cbz	r0, 8005bb8 <_svfiprintf_r+0x150>
 8005ba8:	9b04      	ldr	r3, [sp, #16]
 8005baa:	eba0 000a 	sub.w	r0, r0, sl
 8005bae:	2240      	movs	r2, #64	; 0x40
 8005bb0:	4082      	lsls	r2, r0
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	3401      	adds	r4, #1
 8005bb6:	9304      	str	r3, [sp, #16]
 8005bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bbc:	4825      	ldr	r0, [pc, #148]	; (8005c54 <_svfiprintf_r+0x1ec>)
 8005bbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bc2:	2206      	movs	r2, #6
 8005bc4:	f7fa fb04 	bl	80001d0 <memchr>
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	d038      	beq.n	8005c3e <_svfiprintf_r+0x1d6>
 8005bcc:	4b22      	ldr	r3, [pc, #136]	; (8005c58 <_svfiprintf_r+0x1f0>)
 8005bce:	bb1b      	cbnz	r3, 8005c18 <_svfiprintf_r+0x1b0>
 8005bd0:	9b03      	ldr	r3, [sp, #12]
 8005bd2:	3307      	adds	r3, #7
 8005bd4:	f023 0307 	bic.w	r3, r3, #7
 8005bd8:	3308      	adds	r3, #8
 8005bda:	9303      	str	r3, [sp, #12]
 8005bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bde:	4433      	add	r3, r6
 8005be0:	9309      	str	r3, [sp, #36]	; 0x24
 8005be2:	e768      	b.n	8005ab6 <_svfiprintf_r+0x4e>
 8005be4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005be8:	460c      	mov	r4, r1
 8005bea:	2001      	movs	r0, #1
 8005bec:	e7a6      	b.n	8005b3c <_svfiprintf_r+0xd4>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	3401      	adds	r4, #1
 8005bf2:	9305      	str	r3, [sp, #20]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	f04f 0c0a 	mov.w	ip, #10
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c00:	3a30      	subs	r2, #48	; 0x30
 8005c02:	2a09      	cmp	r2, #9
 8005c04:	d903      	bls.n	8005c0e <_svfiprintf_r+0x1a6>
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0c6      	beq.n	8005b98 <_svfiprintf_r+0x130>
 8005c0a:	9105      	str	r1, [sp, #20]
 8005c0c:	e7c4      	b.n	8005b98 <_svfiprintf_r+0x130>
 8005c0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c12:	4604      	mov	r4, r0
 8005c14:	2301      	movs	r3, #1
 8005c16:	e7f0      	b.n	8005bfa <_svfiprintf_r+0x192>
 8005c18:	ab03      	add	r3, sp, #12
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	462a      	mov	r2, r5
 8005c1e:	4b0f      	ldr	r3, [pc, #60]	; (8005c5c <_svfiprintf_r+0x1f4>)
 8005c20:	a904      	add	r1, sp, #16
 8005c22:	4638      	mov	r0, r7
 8005c24:	f7fd ff06 	bl	8003a34 <_printf_float>
 8005c28:	1c42      	adds	r2, r0, #1
 8005c2a:	4606      	mov	r6, r0
 8005c2c:	d1d6      	bne.n	8005bdc <_svfiprintf_r+0x174>
 8005c2e:	89ab      	ldrh	r3, [r5, #12]
 8005c30:	065b      	lsls	r3, r3, #25
 8005c32:	f53f af2d 	bmi.w	8005a90 <_svfiprintf_r+0x28>
 8005c36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c38:	b01d      	add	sp, #116	; 0x74
 8005c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c3e:	ab03      	add	r3, sp, #12
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	462a      	mov	r2, r5
 8005c44:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <_svfiprintf_r+0x1f4>)
 8005c46:	a904      	add	r1, sp, #16
 8005c48:	4638      	mov	r0, r7
 8005c4a:	f7fe f997 	bl	8003f7c <_printf_i>
 8005c4e:	e7eb      	b.n	8005c28 <_svfiprintf_r+0x1c0>
 8005c50:	080075dc 	.word	0x080075dc
 8005c54:	080075e6 	.word	0x080075e6
 8005c58:	08003a35 	.word	0x08003a35
 8005c5c:	080059b5 	.word	0x080059b5
 8005c60:	080075e2 	.word	0x080075e2

08005c64 <__sflush_r>:
 8005c64:	898a      	ldrh	r2, [r1, #12]
 8005c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c6a:	4605      	mov	r5, r0
 8005c6c:	0710      	lsls	r0, r2, #28
 8005c6e:	460c      	mov	r4, r1
 8005c70:	d458      	bmi.n	8005d24 <__sflush_r+0xc0>
 8005c72:	684b      	ldr	r3, [r1, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	dc05      	bgt.n	8005c84 <__sflush_r+0x20>
 8005c78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	dc02      	bgt.n	8005c84 <__sflush_r+0x20>
 8005c7e:	2000      	movs	r0, #0
 8005c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c86:	2e00      	cmp	r6, #0
 8005c88:	d0f9      	beq.n	8005c7e <__sflush_r+0x1a>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c90:	682f      	ldr	r7, [r5, #0]
 8005c92:	6a21      	ldr	r1, [r4, #32]
 8005c94:	602b      	str	r3, [r5, #0]
 8005c96:	d032      	beq.n	8005cfe <__sflush_r+0x9a>
 8005c98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c9a:	89a3      	ldrh	r3, [r4, #12]
 8005c9c:	075a      	lsls	r2, r3, #29
 8005c9e:	d505      	bpl.n	8005cac <__sflush_r+0x48>
 8005ca0:	6863      	ldr	r3, [r4, #4]
 8005ca2:	1ac0      	subs	r0, r0, r3
 8005ca4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ca6:	b10b      	cbz	r3, 8005cac <__sflush_r+0x48>
 8005ca8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005caa:	1ac0      	subs	r0, r0, r3
 8005cac:	2300      	movs	r3, #0
 8005cae:	4602      	mov	r2, r0
 8005cb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cb2:	6a21      	ldr	r1, [r4, #32]
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	47b0      	blx	r6
 8005cb8:	1c43      	adds	r3, r0, #1
 8005cba:	89a3      	ldrh	r3, [r4, #12]
 8005cbc:	d106      	bne.n	8005ccc <__sflush_r+0x68>
 8005cbe:	6829      	ldr	r1, [r5, #0]
 8005cc0:	291d      	cmp	r1, #29
 8005cc2:	d82b      	bhi.n	8005d1c <__sflush_r+0xb8>
 8005cc4:	4a29      	ldr	r2, [pc, #164]	; (8005d6c <__sflush_r+0x108>)
 8005cc6:	410a      	asrs	r2, r1
 8005cc8:	07d6      	lsls	r6, r2, #31
 8005cca:	d427      	bmi.n	8005d1c <__sflush_r+0xb8>
 8005ccc:	2200      	movs	r2, #0
 8005cce:	6062      	str	r2, [r4, #4]
 8005cd0:	04d9      	lsls	r1, r3, #19
 8005cd2:	6922      	ldr	r2, [r4, #16]
 8005cd4:	6022      	str	r2, [r4, #0]
 8005cd6:	d504      	bpl.n	8005ce2 <__sflush_r+0x7e>
 8005cd8:	1c42      	adds	r2, r0, #1
 8005cda:	d101      	bne.n	8005ce0 <__sflush_r+0x7c>
 8005cdc:	682b      	ldr	r3, [r5, #0]
 8005cde:	b903      	cbnz	r3, 8005ce2 <__sflush_r+0x7e>
 8005ce0:	6560      	str	r0, [r4, #84]	; 0x54
 8005ce2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ce4:	602f      	str	r7, [r5, #0]
 8005ce6:	2900      	cmp	r1, #0
 8005ce8:	d0c9      	beq.n	8005c7e <__sflush_r+0x1a>
 8005cea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cee:	4299      	cmp	r1, r3
 8005cf0:	d002      	beq.n	8005cf8 <__sflush_r+0x94>
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	f7ff fa96 	bl	8005224 <_free_r>
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	6360      	str	r0, [r4, #52]	; 0x34
 8005cfc:	e7c0      	b.n	8005c80 <__sflush_r+0x1c>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	4628      	mov	r0, r5
 8005d02:	47b0      	blx	r6
 8005d04:	1c41      	adds	r1, r0, #1
 8005d06:	d1c8      	bne.n	8005c9a <__sflush_r+0x36>
 8005d08:	682b      	ldr	r3, [r5, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d0c5      	beq.n	8005c9a <__sflush_r+0x36>
 8005d0e:	2b1d      	cmp	r3, #29
 8005d10:	d001      	beq.n	8005d16 <__sflush_r+0xb2>
 8005d12:	2b16      	cmp	r3, #22
 8005d14:	d101      	bne.n	8005d1a <__sflush_r+0xb6>
 8005d16:	602f      	str	r7, [r5, #0]
 8005d18:	e7b1      	b.n	8005c7e <__sflush_r+0x1a>
 8005d1a:	89a3      	ldrh	r3, [r4, #12]
 8005d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d20:	81a3      	strh	r3, [r4, #12]
 8005d22:	e7ad      	b.n	8005c80 <__sflush_r+0x1c>
 8005d24:	690f      	ldr	r7, [r1, #16]
 8005d26:	2f00      	cmp	r7, #0
 8005d28:	d0a9      	beq.n	8005c7e <__sflush_r+0x1a>
 8005d2a:	0793      	lsls	r3, r2, #30
 8005d2c:	680e      	ldr	r6, [r1, #0]
 8005d2e:	bf08      	it	eq
 8005d30:	694b      	ldreq	r3, [r1, #20]
 8005d32:	600f      	str	r7, [r1, #0]
 8005d34:	bf18      	it	ne
 8005d36:	2300      	movne	r3, #0
 8005d38:	eba6 0807 	sub.w	r8, r6, r7
 8005d3c:	608b      	str	r3, [r1, #8]
 8005d3e:	f1b8 0f00 	cmp.w	r8, #0
 8005d42:	dd9c      	ble.n	8005c7e <__sflush_r+0x1a>
 8005d44:	6a21      	ldr	r1, [r4, #32]
 8005d46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d48:	4643      	mov	r3, r8
 8005d4a:	463a      	mov	r2, r7
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	47b0      	blx	r6
 8005d50:	2800      	cmp	r0, #0
 8005d52:	dc06      	bgt.n	8005d62 <__sflush_r+0xfe>
 8005d54:	89a3      	ldrh	r3, [r4, #12]
 8005d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d5a:	81a3      	strh	r3, [r4, #12]
 8005d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d60:	e78e      	b.n	8005c80 <__sflush_r+0x1c>
 8005d62:	4407      	add	r7, r0
 8005d64:	eba8 0800 	sub.w	r8, r8, r0
 8005d68:	e7e9      	b.n	8005d3e <__sflush_r+0xda>
 8005d6a:	bf00      	nop
 8005d6c:	dfbffffe 	.word	0xdfbffffe

08005d70 <_fflush_r>:
 8005d70:	b538      	push	{r3, r4, r5, lr}
 8005d72:	690b      	ldr	r3, [r1, #16]
 8005d74:	4605      	mov	r5, r0
 8005d76:	460c      	mov	r4, r1
 8005d78:	b913      	cbnz	r3, 8005d80 <_fflush_r+0x10>
 8005d7a:	2500      	movs	r5, #0
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	bd38      	pop	{r3, r4, r5, pc}
 8005d80:	b118      	cbz	r0, 8005d8a <_fflush_r+0x1a>
 8005d82:	6a03      	ldr	r3, [r0, #32]
 8005d84:	b90b      	cbnz	r3, 8005d8a <_fflush_r+0x1a>
 8005d86:	f7fe faa7 	bl	80042d8 <__sinit>
 8005d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0f3      	beq.n	8005d7a <_fflush_r+0xa>
 8005d92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d94:	07d0      	lsls	r0, r2, #31
 8005d96:	d404      	bmi.n	8005da2 <_fflush_r+0x32>
 8005d98:	0599      	lsls	r1, r3, #22
 8005d9a:	d402      	bmi.n	8005da2 <_fflush_r+0x32>
 8005d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d9e:	f7fe fbc2 	bl	8004526 <__retarget_lock_acquire_recursive>
 8005da2:	4628      	mov	r0, r5
 8005da4:	4621      	mov	r1, r4
 8005da6:	f7ff ff5d 	bl	8005c64 <__sflush_r>
 8005daa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dac:	07da      	lsls	r2, r3, #31
 8005dae:	4605      	mov	r5, r0
 8005db0:	d4e4      	bmi.n	8005d7c <_fflush_r+0xc>
 8005db2:	89a3      	ldrh	r3, [r4, #12]
 8005db4:	059b      	lsls	r3, r3, #22
 8005db6:	d4e1      	bmi.n	8005d7c <_fflush_r+0xc>
 8005db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dba:	f7fe fbb5 	bl	8004528 <__retarget_lock_release_recursive>
 8005dbe:	e7dd      	b.n	8005d7c <_fflush_r+0xc>

08005dc0 <memmove>:
 8005dc0:	4288      	cmp	r0, r1
 8005dc2:	b510      	push	{r4, lr}
 8005dc4:	eb01 0402 	add.w	r4, r1, r2
 8005dc8:	d902      	bls.n	8005dd0 <memmove+0x10>
 8005dca:	4284      	cmp	r4, r0
 8005dcc:	4623      	mov	r3, r4
 8005dce:	d807      	bhi.n	8005de0 <memmove+0x20>
 8005dd0:	1e43      	subs	r3, r0, #1
 8005dd2:	42a1      	cmp	r1, r4
 8005dd4:	d008      	beq.n	8005de8 <memmove+0x28>
 8005dd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dde:	e7f8      	b.n	8005dd2 <memmove+0x12>
 8005de0:	4402      	add	r2, r0
 8005de2:	4601      	mov	r1, r0
 8005de4:	428a      	cmp	r2, r1
 8005de6:	d100      	bne.n	8005dea <memmove+0x2a>
 8005de8:	bd10      	pop	{r4, pc}
 8005dea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005df2:	e7f7      	b.n	8005de4 <memmove+0x24>

08005df4 <memcpy>:
 8005df4:	440a      	add	r2, r1
 8005df6:	4291      	cmp	r1, r2
 8005df8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005dfc:	d100      	bne.n	8005e00 <memcpy+0xc>
 8005dfe:	4770      	bx	lr
 8005e00:	b510      	push	{r4, lr}
 8005e02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e0a:	4291      	cmp	r1, r2
 8005e0c:	d1f9      	bne.n	8005e02 <memcpy+0xe>
 8005e0e:	bd10      	pop	{r4, pc}

08005e10 <__assert_func>:
 8005e10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e12:	4614      	mov	r4, r2
 8005e14:	461a      	mov	r2, r3
 8005e16:	4b09      	ldr	r3, [pc, #36]	; (8005e3c <__assert_func+0x2c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4605      	mov	r5, r0
 8005e1c:	68d8      	ldr	r0, [r3, #12]
 8005e1e:	b14c      	cbz	r4, 8005e34 <__assert_func+0x24>
 8005e20:	4b07      	ldr	r3, [pc, #28]	; (8005e40 <__assert_func+0x30>)
 8005e22:	9100      	str	r1, [sp, #0]
 8005e24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005e28:	4906      	ldr	r1, [pc, #24]	; (8005e44 <__assert_func+0x34>)
 8005e2a:	462b      	mov	r3, r5
 8005e2c:	f000 f872 	bl	8005f14 <fiprintf>
 8005e30:	f000 f882 	bl	8005f38 <abort>
 8005e34:	4b04      	ldr	r3, [pc, #16]	; (8005e48 <__assert_func+0x38>)
 8005e36:	461c      	mov	r4, r3
 8005e38:	e7f3      	b.n	8005e22 <__assert_func+0x12>
 8005e3a:	bf00      	nop
 8005e3c:	200000e0 	.word	0x200000e0
 8005e40:	080075f7 	.word	0x080075f7
 8005e44:	08007604 	.word	0x08007604
 8005e48:	08007632 	.word	0x08007632

08005e4c <_calloc_r>:
 8005e4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e4e:	fba1 2402 	umull	r2, r4, r1, r2
 8005e52:	b94c      	cbnz	r4, 8005e68 <_calloc_r+0x1c>
 8005e54:	4611      	mov	r1, r2
 8005e56:	9201      	str	r2, [sp, #4]
 8005e58:	f7fd fcc0 	bl	80037dc <_malloc_r>
 8005e5c:	9a01      	ldr	r2, [sp, #4]
 8005e5e:	4605      	mov	r5, r0
 8005e60:	b930      	cbnz	r0, 8005e70 <_calloc_r+0x24>
 8005e62:	4628      	mov	r0, r5
 8005e64:	b003      	add	sp, #12
 8005e66:	bd30      	pop	{r4, r5, pc}
 8005e68:	220c      	movs	r2, #12
 8005e6a:	6002      	str	r2, [r0, #0]
 8005e6c:	2500      	movs	r5, #0
 8005e6e:	e7f8      	b.n	8005e62 <_calloc_r+0x16>
 8005e70:	4621      	mov	r1, r4
 8005e72:	f7fe faca 	bl	800440a <memset>
 8005e76:	e7f4      	b.n	8005e62 <_calloc_r+0x16>

08005e78 <__ascii_mbtowc>:
 8005e78:	b082      	sub	sp, #8
 8005e7a:	b901      	cbnz	r1, 8005e7e <__ascii_mbtowc+0x6>
 8005e7c:	a901      	add	r1, sp, #4
 8005e7e:	b142      	cbz	r2, 8005e92 <__ascii_mbtowc+0x1a>
 8005e80:	b14b      	cbz	r3, 8005e96 <__ascii_mbtowc+0x1e>
 8005e82:	7813      	ldrb	r3, [r2, #0]
 8005e84:	600b      	str	r3, [r1, #0]
 8005e86:	7812      	ldrb	r2, [r2, #0]
 8005e88:	1e10      	subs	r0, r2, #0
 8005e8a:	bf18      	it	ne
 8005e8c:	2001      	movne	r0, #1
 8005e8e:	b002      	add	sp, #8
 8005e90:	4770      	bx	lr
 8005e92:	4610      	mov	r0, r2
 8005e94:	e7fb      	b.n	8005e8e <__ascii_mbtowc+0x16>
 8005e96:	f06f 0001 	mvn.w	r0, #1
 8005e9a:	e7f8      	b.n	8005e8e <__ascii_mbtowc+0x16>

08005e9c <_realloc_r>:
 8005e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea0:	4680      	mov	r8, r0
 8005ea2:	4614      	mov	r4, r2
 8005ea4:	460e      	mov	r6, r1
 8005ea6:	b921      	cbnz	r1, 8005eb2 <_realloc_r+0x16>
 8005ea8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005eac:	4611      	mov	r1, r2
 8005eae:	f7fd bc95 	b.w	80037dc <_malloc_r>
 8005eb2:	b92a      	cbnz	r2, 8005ec0 <_realloc_r+0x24>
 8005eb4:	f7ff f9b6 	bl	8005224 <_free_r>
 8005eb8:	4625      	mov	r5, r4
 8005eba:	4628      	mov	r0, r5
 8005ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ec0:	f000 f841 	bl	8005f46 <_malloc_usable_size_r>
 8005ec4:	4284      	cmp	r4, r0
 8005ec6:	4607      	mov	r7, r0
 8005ec8:	d802      	bhi.n	8005ed0 <_realloc_r+0x34>
 8005eca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005ece:	d812      	bhi.n	8005ef6 <_realloc_r+0x5a>
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	4640      	mov	r0, r8
 8005ed4:	f7fd fc82 	bl	80037dc <_malloc_r>
 8005ed8:	4605      	mov	r5, r0
 8005eda:	2800      	cmp	r0, #0
 8005edc:	d0ed      	beq.n	8005eba <_realloc_r+0x1e>
 8005ede:	42bc      	cmp	r4, r7
 8005ee0:	4622      	mov	r2, r4
 8005ee2:	4631      	mov	r1, r6
 8005ee4:	bf28      	it	cs
 8005ee6:	463a      	movcs	r2, r7
 8005ee8:	f7ff ff84 	bl	8005df4 <memcpy>
 8005eec:	4631      	mov	r1, r6
 8005eee:	4640      	mov	r0, r8
 8005ef0:	f7ff f998 	bl	8005224 <_free_r>
 8005ef4:	e7e1      	b.n	8005eba <_realloc_r+0x1e>
 8005ef6:	4635      	mov	r5, r6
 8005ef8:	e7df      	b.n	8005eba <_realloc_r+0x1e>

08005efa <__ascii_wctomb>:
 8005efa:	b149      	cbz	r1, 8005f10 <__ascii_wctomb+0x16>
 8005efc:	2aff      	cmp	r2, #255	; 0xff
 8005efe:	bf85      	ittet	hi
 8005f00:	238a      	movhi	r3, #138	; 0x8a
 8005f02:	6003      	strhi	r3, [r0, #0]
 8005f04:	700a      	strbls	r2, [r1, #0]
 8005f06:	f04f 30ff 	movhi.w	r0, #4294967295
 8005f0a:	bf98      	it	ls
 8005f0c:	2001      	movls	r0, #1
 8005f0e:	4770      	bx	lr
 8005f10:	4608      	mov	r0, r1
 8005f12:	4770      	bx	lr

08005f14 <fiprintf>:
 8005f14:	b40e      	push	{r1, r2, r3}
 8005f16:	b503      	push	{r0, r1, lr}
 8005f18:	4601      	mov	r1, r0
 8005f1a:	ab03      	add	r3, sp, #12
 8005f1c:	4805      	ldr	r0, [pc, #20]	; (8005f34 <fiprintf+0x20>)
 8005f1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f22:	6800      	ldr	r0, [r0, #0]
 8005f24:	9301      	str	r3, [sp, #4]
 8005f26:	f000 f83f 	bl	8005fa8 <_vfiprintf_r>
 8005f2a:	b002      	add	sp, #8
 8005f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f30:	b003      	add	sp, #12
 8005f32:	4770      	bx	lr
 8005f34:	200000e0 	.word	0x200000e0

08005f38 <abort>:
 8005f38:	b508      	push	{r3, lr}
 8005f3a:	2006      	movs	r0, #6
 8005f3c:	f000 fa0c 	bl	8006358 <raise>
 8005f40:	2001      	movs	r0, #1
 8005f42:	f7fc f913 	bl	800216c <_exit>

08005f46 <_malloc_usable_size_r>:
 8005f46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f4a:	1f18      	subs	r0, r3, #4
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	bfbc      	itt	lt
 8005f50:	580b      	ldrlt	r3, [r1, r0]
 8005f52:	18c0      	addlt	r0, r0, r3
 8005f54:	4770      	bx	lr

08005f56 <__sfputc_r>:
 8005f56:	6893      	ldr	r3, [r2, #8]
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	b410      	push	{r4}
 8005f5e:	6093      	str	r3, [r2, #8]
 8005f60:	da08      	bge.n	8005f74 <__sfputc_r+0x1e>
 8005f62:	6994      	ldr	r4, [r2, #24]
 8005f64:	42a3      	cmp	r3, r4
 8005f66:	db01      	blt.n	8005f6c <__sfputc_r+0x16>
 8005f68:	290a      	cmp	r1, #10
 8005f6a:	d103      	bne.n	8005f74 <__sfputc_r+0x1e>
 8005f6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f70:	f000 b934 	b.w	80061dc <__swbuf_r>
 8005f74:	6813      	ldr	r3, [r2, #0]
 8005f76:	1c58      	adds	r0, r3, #1
 8005f78:	6010      	str	r0, [r2, #0]
 8005f7a:	7019      	strb	r1, [r3, #0]
 8005f7c:	4608      	mov	r0, r1
 8005f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <__sfputs_r>:
 8005f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f86:	4606      	mov	r6, r0
 8005f88:	460f      	mov	r7, r1
 8005f8a:	4614      	mov	r4, r2
 8005f8c:	18d5      	adds	r5, r2, r3
 8005f8e:	42ac      	cmp	r4, r5
 8005f90:	d101      	bne.n	8005f96 <__sfputs_r+0x12>
 8005f92:	2000      	movs	r0, #0
 8005f94:	e007      	b.n	8005fa6 <__sfputs_r+0x22>
 8005f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f9a:	463a      	mov	r2, r7
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	f7ff ffda 	bl	8005f56 <__sfputc_r>
 8005fa2:	1c43      	adds	r3, r0, #1
 8005fa4:	d1f3      	bne.n	8005f8e <__sfputs_r+0xa>
 8005fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005fa8 <_vfiprintf_r>:
 8005fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fac:	460d      	mov	r5, r1
 8005fae:	b09d      	sub	sp, #116	; 0x74
 8005fb0:	4614      	mov	r4, r2
 8005fb2:	4698      	mov	r8, r3
 8005fb4:	4606      	mov	r6, r0
 8005fb6:	b118      	cbz	r0, 8005fc0 <_vfiprintf_r+0x18>
 8005fb8:	6a03      	ldr	r3, [r0, #32]
 8005fba:	b90b      	cbnz	r3, 8005fc0 <_vfiprintf_r+0x18>
 8005fbc:	f7fe f98c 	bl	80042d8 <__sinit>
 8005fc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fc2:	07d9      	lsls	r1, r3, #31
 8005fc4:	d405      	bmi.n	8005fd2 <_vfiprintf_r+0x2a>
 8005fc6:	89ab      	ldrh	r3, [r5, #12]
 8005fc8:	059a      	lsls	r2, r3, #22
 8005fca:	d402      	bmi.n	8005fd2 <_vfiprintf_r+0x2a>
 8005fcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fce:	f7fe faaa 	bl	8004526 <__retarget_lock_acquire_recursive>
 8005fd2:	89ab      	ldrh	r3, [r5, #12]
 8005fd4:	071b      	lsls	r3, r3, #28
 8005fd6:	d501      	bpl.n	8005fdc <_vfiprintf_r+0x34>
 8005fd8:	692b      	ldr	r3, [r5, #16]
 8005fda:	b99b      	cbnz	r3, 8006004 <_vfiprintf_r+0x5c>
 8005fdc:	4629      	mov	r1, r5
 8005fde:	4630      	mov	r0, r6
 8005fe0:	f000 f93a 	bl	8006258 <__swsetup_r>
 8005fe4:	b170      	cbz	r0, 8006004 <_vfiprintf_r+0x5c>
 8005fe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fe8:	07dc      	lsls	r4, r3, #31
 8005fea:	d504      	bpl.n	8005ff6 <_vfiprintf_r+0x4e>
 8005fec:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff0:	b01d      	add	sp, #116	; 0x74
 8005ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff6:	89ab      	ldrh	r3, [r5, #12]
 8005ff8:	0598      	lsls	r0, r3, #22
 8005ffa:	d4f7      	bmi.n	8005fec <_vfiprintf_r+0x44>
 8005ffc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ffe:	f7fe fa93 	bl	8004528 <__retarget_lock_release_recursive>
 8006002:	e7f3      	b.n	8005fec <_vfiprintf_r+0x44>
 8006004:	2300      	movs	r3, #0
 8006006:	9309      	str	r3, [sp, #36]	; 0x24
 8006008:	2320      	movs	r3, #32
 800600a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800600e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006012:	2330      	movs	r3, #48	; 0x30
 8006014:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80061c8 <_vfiprintf_r+0x220>
 8006018:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800601c:	f04f 0901 	mov.w	r9, #1
 8006020:	4623      	mov	r3, r4
 8006022:	469a      	mov	sl, r3
 8006024:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006028:	b10a      	cbz	r2, 800602e <_vfiprintf_r+0x86>
 800602a:	2a25      	cmp	r2, #37	; 0x25
 800602c:	d1f9      	bne.n	8006022 <_vfiprintf_r+0x7a>
 800602e:	ebba 0b04 	subs.w	fp, sl, r4
 8006032:	d00b      	beq.n	800604c <_vfiprintf_r+0xa4>
 8006034:	465b      	mov	r3, fp
 8006036:	4622      	mov	r2, r4
 8006038:	4629      	mov	r1, r5
 800603a:	4630      	mov	r0, r6
 800603c:	f7ff ffa2 	bl	8005f84 <__sfputs_r>
 8006040:	3001      	adds	r0, #1
 8006042:	f000 80a9 	beq.w	8006198 <_vfiprintf_r+0x1f0>
 8006046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006048:	445a      	add	r2, fp
 800604a:	9209      	str	r2, [sp, #36]	; 0x24
 800604c:	f89a 3000 	ldrb.w	r3, [sl]
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 80a1 	beq.w	8006198 <_vfiprintf_r+0x1f0>
 8006056:	2300      	movs	r3, #0
 8006058:	f04f 32ff 	mov.w	r2, #4294967295
 800605c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006060:	f10a 0a01 	add.w	sl, sl, #1
 8006064:	9304      	str	r3, [sp, #16]
 8006066:	9307      	str	r3, [sp, #28]
 8006068:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800606c:	931a      	str	r3, [sp, #104]	; 0x68
 800606e:	4654      	mov	r4, sl
 8006070:	2205      	movs	r2, #5
 8006072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006076:	4854      	ldr	r0, [pc, #336]	; (80061c8 <_vfiprintf_r+0x220>)
 8006078:	f7fa f8aa 	bl	80001d0 <memchr>
 800607c:	9a04      	ldr	r2, [sp, #16]
 800607e:	b9d8      	cbnz	r0, 80060b8 <_vfiprintf_r+0x110>
 8006080:	06d1      	lsls	r1, r2, #27
 8006082:	bf44      	itt	mi
 8006084:	2320      	movmi	r3, #32
 8006086:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800608a:	0713      	lsls	r3, r2, #28
 800608c:	bf44      	itt	mi
 800608e:	232b      	movmi	r3, #43	; 0x2b
 8006090:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006094:	f89a 3000 	ldrb.w	r3, [sl]
 8006098:	2b2a      	cmp	r3, #42	; 0x2a
 800609a:	d015      	beq.n	80060c8 <_vfiprintf_r+0x120>
 800609c:	9a07      	ldr	r2, [sp, #28]
 800609e:	4654      	mov	r4, sl
 80060a0:	2000      	movs	r0, #0
 80060a2:	f04f 0c0a 	mov.w	ip, #10
 80060a6:	4621      	mov	r1, r4
 80060a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060ac:	3b30      	subs	r3, #48	; 0x30
 80060ae:	2b09      	cmp	r3, #9
 80060b0:	d94d      	bls.n	800614e <_vfiprintf_r+0x1a6>
 80060b2:	b1b0      	cbz	r0, 80060e2 <_vfiprintf_r+0x13a>
 80060b4:	9207      	str	r2, [sp, #28]
 80060b6:	e014      	b.n	80060e2 <_vfiprintf_r+0x13a>
 80060b8:	eba0 0308 	sub.w	r3, r0, r8
 80060bc:	fa09 f303 	lsl.w	r3, r9, r3
 80060c0:	4313      	orrs	r3, r2
 80060c2:	9304      	str	r3, [sp, #16]
 80060c4:	46a2      	mov	sl, r4
 80060c6:	e7d2      	b.n	800606e <_vfiprintf_r+0xc6>
 80060c8:	9b03      	ldr	r3, [sp, #12]
 80060ca:	1d19      	adds	r1, r3, #4
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	9103      	str	r1, [sp, #12]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	bfbb      	ittet	lt
 80060d4:	425b      	neglt	r3, r3
 80060d6:	f042 0202 	orrlt.w	r2, r2, #2
 80060da:	9307      	strge	r3, [sp, #28]
 80060dc:	9307      	strlt	r3, [sp, #28]
 80060de:	bfb8      	it	lt
 80060e0:	9204      	strlt	r2, [sp, #16]
 80060e2:	7823      	ldrb	r3, [r4, #0]
 80060e4:	2b2e      	cmp	r3, #46	; 0x2e
 80060e6:	d10c      	bne.n	8006102 <_vfiprintf_r+0x15a>
 80060e8:	7863      	ldrb	r3, [r4, #1]
 80060ea:	2b2a      	cmp	r3, #42	; 0x2a
 80060ec:	d134      	bne.n	8006158 <_vfiprintf_r+0x1b0>
 80060ee:	9b03      	ldr	r3, [sp, #12]
 80060f0:	1d1a      	adds	r2, r3, #4
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	9203      	str	r2, [sp, #12]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	bfb8      	it	lt
 80060fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80060fe:	3402      	adds	r4, #2
 8006100:	9305      	str	r3, [sp, #20]
 8006102:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80061d8 <_vfiprintf_r+0x230>
 8006106:	7821      	ldrb	r1, [r4, #0]
 8006108:	2203      	movs	r2, #3
 800610a:	4650      	mov	r0, sl
 800610c:	f7fa f860 	bl	80001d0 <memchr>
 8006110:	b138      	cbz	r0, 8006122 <_vfiprintf_r+0x17a>
 8006112:	9b04      	ldr	r3, [sp, #16]
 8006114:	eba0 000a 	sub.w	r0, r0, sl
 8006118:	2240      	movs	r2, #64	; 0x40
 800611a:	4082      	lsls	r2, r0
 800611c:	4313      	orrs	r3, r2
 800611e:	3401      	adds	r4, #1
 8006120:	9304      	str	r3, [sp, #16]
 8006122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006126:	4829      	ldr	r0, [pc, #164]	; (80061cc <_vfiprintf_r+0x224>)
 8006128:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800612c:	2206      	movs	r2, #6
 800612e:	f7fa f84f 	bl	80001d0 <memchr>
 8006132:	2800      	cmp	r0, #0
 8006134:	d03f      	beq.n	80061b6 <_vfiprintf_r+0x20e>
 8006136:	4b26      	ldr	r3, [pc, #152]	; (80061d0 <_vfiprintf_r+0x228>)
 8006138:	bb1b      	cbnz	r3, 8006182 <_vfiprintf_r+0x1da>
 800613a:	9b03      	ldr	r3, [sp, #12]
 800613c:	3307      	adds	r3, #7
 800613e:	f023 0307 	bic.w	r3, r3, #7
 8006142:	3308      	adds	r3, #8
 8006144:	9303      	str	r3, [sp, #12]
 8006146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006148:	443b      	add	r3, r7
 800614a:	9309      	str	r3, [sp, #36]	; 0x24
 800614c:	e768      	b.n	8006020 <_vfiprintf_r+0x78>
 800614e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006152:	460c      	mov	r4, r1
 8006154:	2001      	movs	r0, #1
 8006156:	e7a6      	b.n	80060a6 <_vfiprintf_r+0xfe>
 8006158:	2300      	movs	r3, #0
 800615a:	3401      	adds	r4, #1
 800615c:	9305      	str	r3, [sp, #20]
 800615e:	4619      	mov	r1, r3
 8006160:	f04f 0c0a 	mov.w	ip, #10
 8006164:	4620      	mov	r0, r4
 8006166:	f810 2b01 	ldrb.w	r2, [r0], #1
 800616a:	3a30      	subs	r2, #48	; 0x30
 800616c:	2a09      	cmp	r2, #9
 800616e:	d903      	bls.n	8006178 <_vfiprintf_r+0x1d0>
 8006170:	2b00      	cmp	r3, #0
 8006172:	d0c6      	beq.n	8006102 <_vfiprintf_r+0x15a>
 8006174:	9105      	str	r1, [sp, #20]
 8006176:	e7c4      	b.n	8006102 <_vfiprintf_r+0x15a>
 8006178:	fb0c 2101 	mla	r1, ip, r1, r2
 800617c:	4604      	mov	r4, r0
 800617e:	2301      	movs	r3, #1
 8006180:	e7f0      	b.n	8006164 <_vfiprintf_r+0x1bc>
 8006182:	ab03      	add	r3, sp, #12
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	462a      	mov	r2, r5
 8006188:	4b12      	ldr	r3, [pc, #72]	; (80061d4 <_vfiprintf_r+0x22c>)
 800618a:	a904      	add	r1, sp, #16
 800618c:	4630      	mov	r0, r6
 800618e:	f7fd fc51 	bl	8003a34 <_printf_float>
 8006192:	4607      	mov	r7, r0
 8006194:	1c78      	adds	r0, r7, #1
 8006196:	d1d6      	bne.n	8006146 <_vfiprintf_r+0x19e>
 8006198:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800619a:	07d9      	lsls	r1, r3, #31
 800619c:	d405      	bmi.n	80061aa <_vfiprintf_r+0x202>
 800619e:	89ab      	ldrh	r3, [r5, #12]
 80061a0:	059a      	lsls	r2, r3, #22
 80061a2:	d402      	bmi.n	80061aa <_vfiprintf_r+0x202>
 80061a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061a6:	f7fe f9bf 	bl	8004528 <__retarget_lock_release_recursive>
 80061aa:	89ab      	ldrh	r3, [r5, #12]
 80061ac:	065b      	lsls	r3, r3, #25
 80061ae:	f53f af1d 	bmi.w	8005fec <_vfiprintf_r+0x44>
 80061b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061b4:	e71c      	b.n	8005ff0 <_vfiprintf_r+0x48>
 80061b6:	ab03      	add	r3, sp, #12
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	462a      	mov	r2, r5
 80061bc:	4b05      	ldr	r3, [pc, #20]	; (80061d4 <_vfiprintf_r+0x22c>)
 80061be:	a904      	add	r1, sp, #16
 80061c0:	4630      	mov	r0, r6
 80061c2:	f7fd fedb 	bl	8003f7c <_printf_i>
 80061c6:	e7e4      	b.n	8006192 <_vfiprintf_r+0x1ea>
 80061c8:	080075dc 	.word	0x080075dc
 80061cc:	080075e6 	.word	0x080075e6
 80061d0:	08003a35 	.word	0x08003a35
 80061d4:	08005f85 	.word	0x08005f85
 80061d8:	080075e2 	.word	0x080075e2

080061dc <__swbuf_r>:
 80061dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061de:	460e      	mov	r6, r1
 80061e0:	4614      	mov	r4, r2
 80061e2:	4605      	mov	r5, r0
 80061e4:	b118      	cbz	r0, 80061ee <__swbuf_r+0x12>
 80061e6:	6a03      	ldr	r3, [r0, #32]
 80061e8:	b90b      	cbnz	r3, 80061ee <__swbuf_r+0x12>
 80061ea:	f7fe f875 	bl	80042d8 <__sinit>
 80061ee:	69a3      	ldr	r3, [r4, #24]
 80061f0:	60a3      	str	r3, [r4, #8]
 80061f2:	89a3      	ldrh	r3, [r4, #12]
 80061f4:	071a      	lsls	r2, r3, #28
 80061f6:	d525      	bpl.n	8006244 <__swbuf_r+0x68>
 80061f8:	6923      	ldr	r3, [r4, #16]
 80061fa:	b31b      	cbz	r3, 8006244 <__swbuf_r+0x68>
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	6922      	ldr	r2, [r4, #16]
 8006200:	1a98      	subs	r0, r3, r2
 8006202:	6963      	ldr	r3, [r4, #20]
 8006204:	b2f6      	uxtb	r6, r6
 8006206:	4283      	cmp	r3, r0
 8006208:	4637      	mov	r7, r6
 800620a:	dc04      	bgt.n	8006216 <__swbuf_r+0x3a>
 800620c:	4621      	mov	r1, r4
 800620e:	4628      	mov	r0, r5
 8006210:	f7ff fdae 	bl	8005d70 <_fflush_r>
 8006214:	b9e0      	cbnz	r0, 8006250 <__swbuf_r+0x74>
 8006216:	68a3      	ldr	r3, [r4, #8]
 8006218:	3b01      	subs	r3, #1
 800621a:	60a3      	str	r3, [r4, #8]
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	1c5a      	adds	r2, r3, #1
 8006220:	6022      	str	r2, [r4, #0]
 8006222:	701e      	strb	r6, [r3, #0]
 8006224:	6962      	ldr	r2, [r4, #20]
 8006226:	1c43      	adds	r3, r0, #1
 8006228:	429a      	cmp	r2, r3
 800622a:	d004      	beq.n	8006236 <__swbuf_r+0x5a>
 800622c:	89a3      	ldrh	r3, [r4, #12]
 800622e:	07db      	lsls	r3, r3, #31
 8006230:	d506      	bpl.n	8006240 <__swbuf_r+0x64>
 8006232:	2e0a      	cmp	r6, #10
 8006234:	d104      	bne.n	8006240 <__swbuf_r+0x64>
 8006236:	4621      	mov	r1, r4
 8006238:	4628      	mov	r0, r5
 800623a:	f7ff fd99 	bl	8005d70 <_fflush_r>
 800623e:	b938      	cbnz	r0, 8006250 <__swbuf_r+0x74>
 8006240:	4638      	mov	r0, r7
 8006242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006244:	4621      	mov	r1, r4
 8006246:	4628      	mov	r0, r5
 8006248:	f000 f806 	bl	8006258 <__swsetup_r>
 800624c:	2800      	cmp	r0, #0
 800624e:	d0d5      	beq.n	80061fc <__swbuf_r+0x20>
 8006250:	f04f 37ff 	mov.w	r7, #4294967295
 8006254:	e7f4      	b.n	8006240 <__swbuf_r+0x64>
	...

08006258 <__swsetup_r>:
 8006258:	b538      	push	{r3, r4, r5, lr}
 800625a:	4b2a      	ldr	r3, [pc, #168]	; (8006304 <__swsetup_r+0xac>)
 800625c:	4605      	mov	r5, r0
 800625e:	6818      	ldr	r0, [r3, #0]
 8006260:	460c      	mov	r4, r1
 8006262:	b118      	cbz	r0, 800626c <__swsetup_r+0x14>
 8006264:	6a03      	ldr	r3, [r0, #32]
 8006266:	b90b      	cbnz	r3, 800626c <__swsetup_r+0x14>
 8006268:	f7fe f836 	bl	80042d8 <__sinit>
 800626c:	89a3      	ldrh	r3, [r4, #12]
 800626e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006272:	0718      	lsls	r0, r3, #28
 8006274:	d422      	bmi.n	80062bc <__swsetup_r+0x64>
 8006276:	06d9      	lsls	r1, r3, #27
 8006278:	d407      	bmi.n	800628a <__swsetup_r+0x32>
 800627a:	2309      	movs	r3, #9
 800627c:	602b      	str	r3, [r5, #0]
 800627e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006282:	81a3      	strh	r3, [r4, #12]
 8006284:	f04f 30ff 	mov.w	r0, #4294967295
 8006288:	e034      	b.n	80062f4 <__swsetup_r+0x9c>
 800628a:	0758      	lsls	r0, r3, #29
 800628c:	d512      	bpl.n	80062b4 <__swsetup_r+0x5c>
 800628e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006290:	b141      	cbz	r1, 80062a4 <__swsetup_r+0x4c>
 8006292:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006296:	4299      	cmp	r1, r3
 8006298:	d002      	beq.n	80062a0 <__swsetup_r+0x48>
 800629a:	4628      	mov	r0, r5
 800629c:	f7fe ffc2 	bl	8005224 <_free_r>
 80062a0:	2300      	movs	r3, #0
 80062a2:	6363      	str	r3, [r4, #52]	; 0x34
 80062a4:	89a3      	ldrh	r3, [r4, #12]
 80062a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062aa:	81a3      	strh	r3, [r4, #12]
 80062ac:	2300      	movs	r3, #0
 80062ae:	6063      	str	r3, [r4, #4]
 80062b0:	6923      	ldr	r3, [r4, #16]
 80062b2:	6023      	str	r3, [r4, #0]
 80062b4:	89a3      	ldrh	r3, [r4, #12]
 80062b6:	f043 0308 	orr.w	r3, r3, #8
 80062ba:	81a3      	strh	r3, [r4, #12]
 80062bc:	6923      	ldr	r3, [r4, #16]
 80062be:	b94b      	cbnz	r3, 80062d4 <__swsetup_r+0x7c>
 80062c0:	89a3      	ldrh	r3, [r4, #12]
 80062c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80062c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ca:	d003      	beq.n	80062d4 <__swsetup_r+0x7c>
 80062cc:	4621      	mov	r1, r4
 80062ce:	4628      	mov	r0, r5
 80062d0:	f000 f884 	bl	80063dc <__smakebuf_r>
 80062d4:	89a0      	ldrh	r0, [r4, #12]
 80062d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062da:	f010 0301 	ands.w	r3, r0, #1
 80062de:	d00a      	beq.n	80062f6 <__swsetup_r+0x9e>
 80062e0:	2300      	movs	r3, #0
 80062e2:	60a3      	str	r3, [r4, #8]
 80062e4:	6963      	ldr	r3, [r4, #20]
 80062e6:	425b      	negs	r3, r3
 80062e8:	61a3      	str	r3, [r4, #24]
 80062ea:	6923      	ldr	r3, [r4, #16]
 80062ec:	b943      	cbnz	r3, 8006300 <__swsetup_r+0xa8>
 80062ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80062f2:	d1c4      	bne.n	800627e <__swsetup_r+0x26>
 80062f4:	bd38      	pop	{r3, r4, r5, pc}
 80062f6:	0781      	lsls	r1, r0, #30
 80062f8:	bf58      	it	pl
 80062fa:	6963      	ldrpl	r3, [r4, #20]
 80062fc:	60a3      	str	r3, [r4, #8]
 80062fe:	e7f4      	b.n	80062ea <__swsetup_r+0x92>
 8006300:	2000      	movs	r0, #0
 8006302:	e7f7      	b.n	80062f4 <__swsetup_r+0x9c>
 8006304:	200000e0 	.word	0x200000e0

08006308 <_raise_r>:
 8006308:	291f      	cmp	r1, #31
 800630a:	b538      	push	{r3, r4, r5, lr}
 800630c:	4604      	mov	r4, r0
 800630e:	460d      	mov	r5, r1
 8006310:	d904      	bls.n	800631c <_raise_r+0x14>
 8006312:	2316      	movs	r3, #22
 8006314:	6003      	str	r3, [r0, #0]
 8006316:	f04f 30ff 	mov.w	r0, #4294967295
 800631a:	bd38      	pop	{r3, r4, r5, pc}
 800631c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800631e:	b112      	cbz	r2, 8006326 <_raise_r+0x1e>
 8006320:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006324:	b94b      	cbnz	r3, 800633a <_raise_r+0x32>
 8006326:	4620      	mov	r0, r4
 8006328:	f000 f830 	bl	800638c <_getpid_r>
 800632c:	462a      	mov	r2, r5
 800632e:	4601      	mov	r1, r0
 8006330:	4620      	mov	r0, r4
 8006332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006336:	f000 b817 	b.w	8006368 <_kill_r>
 800633a:	2b01      	cmp	r3, #1
 800633c:	d00a      	beq.n	8006354 <_raise_r+0x4c>
 800633e:	1c59      	adds	r1, r3, #1
 8006340:	d103      	bne.n	800634a <_raise_r+0x42>
 8006342:	2316      	movs	r3, #22
 8006344:	6003      	str	r3, [r0, #0]
 8006346:	2001      	movs	r0, #1
 8006348:	e7e7      	b.n	800631a <_raise_r+0x12>
 800634a:	2400      	movs	r4, #0
 800634c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006350:	4628      	mov	r0, r5
 8006352:	4798      	blx	r3
 8006354:	2000      	movs	r0, #0
 8006356:	e7e0      	b.n	800631a <_raise_r+0x12>

08006358 <raise>:
 8006358:	4b02      	ldr	r3, [pc, #8]	; (8006364 <raise+0xc>)
 800635a:	4601      	mov	r1, r0
 800635c:	6818      	ldr	r0, [r3, #0]
 800635e:	f7ff bfd3 	b.w	8006308 <_raise_r>
 8006362:	bf00      	nop
 8006364:	200000e0 	.word	0x200000e0

08006368 <_kill_r>:
 8006368:	b538      	push	{r3, r4, r5, lr}
 800636a:	4d07      	ldr	r5, [pc, #28]	; (8006388 <_kill_r+0x20>)
 800636c:	2300      	movs	r3, #0
 800636e:	4604      	mov	r4, r0
 8006370:	4608      	mov	r0, r1
 8006372:	4611      	mov	r1, r2
 8006374:	602b      	str	r3, [r5, #0]
 8006376:	f7fb fee9 	bl	800214c <_kill>
 800637a:	1c43      	adds	r3, r0, #1
 800637c:	d102      	bne.n	8006384 <_kill_r+0x1c>
 800637e:	682b      	ldr	r3, [r5, #0]
 8006380:	b103      	cbz	r3, 8006384 <_kill_r+0x1c>
 8006382:	6023      	str	r3, [r4, #0]
 8006384:	bd38      	pop	{r3, r4, r5, pc}
 8006386:	bf00      	nop
 8006388:	200004b8 	.word	0x200004b8

0800638c <_getpid_r>:
 800638c:	f7fb bed6 	b.w	800213c <_getpid>

08006390 <__swhatbuf_r>:
 8006390:	b570      	push	{r4, r5, r6, lr}
 8006392:	460c      	mov	r4, r1
 8006394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006398:	2900      	cmp	r1, #0
 800639a:	b096      	sub	sp, #88	; 0x58
 800639c:	4615      	mov	r5, r2
 800639e:	461e      	mov	r6, r3
 80063a0:	da0d      	bge.n	80063be <__swhatbuf_r+0x2e>
 80063a2:	89a3      	ldrh	r3, [r4, #12]
 80063a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80063a8:	f04f 0100 	mov.w	r1, #0
 80063ac:	bf0c      	ite	eq
 80063ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80063b2:	2340      	movne	r3, #64	; 0x40
 80063b4:	2000      	movs	r0, #0
 80063b6:	6031      	str	r1, [r6, #0]
 80063b8:	602b      	str	r3, [r5, #0]
 80063ba:	b016      	add	sp, #88	; 0x58
 80063bc:	bd70      	pop	{r4, r5, r6, pc}
 80063be:	466a      	mov	r2, sp
 80063c0:	f000 f848 	bl	8006454 <_fstat_r>
 80063c4:	2800      	cmp	r0, #0
 80063c6:	dbec      	blt.n	80063a2 <__swhatbuf_r+0x12>
 80063c8:	9901      	ldr	r1, [sp, #4]
 80063ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80063ce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80063d2:	4259      	negs	r1, r3
 80063d4:	4159      	adcs	r1, r3
 80063d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063da:	e7eb      	b.n	80063b4 <__swhatbuf_r+0x24>

080063dc <__smakebuf_r>:
 80063dc:	898b      	ldrh	r3, [r1, #12]
 80063de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063e0:	079d      	lsls	r5, r3, #30
 80063e2:	4606      	mov	r6, r0
 80063e4:	460c      	mov	r4, r1
 80063e6:	d507      	bpl.n	80063f8 <__smakebuf_r+0x1c>
 80063e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80063ec:	6023      	str	r3, [r4, #0]
 80063ee:	6123      	str	r3, [r4, #16]
 80063f0:	2301      	movs	r3, #1
 80063f2:	6163      	str	r3, [r4, #20]
 80063f4:	b002      	add	sp, #8
 80063f6:	bd70      	pop	{r4, r5, r6, pc}
 80063f8:	ab01      	add	r3, sp, #4
 80063fa:	466a      	mov	r2, sp
 80063fc:	f7ff ffc8 	bl	8006390 <__swhatbuf_r>
 8006400:	9900      	ldr	r1, [sp, #0]
 8006402:	4605      	mov	r5, r0
 8006404:	4630      	mov	r0, r6
 8006406:	f7fd f9e9 	bl	80037dc <_malloc_r>
 800640a:	b948      	cbnz	r0, 8006420 <__smakebuf_r+0x44>
 800640c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006410:	059a      	lsls	r2, r3, #22
 8006412:	d4ef      	bmi.n	80063f4 <__smakebuf_r+0x18>
 8006414:	f023 0303 	bic.w	r3, r3, #3
 8006418:	f043 0302 	orr.w	r3, r3, #2
 800641c:	81a3      	strh	r3, [r4, #12]
 800641e:	e7e3      	b.n	80063e8 <__smakebuf_r+0xc>
 8006420:	89a3      	ldrh	r3, [r4, #12]
 8006422:	6020      	str	r0, [r4, #0]
 8006424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006428:	81a3      	strh	r3, [r4, #12]
 800642a:	9b00      	ldr	r3, [sp, #0]
 800642c:	6163      	str	r3, [r4, #20]
 800642e:	9b01      	ldr	r3, [sp, #4]
 8006430:	6120      	str	r0, [r4, #16]
 8006432:	b15b      	cbz	r3, 800644c <__smakebuf_r+0x70>
 8006434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006438:	4630      	mov	r0, r6
 800643a:	f000 f81d 	bl	8006478 <_isatty_r>
 800643e:	b128      	cbz	r0, 800644c <__smakebuf_r+0x70>
 8006440:	89a3      	ldrh	r3, [r4, #12]
 8006442:	f023 0303 	bic.w	r3, r3, #3
 8006446:	f043 0301 	orr.w	r3, r3, #1
 800644a:	81a3      	strh	r3, [r4, #12]
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	431d      	orrs	r5, r3
 8006450:	81a5      	strh	r5, [r4, #12]
 8006452:	e7cf      	b.n	80063f4 <__smakebuf_r+0x18>

08006454 <_fstat_r>:
 8006454:	b538      	push	{r3, r4, r5, lr}
 8006456:	4d07      	ldr	r5, [pc, #28]	; (8006474 <_fstat_r+0x20>)
 8006458:	2300      	movs	r3, #0
 800645a:	4604      	mov	r4, r0
 800645c:	4608      	mov	r0, r1
 800645e:	4611      	mov	r1, r2
 8006460:	602b      	str	r3, [r5, #0]
 8006462:	f7fb fed2 	bl	800220a <_fstat>
 8006466:	1c43      	adds	r3, r0, #1
 8006468:	d102      	bne.n	8006470 <_fstat_r+0x1c>
 800646a:	682b      	ldr	r3, [r5, #0]
 800646c:	b103      	cbz	r3, 8006470 <_fstat_r+0x1c>
 800646e:	6023      	str	r3, [r4, #0]
 8006470:	bd38      	pop	{r3, r4, r5, pc}
 8006472:	bf00      	nop
 8006474:	200004b8 	.word	0x200004b8

08006478 <_isatty_r>:
 8006478:	b538      	push	{r3, r4, r5, lr}
 800647a:	4d06      	ldr	r5, [pc, #24]	; (8006494 <_isatty_r+0x1c>)
 800647c:	2300      	movs	r3, #0
 800647e:	4604      	mov	r4, r0
 8006480:	4608      	mov	r0, r1
 8006482:	602b      	str	r3, [r5, #0]
 8006484:	f7fb fed1 	bl	800222a <_isatty>
 8006488:	1c43      	adds	r3, r0, #1
 800648a:	d102      	bne.n	8006492 <_isatty_r+0x1a>
 800648c:	682b      	ldr	r3, [r5, #0]
 800648e:	b103      	cbz	r3, 8006492 <_isatty_r+0x1a>
 8006490:	6023      	str	r3, [r4, #0]
 8006492:	bd38      	pop	{r3, r4, r5, pc}
 8006494:	200004b8 	.word	0x200004b8

08006498 <pow>:
 8006498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649a:	ed2d 8b02 	vpush	{d8}
 800649e:	eeb0 8a40 	vmov.f32	s16, s0
 80064a2:	eef0 8a60 	vmov.f32	s17, s1
 80064a6:	ec55 4b11 	vmov	r4, r5, d1
 80064aa:	f000 f871 	bl	8006590 <__ieee754_pow>
 80064ae:	4622      	mov	r2, r4
 80064b0:	462b      	mov	r3, r5
 80064b2:	4620      	mov	r0, r4
 80064b4:	4629      	mov	r1, r5
 80064b6:	ec57 6b10 	vmov	r6, r7, d0
 80064ba:	f7fa fb37 	bl	8000b2c <__aeabi_dcmpun>
 80064be:	2800      	cmp	r0, #0
 80064c0:	d13b      	bne.n	800653a <pow+0xa2>
 80064c2:	ec51 0b18 	vmov	r0, r1, d8
 80064c6:	2200      	movs	r2, #0
 80064c8:	2300      	movs	r3, #0
 80064ca:	f7fa fafd 	bl	8000ac8 <__aeabi_dcmpeq>
 80064ce:	b1b8      	cbz	r0, 8006500 <pow+0x68>
 80064d0:	2200      	movs	r2, #0
 80064d2:	2300      	movs	r3, #0
 80064d4:	4620      	mov	r0, r4
 80064d6:	4629      	mov	r1, r5
 80064d8:	f7fa faf6 	bl	8000ac8 <__aeabi_dcmpeq>
 80064dc:	2800      	cmp	r0, #0
 80064de:	d146      	bne.n	800656e <pow+0xd6>
 80064e0:	ec45 4b10 	vmov	d0, r4, r5
 80064e4:	f000 f848 	bl	8006578 <finite>
 80064e8:	b338      	cbz	r0, 800653a <pow+0xa2>
 80064ea:	2200      	movs	r2, #0
 80064ec:	2300      	movs	r3, #0
 80064ee:	4620      	mov	r0, r4
 80064f0:	4629      	mov	r1, r5
 80064f2:	f7fa faf3 	bl	8000adc <__aeabi_dcmplt>
 80064f6:	b300      	cbz	r0, 800653a <pow+0xa2>
 80064f8:	f7fd ffea 	bl	80044d0 <__errno>
 80064fc:	2322      	movs	r3, #34	; 0x22
 80064fe:	e01b      	b.n	8006538 <pow+0xa0>
 8006500:	ec47 6b10 	vmov	d0, r6, r7
 8006504:	f000 f838 	bl	8006578 <finite>
 8006508:	b9e0      	cbnz	r0, 8006544 <pow+0xac>
 800650a:	eeb0 0a48 	vmov.f32	s0, s16
 800650e:	eef0 0a68 	vmov.f32	s1, s17
 8006512:	f000 f831 	bl	8006578 <finite>
 8006516:	b1a8      	cbz	r0, 8006544 <pow+0xac>
 8006518:	ec45 4b10 	vmov	d0, r4, r5
 800651c:	f000 f82c 	bl	8006578 <finite>
 8006520:	b180      	cbz	r0, 8006544 <pow+0xac>
 8006522:	4632      	mov	r2, r6
 8006524:	463b      	mov	r3, r7
 8006526:	4630      	mov	r0, r6
 8006528:	4639      	mov	r1, r7
 800652a:	f7fa faff 	bl	8000b2c <__aeabi_dcmpun>
 800652e:	2800      	cmp	r0, #0
 8006530:	d0e2      	beq.n	80064f8 <pow+0x60>
 8006532:	f7fd ffcd 	bl	80044d0 <__errno>
 8006536:	2321      	movs	r3, #33	; 0x21
 8006538:	6003      	str	r3, [r0, #0]
 800653a:	ecbd 8b02 	vpop	{d8}
 800653e:	ec47 6b10 	vmov	d0, r6, r7
 8006542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006544:	2200      	movs	r2, #0
 8006546:	2300      	movs	r3, #0
 8006548:	4630      	mov	r0, r6
 800654a:	4639      	mov	r1, r7
 800654c:	f7fa fabc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006550:	2800      	cmp	r0, #0
 8006552:	d0f2      	beq.n	800653a <pow+0xa2>
 8006554:	eeb0 0a48 	vmov.f32	s0, s16
 8006558:	eef0 0a68 	vmov.f32	s1, s17
 800655c:	f000 f80c 	bl	8006578 <finite>
 8006560:	2800      	cmp	r0, #0
 8006562:	d0ea      	beq.n	800653a <pow+0xa2>
 8006564:	ec45 4b10 	vmov	d0, r4, r5
 8006568:	f000 f806 	bl	8006578 <finite>
 800656c:	e7c3      	b.n	80064f6 <pow+0x5e>
 800656e:	4f01      	ldr	r7, [pc, #4]	; (8006574 <pow+0xdc>)
 8006570:	2600      	movs	r6, #0
 8006572:	e7e2      	b.n	800653a <pow+0xa2>
 8006574:	3ff00000 	.word	0x3ff00000

08006578 <finite>:
 8006578:	b082      	sub	sp, #8
 800657a:	ed8d 0b00 	vstr	d0, [sp]
 800657e:	9801      	ldr	r0, [sp, #4]
 8006580:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006584:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006588:	0fc0      	lsrs	r0, r0, #31
 800658a:	b002      	add	sp, #8
 800658c:	4770      	bx	lr
	...

08006590 <__ieee754_pow>:
 8006590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006594:	ed2d 8b06 	vpush	{d8-d10}
 8006598:	b089      	sub	sp, #36	; 0x24
 800659a:	ed8d 1b00 	vstr	d1, [sp]
 800659e:	e9dd 2900 	ldrd	r2, r9, [sp]
 80065a2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80065a6:	ea58 0102 	orrs.w	r1, r8, r2
 80065aa:	ec57 6b10 	vmov	r6, r7, d0
 80065ae:	d115      	bne.n	80065dc <__ieee754_pow+0x4c>
 80065b0:	19b3      	adds	r3, r6, r6
 80065b2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80065b6:	4152      	adcs	r2, r2
 80065b8:	4299      	cmp	r1, r3
 80065ba:	4b89      	ldr	r3, [pc, #548]	; (80067e0 <__ieee754_pow+0x250>)
 80065bc:	4193      	sbcs	r3, r2
 80065be:	f080 84d1 	bcs.w	8006f64 <__ieee754_pow+0x9d4>
 80065c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065c6:	4630      	mov	r0, r6
 80065c8:	4639      	mov	r1, r7
 80065ca:	f7f9 fe5f 	bl	800028c <__adddf3>
 80065ce:	ec41 0b10 	vmov	d0, r0, r1
 80065d2:	b009      	add	sp, #36	; 0x24
 80065d4:	ecbd 8b06 	vpop	{d8-d10}
 80065d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065dc:	4b81      	ldr	r3, [pc, #516]	; (80067e4 <__ieee754_pow+0x254>)
 80065de:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80065e2:	429c      	cmp	r4, r3
 80065e4:	ee10 aa10 	vmov	sl, s0
 80065e8:	463d      	mov	r5, r7
 80065ea:	dc06      	bgt.n	80065fa <__ieee754_pow+0x6a>
 80065ec:	d101      	bne.n	80065f2 <__ieee754_pow+0x62>
 80065ee:	2e00      	cmp	r6, #0
 80065f0:	d1e7      	bne.n	80065c2 <__ieee754_pow+0x32>
 80065f2:	4598      	cmp	r8, r3
 80065f4:	dc01      	bgt.n	80065fa <__ieee754_pow+0x6a>
 80065f6:	d10f      	bne.n	8006618 <__ieee754_pow+0x88>
 80065f8:	b172      	cbz	r2, 8006618 <__ieee754_pow+0x88>
 80065fa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80065fe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006602:	ea55 050a 	orrs.w	r5, r5, sl
 8006606:	d1dc      	bne.n	80065c2 <__ieee754_pow+0x32>
 8006608:	e9dd 3200 	ldrd	r3, r2, [sp]
 800660c:	18db      	adds	r3, r3, r3
 800660e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006612:	4152      	adcs	r2, r2
 8006614:	429d      	cmp	r5, r3
 8006616:	e7d0      	b.n	80065ba <__ieee754_pow+0x2a>
 8006618:	2d00      	cmp	r5, #0
 800661a:	da3b      	bge.n	8006694 <__ieee754_pow+0x104>
 800661c:	4b72      	ldr	r3, [pc, #456]	; (80067e8 <__ieee754_pow+0x258>)
 800661e:	4598      	cmp	r8, r3
 8006620:	dc51      	bgt.n	80066c6 <__ieee754_pow+0x136>
 8006622:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006626:	4598      	cmp	r8, r3
 8006628:	f340 84ab 	ble.w	8006f82 <__ieee754_pow+0x9f2>
 800662c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006630:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006634:	2b14      	cmp	r3, #20
 8006636:	dd0f      	ble.n	8006658 <__ieee754_pow+0xc8>
 8006638:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800663c:	fa22 f103 	lsr.w	r1, r2, r3
 8006640:	fa01 f303 	lsl.w	r3, r1, r3
 8006644:	4293      	cmp	r3, r2
 8006646:	f040 849c 	bne.w	8006f82 <__ieee754_pow+0x9f2>
 800664a:	f001 0101 	and.w	r1, r1, #1
 800664e:	f1c1 0302 	rsb	r3, r1, #2
 8006652:	9304      	str	r3, [sp, #16]
 8006654:	b182      	cbz	r2, 8006678 <__ieee754_pow+0xe8>
 8006656:	e05f      	b.n	8006718 <__ieee754_pow+0x188>
 8006658:	2a00      	cmp	r2, #0
 800665a:	d15b      	bne.n	8006714 <__ieee754_pow+0x184>
 800665c:	f1c3 0314 	rsb	r3, r3, #20
 8006660:	fa48 f103 	asr.w	r1, r8, r3
 8006664:	fa01 f303 	lsl.w	r3, r1, r3
 8006668:	4543      	cmp	r3, r8
 800666a:	f040 8487 	bne.w	8006f7c <__ieee754_pow+0x9ec>
 800666e:	f001 0101 	and.w	r1, r1, #1
 8006672:	f1c1 0302 	rsb	r3, r1, #2
 8006676:	9304      	str	r3, [sp, #16]
 8006678:	4b5c      	ldr	r3, [pc, #368]	; (80067ec <__ieee754_pow+0x25c>)
 800667a:	4598      	cmp	r8, r3
 800667c:	d132      	bne.n	80066e4 <__ieee754_pow+0x154>
 800667e:	f1b9 0f00 	cmp.w	r9, #0
 8006682:	f280 8477 	bge.w	8006f74 <__ieee754_pow+0x9e4>
 8006686:	4959      	ldr	r1, [pc, #356]	; (80067ec <__ieee754_pow+0x25c>)
 8006688:	4632      	mov	r2, r6
 800668a:	463b      	mov	r3, r7
 800668c:	2000      	movs	r0, #0
 800668e:	f7fa f8dd 	bl	800084c <__aeabi_ddiv>
 8006692:	e79c      	b.n	80065ce <__ieee754_pow+0x3e>
 8006694:	2300      	movs	r3, #0
 8006696:	9304      	str	r3, [sp, #16]
 8006698:	2a00      	cmp	r2, #0
 800669a:	d13d      	bne.n	8006718 <__ieee754_pow+0x188>
 800669c:	4b51      	ldr	r3, [pc, #324]	; (80067e4 <__ieee754_pow+0x254>)
 800669e:	4598      	cmp	r8, r3
 80066a0:	d1ea      	bne.n	8006678 <__ieee754_pow+0xe8>
 80066a2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80066a6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80066aa:	ea53 030a 	orrs.w	r3, r3, sl
 80066ae:	f000 8459 	beq.w	8006f64 <__ieee754_pow+0x9d4>
 80066b2:	4b4f      	ldr	r3, [pc, #316]	; (80067f0 <__ieee754_pow+0x260>)
 80066b4:	429c      	cmp	r4, r3
 80066b6:	dd08      	ble.n	80066ca <__ieee754_pow+0x13a>
 80066b8:	f1b9 0f00 	cmp.w	r9, #0
 80066bc:	f2c0 8456 	blt.w	8006f6c <__ieee754_pow+0x9dc>
 80066c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066c4:	e783      	b.n	80065ce <__ieee754_pow+0x3e>
 80066c6:	2302      	movs	r3, #2
 80066c8:	e7e5      	b.n	8006696 <__ieee754_pow+0x106>
 80066ca:	f1b9 0f00 	cmp.w	r9, #0
 80066ce:	f04f 0000 	mov.w	r0, #0
 80066d2:	f04f 0100 	mov.w	r1, #0
 80066d6:	f6bf af7a 	bge.w	80065ce <__ieee754_pow+0x3e>
 80066da:	e9dd 0300 	ldrd	r0, r3, [sp]
 80066de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80066e2:	e774      	b.n	80065ce <__ieee754_pow+0x3e>
 80066e4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80066e8:	d106      	bne.n	80066f8 <__ieee754_pow+0x168>
 80066ea:	4632      	mov	r2, r6
 80066ec:	463b      	mov	r3, r7
 80066ee:	4630      	mov	r0, r6
 80066f0:	4639      	mov	r1, r7
 80066f2:	f7f9 ff81 	bl	80005f8 <__aeabi_dmul>
 80066f6:	e76a      	b.n	80065ce <__ieee754_pow+0x3e>
 80066f8:	4b3e      	ldr	r3, [pc, #248]	; (80067f4 <__ieee754_pow+0x264>)
 80066fa:	4599      	cmp	r9, r3
 80066fc:	d10c      	bne.n	8006718 <__ieee754_pow+0x188>
 80066fe:	2d00      	cmp	r5, #0
 8006700:	db0a      	blt.n	8006718 <__ieee754_pow+0x188>
 8006702:	ec47 6b10 	vmov	d0, r6, r7
 8006706:	b009      	add	sp, #36	; 0x24
 8006708:	ecbd 8b06 	vpop	{d8-d10}
 800670c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006710:	f000 bd20 	b.w	8007154 <__ieee754_sqrt>
 8006714:	2300      	movs	r3, #0
 8006716:	9304      	str	r3, [sp, #16]
 8006718:	ec47 6b10 	vmov	d0, r6, r7
 800671c:	f000 fc62 	bl	8006fe4 <fabs>
 8006720:	ec51 0b10 	vmov	r0, r1, d0
 8006724:	f1ba 0f00 	cmp.w	sl, #0
 8006728:	d129      	bne.n	800677e <__ieee754_pow+0x1ee>
 800672a:	b124      	cbz	r4, 8006736 <__ieee754_pow+0x1a6>
 800672c:	4b2f      	ldr	r3, [pc, #188]	; (80067ec <__ieee754_pow+0x25c>)
 800672e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006732:	429a      	cmp	r2, r3
 8006734:	d123      	bne.n	800677e <__ieee754_pow+0x1ee>
 8006736:	f1b9 0f00 	cmp.w	r9, #0
 800673a:	da05      	bge.n	8006748 <__ieee754_pow+0x1b8>
 800673c:	4602      	mov	r2, r0
 800673e:	460b      	mov	r3, r1
 8006740:	2000      	movs	r0, #0
 8006742:	492a      	ldr	r1, [pc, #168]	; (80067ec <__ieee754_pow+0x25c>)
 8006744:	f7fa f882 	bl	800084c <__aeabi_ddiv>
 8006748:	2d00      	cmp	r5, #0
 800674a:	f6bf af40 	bge.w	80065ce <__ieee754_pow+0x3e>
 800674e:	9b04      	ldr	r3, [sp, #16]
 8006750:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006754:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006758:	431c      	orrs	r4, r3
 800675a:	d108      	bne.n	800676e <__ieee754_pow+0x1de>
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	4610      	mov	r0, r2
 8006762:	4619      	mov	r1, r3
 8006764:	f7f9 fd90 	bl	8000288 <__aeabi_dsub>
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	e78f      	b.n	800668e <__ieee754_pow+0xfe>
 800676e:	9b04      	ldr	r3, [sp, #16]
 8006770:	2b01      	cmp	r3, #1
 8006772:	f47f af2c 	bne.w	80065ce <__ieee754_pow+0x3e>
 8006776:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800677a:	4619      	mov	r1, r3
 800677c:	e727      	b.n	80065ce <__ieee754_pow+0x3e>
 800677e:	0feb      	lsrs	r3, r5, #31
 8006780:	3b01      	subs	r3, #1
 8006782:	9306      	str	r3, [sp, #24]
 8006784:	9a06      	ldr	r2, [sp, #24]
 8006786:	9b04      	ldr	r3, [sp, #16]
 8006788:	4313      	orrs	r3, r2
 800678a:	d102      	bne.n	8006792 <__ieee754_pow+0x202>
 800678c:	4632      	mov	r2, r6
 800678e:	463b      	mov	r3, r7
 8006790:	e7e6      	b.n	8006760 <__ieee754_pow+0x1d0>
 8006792:	4b19      	ldr	r3, [pc, #100]	; (80067f8 <__ieee754_pow+0x268>)
 8006794:	4598      	cmp	r8, r3
 8006796:	f340 80fb 	ble.w	8006990 <__ieee754_pow+0x400>
 800679a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800679e:	4598      	cmp	r8, r3
 80067a0:	4b13      	ldr	r3, [pc, #76]	; (80067f0 <__ieee754_pow+0x260>)
 80067a2:	dd0c      	ble.n	80067be <__ieee754_pow+0x22e>
 80067a4:	429c      	cmp	r4, r3
 80067a6:	dc0f      	bgt.n	80067c8 <__ieee754_pow+0x238>
 80067a8:	f1b9 0f00 	cmp.w	r9, #0
 80067ac:	da0f      	bge.n	80067ce <__ieee754_pow+0x23e>
 80067ae:	2000      	movs	r0, #0
 80067b0:	b009      	add	sp, #36	; 0x24
 80067b2:	ecbd 8b06 	vpop	{d8-d10}
 80067b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ba:	f000 bcc2 	b.w	8007142 <__math_oflow>
 80067be:	429c      	cmp	r4, r3
 80067c0:	dbf2      	blt.n	80067a8 <__ieee754_pow+0x218>
 80067c2:	4b0a      	ldr	r3, [pc, #40]	; (80067ec <__ieee754_pow+0x25c>)
 80067c4:	429c      	cmp	r4, r3
 80067c6:	dd19      	ble.n	80067fc <__ieee754_pow+0x26c>
 80067c8:	f1b9 0f00 	cmp.w	r9, #0
 80067cc:	dcef      	bgt.n	80067ae <__ieee754_pow+0x21e>
 80067ce:	2000      	movs	r0, #0
 80067d0:	b009      	add	sp, #36	; 0x24
 80067d2:	ecbd 8b06 	vpop	{d8-d10}
 80067d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067da:	f000 bca9 	b.w	8007130 <__math_uflow>
 80067de:	bf00      	nop
 80067e0:	fff00000 	.word	0xfff00000
 80067e4:	7ff00000 	.word	0x7ff00000
 80067e8:	433fffff 	.word	0x433fffff
 80067ec:	3ff00000 	.word	0x3ff00000
 80067f0:	3fefffff 	.word	0x3fefffff
 80067f4:	3fe00000 	.word	0x3fe00000
 80067f8:	41e00000 	.word	0x41e00000
 80067fc:	4b60      	ldr	r3, [pc, #384]	; (8006980 <__ieee754_pow+0x3f0>)
 80067fe:	2200      	movs	r2, #0
 8006800:	f7f9 fd42 	bl	8000288 <__aeabi_dsub>
 8006804:	a354      	add	r3, pc, #336	; (adr r3, 8006958 <__ieee754_pow+0x3c8>)
 8006806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680a:	4604      	mov	r4, r0
 800680c:	460d      	mov	r5, r1
 800680e:	f7f9 fef3 	bl	80005f8 <__aeabi_dmul>
 8006812:	a353      	add	r3, pc, #332	; (adr r3, 8006960 <__ieee754_pow+0x3d0>)
 8006814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006818:	4606      	mov	r6, r0
 800681a:	460f      	mov	r7, r1
 800681c:	4620      	mov	r0, r4
 800681e:	4629      	mov	r1, r5
 8006820:	f7f9 feea 	bl	80005f8 <__aeabi_dmul>
 8006824:	4b57      	ldr	r3, [pc, #348]	; (8006984 <__ieee754_pow+0x3f4>)
 8006826:	4682      	mov	sl, r0
 8006828:	468b      	mov	fp, r1
 800682a:	2200      	movs	r2, #0
 800682c:	4620      	mov	r0, r4
 800682e:	4629      	mov	r1, r5
 8006830:	f7f9 fee2 	bl	80005f8 <__aeabi_dmul>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	a14b      	add	r1, pc, #300	; (adr r1, 8006968 <__ieee754_pow+0x3d8>)
 800683a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800683e:	f7f9 fd23 	bl	8000288 <__aeabi_dsub>
 8006842:	4622      	mov	r2, r4
 8006844:	462b      	mov	r3, r5
 8006846:	f7f9 fed7 	bl	80005f8 <__aeabi_dmul>
 800684a:	4602      	mov	r2, r0
 800684c:	460b      	mov	r3, r1
 800684e:	2000      	movs	r0, #0
 8006850:	494d      	ldr	r1, [pc, #308]	; (8006988 <__ieee754_pow+0x3f8>)
 8006852:	f7f9 fd19 	bl	8000288 <__aeabi_dsub>
 8006856:	4622      	mov	r2, r4
 8006858:	4680      	mov	r8, r0
 800685a:	4689      	mov	r9, r1
 800685c:	462b      	mov	r3, r5
 800685e:	4620      	mov	r0, r4
 8006860:	4629      	mov	r1, r5
 8006862:	f7f9 fec9 	bl	80005f8 <__aeabi_dmul>
 8006866:	4602      	mov	r2, r0
 8006868:	460b      	mov	r3, r1
 800686a:	4640      	mov	r0, r8
 800686c:	4649      	mov	r1, r9
 800686e:	f7f9 fec3 	bl	80005f8 <__aeabi_dmul>
 8006872:	a33f      	add	r3, pc, #252	; (adr r3, 8006970 <__ieee754_pow+0x3e0>)
 8006874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006878:	f7f9 febe 	bl	80005f8 <__aeabi_dmul>
 800687c:	4602      	mov	r2, r0
 800687e:	460b      	mov	r3, r1
 8006880:	4650      	mov	r0, sl
 8006882:	4659      	mov	r1, fp
 8006884:	f7f9 fd00 	bl	8000288 <__aeabi_dsub>
 8006888:	4602      	mov	r2, r0
 800688a:	460b      	mov	r3, r1
 800688c:	4680      	mov	r8, r0
 800688e:	4689      	mov	r9, r1
 8006890:	4630      	mov	r0, r6
 8006892:	4639      	mov	r1, r7
 8006894:	f7f9 fcfa 	bl	800028c <__adddf3>
 8006898:	2000      	movs	r0, #0
 800689a:	4632      	mov	r2, r6
 800689c:	463b      	mov	r3, r7
 800689e:	4604      	mov	r4, r0
 80068a0:	460d      	mov	r5, r1
 80068a2:	f7f9 fcf1 	bl	8000288 <__aeabi_dsub>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4640      	mov	r0, r8
 80068ac:	4649      	mov	r1, r9
 80068ae:	f7f9 fceb 	bl	8000288 <__aeabi_dsub>
 80068b2:	9b04      	ldr	r3, [sp, #16]
 80068b4:	9a06      	ldr	r2, [sp, #24]
 80068b6:	3b01      	subs	r3, #1
 80068b8:	4313      	orrs	r3, r2
 80068ba:	4682      	mov	sl, r0
 80068bc:	468b      	mov	fp, r1
 80068be:	f040 81e7 	bne.w	8006c90 <__ieee754_pow+0x700>
 80068c2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006978 <__ieee754_pow+0x3e8>
 80068c6:	eeb0 8a47 	vmov.f32	s16, s14
 80068ca:	eef0 8a67 	vmov.f32	s17, s15
 80068ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 80068d2:	2600      	movs	r6, #0
 80068d4:	4632      	mov	r2, r6
 80068d6:	463b      	mov	r3, r7
 80068d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068dc:	f7f9 fcd4 	bl	8000288 <__aeabi_dsub>
 80068e0:	4622      	mov	r2, r4
 80068e2:	462b      	mov	r3, r5
 80068e4:	f7f9 fe88 	bl	80005f8 <__aeabi_dmul>
 80068e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068ec:	4680      	mov	r8, r0
 80068ee:	4689      	mov	r9, r1
 80068f0:	4650      	mov	r0, sl
 80068f2:	4659      	mov	r1, fp
 80068f4:	f7f9 fe80 	bl	80005f8 <__aeabi_dmul>
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4640      	mov	r0, r8
 80068fe:	4649      	mov	r1, r9
 8006900:	f7f9 fcc4 	bl	800028c <__adddf3>
 8006904:	4632      	mov	r2, r6
 8006906:	463b      	mov	r3, r7
 8006908:	4680      	mov	r8, r0
 800690a:	4689      	mov	r9, r1
 800690c:	4620      	mov	r0, r4
 800690e:	4629      	mov	r1, r5
 8006910:	f7f9 fe72 	bl	80005f8 <__aeabi_dmul>
 8006914:	460b      	mov	r3, r1
 8006916:	4604      	mov	r4, r0
 8006918:	460d      	mov	r5, r1
 800691a:	4602      	mov	r2, r0
 800691c:	4649      	mov	r1, r9
 800691e:	4640      	mov	r0, r8
 8006920:	f7f9 fcb4 	bl	800028c <__adddf3>
 8006924:	4b19      	ldr	r3, [pc, #100]	; (800698c <__ieee754_pow+0x3fc>)
 8006926:	4299      	cmp	r1, r3
 8006928:	ec45 4b19 	vmov	d9, r4, r5
 800692c:	4606      	mov	r6, r0
 800692e:	460f      	mov	r7, r1
 8006930:	468b      	mov	fp, r1
 8006932:	f340 82f0 	ble.w	8006f16 <__ieee754_pow+0x986>
 8006936:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800693a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800693e:	4303      	orrs	r3, r0
 8006940:	f000 81e4 	beq.w	8006d0c <__ieee754_pow+0x77c>
 8006944:	ec51 0b18 	vmov	r0, r1, d8
 8006948:	2200      	movs	r2, #0
 800694a:	2300      	movs	r3, #0
 800694c:	f7fa f8c6 	bl	8000adc <__aeabi_dcmplt>
 8006950:	3800      	subs	r0, #0
 8006952:	bf18      	it	ne
 8006954:	2001      	movne	r0, #1
 8006956:	e72b      	b.n	80067b0 <__ieee754_pow+0x220>
 8006958:	60000000 	.word	0x60000000
 800695c:	3ff71547 	.word	0x3ff71547
 8006960:	f85ddf44 	.word	0xf85ddf44
 8006964:	3e54ae0b 	.word	0x3e54ae0b
 8006968:	55555555 	.word	0x55555555
 800696c:	3fd55555 	.word	0x3fd55555
 8006970:	652b82fe 	.word	0x652b82fe
 8006974:	3ff71547 	.word	0x3ff71547
 8006978:	00000000 	.word	0x00000000
 800697c:	bff00000 	.word	0xbff00000
 8006980:	3ff00000 	.word	0x3ff00000
 8006984:	3fd00000 	.word	0x3fd00000
 8006988:	3fe00000 	.word	0x3fe00000
 800698c:	408fffff 	.word	0x408fffff
 8006990:	4bd5      	ldr	r3, [pc, #852]	; (8006ce8 <__ieee754_pow+0x758>)
 8006992:	402b      	ands	r3, r5
 8006994:	2200      	movs	r2, #0
 8006996:	b92b      	cbnz	r3, 80069a4 <__ieee754_pow+0x414>
 8006998:	4bd4      	ldr	r3, [pc, #848]	; (8006cec <__ieee754_pow+0x75c>)
 800699a:	f7f9 fe2d 	bl	80005f8 <__aeabi_dmul>
 800699e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80069a2:	460c      	mov	r4, r1
 80069a4:	1523      	asrs	r3, r4, #20
 80069a6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80069aa:	4413      	add	r3, r2
 80069ac:	9305      	str	r3, [sp, #20]
 80069ae:	4bd0      	ldr	r3, [pc, #832]	; (8006cf0 <__ieee754_pow+0x760>)
 80069b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80069b4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80069b8:	429c      	cmp	r4, r3
 80069ba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80069be:	dd08      	ble.n	80069d2 <__ieee754_pow+0x442>
 80069c0:	4bcc      	ldr	r3, [pc, #816]	; (8006cf4 <__ieee754_pow+0x764>)
 80069c2:	429c      	cmp	r4, r3
 80069c4:	f340 8162 	ble.w	8006c8c <__ieee754_pow+0x6fc>
 80069c8:	9b05      	ldr	r3, [sp, #20]
 80069ca:	3301      	adds	r3, #1
 80069cc:	9305      	str	r3, [sp, #20]
 80069ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80069d2:	2400      	movs	r4, #0
 80069d4:	00e3      	lsls	r3, r4, #3
 80069d6:	9307      	str	r3, [sp, #28]
 80069d8:	4bc7      	ldr	r3, [pc, #796]	; (8006cf8 <__ieee754_pow+0x768>)
 80069da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80069de:	ed93 7b00 	vldr	d7, [r3]
 80069e2:	4629      	mov	r1, r5
 80069e4:	ec53 2b17 	vmov	r2, r3, d7
 80069e8:	eeb0 9a47 	vmov.f32	s18, s14
 80069ec:	eef0 9a67 	vmov.f32	s19, s15
 80069f0:	4682      	mov	sl, r0
 80069f2:	f7f9 fc49 	bl	8000288 <__aeabi_dsub>
 80069f6:	4652      	mov	r2, sl
 80069f8:	4606      	mov	r6, r0
 80069fa:	460f      	mov	r7, r1
 80069fc:	462b      	mov	r3, r5
 80069fe:	ec51 0b19 	vmov	r0, r1, d9
 8006a02:	f7f9 fc43 	bl	800028c <__adddf3>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	2000      	movs	r0, #0
 8006a0c:	49bb      	ldr	r1, [pc, #748]	; (8006cfc <__ieee754_pow+0x76c>)
 8006a0e:	f7f9 ff1d 	bl	800084c <__aeabi_ddiv>
 8006a12:	ec41 0b1a 	vmov	d10, r0, r1
 8006a16:	4602      	mov	r2, r0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	4639      	mov	r1, r7
 8006a1e:	f7f9 fdeb 	bl	80005f8 <__aeabi_dmul>
 8006a22:	2300      	movs	r3, #0
 8006a24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a28:	9302      	str	r3, [sp, #8]
 8006a2a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006a2e:	46ab      	mov	fp, r5
 8006a30:	106d      	asrs	r5, r5, #1
 8006a32:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006a36:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006a3a:	ec41 0b18 	vmov	d8, r0, r1
 8006a3e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006a42:	2200      	movs	r2, #0
 8006a44:	4640      	mov	r0, r8
 8006a46:	4649      	mov	r1, r9
 8006a48:	4614      	mov	r4, r2
 8006a4a:	461d      	mov	r5, r3
 8006a4c:	f7f9 fdd4 	bl	80005f8 <__aeabi_dmul>
 8006a50:	4602      	mov	r2, r0
 8006a52:	460b      	mov	r3, r1
 8006a54:	4630      	mov	r0, r6
 8006a56:	4639      	mov	r1, r7
 8006a58:	f7f9 fc16 	bl	8000288 <__aeabi_dsub>
 8006a5c:	ec53 2b19 	vmov	r2, r3, d9
 8006a60:	4606      	mov	r6, r0
 8006a62:	460f      	mov	r7, r1
 8006a64:	4620      	mov	r0, r4
 8006a66:	4629      	mov	r1, r5
 8006a68:	f7f9 fc0e 	bl	8000288 <__aeabi_dsub>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	460b      	mov	r3, r1
 8006a70:	4650      	mov	r0, sl
 8006a72:	4659      	mov	r1, fp
 8006a74:	f7f9 fc08 	bl	8000288 <__aeabi_dsub>
 8006a78:	4642      	mov	r2, r8
 8006a7a:	464b      	mov	r3, r9
 8006a7c:	f7f9 fdbc 	bl	80005f8 <__aeabi_dmul>
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	4630      	mov	r0, r6
 8006a86:	4639      	mov	r1, r7
 8006a88:	f7f9 fbfe 	bl	8000288 <__aeabi_dsub>
 8006a8c:	ec53 2b1a 	vmov	r2, r3, d10
 8006a90:	f7f9 fdb2 	bl	80005f8 <__aeabi_dmul>
 8006a94:	ec53 2b18 	vmov	r2, r3, d8
 8006a98:	ec41 0b19 	vmov	d9, r0, r1
 8006a9c:	ec51 0b18 	vmov	r0, r1, d8
 8006aa0:	f7f9 fdaa 	bl	80005f8 <__aeabi_dmul>
 8006aa4:	a37c      	add	r3, pc, #496	; (adr r3, 8006c98 <__ieee754_pow+0x708>)
 8006aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aaa:	4604      	mov	r4, r0
 8006aac:	460d      	mov	r5, r1
 8006aae:	f7f9 fda3 	bl	80005f8 <__aeabi_dmul>
 8006ab2:	a37b      	add	r3, pc, #492	; (adr r3, 8006ca0 <__ieee754_pow+0x710>)
 8006ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab8:	f7f9 fbe8 	bl	800028c <__adddf3>
 8006abc:	4622      	mov	r2, r4
 8006abe:	462b      	mov	r3, r5
 8006ac0:	f7f9 fd9a 	bl	80005f8 <__aeabi_dmul>
 8006ac4:	a378      	add	r3, pc, #480	; (adr r3, 8006ca8 <__ieee754_pow+0x718>)
 8006ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aca:	f7f9 fbdf 	bl	800028c <__adddf3>
 8006ace:	4622      	mov	r2, r4
 8006ad0:	462b      	mov	r3, r5
 8006ad2:	f7f9 fd91 	bl	80005f8 <__aeabi_dmul>
 8006ad6:	a376      	add	r3, pc, #472	; (adr r3, 8006cb0 <__ieee754_pow+0x720>)
 8006ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006adc:	f7f9 fbd6 	bl	800028c <__adddf3>
 8006ae0:	4622      	mov	r2, r4
 8006ae2:	462b      	mov	r3, r5
 8006ae4:	f7f9 fd88 	bl	80005f8 <__aeabi_dmul>
 8006ae8:	a373      	add	r3, pc, #460	; (adr r3, 8006cb8 <__ieee754_pow+0x728>)
 8006aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aee:	f7f9 fbcd 	bl	800028c <__adddf3>
 8006af2:	4622      	mov	r2, r4
 8006af4:	462b      	mov	r3, r5
 8006af6:	f7f9 fd7f 	bl	80005f8 <__aeabi_dmul>
 8006afa:	a371      	add	r3, pc, #452	; (adr r3, 8006cc0 <__ieee754_pow+0x730>)
 8006afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b00:	f7f9 fbc4 	bl	800028c <__adddf3>
 8006b04:	4622      	mov	r2, r4
 8006b06:	4606      	mov	r6, r0
 8006b08:	460f      	mov	r7, r1
 8006b0a:	462b      	mov	r3, r5
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	4629      	mov	r1, r5
 8006b10:	f7f9 fd72 	bl	80005f8 <__aeabi_dmul>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4630      	mov	r0, r6
 8006b1a:	4639      	mov	r1, r7
 8006b1c:	f7f9 fd6c 	bl	80005f8 <__aeabi_dmul>
 8006b20:	4642      	mov	r2, r8
 8006b22:	4604      	mov	r4, r0
 8006b24:	460d      	mov	r5, r1
 8006b26:	464b      	mov	r3, r9
 8006b28:	ec51 0b18 	vmov	r0, r1, d8
 8006b2c:	f7f9 fbae 	bl	800028c <__adddf3>
 8006b30:	ec53 2b19 	vmov	r2, r3, d9
 8006b34:	f7f9 fd60 	bl	80005f8 <__aeabi_dmul>
 8006b38:	4622      	mov	r2, r4
 8006b3a:	462b      	mov	r3, r5
 8006b3c:	f7f9 fba6 	bl	800028c <__adddf3>
 8006b40:	4642      	mov	r2, r8
 8006b42:	4682      	mov	sl, r0
 8006b44:	468b      	mov	fp, r1
 8006b46:	464b      	mov	r3, r9
 8006b48:	4640      	mov	r0, r8
 8006b4a:	4649      	mov	r1, r9
 8006b4c:	f7f9 fd54 	bl	80005f8 <__aeabi_dmul>
 8006b50:	4b6b      	ldr	r3, [pc, #428]	; (8006d00 <__ieee754_pow+0x770>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	4606      	mov	r6, r0
 8006b56:	460f      	mov	r7, r1
 8006b58:	f7f9 fb98 	bl	800028c <__adddf3>
 8006b5c:	4652      	mov	r2, sl
 8006b5e:	465b      	mov	r3, fp
 8006b60:	f7f9 fb94 	bl	800028c <__adddf3>
 8006b64:	2000      	movs	r0, #0
 8006b66:	4604      	mov	r4, r0
 8006b68:	460d      	mov	r5, r1
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4640      	mov	r0, r8
 8006b70:	4649      	mov	r1, r9
 8006b72:	f7f9 fd41 	bl	80005f8 <__aeabi_dmul>
 8006b76:	4b62      	ldr	r3, [pc, #392]	; (8006d00 <__ieee754_pow+0x770>)
 8006b78:	4680      	mov	r8, r0
 8006b7a:	4689      	mov	r9, r1
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	4620      	mov	r0, r4
 8006b80:	4629      	mov	r1, r5
 8006b82:	f7f9 fb81 	bl	8000288 <__aeabi_dsub>
 8006b86:	4632      	mov	r2, r6
 8006b88:	463b      	mov	r3, r7
 8006b8a:	f7f9 fb7d 	bl	8000288 <__aeabi_dsub>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	4650      	mov	r0, sl
 8006b94:	4659      	mov	r1, fp
 8006b96:	f7f9 fb77 	bl	8000288 <__aeabi_dsub>
 8006b9a:	ec53 2b18 	vmov	r2, r3, d8
 8006b9e:	f7f9 fd2b 	bl	80005f8 <__aeabi_dmul>
 8006ba2:	4622      	mov	r2, r4
 8006ba4:	4606      	mov	r6, r0
 8006ba6:	460f      	mov	r7, r1
 8006ba8:	462b      	mov	r3, r5
 8006baa:	ec51 0b19 	vmov	r0, r1, d9
 8006bae:	f7f9 fd23 	bl	80005f8 <__aeabi_dmul>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	4639      	mov	r1, r7
 8006bba:	f7f9 fb67 	bl	800028c <__adddf3>
 8006bbe:	4606      	mov	r6, r0
 8006bc0:	460f      	mov	r7, r1
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	4640      	mov	r0, r8
 8006bc8:	4649      	mov	r1, r9
 8006bca:	f7f9 fb5f 	bl	800028c <__adddf3>
 8006bce:	a33e      	add	r3, pc, #248	; (adr r3, 8006cc8 <__ieee754_pow+0x738>)
 8006bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	4604      	mov	r4, r0
 8006bd8:	460d      	mov	r5, r1
 8006bda:	f7f9 fd0d 	bl	80005f8 <__aeabi_dmul>
 8006bde:	4642      	mov	r2, r8
 8006be0:	ec41 0b18 	vmov	d8, r0, r1
 8006be4:	464b      	mov	r3, r9
 8006be6:	4620      	mov	r0, r4
 8006be8:	4629      	mov	r1, r5
 8006bea:	f7f9 fb4d 	bl	8000288 <__aeabi_dsub>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	4639      	mov	r1, r7
 8006bf6:	f7f9 fb47 	bl	8000288 <__aeabi_dsub>
 8006bfa:	a335      	add	r3, pc, #212	; (adr r3, 8006cd0 <__ieee754_pow+0x740>)
 8006bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c00:	f7f9 fcfa 	bl	80005f8 <__aeabi_dmul>
 8006c04:	a334      	add	r3, pc, #208	; (adr r3, 8006cd8 <__ieee754_pow+0x748>)
 8006c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0a:	4606      	mov	r6, r0
 8006c0c:	460f      	mov	r7, r1
 8006c0e:	4620      	mov	r0, r4
 8006c10:	4629      	mov	r1, r5
 8006c12:	f7f9 fcf1 	bl	80005f8 <__aeabi_dmul>
 8006c16:	4602      	mov	r2, r0
 8006c18:	460b      	mov	r3, r1
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	4639      	mov	r1, r7
 8006c1e:	f7f9 fb35 	bl	800028c <__adddf3>
 8006c22:	9a07      	ldr	r2, [sp, #28]
 8006c24:	4b37      	ldr	r3, [pc, #220]	; (8006d04 <__ieee754_pow+0x774>)
 8006c26:	4413      	add	r3, r2
 8006c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2c:	f7f9 fb2e 	bl	800028c <__adddf3>
 8006c30:	4682      	mov	sl, r0
 8006c32:	9805      	ldr	r0, [sp, #20]
 8006c34:	468b      	mov	fp, r1
 8006c36:	f7f9 fc75 	bl	8000524 <__aeabi_i2d>
 8006c3a:	9a07      	ldr	r2, [sp, #28]
 8006c3c:	4b32      	ldr	r3, [pc, #200]	; (8006d08 <__ieee754_pow+0x778>)
 8006c3e:	4413      	add	r3, r2
 8006c40:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c44:	4606      	mov	r6, r0
 8006c46:	460f      	mov	r7, r1
 8006c48:	4652      	mov	r2, sl
 8006c4a:	465b      	mov	r3, fp
 8006c4c:	ec51 0b18 	vmov	r0, r1, d8
 8006c50:	f7f9 fb1c 	bl	800028c <__adddf3>
 8006c54:	4642      	mov	r2, r8
 8006c56:	464b      	mov	r3, r9
 8006c58:	f7f9 fb18 	bl	800028c <__adddf3>
 8006c5c:	4632      	mov	r2, r6
 8006c5e:	463b      	mov	r3, r7
 8006c60:	f7f9 fb14 	bl	800028c <__adddf3>
 8006c64:	2000      	movs	r0, #0
 8006c66:	4632      	mov	r2, r6
 8006c68:	463b      	mov	r3, r7
 8006c6a:	4604      	mov	r4, r0
 8006c6c:	460d      	mov	r5, r1
 8006c6e:	f7f9 fb0b 	bl	8000288 <__aeabi_dsub>
 8006c72:	4642      	mov	r2, r8
 8006c74:	464b      	mov	r3, r9
 8006c76:	f7f9 fb07 	bl	8000288 <__aeabi_dsub>
 8006c7a:	ec53 2b18 	vmov	r2, r3, d8
 8006c7e:	f7f9 fb03 	bl	8000288 <__aeabi_dsub>
 8006c82:	4602      	mov	r2, r0
 8006c84:	460b      	mov	r3, r1
 8006c86:	4650      	mov	r0, sl
 8006c88:	4659      	mov	r1, fp
 8006c8a:	e610      	b.n	80068ae <__ieee754_pow+0x31e>
 8006c8c:	2401      	movs	r4, #1
 8006c8e:	e6a1      	b.n	80069d4 <__ieee754_pow+0x444>
 8006c90:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006ce0 <__ieee754_pow+0x750>
 8006c94:	e617      	b.n	80068c6 <__ieee754_pow+0x336>
 8006c96:	bf00      	nop
 8006c98:	4a454eef 	.word	0x4a454eef
 8006c9c:	3fca7e28 	.word	0x3fca7e28
 8006ca0:	93c9db65 	.word	0x93c9db65
 8006ca4:	3fcd864a 	.word	0x3fcd864a
 8006ca8:	a91d4101 	.word	0xa91d4101
 8006cac:	3fd17460 	.word	0x3fd17460
 8006cb0:	518f264d 	.word	0x518f264d
 8006cb4:	3fd55555 	.word	0x3fd55555
 8006cb8:	db6fabff 	.word	0xdb6fabff
 8006cbc:	3fdb6db6 	.word	0x3fdb6db6
 8006cc0:	33333303 	.word	0x33333303
 8006cc4:	3fe33333 	.word	0x3fe33333
 8006cc8:	e0000000 	.word	0xe0000000
 8006ccc:	3feec709 	.word	0x3feec709
 8006cd0:	dc3a03fd 	.word	0xdc3a03fd
 8006cd4:	3feec709 	.word	0x3feec709
 8006cd8:	145b01f5 	.word	0x145b01f5
 8006cdc:	be3e2fe0 	.word	0xbe3e2fe0
 8006ce0:	00000000 	.word	0x00000000
 8006ce4:	3ff00000 	.word	0x3ff00000
 8006ce8:	7ff00000 	.word	0x7ff00000
 8006cec:	43400000 	.word	0x43400000
 8006cf0:	0003988e 	.word	0x0003988e
 8006cf4:	000bb679 	.word	0x000bb679
 8006cf8:	08007738 	.word	0x08007738
 8006cfc:	3ff00000 	.word	0x3ff00000
 8006d00:	40080000 	.word	0x40080000
 8006d04:	08007758 	.word	0x08007758
 8006d08:	08007748 	.word	0x08007748
 8006d0c:	a3b3      	add	r3, pc, #716	; (adr r3, 8006fdc <__ieee754_pow+0xa4c>)
 8006d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d12:	4640      	mov	r0, r8
 8006d14:	4649      	mov	r1, r9
 8006d16:	f7f9 fab9 	bl	800028c <__adddf3>
 8006d1a:	4622      	mov	r2, r4
 8006d1c:	ec41 0b1a 	vmov	d10, r0, r1
 8006d20:	462b      	mov	r3, r5
 8006d22:	4630      	mov	r0, r6
 8006d24:	4639      	mov	r1, r7
 8006d26:	f7f9 faaf 	bl	8000288 <__aeabi_dsub>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	ec51 0b1a 	vmov	r0, r1, d10
 8006d32:	f7f9 fef1 	bl	8000b18 <__aeabi_dcmpgt>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	f47f ae04 	bne.w	8006944 <__ieee754_pow+0x3b4>
 8006d3c:	4aa2      	ldr	r2, [pc, #648]	; (8006fc8 <__ieee754_pow+0xa38>)
 8006d3e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d42:	4293      	cmp	r3, r2
 8006d44:	f340 8107 	ble.w	8006f56 <__ieee754_pow+0x9c6>
 8006d48:	151b      	asrs	r3, r3, #20
 8006d4a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006d4e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006d52:	fa4a fa03 	asr.w	sl, sl, r3
 8006d56:	44da      	add	sl, fp
 8006d58:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006d5c:	489b      	ldr	r0, [pc, #620]	; (8006fcc <__ieee754_pow+0xa3c>)
 8006d5e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006d62:	4108      	asrs	r0, r1
 8006d64:	ea00 030a 	and.w	r3, r0, sl
 8006d68:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006d6c:	f1c1 0114 	rsb	r1, r1, #20
 8006d70:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006d74:	fa4a fa01 	asr.w	sl, sl, r1
 8006d78:	f1bb 0f00 	cmp.w	fp, #0
 8006d7c:	f04f 0200 	mov.w	r2, #0
 8006d80:	4620      	mov	r0, r4
 8006d82:	4629      	mov	r1, r5
 8006d84:	bfb8      	it	lt
 8006d86:	f1ca 0a00 	rsblt	sl, sl, #0
 8006d8a:	f7f9 fa7d 	bl	8000288 <__aeabi_dsub>
 8006d8e:	ec41 0b19 	vmov	d9, r0, r1
 8006d92:	4642      	mov	r2, r8
 8006d94:	464b      	mov	r3, r9
 8006d96:	ec51 0b19 	vmov	r0, r1, d9
 8006d9a:	f7f9 fa77 	bl	800028c <__adddf3>
 8006d9e:	a37a      	add	r3, pc, #488	; (adr r3, 8006f88 <__ieee754_pow+0x9f8>)
 8006da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da4:	2000      	movs	r0, #0
 8006da6:	4604      	mov	r4, r0
 8006da8:	460d      	mov	r5, r1
 8006daa:	f7f9 fc25 	bl	80005f8 <__aeabi_dmul>
 8006dae:	ec53 2b19 	vmov	r2, r3, d9
 8006db2:	4606      	mov	r6, r0
 8006db4:	460f      	mov	r7, r1
 8006db6:	4620      	mov	r0, r4
 8006db8:	4629      	mov	r1, r5
 8006dba:	f7f9 fa65 	bl	8000288 <__aeabi_dsub>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	4640      	mov	r0, r8
 8006dc4:	4649      	mov	r1, r9
 8006dc6:	f7f9 fa5f 	bl	8000288 <__aeabi_dsub>
 8006dca:	a371      	add	r3, pc, #452	; (adr r3, 8006f90 <__ieee754_pow+0xa00>)
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	f7f9 fc12 	bl	80005f8 <__aeabi_dmul>
 8006dd4:	a370      	add	r3, pc, #448	; (adr r3, 8006f98 <__ieee754_pow+0xa08>)
 8006dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dda:	4680      	mov	r8, r0
 8006ddc:	4689      	mov	r9, r1
 8006dde:	4620      	mov	r0, r4
 8006de0:	4629      	mov	r1, r5
 8006de2:	f7f9 fc09 	bl	80005f8 <__aeabi_dmul>
 8006de6:	4602      	mov	r2, r0
 8006de8:	460b      	mov	r3, r1
 8006dea:	4640      	mov	r0, r8
 8006dec:	4649      	mov	r1, r9
 8006dee:	f7f9 fa4d 	bl	800028c <__adddf3>
 8006df2:	4604      	mov	r4, r0
 8006df4:	460d      	mov	r5, r1
 8006df6:	4602      	mov	r2, r0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	4630      	mov	r0, r6
 8006dfc:	4639      	mov	r1, r7
 8006dfe:	f7f9 fa45 	bl	800028c <__adddf3>
 8006e02:	4632      	mov	r2, r6
 8006e04:	463b      	mov	r3, r7
 8006e06:	4680      	mov	r8, r0
 8006e08:	4689      	mov	r9, r1
 8006e0a:	f7f9 fa3d 	bl	8000288 <__aeabi_dsub>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	460b      	mov	r3, r1
 8006e12:	4620      	mov	r0, r4
 8006e14:	4629      	mov	r1, r5
 8006e16:	f7f9 fa37 	bl	8000288 <__aeabi_dsub>
 8006e1a:	4642      	mov	r2, r8
 8006e1c:	4606      	mov	r6, r0
 8006e1e:	460f      	mov	r7, r1
 8006e20:	464b      	mov	r3, r9
 8006e22:	4640      	mov	r0, r8
 8006e24:	4649      	mov	r1, r9
 8006e26:	f7f9 fbe7 	bl	80005f8 <__aeabi_dmul>
 8006e2a:	a35d      	add	r3, pc, #372	; (adr r3, 8006fa0 <__ieee754_pow+0xa10>)
 8006e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e30:	4604      	mov	r4, r0
 8006e32:	460d      	mov	r5, r1
 8006e34:	f7f9 fbe0 	bl	80005f8 <__aeabi_dmul>
 8006e38:	a35b      	add	r3, pc, #364	; (adr r3, 8006fa8 <__ieee754_pow+0xa18>)
 8006e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3e:	f7f9 fa23 	bl	8000288 <__aeabi_dsub>
 8006e42:	4622      	mov	r2, r4
 8006e44:	462b      	mov	r3, r5
 8006e46:	f7f9 fbd7 	bl	80005f8 <__aeabi_dmul>
 8006e4a:	a359      	add	r3, pc, #356	; (adr r3, 8006fb0 <__ieee754_pow+0xa20>)
 8006e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e50:	f7f9 fa1c 	bl	800028c <__adddf3>
 8006e54:	4622      	mov	r2, r4
 8006e56:	462b      	mov	r3, r5
 8006e58:	f7f9 fbce 	bl	80005f8 <__aeabi_dmul>
 8006e5c:	a356      	add	r3, pc, #344	; (adr r3, 8006fb8 <__ieee754_pow+0xa28>)
 8006e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e62:	f7f9 fa11 	bl	8000288 <__aeabi_dsub>
 8006e66:	4622      	mov	r2, r4
 8006e68:	462b      	mov	r3, r5
 8006e6a:	f7f9 fbc5 	bl	80005f8 <__aeabi_dmul>
 8006e6e:	a354      	add	r3, pc, #336	; (adr r3, 8006fc0 <__ieee754_pow+0xa30>)
 8006e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e74:	f7f9 fa0a 	bl	800028c <__adddf3>
 8006e78:	4622      	mov	r2, r4
 8006e7a:	462b      	mov	r3, r5
 8006e7c:	f7f9 fbbc 	bl	80005f8 <__aeabi_dmul>
 8006e80:	4602      	mov	r2, r0
 8006e82:	460b      	mov	r3, r1
 8006e84:	4640      	mov	r0, r8
 8006e86:	4649      	mov	r1, r9
 8006e88:	f7f9 f9fe 	bl	8000288 <__aeabi_dsub>
 8006e8c:	4604      	mov	r4, r0
 8006e8e:	460d      	mov	r5, r1
 8006e90:	4602      	mov	r2, r0
 8006e92:	460b      	mov	r3, r1
 8006e94:	4640      	mov	r0, r8
 8006e96:	4649      	mov	r1, r9
 8006e98:	f7f9 fbae 	bl	80005f8 <__aeabi_dmul>
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	ec41 0b19 	vmov	d9, r0, r1
 8006ea2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	4629      	mov	r1, r5
 8006eaa:	f7f9 f9ed 	bl	8000288 <__aeabi_dsub>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	ec51 0b19 	vmov	r0, r1, d9
 8006eb6:	f7f9 fcc9 	bl	800084c <__aeabi_ddiv>
 8006eba:	4632      	mov	r2, r6
 8006ebc:	4604      	mov	r4, r0
 8006ebe:	460d      	mov	r5, r1
 8006ec0:	463b      	mov	r3, r7
 8006ec2:	4640      	mov	r0, r8
 8006ec4:	4649      	mov	r1, r9
 8006ec6:	f7f9 fb97 	bl	80005f8 <__aeabi_dmul>
 8006eca:	4632      	mov	r2, r6
 8006ecc:	463b      	mov	r3, r7
 8006ece:	f7f9 f9dd 	bl	800028c <__adddf3>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	4629      	mov	r1, r5
 8006eda:	f7f9 f9d5 	bl	8000288 <__aeabi_dsub>
 8006ede:	4642      	mov	r2, r8
 8006ee0:	464b      	mov	r3, r9
 8006ee2:	f7f9 f9d1 	bl	8000288 <__aeabi_dsub>
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	4602      	mov	r2, r0
 8006eea:	4939      	ldr	r1, [pc, #228]	; (8006fd0 <__ieee754_pow+0xa40>)
 8006eec:	2000      	movs	r0, #0
 8006eee:	f7f9 f9cb 	bl	8000288 <__aeabi_dsub>
 8006ef2:	ec41 0b10 	vmov	d0, r0, r1
 8006ef6:	ee10 3a90 	vmov	r3, s1
 8006efa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006efe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f02:	da2b      	bge.n	8006f5c <__ieee754_pow+0x9cc>
 8006f04:	4650      	mov	r0, sl
 8006f06:	f000 f877 	bl	8006ff8 <scalbn>
 8006f0a:	ec51 0b10 	vmov	r0, r1, d0
 8006f0e:	ec53 2b18 	vmov	r2, r3, d8
 8006f12:	f7ff bbee 	b.w	80066f2 <__ieee754_pow+0x162>
 8006f16:	4b2f      	ldr	r3, [pc, #188]	; (8006fd4 <__ieee754_pow+0xa44>)
 8006f18:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006f1c:	429e      	cmp	r6, r3
 8006f1e:	f77f af0d 	ble.w	8006d3c <__ieee754_pow+0x7ac>
 8006f22:	4b2d      	ldr	r3, [pc, #180]	; (8006fd8 <__ieee754_pow+0xa48>)
 8006f24:	440b      	add	r3, r1
 8006f26:	4303      	orrs	r3, r0
 8006f28:	d009      	beq.n	8006f3e <__ieee754_pow+0x9ae>
 8006f2a:	ec51 0b18 	vmov	r0, r1, d8
 8006f2e:	2200      	movs	r2, #0
 8006f30:	2300      	movs	r3, #0
 8006f32:	f7f9 fdd3 	bl	8000adc <__aeabi_dcmplt>
 8006f36:	3800      	subs	r0, #0
 8006f38:	bf18      	it	ne
 8006f3a:	2001      	movne	r0, #1
 8006f3c:	e448      	b.n	80067d0 <__ieee754_pow+0x240>
 8006f3e:	4622      	mov	r2, r4
 8006f40:	462b      	mov	r3, r5
 8006f42:	f7f9 f9a1 	bl	8000288 <__aeabi_dsub>
 8006f46:	4642      	mov	r2, r8
 8006f48:	464b      	mov	r3, r9
 8006f4a:	f7f9 fddb 	bl	8000b04 <__aeabi_dcmpge>
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	f43f aef4 	beq.w	8006d3c <__ieee754_pow+0x7ac>
 8006f54:	e7e9      	b.n	8006f2a <__ieee754_pow+0x99a>
 8006f56:	f04f 0a00 	mov.w	sl, #0
 8006f5a:	e71a      	b.n	8006d92 <__ieee754_pow+0x802>
 8006f5c:	ec51 0b10 	vmov	r0, r1, d0
 8006f60:	4619      	mov	r1, r3
 8006f62:	e7d4      	b.n	8006f0e <__ieee754_pow+0x97e>
 8006f64:	491a      	ldr	r1, [pc, #104]	; (8006fd0 <__ieee754_pow+0xa40>)
 8006f66:	2000      	movs	r0, #0
 8006f68:	f7ff bb31 	b.w	80065ce <__ieee754_pow+0x3e>
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	2100      	movs	r1, #0
 8006f70:	f7ff bb2d 	b.w	80065ce <__ieee754_pow+0x3e>
 8006f74:	4630      	mov	r0, r6
 8006f76:	4639      	mov	r1, r7
 8006f78:	f7ff bb29 	b.w	80065ce <__ieee754_pow+0x3e>
 8006f7c:	9204      	str	r2, [sp, #16]
 8006f7e:	f7ff bb7b 	b.w	8006678 <__ieee754_pow+0xe8>
 8006f82:	2300      	movs	r3, #0
 8006f84:	f7ff bb65 	b.w	8006652 <__ieee754_pow+0xc2>
 8006f88:	00000000 	.word	0x00000000
 8006f8c:	3fe62e43 	.word	0x3fe62e43
 8006f90:	fefa39ef 	.word	0xfefa39ef
 8006f94:	3fe62e42 	.word	0x3fe62e42
 8006f98:	0ca86c39 	.word	0x0ca86c39
 8006f9c:	be205c61 	.word	0xbe205c61
 8006fa0:	72bea4d0 	.word	0x72bea4d0
 8006fa4:	3e663769 	.word	0x3e663769
 8006fa8:	c5d26bf1 	.word	0xc5d26bf1
 8006fac:	3ebbbd41 	.word	0x3ebbbd41
 8006fb0:	af25de2c 	.word	0xaf25de2c
 8006fb4:	3f11566a 	.word	0x3f11566a
 8006fb8:	16bebd93 	.word	0x16bebd93
 8006fbc:	3f66c16c 	.word	0x3f66c16c
 8006fc0:	5555553e 	.word	0x5555553e
 8006fc4:	3fc55555 	.word	0x3fc55555
 8006fc8:	3fe00000 	.word	0x3fe00000
 8006fcc:	fff00000 	.word	0xfff00000
 8006fd0:	3ff00000 	.word	0x3ff00000
 8006fd4:	4090cbff 	.word	0x4090cbff
 8006fd8:	3f6f3400 	.word	0x3f6f3400
 8006fdc:	652b82fe 	.word	0x652b82fe
 8006fe0:	3c971547 	.word	0x3c971547

08006fe4 <fabs>:
 8006fe4:	ec51 0b10 	vmov	r0, r1, d0
 8006fe8:	ee10 2a10 	vmov	r2, s0
 8006fec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006ff0:	ec43 2b10 	vmov	d0, r2, r3
 8006ff4:	4770      	bx	lr
	...

08006ff8 <scalbn>:
 8006ff8:	b570      	push	{r4, r5, r6, lr}
 8006ffa:	ec55 4b10 	vmov	r4, r5, d0
 8006ffe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007002:	4606      	mov	r6, r0
 8007004:	462b      	mov	r3, r5
 8007006:	b999      	cbnz	r1, 8007030 <scalbn+0x38>
 8007008:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800700c:	4323      	orrs	r3, r4
 800700e:	d03f      	beq.n	8007090 <scalbn+0x98>
 8007010:	4b35      	ldr	r3, [pc, #212]	; (80070e8 <scalbn+0xf0>)
 8007012:	4629      	mov	r1, r5
 8007014:	ee10 0a10 	vmov	r0, s0
 8007018:	2200      	movs	r2, #0
 800701a:	f7f9 faed 	bl	80005f8 <__aeabi_dmul>
 800701e:	4b33      	ldr	r3, [pc, #204]	; (80070ec <scalbn+0xf4>)
 8007020:	429e      	cmp	r6, r3
 8007022:	4604      	mov	r4, r0
 8007024:	460d      	mov	r5, r1
 8007026:	da10      	bge.n	800704a <scalbn+0x52>
 8007028:	a327      	add	r3, pc, #156	; (adr r3, 80070c8 <scalbn+0xd0>)
 800702a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702e:	e01f      	b.n	8007070 <scalbn+0x78>
 8007030:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007034:	4291      	cmp	r1, r2
 8007036:	d10c      	bne.n	8007052 <scalbn+0x5a>
 8007038:	ee10 2a10 	vmov	r2, s0
 800703c:	4620      	mov	r0, r4
 800703e:	4629      	mov	r1, r5
 8007040:	f7f9 f924 	bl	800028c <__adddf3>
 8007044:	4604      	mov	r4, r0
 8007046:	460d      	mov	r5, r1
 8007048:	e022      	b.n	8007090 <scalbn+0x98>
 800704a:	460b      	mov	r3, r1
 800704c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007050:	3936      	subs	r1, #54	; 0x36
 8007052:	f24c 3250 	movw	r2, #50000	; 0xc350
 8007056:	4296      	cmp	r6, r2
 8007058:	dd0d      	ble.n	8007076 <scalbn+0x7e>
 800705a:	2d00      	cmp	r5, #0
 800705c:	a11c      	add	r1, pc, #112	; (adr r1, 80070d0 <scalbn+0xd8>)
 800705e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007062:	da02      	bge.n	800706a <scalbn+0x72>
 8007064:	a11c      	add	r1, pc, #112	; (adr r1, 80070d8 <scalbn+0xe0>)
 8007066:	e9d1 0100 	ldrd	r0, r1, [r1]
 800706a:	a319      	add	r3, pc, #100	; (adr r3, 80070d0 <scalbn+0xd8>)
 800706c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007070:	f7f9 fac2 	bl	80005f8 <__aeabi_dmul>
 8007074:	e7e6      	b.n	8007044 <scalbn+0x4c>
 8007076:	1872      	adds	r2, r6, r1
 8007078:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800707c:	428a      	cmp	r2, r1
 800707e:	dcec      	bgt.n	800705a <scalbn+0x62>
 8007080:	2a00      	cmp	r2, #0
 8007082:	dd08      	ble.n	8007096 <scalbn+0x9e>
 8007084:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007088:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800708c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007090:	ec45 4b10 	vmov	d0, r4, r5
 8007094:	bd70      	pop	{r4, r5, r6, pc}
 8007096:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800709a:	da08      	bge.n	80070ae <scalbn+0xb6>
 800709c:	2d00      	cmp	r5, #0
 800709e:	a10a      	add	r1, pc, #40	; (adr r1, 80070c8 <scalbn+0xd0>)
 80070a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070a4:	dac0      	bge.n	8007028 <scalbn+0x30>
 80070a6:	a10e      	add	r1, pc, #56	; (adr r1, 80070e0 <scalbn+0xe8>)
 80070a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070ac:	e7bc      	b.n	8007028 <scalbn+0x30>
 80070ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80070b2:	3236      	adds	r2, #54	; 0x36
 80070b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80070b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80070bc:	4620      	mov	r0, r4
 80070be:	4b0c      	ldr	r3, [pc, #48]	; (80070f0 <scalbn+0xf8>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	e7d5      	b.n	8007070 <scalbn+0x78>
 80070c4:	f3af 8000 	nop.w
 80070c8:	c2f8f359 	.word	0xc2f8f359
 80070cc:	01a56e1f 	.word	0x01a56e1f
 80070d0:	8800759c 	.word	0x8800759c
 80070d4:	7e37e43c 	.word	0x7e37e43c
 80070d8:	8800759c 	.word	0x8800759c
 80070dc:	fe37e43c 	.word	0xfe37e43c
 80070e0:	c2f8f359 	.word	0xc2f8f359
 80070e4:	81a56e1f 	.word	0x81a56e1f
 80070e8:	43500000 	.word	0x43500000
 80070ec:	ffff3cb0 	.word	0xffff3cb0
 80070f0:	3c900000 	.word	0x3c900000

080070f4 <with_errno>:
 80070f4:	b570      	push	{r4, r5, r6, lr}
 80070f6:	4604      	mov	r4, r0
 80070f8:	460d      	mov	r5, r1
 80070fa:	4616      	mov	r6, r2
 80070fc:	f7fd f9e8 	bl	80044d0 <__errno>
 8007100:	4629      	mov	r1, r5
 8007102:	6006      	str	r6, [r0, #0]
 8007104:	4620      	mov	r0, r4
 8007106:	bd70      	pop	{r4, r5, r6, pc}

08007108 <xflow>:
 8007108:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800710a:	4614      	mov	r4, r2
 800710c:	461d      	mov	r5, r3
 800710e:	b108      	cbz	r0, 8007114 <xflow+0xc>
 8007110:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007114:	e9cd 2300 	strd	r2, r3, [sp]
 8007118:	e9dd 2300 	ldrd	r2, r3, [sp]
 800711c:	4620      	mov	r0, r4
 800711e:	4629      	mov	r1, r5
 8007120:	f7f9 fa6a 	bl	80005f8 <__aeabi_dmul>
 8007124:	2222      	movs	r2, #34	; 0x22
 8007126:	b003      	add	sp, #12
 8007128:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800712c:	f7ff bfe2 	b.w	80070f4 <with_errno>

08007130 <__math_uflow>:
 8007130:	b508      	push	{r3, lr}
 8007132:	2200      	movs	r2, #0
 8007134:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007138:	f7ff ffe6 	bl	8007108 <xflow>
 800713c:	ec41 0b10 	vmov	d0, r0, r1
 8007140:	bd08      	pop	{r3, pc}

08007142 <__math_oflow>:
 8007142:	b508      	push	{r3, lr}
 8007144:	2200      	movs	r2, #0
 8007146:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800714a:	f7ff ffdd 	bl	8007108 <xflow>
 800714e:	ec41 0b10 	vmov	d0, r0, r1
 8007152:	bd08      	pop	{r3, pc}

08007154 <__ieee754_sqrt>:
 8007154:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007158:	ec55 4b10 	vmov	r4, r5, d0
 800715c:	4e67      	ldr	r6, [pc, #412]	; (80072fc <__ieee754_sqrt+0x1a8>)
 800715e:	43ae      	bics	r6, r5
 8007160:	ee10 0a10 	vmov	r0, s0
 8007164:	ee10 2a10 	vmov	r2, s0
 8007168:	4629      	mov	r1, r5
 800716a:	462b      	mov	r3, r5
 800716c:	d10d      	bne.n	800718a <__ieee754_sqrt+0x36>
 800716e:	f7f9 fa43 	bl	80005f8 <__aeabi_dmul>
 8007172:	4602      	mov	r2, r0
 8007174:	460b      	mov	r3, r1
 8007176:	4620      	mov	r0, r4
 8007178:	4629      	mov	r1, r5
 800717a:	f7f9 f887 	bl	800028c <__adddf3>
 800717e:	4604      	mov	r4, r0
 8007180:	460d      	mov	r5, r1
 8007182:	ec45 4b10 	vmov	d0, r4, r5
 8007186:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800718a:	2d00      	cmp	r5, #0
 800718c:	dc0b      	bgt.n	80071a6 <__ieee754_sqrt+0x52>
 800718e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007192:	4326      	orrs	r6, r4
 8007194:	d0f5      	beq.n	8007182 <__ieee754_sqrt+0x2e>
 8007196:	b135      	cbz	r5, 80071a6 <__ieee754_sqrt+0x52>
 8007198:	f7f9 f876 	bl	8000288 <__aeabi_dsub>
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	f7f9 fb54 	bl	800084c <__aeabi_ddiv>
 80071a4:	e7eb      	b.n	800717e <__ieee754_sqrt+0x2a>
 80071a6:	1509      	asrs	r1, r1, #20
 80071a8:	f000 808d 	beq.w	80072c6 <__ieee754_sqrt+0x172>
 80071ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071b0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80071b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071b8:	07c9      	lsls	r1, r1, #31
 80071ba:	bf5c      	itt	pl
 80071bc:	005b      	lslpl	r3, r3, #1
 80071be:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80071c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80071c6:	bf58      	it	pl
 80071c8:	0052      	lslpl	r2, r2, #1
 80071ca:	2500      	movs	r5, #0
 80071cc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80071d0:	1076      	asrs	r6, r6, #1
 80071d2:	0052      	lsls	r2, r2, #1
 80071d4:	f04f 0e16 	mov.w	lr, #22
 80071d8:	46ac      	mov	ip, r5
 80071da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071de:	eb0c 0001 	add.w	r0, ip, r1
 80071e2:	4298      	cmp	r0, r3
 80071e4:	bfde      	ittt	le
 80071e6:	1a1b      	suble	r3, r3, r0
 80071e8:	eb00 0c01 	addle.w	ip, r0, r1
 80071ec:	186d      	addle	r5, r5, r1
 80071ee:	005b      	lsls	r3, r3, #1
 80071f0:	f1be 0e01 	subs.w	lr, lr, #1
 80071f4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80071f8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80071fc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007200:	d1ed      	bne.n	80071de <__ieee754_sqrt+0x8a>
 8007202:	4674      	mov	r4, lr
 8007204:	2720      	movs	r7, #32
 8007206:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800720a:	4563      	cmp	r3, ip
 800720c:	eb01 000e 	add.w	r0, r1, lr
 8007210:	dc02      	bgt.n	8007218 <__ieee754_sqrt+0xc4>
 8007212:	d113      	bne.n	800723c <__ieee754_sqrt+0xe8>
 8007214:	4290      	cmp	r0, r2
 8007216:	d811      	bhi.n	800723c <__ieee754_sqrt+0xe8>
 8007218:	2800      	cmp	r0, #0
 800721a:	eb00 0e01 	add.w	lr, r0, r1
 800721e:	da57      	bge.n	80072d0 <__ieee754_sqrt+0x17c>
 8007220:	f1be 0f00 	cmp.w	lr, #0
 8007224:	db54      	blt.n	80072d0 <__ieee754_sqrt+0x17c>
 8007226:	f10c 0801 	add.w	r8, ip, #1
 800722a:	eba3 030c 	sub.w	r3, r3, ip
 800722e:	4290      	cmp	r0, r2
 8007230:	bf88      	it	hi
 8007232:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007236:	1a12      	subs	r2, r2, r0
 8007238:	440c      	add	r4, r1
 800723a:	46c4      	mov	ip, r8
 800723c:	005b      	lsls	r3, r3, #1
 800723e:	3f01      	subs	r7, #1
 8007240:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007244:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007248:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800724c:	d1dd      	bne.n	800720a <__ieee754_sqrt+0xb6>
 800724e:	4313      	orrs	r3, r2
 8007250:	d01b      	beq.n	800728a <__ieee754_sqrt+0x136>
 8007252:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007300 <__ieee754_sqrt+0x1ac>
 8007256:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007304 <__ieee754_sqrt+0x1b0>
 800725a:	e9da 0100 	ldrd	r0, r1, [sl]
 800725e:	e9db 2300 	ldrd	r2, r3, [fp]
 8007262:	f7f9 f811 	bl	8000288 <__aeabi_dsub>
 8007266:	e9da 8900 	ldrd	r8, r9, [sl]
 800726a:	4602      	mov	r2, r0
 800726c:	460b      	mov	r3, r1
 800726e:	4640      	mov	r0, r8
 8007270:	4649      	mov	r1, r9
 8007272:	f7f9 fc3d 	bl	8000af0 <__aeabi_dcmple>
 8007276:	b140      	cbz	r0, 800728a <__ieee754_sqrt+0x136>
 8007278:	f1b4 3fff 	cmp.w	r4, #4294967295
 800727c:	e9da 0100 	ldrd	r0, r1, [sl]
 8007280:	e9db 2300 	ldrd	r2, r3, [fp]
 8007284:	d126      	bne.n	80072d4 <__ieee754_sqrt+0x180>
 8007286:	3501      	adds	r5, #1
 8007288:	463c      	mov	r4, r7
 800728a:	106a      	asrs	r2, r5, #1
 800728c:	0863      	lsrs	r3, r4, #1
 800728e:	07e9      	lsls	r1, r5, #31
 8007290:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007294:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007298:	bf48      	it	mi
 800729a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800729e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80072a2:	461c      	mov	r4, r3
 80072a4:	e76d      	b.n	8007182 <__ieee754_sqrt+0x2e>
 80072a6:	0ad3      	lsrs	r3, r2, #11
 80072a8:	3815      	subs	r0, #21
 80072aa:	0552      	lsls	r2, r2, #21
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d0fa      	beq.n	80072a6 <__ieee754_sqrt+0x152>
 80072b0:	02dc      	lsls	r4, r3, #11
 80072b2:	d50a      	bpl.n	80072ca <__ieee754_sqrt+0x176>
 80072b4:	f1c1 0420 	rsb	r4, r1, #32
 80072b8:	fa22 f404 	lsr.w	r4, r2, r4
 80072bc:	1e4d      	subs	r5, r1, #1
 80072be:	408a      	lsls	r2, r1
 80072c0:	4323      	orrs	r3, r4
 80072c2:	1b41      	subs	r1, r0, r5
 80072c4:	e772      	b.n	80071ac <__ieee754_sqrt+0x58>
 80072c6:	4608      	mov	r0, r1
 80072c8:	e7f0      	b.n	80072ac <__ieee754_sqrt+0x158>
 80072ca:	005b      	lsls	r3, r3, #1
 80072cc:	3101      	adds	r1, #1
 80072ce:	e7ef      	b.n	80072b0 <__ieee754_sqrt+0x15c>
 80072d0:	46e0      	mov	r8, ip
 80072d2:	e7aa      	b.n	800722a <__ieee754_sqrt+0xd6>
 80072d4:	f7f8 ffda 	bl	800028c <__adddf3>
 80072d8:	e9da 8900 	ldrd	r8, r9, [sl]
 80072dc:	4602      	mov	r2, r0
 80072de:	460b      	mov	r3, r1
 80072e0:	4640      	mov	r0, r8
 80072e2:	4649      	mov	r1, r9
 80072e4:	f7f9 fbfa 	bl	8000adc <__aeabi_dcmplt>
 80072e8:	b120      	cbz	r0, 80072f4 <__ieee754_sqrt+0x1a0>
 80072ea:	1ca0      	adds	r0, r4, #2
 80072ec:	bf08      	it	eq
 80072ee:	3501      	addeq	r5, #1
 80072f0:	3402      	adds	r4, #2
 80072f2:	e7ca      	b.n	800728a <__ieee754_sqrt+0x136>
 80072f4:	3401      	adds	r4, #1
 80072f6:	f024 0401 	bic.w	r4, r4, #1
 80072fa:	e7c6      	b.n	800728a <__ieee754_sqrt+0x136>
 80072fc:	7ff00000 	.word	0x7ff00000
 8007300:	20000250 	.word	0x20000250
 8007304:	20000258 	.word	0x20000258

08007308 <_init>:
 8007308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730a:	bf00      	nop
 800730c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800730e:	bc08      	pop	{r3}
 8007310:	469e      	mov	lr, r3
 8007312:	4770      	bx	lr

08007314 <_fini>:
 8007314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007316:	bf00      	nop
 8007318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800731a:	bc08      	pop	{r3}
 800731c:	469e      	mov	lr, r3
 800731e:	4770      	bx	lr
