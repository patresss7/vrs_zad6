
vrs_cvicenie_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007300  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08007490  08007490  00017490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078e0  080078e0  00020260  2**0
                  CONTENTS
  4 .ARM          00000000  080078e0  080078e0  00020260  2**0
                  CONTENTS
  5 .preinit_array 00000000  080078e0  080078e0  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078e0  080078e0  000178e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078e4  080078e4  000178e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  080078e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020260  2**0
                  CONTENTS
 10 .bss          00000260  20000260  20000260  00020260  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004c0  200004c0  00020260  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 14 .debug_info   00006fc0  00000000  00000000  000202d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001dc8  00000000  00000000  00027293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000918  00000000  00000000  00029060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000691  00000000  00000000  00029978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001d9f3  00000000  00000000  0002a009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009f1e  00000000  00000000  000479fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a307d  00000000  00000000  0005191a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003880  00000000  00000000  000f4998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  000f8218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000260 	.word	0x20000260
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007478 	.word	0x08007478

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000264 	.word	0x20000264
 80001cc:	08007478 	.word	0x08007478

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <hts221_write_bytes>:
float tx0, tx1, ty0, ty1;
float hx0, hx1, hy0, hy1;

static uint8_t slaveAddress = HTS221_I2C_ADDRESS;

void hts221_write_bytes(uint8_t reg_address, uint8_t *data,uint8_t len){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	4613      	mov	r3, r2
 8000c56:	71bb      	strb	r3, [r7, #6]
	//masterWriteMultiByte(data,len, slaveAddress, reg_address);

	write_multi_byte(data,len,slaveAddress,reg_address);
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <hts221_write_bytes+0x28>)
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	79b9      	ldrb	r1, [r7, #6]
 8000c60:	6838      	ldr	r0, [r7, #0]
 8000c62:	f000 fe7f 	bl	8001964 <write_multi_byte>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000000 	.word	0x20000000

08000c74 <hts221_read_bytes>:
void hts221_read_bytes(uint8_t reg_address, uint8_t *data,uint8_t len){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
 8000c80:	4613      	mov	r3, r2
 8000c82:	71bb      	strb	r3, [r7, #6]
	read_multi_byte(data,len,slaveAddress,reg_address);
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <hts221_read_bytes+0x28>)
 8000c86:	781a      	ldrb	r2, [r3, #0]
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	79b9      	ldrb	r1, [r7, #6]
 8000c8c:	6838      	ldr	r0, [r7, #0]
 8000c8e:	f000 fe03 	bl	8001898 <read_multi_byte>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000000 	.word	0x20000000

08000ca0 <hts221_init>:

uint8_t hts221_init(){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0
	uint8_t ID;
	hts221_read_bytes(HTS221_REG_WHO_AM_I, &ID, 1);
 8000ca6:	f107 0313 	add.w	r3, r7, #19
 8000caa:	2201      	movs	r2, #1
 8000cac:	4619      	mov	r1, r3
 8000cae:	200f      	movs	r0, #15
 8000cb0:	f7ff ffe0 	bl	8000c74 <hts221_read_bytes>
	if(ID != HTS221_WHO_AM_I_VALUE){
 8000cb4:	7cfb      	ldrb	r3, [r7, #19]
 8000cb6:	2bbc      	cmp	r3, #188	; 0xbc
 8000cb8:	d001      	beq.n	8000cbe <hts221_init+0x1e>
		return 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e101      	b.n	8000ec2 <hts221_init+0x222>
	}
	uint8_t h0_rh_x2 = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	74bb      	strb	r3, [r7, #18]
			hts221_read_bytes(HTS221_REG_H0_rH_x2,&h0_rh_x2,1);
 8000cc2:	f107 0312 	add.w	r3, r7, #18
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4619      	mov	r1, r3
 8000cca:	2030      	movs	r0, #48	; 0x30
 8000ccc:	f7ff ffd2 	bl	8000c74 <hts221_read_bytes>
	uint8_t h1_rh_x2 = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	747b      	strb	r3, [r7, #17]
	hts221_read_bytes(HTS221_REG_H1_rH_x2,&h1_rh_x2,1);
 8000cd4:	f107 0311 	add.w	r3, r7, #17
 8000cd8:	2201      	movs	r2, #1
 8000cda:	4619      	mov	r1, r3
 8000cdc:	2031      	movs	r0, #49	; 0x31
 8000cde:	f7ff ffc9 	bl	8000c74 <hts221_read_bytes>

	uint8_t t0_degC_x8_l = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	743b      	strb	r3, [r7, #16]
	hts221_read_bytes(HTS221_REG_T0_degC_x8,&t0_degC_x8_l,1);
 8000ce6:	f107 0310 	add.w	r3, r7, #16
 8000cea:	2201      	movs	r2, #1
 8000cec:	4619      	mov	r1, r3
 8000cee:	2032      	movs	r0, #50	; 0x32
 8000cf0:	f7ff ffc0 	bl	8000c74 <hts221_read_bytes>
	uint8_t t1_degC_x8_l = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	73fb      	strb	r3, [r7, #15]
	hts221_read_bytes(HTS221_REG_T1_degC_x8,&t1_degC_x8_l,1);
 8000cf8:	f107 030f 	add.w	r3, r7, #15
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	4619      	mov	r1, r3
 8000d00:	2033      	movs	r0, #51	; 0x33
 8000d02:	f7ff ffb7 	bl	8000c74 <hts221_read_bytes>
	uint8_t t1_t0_msb = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	73bb      	strb	r3, [r7, #14]
	hts221_read_bytes(HTS221_REG_T1_T0_MSB,&t1_t0_msb,1);
 8000d0a:	f107 030e 	add.w	r3, r7, #14
 8000d0e:	2201      	movs	r2, #1
 8000d10:	4619      	mov	r1, r3
 8000d12:	2035      	movs	r0, #53	; 0x35
 8000d14:	f7ff ffae 	bl	8000c74 <hts221_read_bytes>

	uint8_t h0_t0_out_l = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	737b      	strb	r3, [r7, #13]
	hts221_read_bytes(HTS221_REG_H0_T0_OUT_L,&h0_t0_out_l,1);
 8000d1c:	f107 030d 	add.w	r3, r7, #13
 8000d20:	2201      	movs	r2, #1
 8000d22:	4619      	mov	r1, r3
 8000d24:	2036      	movs	r0, #54	; 0x36
 8000d26:	f7ff ffa5 	bl	8000c74 <hts221_read_bytes>
	uint8_t h0_t0_out_h = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	733b      	strb	r3, [r7, #12]
	hts221_read_bytes(HTS221_REG_H0_T0_OUT_H,&h0_t0_out_h,1);
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	2201      	movs	r2, #1
 8000d34:	4619      	mov	r1, r3
 8000d36:	2037      	movs	r0, #55	; 0x37
 8000d38:	f7ff ff9c 	bl	8000c74 <hts221_read_bytes>
	uint8_t h1_t0_out_l = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	72fb      	strb	r3, [r7, #11]
	hts221_read_bytes(HTS221_REG_H1_T0_OUT_L,&h1_t0_out_l,1);
 8000d40:	f107 030b 	add.w	r3, r7, #11
 8000d44:	2201      	movs	r2, #1
 8000d46:	4619      	mov	r1, r3
 8000d48:	203a      	movs	r0, #58	; 0x3a
 8000d4a:	f7ff ff93 	bl	8000c74 <hts221_read_bytes>
	uint8_t h1_t0_out_h = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	72bb      	strb	r3, [r7, #10]
	hts221_read_bytes(HTS221_REG_H1_T0_OUT_H,&h1_t0_out_h,1);
 8000d52:	f107 030a 	add.w	r3, r7, #10
 8000d56:	2201      	movs	r2, #1
 8000d58:	4619      	mov	r1, r3
 8000d5a:	203b      	movs	r0, #59	; 0x3b
 8000d5c:	f7ff ff8a 	bl	8000c74 <hts221_read_bytes>

	uint8_t t0_out_l = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	727b      	strb	r3, [r7, #9]
	hts221_read_bytes(HTS221_REG_T0_OUT_L,&t0_out_l,1);
 8000d64:	f107 0309 	add.w	r3, r7, #9
 8000d68:	2201      	movs	r2, #1
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	203c      	movs	r0, #60	; 0x3c
 8000d6e:	f7ff ff81 	bl	8000c74 <hts221_read_bytes>
	uint8_t t0_out_h = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	723b      	strb	r3, [r7, #8]
	hts221_read_bytes(HTS221_REG_T0_OUT_H,&t0_out_h,1);
 8000d76:	f107 0308 	add.w	r3, r7, #8
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	203d      	movs	r0, #61	; 0x3d
 8000d80:	f7ff ff78 	bl	8000c74 <hts221_read_bytes>
	uint8_t t1_out_l = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	71fb      	strb	r3, [r7, #7]
	hts221_read_bytes(HTS221_REG_T1_OUT_L,&t1_out_l,1);
 8000d88:	1dfb      	adds	r3, r7, #7
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	203e      	movs	r0, #62	; 0x3e
 8000d90:	f7ff ff70 	bl	8000c74 <hts221_read_bytes>
	uint8_t t1_out_h = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	71bb      	strb	r3, [r7, #6]
	hts221_read_bytes(HTS221_REG_T1_OUT_H,&t1_out_h,1);
 8000d98:	1dbb      	adds	r3, r7, #6
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	203f      	movs	r0, #63	; 0x3f
 8000da0:	f7ff ff68 	bl	8000c74 <hts221_read_bytes>

	int16_t t0_out = t0_out_l | (t0_out_h << 8);
 8000da4:	7a7b      	ldrb	r3, [r7, #9]
 8000da6:	b21a      	sxth	r2, r3
 8000da8:	7a3b      	ldrb	r3, [r7, #8]
 8000daa:	021b      	lsls	r3, r3, #8
 8000dac:	b21b      	sxth	r3, r3
 8000dae:	4313      	orrs	r3, r2
 8000db0:	83fb      	strh	r3, [r7, #30]
	int16_t t1_out = t1_out_l | (t1_out_h << 8);
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	b21a      	sxth	r2, r3
 8000db6:	79bb      	ldrb	r3, [r7, #6]
 8000db8:	021b      	lsls	r3, r3, #8
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	83bb      	strh	r3, [r7, #28]

	int16_t t0_degC_x8 = t0_degC_x8_l | ((t1_t0_msb & 0b11) << 8);
 8000dc0:	7c3b      	ldrb	r3, [r7, #16]
 8000dc2:	b21a      	sxth	r2, r3
 8000dc4:	7bbb      	ldrb	r3, [r7, #14]
 8000dc6:	021b      	lsls	r3, r3, #8
 8000dc8:	b21b      	sxth	r3, r3
 8000dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000dce:	b21b      	sxth	r3, r3
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	837b      	strh	r3, [r7, #26]
	int16_t t1_degC_x8 = t1_degC_x8_l | ((t1_t0_msb & 0b1100) << (8 - 2));
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	b21a      	sxth	r2, r3
 8000dd8:	7bbb      	ldrb	r3, [r7, #14]
 8000dda:	019b      	lsls	r3, r3, #6
 8000ddc:	b21b      	sxth	r3, r3
 8000dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000de2:	b21b      	sxth	r3, r3
 8000de4:	4313      	orrs	r3, r2
 8000de6:	833b      	strh	r3, [r7, #24]

	tx0 = (float)t0_out;
 8000de8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000dec:	ee07 3a90 	vmov	s15, r3
 8000df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000df4:	4b35      	ldr	r3, [pc, #212]	; (8000ecc <hts221_init+0x22c>)
 8000df6:	edc3 7a00 	vstr	s15, [r3]
	tx1 = (float)t1_out;
 8000dfa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000dfe:	ee07 3a90 	vmov	s15, r3
 8000e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e06:	4b32      	ldr	r3, [pc, #200]	; (8000ed0 <hts221_init+0x230>)
 8000e08:	edc3 7a00 	vstr	s15, [r3]
	ty0 = (float)t0_degC_x8/8.0;
 8000e0c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000e10:	ee07 3a90 	vmov	s15, r3
 8000e14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e18:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8000e1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e20:	4b2c      	ldr	r3, [pc, #176]	; (8000ed4 <hts221_init+0x234>)
 8000e22:	edc3 7a00 	vstr	s15, [r3]
	ty1 = (float)t1_degC_x8/8.0;
 8000e26:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000e2a:	ee07 3a90 	vmov	s15, r3
 8000e2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e32:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8000e36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e3a:	4b27      	ldr	r3, [pc, #156]	; (8000ed8 <hts221_init+0x238>)
 8000e3c:	edc3 7a00 	vstr	s15, [r3]

	int16_t h0_t0_out = h0_t0_out_l | (h0_t0_out_h << 8);
 8000e40:	7b7b      	ldrb	r3, [r7, #13]
 8000e42:	b21a      	sxth	r2, r3
 8000e44:	7b3b      	ldrb	r3, [r7, #12]
 8000e46:	021b      	lsls	r3, r3, #8
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	82fb      	strh	r3, [r7, #22]
	int16_t h1_t0_out = h1_t0_out_l | (h1_t0_out_h << 8);
 8000e4e:	7afb      	ldrb	r3, [r7, #11]
 8000e50:	b21a      	sxth	r2, r3
 8000e52:	7abb      	ldrb	r3, [r7, #10]
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	b21b      	sxth	r3, r3
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	82bb      	strh	r3, [r7, #20]

	hx0 = (float)h0_t0_out;
 8000e5c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e60:	ee07 3a90 	vmov	s15, r3
 8000e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e68:	4b1c      	ldr	r3, [pc, #112]	; (8000edc <hts221_init+0x23c>)
 8000e6a:	edc3 7a00 	vstr	s15, [r3]
	hx1 = (float)h1_t0_out;
 8000e6e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e72:	ee07 3a90 	vmov	s15, r3
 8000e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e7a:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <hts221_init+0x240>)
 8000e7c:	edc3 7a00 	vstr	s15, [r3]
	hy0 = (float)h0_rh_x2/2.0;
 8000e80:	7cbb      	ldrb	r3, [r7, #18]
 8000e82:	ee07 3a90 	vmov	s15, r3
 8000e86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e8a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000e8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <hts221_init+0x244>)
 8000e94:	edc3 7a00 	vstr	s15, [r3]
	hy1 = (float)h1_rh_x2/2.0;
 8000e98:	7c7b      	ldrb	r3, [r7, #17]
 8000e9a:	ee07 3a90 	vmov	s15, r3
 8000e9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ea2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000ea6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <hts221_init+0x248>)
 8000eac:	edc3 7a00 	vstr	s15, [r3]


	// set up sensor registers
	uint8_t ctrl_reg1 = 0b10000011;
 8000eb0:	2383      	movs	r3, #131	; 0x83
 8000eb2:	717b      	strb	r3, [r7, #5]
	hts221_write_bytes(HTS221_REG_CTRL_REG1, &ctrl_reg1,1);
 8000eb4:	1d7b      	adds	r3, r7, #5
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4619      	mov	r1, r3
 8000eba:	2020      	movs	r0, #32
 8000ebc:	f7ff fec4 	bl	8000c48 <hts221_write_bytes>
	return 1;
 8000ec0:	2301      	movs	r3, #1
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3720      	adds	r7, #32
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	2000027c 	.word	0x2000027c
 8000ed0:	20000280 	.word	0x20000280
 8000ed4:	20000284 	.word	0x20000284
 8000ed8:	20000288 	.word	0x20000288
 8000edc:	2000028c 	.word	0x2000028c
 8000ee0:	20000290 	.word	0x20000290
 8000ee4:	20000294 	.word	0x20000294
 8000ee8:	20000298 	.word	0x20000298

08000eec <hts221_get_temperature>:
float hts221_get_temperature(){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
	uint8_t data[2];
	uint16_t x;
	hts221_read_bytes(HTS221_REG_TEMP_OUT_L, &data, 2);
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	202a      	movs	r0, #42	; 0x2a
 8000efa:	f7ff febb 	bl	8000c74 <hts221_read_bytes>
	x = data[0] | data[1]<<8;
 8000efe:	793b      	ldrb	r3, [r7, #4]
 8000f00:	b21a      	sxth	r2, r3
 8000f02:	797b      	ldrb	r3, [r7, #5]
 8000f04:	021b      	lsls	r3, r3, #8
 8000f06:	b21b      	sxth	r3, r3
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	b21b      	sxth	r3, r3
 8000f0c:	80fb      	strh	r3, [r7, #6]
	return linear_interpolation((float)x, tx0, tx1, ty0, ty1);
 8000f0e:	88fb      	ldrh	r3, [r7, #6]
 8000f10:	ee07 3a90 	vmov	s15, r3
 8000f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <hts221_get_temperature+0x6c>)
 8000f1a:	ed93 7a00 	vldr	s14, [r3]
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <hts221_get_temperature+0x70>)
 8000f20:	edd3 6a00 	vldr	s13, [r3]
 8000f24:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <hts221_get_temperature+0x74>)
 8000f26:	ed93 6a00 	vldr	s12, [r3]
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <hts221_get_temperature+0x78>)
 8000f2c:	edd3 5a00 	vldr	s11, [r3]
 8000f30:	eeb0 2a65 	vmov.f32	s4, s11
 8000f34:	eef0 1a46 	vmov.f32	s3, s12
 8000f38:	eeb0 1a66 	vmov.f32	s2, s13
 8000f3c:	eef0 0a47 	vmov.f32	s1, s14
 8000f40:	eeb0 0a67 	vmov.f32	s0, s15
 8000f44:	f000 f84e 	bl	8000fe4 <linear_interpolation>
 8000f48:	eef0 7a40 	vmov.f32	s15, s0
}
 8000f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	2000027c 	.word	0x2000027c
 8000f5c:	20000280 	.word	0x20000280
 8000f60:	20000284 	.word	0x20000284
 8000f64:	20000288 	.word	0x20000288

08000f68 <hts221_get_humidity>:

float hts221_get_humidity(){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
	uint8_t data[2];
	uint16_t x;
	hts221_read_bytes(HTS221_REG_HUMIDITY_OUT_L, &data, 2);
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2202      	movs	r2, #2
 8000f72:	4619      	mov	r1, r3
 8000f74:	2028      	movs	r0, #40	; 0x28
 8000f76:	f7ff fe7d 	bl	8000c74 <hts221_read_bytes>
	x = data[0] | data[1]<<8;
 8000f7a:	793b      	ldrb	r3, [r7, #4]
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	797b      	ldrb	r3, [r7, #5]
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	4313      	orrs	r3, r2
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	80fb      	strh	r3, [r7, #6]
	return linear_interpolation((float)x, hx0, hx1, hy0, hy1);
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	ee07 3a90 	vmov	s15, r3
 8000f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <hts221_get_humidity+0x6c>)
 8000f96:	ed93 7a00 	vldr	s14, [r3]
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <hts221_get_humidity+0x70>)
 8000f9c:	edd3 6a00 	vldr	s13, [r3]
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <hts221_get_humidity+0x74>)
 8000fa2:	ed93 6a00 	vldr	s12, [r3]
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <hts221_get_humidity+0x78>)
 8000fa8:	edd3 5a00 	vldr	s11, [r3]
 8000fac:	eeb0 2a65 	vmov.f32	s4, s11
 8000fb0:	eef0 1a46 	vmov.f32	s3, s12
 8000fb4:	eeb0 1a66 	vmov.f32	s2, s13
 8000fb8:	eef0 0a47 	vmov.f32	s1, s14
 8000fbc:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc0:	f000 f810 	bl	8000fe4 <linear_interpolation>
 8000fc4:	eef0 7a40 	vmov.f32	s15, s0
}
 8000fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	2000028c 	.word	0x2000028c
 8000fd8:	20000290 	.word	0x20000290
 8000fdc:	20000294 	.word	0x20000294
 8000fe0:	20000298 	.word	0x20000298

08000fe4 <linear_interpolation>:
float linear_interpolation(float x,float x0,float x1,float y0,float y1){
 8000fe4:	b480      	push	{r7}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	ed87 0a05 	vstr	s0, [r7, #20]
 8000fee:	edc7 0a04 	vstr	s1, [r7, #16]
 8000ff2:	ed87 1a03 	vstr	s2, [r7, #12]
 8000ff6:	edc7 1a02 	vstr	s3, [r7, #8]
 8000ffa:	ed87 2a01 	vstr	s4, [r7, #4]
	return (y0 + ((x-x0)*(y1-y0))/(x1-x0));
 8000ffe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001002:	edd7 7a04 	vldr	s15, [r7, #16]
 8001006:	ee37 7a67 	vsub.f32	s14, s14, s15
 800100a:	edd7 6a01 	vldr	s13, [r7, #4]
 800100e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001012:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001016:	ee67 6a27 	vmul.f32	s13, s14, s15
 800101a:	ed97 7a03 	vldr	s14, [r7, #12]
 800101e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001022:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800102a:	edd7 7a02 	vldr	s15, [r7, #8]
 800102e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001032:	eeb0 0a67 	vmov.f32	s0, s15
 8001036:	371c      	adds	r7, #28
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <lps25hb_write_bytes>:


uint8_t actual_address = LPS25HB_I2C_ADDRESS_0;

void lps25hb_write_bytes(uint8_t register_address, uint8_t *data, uint8_t len, uint8_t i2c_address)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6039      	str	r1, [r7, #0]
 8001048:	4611      	mov	r1, r2
 800104a:	461a      	mov	r2, r3
 800104c:	4603      	mov	r3, r0
 800104e:	71fb      	strb	r3, [r7, #7]
 8001050:	460b      	mov	r3, r1
 8001052:	71bb      	strb	r3, [r7, #6]
 8001054:	4613      	mov	r3, r2
 8001056:	717b      	strb	r3, [r7, #5]
	write_multi_byte(data, len, i2c_address, register_address);
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	797a      	ldrb	r2, [r7, #5]
 800105c:	79b9      	ldrb	r1, [r7, #6]
 800105e:	6838      	ldr	r0, [r7, #0]
 8001060:	f000 fc80 	bl	8001964 <write_multi_byte>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <lps25hb_read_bytes>:
void lps25hb_read_bytes(uint8_t register_address, uint8_t *data, uint8_t len, uint8_t i2c_address)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6039      	str	r1, [r7, #0]
 8001074:	4611      	mov	r1, r2
 8001076:	461a      	mov	r2, r3
 8001078:	4603      	mov	r3, r0
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	460b      	mov	r3, r1
 800107e:	71bb      	strb	r3, [r7, #6]
 8001080:	4613      	mov	r3, r2
 8001082:	717b      	strb	r3, [r7, #5]
	read_multi_byte(data, len, i2c_address, register_address);
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	797a      	ldrb	r2, [r7, #5]
 8001088:	79b9      	ldrb	r1, [r7, #6]
 800108a:	6838      	ldr	r0, [r7, #0]
 800108c:	f000 fc04 	bl	8001898 <read_multi_byte>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <lps25hb_init>:

uint8_t lps25hb_init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
	uint8_t ID;
	lps25hb_read_bytes(LPS25HB_REG_WHO_AM_I_ADDR, &ID, 1, actual_address);
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <lps25hb_init+0x50>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	1df9      	adds	r1, r7, #7
 80010a4:	2201      	movs	r2, #1
 80010a6:	200f      	movs	r0, #15
 80010a8:	f7ff ffe0 	bl	800106c <lps25hb_read_bytes>
	if(ID != LPS25HB_WHO_AM_I_VALUE)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	2bb1      	cmp	r3, #177	; 0xb1
 80010b0:	d00e      	beq.n	80010d0 <lps25hb_init+0x38>
	{
		actual_address = LPS25HB_I2C_ADDRESS_1;
 80010b2:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <lps25hb_init+0x50>)
 80010b4:	22b8      	movs	r2, #184	; 0xb8
 80010b6:	701a      	strb	r2, [r3, #0]
		lps25hb_read_bytes(LPS25HB_REG_WHO_AM_I_ADDR, &ID, 1, actual_address);
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <lps25hb_init+0x50>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	1df9      	adds	r1, r7, #7
 80010be:	2201      	movs	r2, #1
 80010c0:	200f      	movs	r0, #15
 80010c2:	f7ff ffd3 	bl	800106c <lps25hb_read_bytes>
		if(ID != LPS25HB_WHO_AM_I_VALUE)
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	2bb1      	cmp	r3, #177	; 0xb1
 80010ca:	d001      	beq.n	80010d0 <lps25hb_init+0x38>
		{
			return 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	e007      	b.n	80010e0 <lps25hb_init+0x48>
		}
	}
	lps25hb_write_bytes(LPS25HB_REG_CTRL_REG1, 0b00110000, 1, actual_address);
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <lps25hb_init+0x50>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2201      	movs	r2, #1
 80010d6:	2130      	movs	r1, #48	; 0x30
 80010d8:	2010      	movs	r0, #16
 80010da:	f7ff ffb1 	bl	8001040 <lps25hb_write_bytes>
	return 1;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000001 	.word	0x20000001

080010ec <lps25hb_read_pressure>:

float lps25hb_read_pressure(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
	float result = 0;
 80010f2:	f04f 0300 	mov.w	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
	uint8_t data[3];
	lps25hb_read_bytes(LPS25HB_REG_PRESS_OUT_XL, &data, 3, actual_address);
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <lps25hb_read_pressure+0x54>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	1d39      	adds	r1, r7, #4
 80010fe:	2203      	movs	r2, #3
 8001100:	2028      	movs	r0, #40	; 0x28
 8001102:	f7ff ffb3 	bl	800106c <lps25hb_read_bytes>
	int32_t pressure_raw = (int32_t)((data[2] << 16) | (data[1] << 8) | data[0]);
 8001106:	79bb      	ldrb	r3, [r7, #6]
 8001108:	041a      	lsls	r2, r3, #16
 800110a:	797b      	ldrb	r3, [r7, #5]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	4313      	orrs	r3, r2
 8001110:	793a      	ldrb	r2, [r7, #4]
 8001112:	4313      	orrs	r3, r2
 8001114:	60bb      	str	r3, [r7, #8]
	result = pressure_raw / 4096;
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	2b00      	cmp	r3, #0
 800111a:	da01      	bge.n	8001120 <lps25hb_read_pressure+0x34>
 800111c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001120:	131b      	asrs	r3, r3, #12
 8001122:	ee07 3a90 	vmov	s15, r3
 8001126:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800112a:	edc7 7a03 	vstr	s15, [r7, #12]
	return result;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	ee07 3a90 	vmov	s15, r3

}
 8001134:	eeb0 0a67 	vmov.f32	s0, s15
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000001 	.word	0x20000001
 8001144:	00000000 	.word	0x00000000

08001148 <lps25hb_read_altitude>:

float lps25hb_read_altitude(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0

	const float SEA_LEVEL_PRESSURE_HPA = 1013.25; // Standard sea-level pressure in hPa
 800114e:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <lps25hb_read_altitude+0x90>)
 8001150:	60fb      	str	r3, [r7, #12]

	float altitude = 0;
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
	float pressure = lps25hb_read_pressure();
 8001158:	f7ff ffc8 	bl	80010ec <lps25hb_read_pressure>
 800115c:	ed87 0a01 	vstr	s0, [r7, #4]

	 altitude = 44330.0 * (1.0 - pow((pressure / SEA_LEVEL_PRESSURE_HPA), 0.1903));
 8001160:	ed97 7a01 	vldr	s14, [r7, #4]
 8001164:	edd7 7a03 	vldr	s15, [r7, #12]
 8001168:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800116c:	ee16 0a90 	vmov	r0, s13
 8001170:	f7ff f9ea 	bl	8000548 <__aeabi_f2d>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	ed9f 1b13 	vldr	d1, [pc, #76]	; 80011c8 <lps25hb_read_altitude+0x80>
 800117c:	ec43 2b10 	vmov	d0, r2, r3
 8001180:	f005 fa42 	bl	8006608 <pow>
 8001184:	ec53 2b10 	vmov	r2, r3, d0
 8001188:	f04f 0000 	mov.w	r0, #0
 800118c:	4913      	ldr	r1, [pc, #76]	; (80011dc <lps25hb_read_altitude+0x94>)
 800118e:	f7ff f87b 	bl	8000288 <__aeabi_dsub>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	a30d      	add	r3, pc, #52	; (adr r3, 80011d0 <lps25hb_read_altitude+0x88>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	f7ff fa2a 	bl	80005f8 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f7ff fcfc 	bl	8000ba8 <__aeabi_d2f>
 80011b0:	4603      	mov	r3, r0
 80011b2:	60bb      	str	r3, [r7, #8]

	 return altitude;
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	ee07 3a90 	vmov	s15, r3

}
 80011ba:	eeb0 0a67 	vmov.f32	s0, s15
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	f3af 8000 	nop.w
 80011c8:	1a36e2eb 	.word	0x1a36e2eb
 80011cc:	3fc85bc0 	.word	0x3fc85bc0
 80011d0:	00000000 	.word	0x00000000
 80011d4:	40e5a540 	.word	0x40e5a540
 80011d8:	447d5000 	.word	0x447d5000
 80011dc:	3ff00000 	.word	0x3ff00000

080011e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	db0b      	blt.n	800120a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	f003 021f 	and.w	r2, r3, #31
 80011f8:	4907      	ldr	r1, [pc, #28]	; (8001218 <__NVIC_EnableIRQ+0x38>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	2001      	movs	r0, #1
 8001202:	fa00 f202 	lsl.w	r2, r0, r2
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000e100 	.word	0xe000e100

0800121c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	490c      	ldr	r1, [pc, #48]	; (8001268 <__NVIC_SetPriority+0x4c>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	; (800126c <__NVIC_SetPriority+0x50>)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	3b04      	subs	r3, #4
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800127a:	695a      	ldr	r2, [r3, #20]
 800127c:	4907      	ldr	r1, [pc, #28]	; (800129c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4313      	orrs	r3, r2
 8001282:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001286:	695a      	ldr	r2, [r3, #20]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4013      	ands	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	40021000 	.word	0x40021000

080012a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f7ff ffe3 	bl	8001270 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, 0);
 80012aa:	2100      	movs	r1, #0
 80012ac:	2010      	movs	r0, #16
 80012ae:	f7ff ffb5 	bl	800121c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80012b2:	2010      	movs	r0, #16
 80012b4:	f7ff ff94 	bl	80011e0 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, 0);
 80012b8:	2100      	movs	r1, #0
 80012ba:	2011      	movs	r0, #17
 80012bc:	f7ff ffae 	bl	800121c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80012c0:	2011      	movs	r0, #17
 80012c2:	f7ff ff8d 	bl	80011e0 <__NVIC_EnableIRQ>

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <LL_AHB1_GRP1_EnableClock>:
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012d6:	695a      	ldr	r2, [r3, #20]
 80012d8:	4907      	ldr	r1, [pc, #28]	; (80012f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4313      	orrs	r3, r2
 80012de:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012e2:	695a      	ldr	r2, [r3, #20]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4013      	ands	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012ea:	68fb      	ldr	r3, [r7, #12]
}
 80012ec:	bf00      	nop
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	40021000 	.word	0x40021000

080012fc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b089      	sub	sp, #36	; 0x24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa93 f3a3 	rbit	r3, r3
 8001316:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	fab3 f383 	clz	r3, r3
 800131e:	b2db      	uxtb	r3, r3
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	2103      	movs	r1, #3
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	401a      	ands	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	fa93 f3a3 	rbit	r3, r3
 8001336:	61bb      	str	r3, [r7, #24]
  return result;
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	fab3 f383 	clz	r3, r3
 800133e:	b2db      	uxtb	r3, r3
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	431a      	orrs	r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	601a      	str	r2, [r3, #0]
}
 800134e:	bf00      	nop
 8001350:	3724      	adds	r7, #36	; 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	619a      	str	r2, [r3, #24]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */

  /* LED pin configuration */
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_3, LL_GPIO_MODE_OUTPUT);
 800139a:	2201      	movs	r2, #1
 800139c:	2108      	movs	r1, #8
 800139e:	4817      	ldr	r0, [pc, #92]	; (80013fc <MX_GPIO_Init+0x68>)
 80013a0:	f7ff ffac 	bl	80012fc <LL_GPIO_SetPinMode>
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_3);
 80013a4:	2108      	movs	r1, #8
 80013a6:	4815      	ldr	r0, [pc, #84]	; (80013fc <MX_GPIO_Init+0x68>)
 80013a8:	f7ff ffd7 	bl	800135a <LL_GPIO_SetOutputPin>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	463b      	mov	r3, r7
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]
 80013ba:	615a      	str	r2, [r3, #20]

    /* GPIO Ports Clock Enable */
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80013bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80013c0:	f7ff ff84 	bl	80012cc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80013c4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80013c8:	f7ff ff80 	bl	80012cc <LL_AHB1_GRP1_EnableClock>

	/**/
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 80013cc:	2108      	movs	r1, #8
 80013ce:	480b      	ldr	r0, [pc, #44]	; (80013fc <MX_GPIO_Init+0x68>)
 80013d0:	f7ff ffd1 	bl	8001376 <LL_GPIO_ResetOutputPin>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80013d4:	2308      	movs	r3, #8
 80013d6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013d8:	2301      	movs	r3, #1
 80013da:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e8:	463b      	mov	r3, r7
 80013ea:	4619      	mov	r1, r3
 80013ec:	4803      	ldr	r0, [pc, #12]	; (80013fc <MX_GPIO_Init+0x68>)
 80013ee:	f001 fe4d 	bl	800308c <LL_GPIO_Init>

}
 80013f2:	bf00      	nop
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	48000400 	.word	0x48000400

08001400 <__NVIC_GetPriorityGrouping>:
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <__NVIC_GetPriorityGrouping+0x18>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	0a1b      	lsrs	r3, r3, #8
 800140a:	f003 0307 	and.w	r3, r3, #7
}
 800140e:	4618      	mov	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_EnableIRQ>:
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	2b00      	cmp	r3, #0
 800142c:	db0b      	blt.n	8001446 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	f003 021f 	and.w	r2, r3, #31
 8001434:	4907      	ldr	r1, [pc, #28]	; (8001454 <__NVIC_EnableIRQ+0x38>)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	095b      	lsrs	r3, r3, #5
 800143c:	2001      	movs	r0, #1
 800143e:	fa00 f202 	lsl.w	r2, r0, r2
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000e100 	.word	0xe000e100

08001458 <__NVIC_SetPriority>:
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	6039      	str	r1, [r7, #0]
 8001462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001468:	2b00      	cmp	r3, #0
 800146a:	db0a      	blt.n	8001482 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	b2da      	uxtb	r2, r3
 8001470:	490c      	ldr	r1, [pc, #48]	; (80014a4 <__NVIC_SetPriority+0x4c>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	0112      	lsls	r2, r2, #4
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	440b      	add	r3, r1
 800147c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001480:	e00a      	b.n	8001498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4908      	ldr	r1, [pc, #32]	; (80014a8 <__NVIC_SetPriority+0x50>)
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	3b04      	subs	r3, #4
 8001490:	0112      	lsls	r2, r2, #4
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	440b      	add	r3, r1
 8001496:	761a      	strb	r2, [r3, #24]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000e100 	.word	0xe000e100
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b089      	sub	sp, #36	; 0x24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f1c3 0307 	rsb	r3, r3, #7
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	bf28      	it	cs
 80014ca:	2304      	movcs	r3, #4
 80014cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3304      	adds	r3, #4
 80014d2:	2b06      	cmp	r3, #6
 80014d4:	d902      	bls.n	80014dc <NVIC_EncodePriority+0x30>
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3b03      	subs	r3, #3
 80014da:	e000      	b.n	80014de <NVIC_EncodePriority+0x32>
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	f04f 32ff 	mov.w	r2, #4294967295
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43da      	mvns	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	401a      	ands	r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f4:	f04f 31ff 	mov.w	r1, #4294967295
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
 80014fe:	43d9      	mvns	r1, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	4313      	orrs	r3, r2
         );
}
 8001506:	4618      	mov	r0, r3
 8001508:	3724      	adds	r7, #36	; 0x24
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f043 0201 	orr.w	r2, r3, #1
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	601a      	str	r2, [r3, #0]
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	601a      	str	r2, [r3, #0]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	601a      	str	r2, [r3, #0]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8001572:	b480      	push	{r7}
 8001574:	b085      	sub	sp, #20
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001586:	f023 0306 	bic.w	r3, r3, #6
 800158a:	68b9      	ldr	r1, [r7, #8]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	430a      	orrs	r2, r1
 8001590:	431a      	orrs	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	60da      	str	r2, [r3, #12]
}
 8001596:	bf00      	nop
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	60da      	str	r2, [r3, #12]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f043 0204 	orr.w	r2, r3, #4
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	601a      	str	r2, [r3, #0]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f023 0204 	bic.w	r2, r3, #4
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	601a      	str	r2, [r3, #0]
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(const I2C_TypeDef *I2Cx)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b02      	cmp	r3, #2
 8001614:	d101      	bne.n	800161a <LL_I2C_IsActiveFlag_TXIS+0x18>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <LL_I2C_IsActiveFlag_TXIS+0x1a>
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b04      	cmp	r3, #4
 800163a:	d101      	bne.n	8001640 <LL_I2C_IsActiveFlag_RXNE+0x18>
 800163c:	2301      	movs	r3, #1
 800163e:	e000      	b.n	8001642 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(const I2C_TypeDef *I2Cx)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	f003 0320 	and.w	r3, r3, #32
 800165e:	2b20      	cmp	r3, #32
 8001660:	d101      	bne.n	8001666 <LL_I2C_IsActiveFlag_STOP+0x18>
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LL_I2C_ClearFlag_NACK>:
  * @rmtoll ICR          NACKCF        LL_I2C_ClearFlag_NACK
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_NACK(I2C_TypeDef *I2Cx)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	f043 0210 	orr.w	r2, r3, #16
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	61da      	str	r2, [r3, #28]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	f043 0220 	orr.w	r2, r3, #32
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	61da      	str	r2, [r3, #28]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	605a      	str	r2, [r3, #4]
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
 80016e0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	0d5b      	lsrs	r3, r3, #21
 80016ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <LL_I2C_HandleTransfer+0x48>)
 80016f0:	430b      	orrs	r3, r1
 80016f2:	43db      	mvns	r3, r3
 80016f4:	401a      	ands	r2, r3
 80016f6:	68b9      	ldr	r1, [r7, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4319      	orrs	r1, r3
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	041b      	lsls	r3, r3, #16
 8001700:	4319      	orrs	r1, r3
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	4319      	orrs	r1, r3
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	430b      	orrs	r3, r1
 800170a:	431a      	orrs	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	03ff7bff 	.word	0x03ff7bff

08001720 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	b2db      	uxtb	r3, r3
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	460b      	mov	r3, r1
 8001744:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001746:	78fa      	ldrb	r2, [r7, #3]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <LL_AHB1_GRP1_EnableClock>:
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001760:	4b08      	ldr	r3, [pc, #32]	; (8001784 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001762:	695a      	ldr	r2, [r3, #20]
 8001764:	4907      	ldr	r1, [pc, #28]	; (8001784 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4313      	orrs	r3, r2
 800176a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800176e:	695a      	ldr	r2, [r3, #20]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4013      	ands	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001776:	68fb      	ldr	r3, [r7, #12]
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	40021000 	.word	0x40021000

08001788 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001792:	69da      	ldr	r2, [r3, #28]
 8001794:	4907      	ldr	r1, [pc, #28]	; (80017b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4313      	orrs	r3, r2
 800179a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800179e:	69da      	ldr	r2, [r3, #28]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4013      	ands	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	40021000 	.word	0x40021000

080017b8 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08e      	sub	sp, #56	; 0x38
 80017bc:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]
 80017ce:	615a      	str	r2, [r3, #20]
 80017d0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
 80017e0:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80017e2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80017e6:	f7ff ffb7 	bl	8001758 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80017ea:	23c0      	movs	r3, #192	; 0xc0
 80017ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017ee:	2302      	movs	r3, #2
 80017f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80017f2:	2303      	movs	r3, #3
 80017f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80017f6:	2301      	movs	r3, #1
 80017f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80017fa:	2301      	movs	r3, #1
 80017fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80017fe:	2304      	movs	r3, #4
 8001800:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	4619      	mov	r1, r3
 8001806:	4821      	ldr	r0, [pc, #132]	; (800188c <MX_I2C1_Init+0xd4>)
 8001808:	f001 fc40 	bl	800308c <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800180c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001810:	f7ff ffba 	bl	8001788 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001814:	f7ff fdf4 	bl	8001400 <__NVIC_GetPriorityGrouping>
 8001818:	4603      	mov	r3, r0
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fe44 	bl	80014ac <NVIC_EncodePriority>
 8001824:	4603      	mov	r3, r0
 8001826:	4619      	mov	r1, r3
 8001828:	201f      	movs	r0, #31
 800182a:	f7ff fe15 	bl	8001458 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800182e:	201f      	movs	r0, #31
 8001830:	f7ff fdf4 	bl	800141c <__NVIC_EnableIRQ>

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001834:	4816      	ldr	r0, [pc, #88]	; (8001890 <MX_I2C1_Init+0xd8>)
 8001836:	f7ff ff3d 	bl	80016b4 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 800183a:	4815      	ldr	r0, [pc, #84]	; (8001890 <MX_I2C1_Init+0xd8>)
 800183c:	f7ff feb1 	bl	80015a2 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001840:	4813      	ldr	r0, [pc, #76]	; (8001890 <MX_I2C1_Init+0xd8>)
 8001842:	f7ff fe86 	bl	8001552 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001846:	4812      	ldr	r0, [pc, #72]	; (8001890 <MX_I2C1_Init+0xd8>)
 8001848:	f7ff fe73 	bl	8001532 <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8001850:	4b10      	ldr	r3, [pc, #64]	; (8001894 <MX_I2C1_Init+0xdc>)
 8001852:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001854:	2300      	movs	r3, #0
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 800185c:	2302      	movs	r3, #2
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001860:	2300      	movs	r3, #0
 8001862:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001864:	2300      	movs	r3, #0
 8001866:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001868:	f107 031c 	add.w	r3, r7, #28
 800186c:	4619      	mov	r1, r3
 800186e:	4808      	ldr	r0, [pc, #32]	; (8001890 <MX_I2C1_Init+0xd8>)
 8001870:	f001 fd1f 	bl	80032b2 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001874:	2200      	movs	r2, #0
 8001876:	2100      	movs	r1, #0
 8001878:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_I2C1_Init+0xd8>)
 800187a:	f7ff fe7a 	bl	8001572 <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 800187e:	4804      	ldr	r0, [pc, #16]	; (8001890 <MX_I2C1_Init+0xd8>)
 8001880:	f7ff fe47 	bl	8001512 <LL_I2C_Enable>
}
 8001884:	bf00      	nop
 8001886:	3738      	adds	r7, #56	; 0x38
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	48000400 	.word	0x48000400
 8001890:	40005400 	.word	0x40005400
 8001894:	2000090e 	.word	0x2000090e

08001898 <read_multi_byte>:
//		i2c_rx_data = LL_I2C_ReceiveData8(I2C1);
//	}
//}

void read_multi_byte(uint8_t *data, uint8_t len, uint8_t slave_address, uint8_t register_address)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af02      	add	r7, sp, #8
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	4608      	mov	r0, r1
 80018a2:	4611      	mov	r1, r2
 80018a4:	461a      	mov	r2, r3
 80018a6:	4603      	mov	r3, r0
 80018a8:	70fb      	strb	r3, [r7, #3]
 80018aa:	460b      	mov	r3, r1
 80018ac:	70bb      	strb	r3, [r7, #2]
 80018ae:	4613      	mov	r3, r2
 80018b0:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = data;
 80018b2:	4a27      	ldr	r2, [pc, #156]	; (8001950 <read_multi_byte+0xb8>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6013      	str	r3, [r2, #0]

	LL_I2C_EnableIT_RX(I2C1);
 80018b8:	4826      	ldr	r0, [pc, #152]	; (8001954 <read_multi_byte+0xbc>)
 80018ba:	f7ff fe82 	bl	80015c2 <LL_I2C_EnableIT_RX>
		// Initialize communication
	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80018be:	78b9      	ldrb	r1, [r7, #2]
 80018c0:	4b25      	ldr	r3, [pc, #148]	; (8001958 <read_multi_byte+0xc0>)
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	2301      	movs	r3, #1
 80018cc:	2200      	movs	r2, #0
 80018ce:	4821      	ldr	r0, [pc, #132]	; (8001954 <read_multi_byte+0xbc>)
 80018d0:	f7ff ff00 	bl	80016d4 <LL_I2C_HandleTransfer>
	// Send register address
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80018d4:	e00a      	b.n	80018ec <read_multi_byte+0x54>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 80018d6:	481f      	ldr	r0, [pc, #124]	; (8001954 <read_multi_byte+0xbc>)
 80018d8:	f7ff fe93 	bl	8001602 <LL_I2C_IsActiveFlag_TXIS>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d004      	beq.n	80018ec <read_multi_byte+0x54>
		{
			LL_I2C_TransmitData8(I2C1, register_address);
 80018e2:	787b      	ldrb	r3, [r7, #1]
 80018e4:	4619      	mov	r1, r3
 80018e6:	481b      	ldr	r0, [pc, #108]	; (8001954 <read_multi_byte+0xbc>)
 80018e8:	f7ff ff27 	bl	800173a <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80018ec:	4819      	ldr	r0, [pc, #100]	; (8001954 <read_multi_byte+0xbc>)
 80018ee:	f7ff feae 	bl	800164e <LL_I2C_IsActiveFlag_STOP>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0ee      	beq.n	80018d6 <read_multi_byte+0x3e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80018f8:	4816      	ldr	r0, [pc, #88]	; (8001954 <read_multi_byte+0xbc>)
 80018fa:	f7ff fecb 	bl	8001694 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80018fe:	bf00      	nop
 8001900:	4814      	ldr	r0, [pc, #80]	; (8001954 <read_multi_byte+0xbc>)
 8001902:	f7ff fea4 	bl	800164e <LL_I2C_IsActiveFlag_STOP>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1f9      	bne.n	8001900 <read_multi_byte+0x68>

	// Receive data from slave device
	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 800190c:	78b9      	ldrb	r1, [r7, #2]
 800190e:	4b13      	ldr	r3, [pc, #76]	; (800195c <read_multi_byte+0xc4>)
 8001910:	9301      	str	r3, [sp, #4]
 8001912:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	2301      	movs	r3, #1
 800191a:	2200      	movs	r2, #0
 800191c:	480d      	ldr	r0, [pc, #52]	; (8001954 <read_multi_byte+0xbc>)
 800191e:	f7ff fed9 	bl	80016d4 <LL_I2C_HandleTransfer>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8001922:	bf00      	nop
 8001924:	480b      	ldr	r0, [pc, #44]	; (8001954 <read_multi_byte+0xbc>)
 8001926:	f7ff fe92 	bl	800164e <LL_I2C_IsActiveFlag_STOP>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f9      	beq.n	8001924 <read_multi_byte+0x8c>

	//End of transfer
	LL_I2C_DisableIT_RX(I2C1);
 8001930:	4808      	ldr	r0, [pc, #32]	; (8001954 <read_multi_byte+0xbc>)
 8001932:	f7ff fe56 	bl	80015e2 <LL_I2C_DisableIT_RX>
	LL_I2C_ClearFlag_STOP(I2C1);
 8001936:	4807      	ldr	r0, [pc, #28]	; (8001954 <read_multi_byte+0xbc>)
 8001938:	f7ff feac 	bl	8001694 <LL_I2C_ClearFlag_STOP>
	LL_I2C_ClearFlag_NACK(I2C1);
 800193c:	4805      	ldr	r0, [pc, #20]	; (8001954 <read_multi_byte+0xbc>)
 800193e:	f7ff fe99 	bl	8001674 <LL_I2C_ClearFlag_NACK>
	ubReceiveIndex = 0;
 8001942:	4b07      	ldr	r3, [pc, #28]	; (8001960 <read_multi_byte+0xc8>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]


}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	2000029c 	.word	0x2000029c
 8001954:	40005400 	.word	0x40005400
 8001958:	80002000 	.word	0x80002000
 800195c:	80002400 	.word	0x80002400
 8001960:	200002a0 	.word	0x200002a0

08001964 <write_multi_byte>:
void write_multi_byte(uint8_t *data, uint8_t len, uint8_t slave_address, uint8_t register_address)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af02      	add	r7, sp, #8
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	4608      	mov	r0, r1
 800196e:	4611      	mov	r1, r2
 8001970:	461a      	mov	r2, r3
 8001972:	4603      	mov	r3, r0
 8001974:	70fb      	strb	r3, [r7, #3]
 8001976:	460b      	mov	r3, r1
 8001978:	70bb      	strb	r3, [r7, #2]
 800197a:	4613      	mov	r3, r2
 800197c:	707b      	strb	r3, [r7, #1]
	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 800197e:	78b9      	ldrb	r1, [r7, #2]
 8001980:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <write_multi_byte+0x88>)
 8001982:	9301      	str	r3, [sp, #4]
 8001984:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	2302      	movs	r3, #2
 800198c:	2200      	movs	r2, #0
 800198e:	4818      	ldr	r0, [pc, #96]	; (80019f0 <write_multi_byte+0x8c>)
 8001990:	f7ff fea0 	bl	80016d4 <LL_I2C_HandleTransfer>

		LL_I2C_TransmitData8(I2C1, register_address);
 8001994:	787b      	ldrb	r3, [r7, #1]
 8001996:	4619      	mov	r1, r3
 8001998:	4815      	ldr	r0, [pc, #84]	; (80019f0 <write_multi_byte+0x8c>)
 800199a:	f7ff fece 	bl	800173a <LL_I2C_TransmitData8>

		while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800199e:	e017      	b.n	80019d0 <write_multi_byte+0x6c>
		{
			for (size_t i = 0; i < len;i++) {
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	e010      	b.n	80019c8 <write_multi_byte+0x64>
				if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 80019a6:	4812      	ldr	r0, [pc, #72]	; (80019f0 <write_multi_byte+0x8c>)
 80019a8:	f7ff fe2b 	bl	8001602 <LL_I2C_IsActiveFlag_TXIS>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d007      	beq.n	80019c2 <write_multi_byte+0x5e>
				{
					LL_I2C_TransmitData8(I2C1, data[i]);
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4413      	add	r3, r2
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	4619      	mov	r1, r3
 80019bc:	480c      	ldr	r0, [pc, #48]	; (80019f0 <write_multi_byte+0x8c>)
 80019be:	f7ff febc 	bl	800173a <LL_I2C_TransmitData8>
			for (size_t i = 0; i < len;i++) {
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3301      	adds	r3, #1
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d3ea      	bcc.n	80019a6 <write_multi_byte+0x42>
		while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80019d0:	4807      	ldr	r0, [pc, #28]	; (80019f0 <write_multi_byte+0x8c>)
 80019d2:	f7ff fe3c 	bl	800164e <LL_I2C_IsActiveFlag_STOP>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0e1      	beq.n	80019a0 <write_multi_byte+0x3c>
				}
			}
		}
		LL_I2C_ClearFlag_STOP(I2C1);
 80019dc:	4804      	ldr	r0, [pc, #16]	; (80019f0 <write_multi_byte+0x8c>)
 80019de:	f7ff fe59 	bl	8001694 <LL_I2C_ClearFlag_STOP>
}
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	80002000 	.word	0x80002000
 80019f0:	40005400 	.word	0x40005400

080019f4 <I2C_IRQHandler>:

void I2C_IRQHandler(void)
{
 80019f4:	b598      	push	{r3, r4, r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 80019f8:	4810      	ldr	r0, [pc, #64]	; (8001a3c <I2C_IRQHandler+0x48>)
 80019fa:	f7ff fe15 	bl	8001628 <LL_I2C_IsActiveFlag_RXNE>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d019      	beq.n	8001a38 <I2C_IRQHandler+0x44>
	{
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <I2C_IRQHandler+0x4c>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <I2C_IRQHandler+0x50>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	1c59      	adds	r1, r3, #1
 8001a10:	b2c8      	uxtb	r0, r1
 8001a12:	490c      	ldr	r1, [pc, #48]	; (8001a44 <I2C_IRQHandler+0x50>)
 8001a14:	7008      	strb	r0, [r1, #0]
 8001a16:	18d4      	adds	r4, r2, r3
 8001a18:	4808      	ldr	r0, [pc, #32]	; (8001a3c <I2C_IRQHandler+0x48>)
 8001a1a:	f7ff fe81 	bl	8001720 <LL_I2C_ReceiveData8>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex>19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <I2C_IRQHandler+0x50>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b13      	cmp	r3, #19
 8001a2a:	d903      	bls.n	8001a34 <I2C_IRQHandler+0x40>
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <I2C_IRQHandler+0x50>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
	}
}
 8001a32:	e001      	b.n	8001a38 <I2C_IRQHandler+0x44>
		(ubReceiveIndex>19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001a34:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <I2C_IRQHandler+0x50>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	bd98      	pop	{r3, r4, r7, pc}
 8001a3c:	40005400 	.word	0x40005400
 8001a40:	2000029c 	.word	0x2000029c
 8001a44:	200002a0 	.word	0x200002a0

08001a48 <__NVIC_SetPriorityGrouping>:
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <__NVIC_SetPriorityGrouping+0x44>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a64:	4013      	ands	r3, r2
 8001a66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7a:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <__NVIC_SetPriorityGrouping+0x44>)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	60d3      	str	r3, [r2, #12]
}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <LL_RCC_HSI_Enable+0x1c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a04      	ldr	r2, [pc, #16]	; (8001aac <LL_RCC_HSI_Enable+0x1c>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6013      	str	r3, [r2, #0]
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000

08001ab0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <LL_RCC_HSI_IsReady+0x20>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	bf0c      	ite	eq
 8001ac0:	2301      	moveq	r3, #1
 8001ac2:	2300      	movne	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	40021000 	.word	0x40021000

08001ad4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001adc:	4b07      	ldr	r3, [pc, #28]	; (8001afc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4904      	ldr	r1, [pc, #16]	; (8001afc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000

08001b00 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <LL_RCC_SetSysClkSource+0x24>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f023 0203 	bic.w	r2, r3, #3
 8001b10:	4904      	ldr	r1, [pc, #16]	; (8001b24 <LL_RCC_SetSysClkSource+0x24>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	604b      	str	r3, [r1, #4]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	40021000 	.word	0x40021000

08001b28 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b2c:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <LL_RCC_GetSysClkSource+0x18>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 030c 	and.w	r3, r3, #12
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000

08001b44 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <LL_RCC_SetAHBPrescaler+0x24>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b54:	4904      	ldr	r1, [pc, #16]	; (8001b68 <LL_RCC_SetAHBPrescaler+0x24>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	40021000 	.word	0x40021000

08001b6c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b7c:	4904      	ldr	r1, [pc, #16]	; (8001b90 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	604b      	str	r3, [r1, #4]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	40021000 	.word	0x40021000

08001b94 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ba4:	4904      	ldr	r1, [pc, #16]	; (8001bb8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	40021000 	.word	0x40021000

08001bbc <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <LL_RCC_SetI2CClockSource+0x2c>)
 8001bc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	0e1b      	lsrs	r3, r3, #24
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	401a      	ands	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001bd6:	4904      	ldr	r1, [pc, #16]	; (8001be8 <LL_RCC_SetI2CClockSource+0x2c>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	40021000 	.word	0x40021000

08001bec <LL_APB1_GRP1_EnableClock>:
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001bf6:	69da      	ldr	r2, [r3, #28]
 8001bf8:	4907      	ldr	r1, [pc, #28]	; (8001c18 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c02:	69da      	ldr	r2, [r3, #28]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4013      	ands	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	40021000 	.word	0x40021000

08001c1c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c26:	699a      	ldr	r2, [r3, #24]
 8001c28:	4907      	ldr	r1, [pc, #28]	; (8001c48 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c30:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c32:	699a      	ldr	r2, [r3, #24]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4013      	ands	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	40021000 	.word	0x40021000

08001c4c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <LL_FLASH_SetLatency+0x24>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f023 0207 	bic.w	r2, r3, #7
 8001c5c:	4904      	ldr	r1, [pc, #16]	; (8001c70 <LL_FLASH_SetLatency+0x24>)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	600b      	str	r3, [r1, #0]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	40022000 	.word	0x40022000

08001c74 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <LL_FLASH_GetLatency+0x18>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0307 	and.w	r3, r3, #7
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40022000 	.word	0x40022000

08001c90 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d106      	bne.n	8001cac <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <LL_SYSTICK_SetClkSource+0x34>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a08      	ldr	r2, [pc, #32]	; (8001cc4 <LL_SYSTICK_SetClkSource+0x34>)
 8001ca4:	f043 0304 	orr.w	r3, r3, #4
 8001ca8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8001caa:	e005      	b.n	8001cb8 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <LL_SYSTICK_SetClkSource+0x34>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <LL_SYSTICK_SetClkSource+0x34>)
 8001cb2:	f023 0304 	bic.w	r3, r3, #4
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	e000e010 	.word	0xe000e010

08001cc8 <main>:
char statusMessage[128];
float temp,humid,pressure,altitude;


int main(void)
{
 8001cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ccc:	b088      	sub	sp, #32
 8001cce:	af06      	add	r7, sp, #24
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f7ff ffa3 	bl	8001c1c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001cd6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001cda:	f7ff ff87 	bl	8001bec <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cde:	2003      	movs	r0, #3
 8001ce0:	f7ff feb2 	bl	8001a48 <__NVIC_SetPriorityGrouping>

  SystemClock_Config();
 8001ce4:	f000 f8a2 	bl	8001e2c <SystemClock_Config>

  MX_GPIO_Init();
 8001ce8:	f7ff fb54 	bl	8001394 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001cec:	f7ff fd64 	bl	80017b8 <MX_I2C1_Init>
  MX_DMA_Init();
 8001cf0:	f7ff fad6 	bl	80012a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001cf4:	f000 ff38 	bl	8002b68 <MX_USART2_UART_Init>

  USART2_RegisterCallback(proccesDmaData);
 8001cf8:	4841      	ldr	r0, [pc, #260]	; (8001e00 <main+0x138>)
 8001cfa:	f000 ff23 	bl	8002b44 <USART2_RegisterCallback>
  USART2_PutBuffer("start", strlen("start"));
 8001cfe:	2105      	movs	r1, #5
 8001d00:	4840      	ldr	r0, [pc, #256]	; (8001e04 <main+0x13c>)
 8001d02:	f001 f813 	bl	8002d2c <USART2_PutBuffer>
  uint8_t hts_good = hts221_init();
 8001d06:	f7fe ffcb 	bl	8000ca0 <hts221_init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
  uint8_t lp_good = lps25hb_init();
 8001d0e:	f7ff f9c3 	bl	8001098 <lps25hb_init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	71bb      	strb	r3, [r7, #6]

  uint8_t *buffer;
  uint8_t len = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	717b      	strb	r3, [r7, #5]

  if(hts_good)
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d004      	beq.n	8001d2a <main+0x62>
  {
	  USART2_PutBuffer("HTS good", strlen("HTS good"));
 8001d20:	2108      	movs	r1, #8
 8001d22:	4839      	ldr	r0, [pc, #228]	; (8001e08 <main+0x140>)
 8001d24:	f001 f802 	bl	8002d2c <USART2_PutBuffer>
 8001d28:	e003      	b.n	8001d32 <main+0x6a>
  }
  else
  {
	  USART2_PutBuffer("HTS bad", strlen("HTS bad"));
 8001d2a:	2107      	movs	r1, #7
 8001d2c:	4837      	ldr	r0, [pc, #220]	; (8001e0c <main+0x144>)
 8001d2e:	f000 fffd 	bl	8002d2c <USART2_PutBuffer>
  }

  LL_mDelay(100);
 8001d32:	2064      	movs	r0, #100	; 0x64
 8001d34:	f001 fda4 	bl	8003880 <LL_mDelay>

  if(lp_good)
 8001d38:	79bb      	ldrb	r3, [r7, #6]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d004      	beq.n	8001d48 <main+0x80>
  {
	  USART2_PutBuffer("LP good", strlen("LP good"));
 8001d3e:	2107      	movs	r1, #7
 8001d40:	4833      	ldr	r0, [pc, #204]	; (8001e10 <main+0x148>)
 8001d42:	f000 fff3 	bl	8002d2c <USART2_PutBuffer>
 8001d46:	e003      	b.n	8001d50 <main+0x88>

  }
  else
  {
	  USART2_PutBuffer("LP bad", strlen("LP bad"));
 8001d48:	2106      	movs	r1, #6
 8001d4a:	4832      	ldr	r0, [pc, #200]	; (8001e14 <main+0x14c>)
 8001d4c:	f000 ffee 	bl	8002d2c <USART2_PutBuffer>
//	  {
//		  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_3);
//	  }


	  temp = hts221_get_temperature();
 8001d50:	f7ff f8cc 	bl	8000eec <hts221_get_temperature>
 8001d54:	eef0 7a40 	vmov.f32	s15, s0
 8001d58:	4b2f      	ldr	r3, [pc, #188]	; (8001e18 <main+0x150>)
 8001d5a:	edc3 7a00 	vstr	s15, [r3]
	  humid = hts221_get_humidity();
 8001d5e:	f7ff f903 	bl	8000f68 <hts221_get_humidity>
 8001d62:	eef0 7a40 	vmov.f32	s15, s0
 8001d66:	4b2d      	ldr	r3, [pc, #180]	; (8001e1c <main+0x154>)
 8001d68:	edc3 7a00 	vstr	s15, [r3]
	  pressure = lps25hb_read_pressure();
 8001d6c:	f7ff f9be 	bl	80010ec <lps25hb_read_pressure>
 8001d70:	eef0 7a40 	vmov.f32	s15, s0
 8001d74:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <main+0x158>)
 8001d76:	edc3 7a00 	vstr	s15, [r3]
	  altitude = lps25hb_read_altitude();
 8001d7a:	f7ff f9e5 	bl	8001148 <lps25hb_read_altitude>
 8001d7e:	eef0 7a40 	vmov.f32	s15, s0
 8001d82:	4b28      	ldr	r3, [pc, #160]	; (8001e24 <main+0x15c>)
 8001d84:	edc3 7a00 	vstr	s15, [r3]


	  buffer = malloc(32*sizeof(uint8_t));
 8001d88:	2020      	movs	r0, #32
 8001d8a:	f001 fdaf 	bl	80038ec <malloc>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	603b      	str	r3, [r7, #0]
	  len = sprintf(buffer, "%05.1f,%02.0f,%07.2f,%06.2f\n", temp, humid, pressure, altitude);
 8001d92:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <main+0x150>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fbd6 	bl	8000548 <__aeabi_f2d>
 8001d9c:	4682      	mov	sl, r0
 8001d9e:	468b      	mov	fp, r1
 8001da0:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <main+0x154>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fbcf 	bl	8000548 <__aeabi_f2d>
 8001daa:	4604      	mov	r4, r0
 8001dac:	460d      	mov	r5, r1
 8001dae:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <main+0x158>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fbc8 	bl	8000548 <__aeabi_f2d>
 8001db8:	4680      	mov	r8, r0
 8001dba:	4689      	mov	r9, r1
 8001dbc:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <main+0x15c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fbc1 	bl	8000548 <__aeabi_f2d>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001dce:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001dd2:	e9cd 4500 	strd	r4, r5, [sp]
 8001dd6:	4652      	mov	r2, sl
 8001dd8:	465b      	mov	r3, fp
 8001dda:	4913      	ldr	r1, [pc, #76]	; (8001e28 <main+0x160>)
 8001ddc:	6838      	ldr	r0, [r7, #0]
 8001dde:	f002 fb69 	bl	80044b4 <siprintf>
 8001de2:	4603      	mov	r3, r0
 8001de4:	717b      	strb	r3, [r7, #5]
	  USART2_PutBuffer(buffer,len);
 8001de6:	797b      	ldrb	r3, [r7, #5]
 8001de8:	4619      	mov	r1, r3
 8001dea:	6838      	ldr	r0, [r7, #0]
 8001dec:	f000 ff9e 	bl	8002d2c <USART2_PutBuffer>
	  free(buffer);
 8001df0:	6838      	ldr	r0, [r7, #0]
 8001df2:	f001 fd83 	bl	80038fc <free>

	  LL_mDelay(10);
 8001df6:	200a      	movs	r0, #10
 8001df8:	f001 fd42 	bl	8003880 <LL_mDelay>
  {
 8001dfc:	e7a8      	b.n	8001d50 <main+0x88>
 8001dfe:	bf00      	nop
 8001e00:	08001ea1 	.word	0x08001ea1
 8001e04:	08007490 	.word	0x08007490
 8001e08:	08007498 	.word	0x08007498
 8001e0c:	080074a4 	.word	0x080074a4
 8001e10:	080074ac 	.word	0x080074ac
 8001e14:	080074b4 	.word	0x080074b4
 8001e18:	200002d8 	.word	0x200002d8
 8001e1c:	200002dc 	.word	0x200002dc
 8001e20:	200002e0 	.word	0x200002e0
 8001e24:	200002e4 	.word	0x200002e4
 8001e28:	080074bc 	.word	0x080074bc

08001e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001e30:	2000      	movs	r0, #0
 8001e32:	f7ff ff0b 	bl	8001c4c <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8001e36:	f7ff ff1d 	bl	8001c74 <LL_FLASH_GetLatency>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <SystemClock_Config+0x18>
  {
  Error_Handler();
 8001e40:	f000 f8cc 	bl	8001fdc <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8001e44:	f7ff fe24 	bl	8001a90 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001e48:	bf00      	nop
 8001e4a:	f7ff fe31 	bl	8001ab0 <LL_RCC_HSI_IsReady>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d1fa      	bne.n	8001e4a <SystemClock_Config+0x1e>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001e54:	2010      	movs	r0, #16
 8001e56:	f7ff fe3d 	bl	8001ad4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f7ff fe72 	bl	8001b44 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001e60:	2000      	movs	r0, #0
 8001e62:	f7ff fe83 	bl	8001b6c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001e66:	2000      	movs	r0, #0
 8001e68:	f7ff fe94 	bl	8001b94 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f7ff fe47 	bl	8001b00 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001e72:	bf00      	nop
 8001e74:	f7ff fe58 	bl	8001b28 <LL_RCC_GetSysClkSource>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1fa      	bne.n	8001e74 <SystemClock_Config+0x48>
  {

  }
  LL_Init1msTick(8000000);
 8001e7e:	4807      	ldr	r0, [pc, #28]	; (8001e9c <SystemClock_Config+0x70>)
 8001e80:	f001 fcf0 	bl	8003864 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8001e84:	2004      	movs	r0, #4
 8001e86:	f7ff ff03 	bl	8001c90 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8001e8a:	4804      	ldr	r0, [pc, #16]	; (8001e9c <SystemClock_Config+0x70>)
 8001e8c:	f001 fd1e 	bl	80038cc <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001e90:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001e94:	f7ff fe92 	bl	8001bbc <LL_RCC_SetI2CClockSource>
}
 8001e98:	bf00      	nop
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	007a1200 	.word	0x007a1200

08001ea0 <proccesDmaData>:

void proccesDmaData(uint8_t sign)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
	if(transimissionEnabled)
 8001eaa:	4b45      	ldr	r3, [pc, #276]	; (8001fc0 <proccesDmaData+0x120>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d064      	beq.n	8001f7c <proccesDmaData+0xdc>
		{
			if(sign >= 'a' && sign <= 'z')
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	2b60      	cmp	r3, #96	; 0x60
 8001eb6:	d916      	bls.n	8001ee6 <proccesDmaData+0x46>
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	2b7a      	cmp	r3, #122	; 0x7a
 8001ebc:	d813      	bhi.n	8001ee6 <proccesDmaData+0x46>
			{
				thisLetterCount.small_letter++;
 8001ebe:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <proccesDmaData+0x124>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4b3f      	ldr	r3, [pc, #252]	; (8001fc4 <proccesDmaData+0x124>)
 8001ec8:	701a      	strb	r2, [r3, #0]
				processedSignsCount++;
 8001eca:	4b3f      	ldr	r3, [pc, #252]	; (8001fc8 <proccesDmaData+0x128>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	4a3d      	ldr	r2, [pc, #244]	; (8001fc8 <proccesDmaData+0x128>)
 8001ed2:	6013      	str	r3, [r2, #0]
				messageBuffer[messageBufferIndex++] = sign;
 8001ed4:	4b3d      	ldr	r3, [pc, #244]	; (8001fcc <proccesDmaData+0x12c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	493c      	ldr	r1, [pc, #240]	; (8001fcc <proccesDmaData+0x12c>)
 8001edc:	600a      	str	r2, [r1, #0]
 8001ede:	493c      	ldr	r1, [pc, #240]	; (8001fd0 <proccesDmaData+0x130>)
 8001ee0:	79fa      	ldrb	r2, [r7, #7]
 8001ee2:	54ca      	strb	r2, [r1, r3]
 8001ee4:	e04a      	b.n	8001f7c <proccesDmaData+0xdc>
			}
			else if(sign >= 'A' && sign <= 'Z')
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	2b40      	cmp	r3, #64	; 0x40
 8001eea:	d916      	bls.n	8001f1a <proccesDmaData+0x7a>
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	2b5a      	cmp	r3, #90	; 0x5a
 8001ef0:	d813      	bhi.n	8001f1a <proccesDmaData+0x7a>
			{
				thisLetterCount.capital_letter++;
 8001ef2:	4b34      	ldr	r3, [pc, #208]	; (8001fc4 <proccesDmaData+0x124>)
 8001ef4:	785b      	ldrb	r3, [r3, #1]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4b32      	ldr	r3, [pc, #200]	; (8001fc4 <proccesDmaData+0x124>)
 8001efc:	705a      	strb	r2, [r3, #1]
				processedSignsCount++;
 8001efe:	4b32      	ldr	r3, [pc, #200]	; (8001fc8 <proccesDmaData+0x128>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	3301      	adds	r3, #1
 8001f04:	4a30      	ldr	r2, [pc, #192]	; (8001fc8 <proccesDmaData+0x128>)
 8001f06:	6013      	str	r3, [r2, #0]
				messageBuffer[messageBufferIndex++] = sign;
 8001f08:	4b30      	ldr	r3, [pc, #192]	; (8001fcc <proccesDmaData+0x12c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	1c5a      	adds	r2, r3, #1
 8001f0e:	492f      	ldr	r1, [pc, #188]	; (8001fcc <proccesDmaData+0x12c>)
 8001f10:	600a      	str	r2, [r1, #0]
 8001f12:	492f      	ldr	r1, [pc, #188]	; (8001fd0 <proccesDmaData+0x130>)
 8001f14:	79fa      	ldrb	r2, [r7, #7]
 8001f16:	54ca      	strb	r2, [r1, r3]
 8001f18:	e030      	b.n	8001f7c <proccesDmaData+0xdc>
			}
			else if(sign == END_SIGN)
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	2b24      	cmp	r3, #36	; 0x24
 8001f1e:	d120      	bne.n	8001f62 <proccesDmaData+0xc2>
			{
				transimissionEnabled = 0;
 8001f20:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <proccesDmaData+0x120>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
				processedSignsCount = 0;
 8001f26:	4b28      	ldr	r3, [pc, #160]	; (8001fc8 <proccesDmaData+0x128>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
				sprintf(messageToBeSent,"Valid string: %s, lower-case: %d, upper-case: %d \r\n",messageBuffer,thisLetterCount.small_letter,thisLetterCount.capital_letter);
 8001f2c:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <proccesDmaData+0x124>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <proccesDmaData+0x124>)
 8001f34:	785b      	ldrb	r3, [r3, #1]
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	4a25      	ldr	r2, [pc, #148]	; (8001fd0 <proccesDmaData+0x130>)
 8001f3c:	4925      	ldr	r1, [pc, #148]	; (8001fd4 <proccesDmaData+0x134>)
 8001f3e:	4826      	ldr	r0, [pc, #152]	; (8001fd8 <proccesDmaData+0x138>)
 8001f40:	f002 fab8 	bl	80044b4 <siprintf>
				thisLetterCount.small_letter = 0;
 8001f44:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <proccesDmaData+0x124>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
				thisLetterCount.capital_letter = 0;
 8001f4a:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <proccesDmaData+0x124>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	705a      	strb	r2, [r3, #1]
				memset(messageBuffer, 0, MAX_MSG_LEN);
 8001f50:	2223      	movs	r2, #35	; 0x23
 8001f52:	2100      	movs	r1, #0
 8001f54:	481e      	ldr	r0, [pc, #120]	; (8001fd0 <proccesDmaData+0x130>)
 8001f56:	f002 fb10 	bl	800457a <memset>
				messageBufferIndex = 0;
 8001f5a:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <proccesDmaData+0x12c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	e00c      	b.n	8001f7c <proccesDmaData+0xdc>
			}
			else
			{
				processedSignsCount++;
 8001f62:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <proccesDmaData+0x128>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	3301      	adds	r3, #1
 8001f68:	4a17      	ldr	r2, [pc, #92]	; (8001fc8 <proccesDmaData+0x128>)
 8001f6a:	6013      	str	r3, [r2, #0]
				messageBuffer[messageBufferIndex++] = sign;
 8001f6c:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <proccesDmaData+0x12c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	4916      	ldr	r1, [pc, #88]	; (8001fcc <proccesDmaData+0x12c>)
 8001f74:	600a      	str	r2, [r1, #0]
 8001f76:	4916      	ldr	r1, [pc, #88]	; (8001fd0 <proccesDmaData+0x130>)
 8001f78:	79fa      	ldrb	r2, [r7, #7]
 8001f7a:	54ca      	strb	r2, [r1, r3]
			}
		}
		if(processedSignsCount > MAX_MSG_LEN)
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <proccesDmaData+0x128>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b23      	cmp	r3, #35	; 0x23
 8001f82:	dd13      	ble.n	8001fac <proccesDmaData+0x10c>
		{
			transimissionEnabled = 0;
 8001f84:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <proccesDmaData+0x120>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]
			processedSignsCount = 0;
 8001f8a:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <proccesDmaData+0x128>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
			thisLetterCount.small_letter = 0;
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <proccesDmaData+0x124>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
			thisLetterCount.capital_letter = 0;
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <proccesDmaData+0x124>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	705a      	strb	r2, [r3, #1]
			memset(messageBuffer, 0, MAX_MSG_LEN);
 8001f9c:	2223      	movs	r2, #35	; 0x23
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	480b      	ldr	r0, [pc, #44]	; (8001fd0 <proccesDmaData+0x130>)
 8001fa2:	f002 faea 	bl	800457a <memset>
			messageBufferIndex = 0;
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <proccesDmaData+0x12c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
		}
		if(sign == START_SIGN)
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	2b23      	cmp	r3, #35	; 0x23
 8001fb0:	d102      	bne.n	8001fb8 <proccesDmaData+0x118>
		{
			transimissionEnabled = 1;
 8001fb2:	4b03      	ldr	r3, [pc, #12]	; (8001fc0 <proccesDmaData+0x120>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	701a      	strb	r2, [r3, #0]
		}
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	200002a8 	.word	0x200002a8
 8001fc4:	200002d4 	.word	0x200002d4
 8001fc8:	200002a4 	.word	0x200002a4
 8001fcc:	200002d0 	.word	0x200002d0
 8001fd0:	200002ac 	.word	0x200002ac
 8001fd4:	080074dc 	.word	0x080074dc
 8001fd8:	20000004 	.word	0x20000004

08001fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	4a0b      	ldr	r2, [pc, #44]	; (8002028 <LL_DMA_DisableChannel+0x3c>)
 8001ffc:	5cd3      	ldrb	r3, [r2, r3]
 8001ffe:	461a      	mov	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4413      	add	r3, r2
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	3a01      	subs	r2, #1
 800200a:	4907      	ldr	r1, [pc, #28]	; (8002028 <LL_DMA_DisableChannel+0x3c>)
 800200c:	5c8a      	ldrb	r2, [r1, r2]
 800200e:	4611      	mov	r1, r2
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	440a      	add	r2, r1
 8002014:	f023 0301 	bic.w	r3, r3, #1
 8002018:	6013      	str	r3, [r2, #0]
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	08007510 	.word	0x08007510

0800202c <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800203c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002040:	bf0c      	ite	eq
 8002042:	2301      	moveq	r3, #1
 8002044:	2300      	movne	r3, #0
 8002046:	b2db      	uxtb	r3, r3
}
 8002048:	4618      	mov	r0, r3
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002064:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002068:	bf0c      	ite	eq
 800206a:	2301      	moveq	r3, #1
 800206c:	2300      	movne	r3, #0
 800206e:	b2db      	uxtb	r3, r3
}
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800208c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002090:	bf0c      	ite	eq
 8002092:	2301      	moveq	r3, #1
 8002094:	2300      	movne	r3, #0
 8002096:	b2db      	uxtb	r3, r3
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80020b2:	605a      	str	r2, [r3, #4]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ce:	605a      	str	r2, [r3, #4]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80020ea:	605a      	str	r2, [r3, #4]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	f003 0310 	and.w	r3, r3, #16
 8002108:	2b10      	cmp	r3, #16
 800210a:	d101      	bne.n	8002110 <LL_USART_IsActiveFlag_IDLE+0x18>
 800210c:	2301      	movs	r3, #1
 800210e:	e000      	b.n	8002112 <LL_USART_IsActiveFlag_IDLE+0x1a>
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212e:	2b40      	cmp	r3, #64	; 0x40
 8002130:	d101      	bne.n	8002136 <LL_USART_IsActiveFlag_TC+0x18>
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <LL_USART_IsActiveFlag_TC+0x1a>
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2210      	movs	r2, #16
 8002150:	621a      	str	r2, [r3, #32]
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002170:	e7fe      	b.n	8002170 <HardFault_Handler+0x4>

08002172 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002176:	e7fe      	b.n	8002176 <MemManage_Handler+0x4>

08002178 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800217c:	e7fe      	b.n	800217c <BusFault_Handler+0x4>

0800217e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002182:	e7fe      	b.n	8002182 <UsageFault_Handler+0x4>

08002184 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
	I2C_IRQHandler();
 80021c0:	f7ff fc18 	bl	80019f4 <I2C_IRQHandler>
}
 80021c4:	bf00      	nop
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 80021cc:	480c      	ldr	r0, [pc, #48]	; (8002200 <DMA1_Channel6_IRQHandler+0x38>)
 80021ce:	f7ff ff2d 	bl	800202c <LL_DMA_IsActiveFlag_TC6>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d105      	bne.n	80021e4 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 80021d8:	f000 fdc8 	bl	8002d6c <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 80021dc:	4808      	ldr	r0, [pc, #32]	; (8002200 <DMA1_Channel6_IRQHandler+0x38>)
 80021de:	f7ff ff61 	bl	80020a4 <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 80021e2:	e00a      	b.n	80021fa <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 80021e4:	4806      	ldr	r0, [pc, #24]	; (8002200 <DMA1_Channel6_IRQHandler+0x38>)
 80021e6:	f7ff ff49 	bl	800207c <LL_DMA_IsActiveFlag_HT6>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d104      	bne.n	80021fa <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 80021f0:	f000 fdbc 	bl	8002d6c <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 80021f4:	4802      	ldr	r0, [pc, #8]	; (8002200 <DMA1_Channel6_IRQHandler+0x38>)
 80021f6:	f7ff ff71 	bl	80020dc <LL_DMA_ClearFlag_HT6>
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40020000 	.word	0x40020000

08002204 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8002208:	480a      	ldr	r0, [pc, #40]	; (8002234 <DMA1_Channel7_IRQHandler+0x30>)
 800220a:	f7ff ff23 	bl	8002054 <LL_DMA_IsActiveFlag_TC7>
 800220e:	4603      	mov	r3, r0
 8002210:	2b01      	cmp	r3, #1
 8002212:	d10d      	bne.n	8002230 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8002214:	4807      	ldr	r0, [pc, #28]	; (8002234 <DMA1_Channel7_IRQHandler+0x30>)
 8002216:	f7ff ff53 	bl	80020c0 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 800221a:	bf00      	nop
 800221c:	4806      	ldr	r0, [pc, #24]	; (8002238 <DMA1_Channel7_IRQHandler+0x34>)
 800221e:	f7ff ff7e 	bl	800211e <LL_USART_IsActiveFlag_TC>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f9      	beq.n	800221c <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8002228:	2107      	movs	r1, #7
 800222a:	4802      	ldr	r0, [pc, #8]	; (8002234 <DMA1_Channel7_IRQHandler+0x30>)
 800222c:	f7ff fede 	bl	8001fec <LL_DMA_DisableChannel>
	}
}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40020000 	.word	0x40020000
 8002238:	40004400 	.word	0x40004400

0800223c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8002240:	4806      	ldr	r0, [pc, #24]	; (800225c <USART2_IRQHandler+0x20>)
 8002242:	f7ff ff59 	bl	80020f8 <LL_USART_IsActiveFlag_IDLE>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d004      	beq.n	8002256 <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 800224c:	f000 fd8e 	bl	8002d6c <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8002250:	4802      	ldr	r0, [pc, #8]	; (800225c <USART2_IRQHandler+0x20>)
 8002252:	f7ff ff77 	bl	8002144 <LL_USART_ClearFlag_IDLE>
	}
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40004400 	.word	0x40004400

08002260 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return 1;
 8002264:	2301      	movs	r3, #1
}
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <_kill>:

int _kill(int pid, int sig)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800227a:	f002 f9e1 	bl	8004640 <__errno>
 800227e:	4603      	mov	r3, r0
 8002280:	2216      	movs	r2, #22
 8002282:	601a      	str	r2, [r3, #0]
  return -1;
 8002284:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <_exit>:

void _exit (int status)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002298:	f04f 31ff 	mov.w	r1, #4294967295
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff ffe7 	bl	8002270 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022a2:	e7fe      	b.n	80022a2 <_exit+0x12>

080022a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	e00a      	b.n	80022cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022b6:	f3af 8000 	nop.w
 80022ba:	4601      	mov	r1, r0
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	60ba      	str	r2, [r7, #8]
 80022c2:	b2ca      	uxtb	r2, r1
 80022c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	3301      	adds	r3, #1
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	dbf0      	blt.n	80022b6 <_read+0x12>
  }

  return len;
 80022d4:	687b      	ldr	r3, [r7, #4]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b086      	sub	sp, #24
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	e009      	b.n	8002304 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	60ba      	str	r2, [r7, #8]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	3301      	adds	r3, #1
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	429a      	cmp	r2, r3
 800230a:	dbf1      	blt.n	80022f0 <_write+0x12>
  }
  return len;
 800230c:	687b      	ldr	r3, [r7, #4]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <_close>:

int _close(int file)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800231e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800233e:	605a      	str	r2, [r3, #4]
  return 0;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <_isatty>:

int _isatty(int file)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002356:	2301      	movs	r3, #1
}
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002388:	4a14      	ldr	r2, [pc, #80]	; (80023dc <_sbrk+0x5c>)
 800238a:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <_sbrk+0x60>)
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002394:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <_sbrk+0x64>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d102      	bne.n	80023a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800239c:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <_sbrk+0x64>)
 800239e:	4a12      	ldr	r2, [pc, #72]	; (80023e8 <_sbrk+0x68>)
 80023a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023a2:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <_sbrk+0x64>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d207      	bcs.n	80023c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b0:	f002 f946 	bl	8004640 <__errno>
 80023b4:	4603      	mov	r3, r0
 80023b6:	220c      	movs	r2, #12
 80023b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ba:	f04f 33ff 	mov.w	r3, #4294967295
 80023be:	e009      	b.n	80023d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <_sbrk+0x64>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023c6:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <_sbrk+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <_sbrk+0x64>)
 80023d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023d2:	68fb      	ldr	r3, [r7, #12]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20003000 	.word	0x20003000
 80023e0:	00000400 	.word	0x00000400
 80023e4:	200002e8 	.word	0x200002e8
 80023e8:	200004c0 	.word	0x200004c0

080023ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <SystemInit+0x20>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f6:	4a05      	ldr	r2, [pc, #20]	; (800240c <SystemInit+0x20>)
 80023f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <__NVIC_EnableIRQ>:
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	2b00      	cmp	r3, #0
 8002420:	db0b      	blt.n	800243a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	f003 021f 	and.w	r2, r3, #31
 8002428:	4907      	ldr	r1, [pc, #28]	; (8002448 <__NVIC_EnableIRQ+0x38>)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	2001      	movs	r0, #1
 8002432:	fa00 f202 	lsl.w	r2, r0, r2
 8002436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000e100 	.word	0xe000e100

0800244c <__NVIC_SetPriority>:
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	6039      	str	r1, [r7, #0]
 8002456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	2b00      	cmp	r3, #0
 800245e:	db0a      	blt.n	8002476 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	b2da      	uxtb	r2, r3
 8002464:	490c      	ldr	r1, [pc, #48]	; (8002498 <__NVIC_SetPriority+0x4c>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	0112      	lsls	r2, r2, #4
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	440b      	add	r3, r1
 8002470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002474:	e00a      	b.n	800248c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	b2da      	uxtb	r2, r3
 800247a:	4908      	ldr	r1, [pc, #32]	; (800249c <__NVIC_SetPriority+0x50>)
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	3b04      	subs	r3, #4
 8002484:	0112      	lsls	r2, r2, #4
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	440b      	add	r3, r1
 800248a:	761a      	strb	r2, [r3, #24]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	e000e100 	.word	0xe000e100
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <LL_AHB1_GRP1_EnableClock>:
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80024a8:	4b08      	ldr	r3, [pc, #32]	; (80024cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80024aa:	695a      	ldr	r2, [r3, #20]
 80024ac:	4907      	ldr	r1, [pc, #28]	; (80024cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80024b6:	695a      	ldr	r2, [r3, #20]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4013      	ands	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024be:	68fb      	ldr	r3, [r7, #12]
}
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	40021000 	.word	0x40021000

080024d0 <LL_APB1_GRP1_EnableClock>:
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80024da:	69da      	ldr	r2, [r3, #28]
 80024dc:	4907      	ldr	r1, [pc, #28]	; (80024fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80024e6:	69da      	ldr	r2, [r3, #28]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4013      	ands	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024ee:	68fb      	ldr	r3, [r7, #12]
}
 80024f0:	bf00      	nop
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	40021000 	.word	0x40021000

08002500 <LL_DMA_EnableChannel>:
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	3b01      	subs	r3, #1
 800250e:	4a0b      	ldr	r2, [pc, #44]	; (800253c <LL_DMA_EnableChannel+0x3c>)
 8002510:	5cd3      	ldrb	r3, [r2, r3]
 8002512:	461a      	mov	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4413      	add	r3, r2
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	3a01      	subs	r2, #1
 800251e:	4907      	ldr	r1, [pc, #28]	; (800253c <LL_DMA_EnableChannel+0x3c>)
 8002520:	5c8a      	ldrb	r2, [r1, r2]
 8002522:	4611      	mov	r1, r2
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	440a      	add	r2, r1
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	6013      	str	r3, [r2, #0]
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	08007530 	.word	0x08007530

08002540 <LL_DMA_DisableChannel>:
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	3b01      	subs	r3, #1
 800254e:	4a0b      	ldr	r2, [pc, #44]	; (800257c <LL_DMA_DisableChannel+0x3c>)
 8002550:	5cd3      	ldrb	r3, [r2, r3]
 8002552:	461a      	mov	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4413      	add	r3, r2
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	3a01      	subs	r2, #1
 800255e:	4907      	ldr	r1, [pc, #28]	; (800257c <LL_DMA_DisableChannel+0x3c>)
 8002560:	5c8a      	ldrb	r2, [r1, r2]
 8002562:	4611      	mov	r1, r2
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	440a      	add	r2, r1
 8002568:	f023 0301 	bic.w	r3, r3, #1
 800256c:	6013      	str	r3, [r2, #0]
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	08007530 	.word	0x08007530

08002580 <LL_DMA_SetDataTransferDirection>:
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	3b01      	subs	r3, #1
 8002590:	4a0d      	ldr	r2, [pc, #52]	; (80025c8 <LL_DMA_SetDataTransferDirection+0x48>)
 8002592:	5cd3      	ldrb	r3, [r2, r3]
 8002594:	461a      	mov	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4413      	add	r3, r2
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025a0:	f023 0310 	bic.w	r3, r3, #16
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	3a01      	subs	r2, #1
 80025a8:	4907      	ldr	r1, [pc, #28]	; (80025c8 <LL_DMA_SetDataTransferDirection+0x48>)
 80025aa:	5c8a      	ldrb	r2, [r1, r2]
 80025ac:	4611      	mov	r1, r2
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	440a      	add	r2, r1
 80025b2:	4611      	mov	r1, r2
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]
}
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	08007530 	.word	0x08007530

080025cc <LL_DMA_GetDataTransferDirection>:
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	3b01      	subs	r3, #1
 80025da:	4a07      	ldr	r2, [pc, #28]	; (80025f8 <LL_DMA_GetDataTransferDirection+0x2c>)
 80025dc:	5cd3      	ldrb	r3, [r2, r3]
 80025de:	461a      	mov	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4413      	add	r3, r2
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	f244 0310 	movw	r3, #16400	; 0x4010
 80025ea:	4013      	ands	r3, r2
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	08007530 	.word	0x08007530

080025fc <LL_DMA_SetMode>:
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	3b01      	subs	r3, #1
 800260c:	4a0c      	ldr	r2, [pc, #48]	; (8002640 <LL_DMA_SetMode+0x44>)
 800260e:	5cd3      	ldrb	r3, [r2, r3]
 8002610:	461a      	mov	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4413      	add	r3, r2
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f023 0220 	bic.w	r2, r3, #32
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	3b01      	subs	r3, #1
 8002620:	4907      	ldr	r1, [pc, #28]	; (8002640 <LL_DMA_SetMode+0x44>)
 8002622:	5ccb      	ldrb	r3, [r1, r3]
 8002624:	4619      	mov	r1, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	440b      	add	r3, r1
 800262a:	4619      	mov	r1, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]
}
 8002632:	bf00      	nop
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	08007530 	.word	0x08007530

08002644 <LL_DMA_SetPeriphIncMode>:
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	3b01      	subs	r3, #1
 8002654:	4a0c      	ldr	r2, [pc, #48]	; (8002688 <LL_DMA_SetPeriphIncMode+0x44>)
 8002656:	5cd3      	ldrb	r3, [r2, r3]
 8002658:	461a      	mov	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4413      	add	r3, r2
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	3b01      	subs	r3, #1
 8002668:	4907      	ldr	r1, [pc, #28]	; (8002688 <LL_DMA_SetPeriphIncMode+0x44>)
 800266a:	5ccb      	ldrb	r3, [r1, r3]
 800266c:	4619      	mov	r1, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	440b      	add	r3, r1
 8002672:	4619      	mov	r1, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4313      	orrs	r3, r2
 8002678:	600b      	str	r3, [r1, #0]
}
 800267a:	bf00      	nop
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	08007530 	.word	0x08007530

0800268c <LL_DMA_SetMemoryIncMode>:
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	3b01      	subs	r3, #1
 800269c:	4a0c      	ldr	r2, [pc, #48]	; (80026d0 <LL_DMA_SetMemoryIncMode+0x44>)
 800269e:	5cd3      	ldrb	r3, [r2, r3]
 80026a0:	461a      	mov	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4413      	add	r3, r2
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	4907      	ldr	r1, [pc, #28]	; (80026d0 <LL_DMA_SetMemoryIncMode+0x44>)
 80026b2:	5ccb      	ldrb	r3, [r1, r3]
 80026b4:	4619      	mov	r1, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	440b      	add	r3, r1
 80026ba:	4619      	mov	r1, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]
}
 80026c2:	bf00      	nop
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	08007530 	.word	0x08007530

080026d4 <LL_DMA_SetPeriphSize>:
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	4a0c      	ldr	r2, [pc, #48]	; (8002718 <LL_DMA_SetPeriphSize+0x44>)
 80026e6:	5cd3      	ldrb	r3, [r2, r3]
 80026e8:	461a      	mov	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4413      	add	r3, r2
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	4907      	ldr	r1, [pc, #28]	; (8002718 <LL_DMA_SetPeriphSize+0x44>)
 80026fa:	5ccb      	ldrb	r3, [r1, r3]
 80026fc:	4619      	mov	r1, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	440b      	add	r3, r1
 8002702:	4619      	mov	r1, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]
}
 800270a:	bf00      	nop
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	08007530 	.word	0x08007530

0800271c <LL_DMA_SetMemorySize>:
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	3b01      	subs	r3, #1
 800272c:	4a0c      	ldr	r2, [pc, #48]	; (8002760 <LL_DMA_SetMemorySize+0x44>)
 800272e:	5cd3      	ldrb	r3, [r2, r3]
 8002730:	461a      	mov	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4413      	add	r3, r2
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	3b01      	subs	r3, #1
 8002740:	4907      	ldr	r1, [pc, #28]	; (8002760 <LL_DMA_SetMemorySize+0x44>)
 8002742:	5ccb      	ldrb	r3, [r1, r3]
 8002744:	4619      	mov	r1, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	440b      	add	r3, r1
 800274a:	4619      	mov	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4313      	orrs	r3, r2
 8002750:	600b      	str	r3, [r1, #0]
}
 8002752:	bf00      	nop
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	08007530 	.word	0x08007530

08002764 <LL_DMA_SetChannelPriorityLevel>:
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	3b01      	subs	r3, #1
 8002774:	4a0c      	ldr	r2, [pc, #48]	; (80027a8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002776:	5cd3      	ldrb	r3, [r2, r3]
 8002778:	461a      	mov	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4413      	add	r3, r2
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	3b01      	subs	r3, #1
 8002788:	4907      	ldr	r1, [pc, #28]	; (80027a8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800278a:	5ccb      	ldrb	r3, [r1, r3]
 800278c:	4619      	mov	r1, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	440b      	add	r3, r1
 8002792:	4619      	mov	r1, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]
}
 800279a:	bf00      	nop
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	08007530 	.word	0x08007530

080027ac <LL_DMA_SetDataLength>:
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	4a0c      	ldr	r2, [pc, #48]	; (80027f0 <LL_DMA_SetDataLength+0x44>)
 80027be:	5cd3      	ldrb	r3, [r2, r3]
 80027c0:	461a      	mov	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4413      	add	r3, r2
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	0c1b      	lsrs	r3, r3, #16
 80027ca:	041b      	lsls	r3, r3, #16
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	3a01      	subs	r2, #1
 80027d0:	4907      	ldr	r1, [pc, #28]	; (80027f0 <LL_DMA_SetDataLength+0x44>)
 80027d2:	5c8a      	ldrb	r2, [r1, r2]
 80027d4:	4611      	mov	r1, r2
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	440a      	add	r2, r1
 80027da:	4611      	mov	r1, r2
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	4313      	orrs	r3, r2
 80027e0:	604b      	str	r3, [r1, #4]
}
 80027e2:	bf00      	nop
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	08007530 	.word	0x08007530

080027f4 <LL_DMA_GetDataLength>:
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	3b01      	subs	r3, #1
 8002802:	4a06      	ldr	r2, [pc, #24]	; (800281c <LL_DMA_GetDataLength+0x28>)
 8002804:	5cd3      	ldrb	r3, [r2, r3]
 8002806:	461a      	mov	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4413      	add	r3, r2
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	b29b      	uxth	r3, r3
}
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	08007530 	.word	0x08007530

08002820 <LL_DMA_ConfigAddresses>:
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	2b10      	cmp	r3, #16
 8002832:	d114      	bne.n	800285e <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	3b01      	subs	r3, #1
 8002838:	4a16      	ldr	r2, [pc, #88]	; (8002894 <LL_DMA_ConfigAddresses+0x74>)
 800283a:	5cd3      	ldrb	r3, [r2, r3]
 800283c:	461a      	mov	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4413      	add	r3, r2
 8002842:	461a      	mov	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	3b01      	subs	r3, #1
 800284c:	4a11      	ldr	r2, [pc, #68]	; (8002894 <LL_DMA_ConfigAddresses+0x74>)
 800284e:	5cd3      	ldrb	r3, [r2, r3]
 8002850:	461a      	mov	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4413      	add	r3, r2
 8002856:	461a      	mov	r2, r3
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	6093      	str	r3, [r2, #8]
}
 800285c:	e013      	b.n	8002886 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	3b01      	subs	r3, #1
 8002862:	4a0c      	ldr	r2, [pc, #48]	; (8002894 <LL_DMA_ConfigAddresses+0x74>)
 8002864:	5cd3      	ldrb	r3, [r2, r3]
 8002866:	461a      	mov	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4413      	add	r3, r2
 800286c:	461a      	mov	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	3b01      	subs	r3, #1
 8002876:	4a07      	ldr	r2, [pc, #28]	; (8002894 <LL_DMA_ConfigAddresses+0x74>)
 8002878:	5cd3      	ldrb	r3, [r2, r3]
 800287a:	461a      	mov	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	461a      	mov	r2, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	60d3      	str	r3, [r2, #12]
}
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	08007530 	.word	0x08007530

08002898 <LL_DMA_SetMemoryAddress>:
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	4a06      	ldr	r2, [pc, #24]	; (80028c4 <LL_DMA_SetMemoryAddress+0x2c>)
 80028aa:	5cd3      	ldrb	r3, [r2, r3]
 80028ac:	461a      	mov	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4413      	add	r3, r2
 80028b2:	461a      	mov	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	60d3      	str	r3, [r2, #12]
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	08007530 	.word	0x08007530

080028c8 <LL_DMA_SetPeriphAddress>:
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	4a06      	ldr	r2, [pc, #24]	; (80028f4 <LL_DMA_SetPeriphAddress+0x2c>)
 80028da:	5cd3      	ldrb	r3, [r2, r3]
 80028dc:	461a      	mov	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4413      	add	r3, r2
 80028e2:	461a      	mov	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6093      	str	r3, [r2, #8]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	08007530 	.word	0x08007530

080028f8 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	3b01      	subs	r3, #1
 8002906:	4a0b      	ldr	r2, [pc, #44]	; (8002934 <LL_DMA_EnableIT_TC+0x3c>)
 8002908:	5cd3      	ldrb	r3, [r2, r3]
 800290a:	461a      	mov	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4413      	add	r3, r2
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	3a01      	subs	r2, #1
 8002916:	4907      	ldr	r1, [pc, #28]	; (8002934 <LL_DMA_EnableIT_TC+0x3c>)
 8002918:	5c8a      	ldrb	r2, [r1, r2]
 800291a:	4611      	mov	r1, r2
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	440a      	add	r2, r1
 8002920:	f043 0302 	orr.w	r3, r3, #2
 8002924:	6013      	str	r3, [r2, #0]
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	08007530 	.word	0x08007530

08002938 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	3b01      	subs	r3, #1
 8002946:	4a0b      	ldr	r2, [pc, #44]	; (8002974 <LL_DMA_EnableIT_HT+0x3c>)
 8002948:	5cd3      	ldrb	r3, [r2, r3]
 800294a:	461a      	mov	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4413      	add	r3, r2
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	3a01      	subs	r2, #1
 8002956:	4907      	ldr	r1, [pc, #28]	; (8002974 <LL_DMA_EnableIT_HT+0x3c>)
 8002958:	5c8a      	ldrb	r2, [r1, r2]
 800295a:	4611      	mov	r1, r2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	440a      	add	r2, r1
 8002960:	f043 0304 	orr.w	r3, r3, #4
 8002964:	6013      	str	r3, [r2, #0]
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	08007530 	.word	0x08007530

08002978 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	3b01      	subs	r3, #1
 8002986:	4a0b      	ldr	r2, [pc, #44]	; (80029b4 <LL_DMA_EnableIT_TE+0x3c>)
 8002988:	5cd3      	ldrb	r3, [r2, r3]
 800298a:	461a      	mov	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4413      	add	r3, r2
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	3a01      	subs	r2, #1
 8002996:	4907      	ldr	r1, [pc, #28]	; (80029b4 <LL_DMA_EnableIT_TE+0x3c>)
 8002998:	5c8a      	ldrb	r2, [r1, r2]
 800299a:	4611      	mov	r1, r2
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	440a      	add	r2, r1
 80029a0:	f043 0308 	orr.w	r3, r3, #8
 80029a4:	6013      	str	r3, [r2, #0]
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	08007530 	.word	0x08007530

080029b8 <LL_USART_Enable>:
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f043 0201 	orr.w	r2, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	601a      	str	r2, [r3, #0]
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <LL_USART_ConfigAsyncMode>:
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	609a      	str	r2, [r3, #8]
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b089      	sub	sp, #36	; 0x24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	e853 3f00 	ldrex	r3, [r3]
 8002a16:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f043 0310 	orr.w	r3, r3, #16
 8002a1e:	61fb      	str	r3, [r7, #28]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69fa      	ldr	r2, [r7, #28]
 8002a24:	61ba      	str	r2, [r7, #24]
 8002a26:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a28:	6979      	ldr	r1, [r7, #20]
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	e841 2300 	strex	r3, r2, [r1]
 8002a30:	613b      	str	r3, [r7, #16]
   return(result);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1e9      	bne.n	8002a0c <LL_USART_EnableIT_IDLE+0x8>
}
 8002a38:	bf00      	nop
 8002a3a:	bf00      	nop
 8002a3c:	3724      	adds	r7, #36	; 0x24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b089      	sub	sp, #36	; 0x24
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3308      	adds	r3, #8
 8002a52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	e853 3f00 	ldrex	r3, [r3]
 8002a5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a62:	61fb      	str	r3, [r7, #28]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3308      	adds	r3, #8
 8002a68:	69fa      	ldr	r2, [r7, #28]
 8002a6a:	61ba      	str	r2, [r7, #24]
 8002a6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a6e:	6979      	ldr	r1, [r7, #20]
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	e841 2300 	strex	r3, r2, [r1]
 8002a76:	613b      	str	r3, [r7, #16]
   return(result);
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1e7      	bne.n	8002a4e <LL_USART_DisableIT_CTS+0x8>
}
 8002a7e:	bf00      	nop
 8002a80:	bf00      	nop
 8002a82:	3724      	adds	r7, #36	; 0x24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b089      	sub	sp, #36	; 0x24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3308      	adds	r3, #8
 8002a98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	e853 3f00 	ldrex	r3, [r3]
 8002aa0:	60bb      	str	r3, [r7, #8]
   return(result);
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3308      	adds	r3, #8
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	61ba      	str	r2, [r7, #24]
 8002ab2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab4:	6979      	ldr	r1, [r7, #20]
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	e841 2300 	strex	r3, r2, [r1]
 8002abc:	613b      	str	r3, [r7, #16]
   return(result);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1e7      	bne.n	8002a94 <LL_USART_EnableDMAReq_RX+0x8>
}
 8002ac4:	bf00      	nop
 8002ac6:	bf00      	nop
 8002ac8:	3724      	adds	r7, #36	; 0x24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b089      	sub	sp, #36	; 0x24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3308      	adds	r3, #8
 8002ade:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	e853 3f00 	ldrex	r3, [r3]
 8002ae6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aee:	61fb      	str	r3, [r7, #28]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3308      	adds	r3, #8
 8002af4:	69fa      	ldr	r2, [r7, #28]
 8002af6:	61ba      	str	r2, [r7, #24]
 8002af8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afa:	6979      	ldr	r1, [r7, #20]
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	e841 2300 	strex	r3, r2, [r1]
 8002b02:	613b      	str	r3, [r7, #16]
   return(result);
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1e7      	bne.n	8002ada <LL_USART_EnableDMAReq_TX+0x8>
}
 8002b0a:	bf00      	nop
 8002b0c:	bf00      	nop
 8002b0e:	3724      	adds	r7, #36	; 0x24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d103      	bne.n	8002b30 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3328      	adds	r3, #40	; 0x28
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	e002      	b.n	8002b36 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3324      	adds	r3, #36	; 0x24
 8002b34:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8002b36:	68fb      	ldr	r3, [r7, #12]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <USART2_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(uint8_t data) = 0;

/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a03      	ldr	r2, [pc, #12]	; (8002b64 <USART2_RegisterCallback+0x20>)
 8002b56:	6013      	str	r3, [r2, #0]
	}
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	2000036c 	.word	0x2000036c

08002b68 <MX_USART2_UART_Init>:
	// type global variables here


/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8002b68:	b5b0      	push	{r4, r5, r7, lr}
 8002b6a:	b090      	sub	sp, #64	; 0x40
 8002b6c:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002b6e:	f107 031c 	add.w	r3, r7, #28
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	605a      	str	r2, [r3, #4]
 8002b78:	609a      	str	r2, [r3, #8]
 8002b7a:	60da      	str	r2, [r3, #12]
 8002b7c:	611a      	str	r2, [r3, #16]
 8002b7e:	615a      	str	r2, [r3, #20]
 8002b80:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b82:	1d3b      	adds	r3, r7, #4
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	611a      	str	r2, [r3, #16]
 8002b90:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002b92:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002b96:	f7ff fc9b 	bl	80024d0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002b9a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002b9e:	f7ff fc7f 	bl	80024a0 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8002ba2:	f248 0304 	movw	r3, #32772	; 0x8004
 8002ba6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002bac:	2303      	movs	r3, #3
 8002bae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002bb8:	2307      	movs	r3, #7
 8002bba:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bbc:	1d3b      	adds	r3, r7, #4
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bc4:	f000 fa62 	bl	800308c <LL_GPIO_Init>
   * Rx memory buffer will be handled in normal mode, not circular!
   * You can use configuration from example program and modify it.
   * For more information about DMA registers, refer to reference manual.
   */

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2106      	movs	r1, #6
 8002bcc:	4854      	ldr	r0, [pc, #336]	; (8002d20 <MX_USART2_UART_Init+0x1b8>)
 8002bce:	f7ff fcd7 	bl	8002580 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8002bd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bd6:	2106      	movs	r1, #6
 8002bd8:	4851      	ldr	r0, [pc, #324]	; (8002d20 <MX_USART2_UART_Init+0x1b8>)
 8002bda:	f7ff fdc3 	bl	8002764 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8002bde:	2200      	movs	r2, #0
 8002be0:	2106      	movs	r1, #6
 8002be2:	484f      	ldr	r0, [pc, #316]	; (8002d20 <MX_USART2_UART_Init+0x1b8>)
 8002be4:	f7ff fd0a 	bl	80025fc <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8002be8:	2200      	movs	r2, #0
 8002bea:	2106      	movs	r1, #6
 8002bec:	484c      	ldr	r0, [pc, #304]	; (8002d20 <MX_USART2_UART_Init+0x1b8>)
 8002bee:	f7ff fd29 	bl	8002644 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8002bf2:	2280      	movs	r2, #128	; 0x80
 8002bf4:	2106      	movs	r1, #6
 8002bf6:	484a      	ldr	r0, [pc, #296]	; (8002d20 <MX_USART2_UART_Init+0x1b8>)
 8002bf8:	f7ff fd48 	bl	800268c <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2106      	movs	r1, #6
 8002c00:	4847      	ldr	r0, [pc, #284]	; (8002d20 <MX_USART2_UART_Init+0x1b8>)
 8002c02:	f7ff fd67 	bl	80026d4 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8002c06:	2200      	movs	r2, #0
 8002c08:	2106      	movs	r1, #6
 8002c0a:	4845      	ldr	r0, [pc, #276]	; (8002d20 <MX_USART2_UART_Init+0x1b8>)
 8002c0c:	f7ff fd86 	bl	800271c <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8002c10:	2101      	movs	r1, #1
 8002c12:	4844      	ldr	r0, [pc, #272]	; (8002d24 <MX_USART2_UART_Init+0x1bc>)
 8002c14:	f7ff ff80 	bl	8002b18 <LL_USART_DMA_GetRegAddr>
 8002c18:	4604      	mov	r4, r0
 8002c1a:	4d43      	ldr	r5, [pc, #268]	; (8002d28 <MX_USART2_UART_Init+0x1c0>)
 8002c1c:	2106      	movs	r1, #6
 8002c1e:	4840      	ldr	r0, [pc, #256]	; (8002d20 <MX_USART2_UART_Init+0x1b8>)
 8002c20:	f7ff fcd4 	bl	80025cc <LL_DMA_GetDataTransferDirection>
 8002c24:	4603      	mov	r3, r0
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	462b      	mov	r3, r5
 8002c2a:	4622      	mov	r2, r4
 8002c2c:	2106      	movs	r1, #6
 8002c2e:	483c      	ldr	r0, [pc, #240]	; (8002d20 <MX_USART2_UART_Init+0x1b8>)
 8002c30:	f7ff fdf6 	bl	8002820 <LL_DMA_ConfigAddresses>
						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
							(uint32_t)bufferUSART2dma,
							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8002c34:	2280      	movs	r2, #128	; 0x80
 8002c36:	2106      	movs	r1, #6
 8002c38:	4839      	ldr	r0, [pc, #228]	; (8002d20 <MX_USART2_UART_Init+0x1b8>)
 8002c3a:	f7ff fdb7 	bl	80027ac <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002c3e:	2106      	movs	r1, #6
 8002c40:	4837      	ldr	r0, [pc, #220]	; (8002d20 <MX_USART2_UART_Init+0x1b8>)
 8002c42:	f7ff fc5d 	bl	8002500 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 8002c46:	4837      	ldr	r0, [pc, #220]	; (8002d24 <MX_USART2_UART_Init+0x1bc>)
 8002c48:	f7ff ff20 	bl	8002a8c <LL_USART_EnableDMAReq_RX>

  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 8002c4c:	2106      	movs	r1, #6
 8002c4e:	4834      	ldr	r0, [pc, #208]	; (8002d20 <MX_USART2_UART_Init+0x1b8>)
 8002c50:	f7ff fe52 	bl	80028f8 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 8002c54:	2106      	movs	r1, #6
 8002c56:	4832      	ldr	r0, [pc, #200]	; (8002d20 <MX_USART2_UART_Init+0x1b8>)
 8002c58:	f7ff fe6e 	bl	8002938 <LL_DMA_EnableIT_HT>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002c5c:	2210      	movs	r2, #16
 8002c5e:	2107      	movs	r1, #7
 8002c60:	482f      	ldr	r0, [pc, #188]	; (8002d20 <MX_USART2_UART_Init+0x1b8>)
 8002c62:	f7ff fc8d 	bl	8002580 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8002c66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c6a:	2107      	movs	r1, #7
 8002c6c:	482c      	ldr	r0, [pc, #176]	; (8002d20 <MX_USART2_UART_Init+0x1b8>)
 8002c6e:	f7ff fd79 	bl	8002764 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8002c72:	2200      	movs	r2, #0
 8002c74:	2107      	movs	r1, #7
 8002c76:	482a      	ldr	r0, [pc, #168]	; (8002d20 <MX_USART2_UART_Init+0x1b8>)
 8002c78:	f7ff fcc0 	bl	80025fc <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2107      	movs	r1, #7
 8002c80:	4827      	ldr	r0, [pc, #156]	; (8002d20 <MX_USART2_UART_Init+0x1b8>)
 8002c82:	f7ff fcdf 	bl	8002644 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8002c86:	2280      	movs	r2, #128	; 0x80
 8002c88:	2107      	movs	r1, #7
 8002c8a:	4825      	ldr	r0, [pc, #148]	; (8002d20 <MX_USART2_UART_Init+0x1b8>)
 8002c8c:	f7ff fcfe 	bl	800268c <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8002c90:	2200      	movs	r2, #0
 8002c92:	2107      	movs	r1, #7
 8002c94:	4822      	ldr	r0, [pc, #136]	; (8002d20 <MX_USART2_UART_Init+0x1b8>)
 8002c96:	f7ff fd1d 	bl	80026d4 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2107      	movs	r1, #7
 8002c9e:	4820      	ldr	r0, [pc, #128]	; (8002d20 <MX_USART2_UART_Init+0x1b8>)
 8002ca0:	f7ff fd3c 	bl	800271c <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	481f      	ldr	r0, [pc, #124]	; (8002d24 <MX_USART2_UART_Init+0x1bc>)
 8002ca8:	f7ff ff36 	bl	8002b18 <LL_USART_DMA_GetRegAddr>
 8002cac:	4603      	mov	r3, r0
 8002cae:	461a      	mov	r2, r3
 8002cb0:	2107      	movs	r1, #7
 8002cb2:	481b      	ldr	r0, [pc, #108]	; (8002d20 <MX_USART2_UART_Init+0x1b8>)
 8002cb4:	f7ff fe08 	bl	80028c8 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 8002cb8:	481a      	ldr	r0, [pc, #104]	; (8002d24 <MX_USART2_UART_Init+0x1bc>)
 8002cba:	f7ff ff0a 	bl	8002ad2 <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8002cbe:	2107      	movs	r1, #7
 8002cc0:	4817      	ldr	r0, [pc, #92]	; (8002d20 <MX_USART2_UART_Init+0x1b8>)
 8002cc2:	f7ff fe59 	bl	8002978 <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	2026      	movs	r0, #38	; 0x26
 8002cca:	f7ff fbbf 	bl	800244c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002cce:	2026      	movs	r0, #38	; 0x26
 8002cd0:	f7ff fb9e 	bl	8002410 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8002cd4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002cd8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002ce6:	230c      	movs	r3, #12
 8002ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002cea:	2300      	movs	r3, #0
 8002cec:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002cf2:	f107 031c 	add.w	r3, r7, #28
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	480a      	ldr	r0, [pc, #40]	; (8002d24 <MX_USART2_UART_Init+0x1bc>)
 8002cfa:	f000 fd2d 	bl	8003758 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002cfe:	4809      	ldr	r0, [pc, #36]	; (8002d24 <MX_USART2_UART_Init+0x1bc>)
 8002d00:	f7ff fe6a 	bl	80029d8 <LL_USART_ConfigAsyncMode>
  LL_USART_DisableIT_CTS(USART2);
 8002d04:	4807      	ldr	r0, [pc, #28]	; (8002d24 <MX_USART2_UART_Init+0x1bc>)
 8002d06:	f7ff fe9e 	bl	8002a46 <LL_USART_DisableIT_CTS>

  /* Enable USART2 peripheral and interrupts*/
  LL_USART_EnableIT_IDLE(USART2);
 8002d0a:	4806      	ldr	r0, [pc, #24]	; (8002d24 <MX_USART2_UART_Init+0x1bc>)
 8002d0c:	f7ff fe7a 	bl	8002a04 <LL_USART_EnableIT_IDLE>
  LL_USART_Enable(USART2);
 8002d10:	4804      	ldr	r0, [pc, #16]	; (8002d24 <MX_USART2_UART_Init+0x1bc>)
 8002d12:	f7ff fe51 	bl	80029b8 <LL_USART_Enable>
  	  //type your code here:
}
 8002d16:	bf00      	nop
 8002d18:	3738      	adds	r7, #56	; 0x38
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40020000 	.word	0x40020000
 8002d24:	40004400 	.word	0x40004400
 8002d28:	200002ec 	.word	0x200002ec

08002d2c <USART2_PutBuffer>:

// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	2107      	movs	r1, #7
 8002d3e:	480a      	ldr	r0, [pc, #40]	; (8002d68 <USART2_PutBuffer+0x3c>)
 8002d40:	f7ff fdaa 	bl	8002898 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	461a      	mov	r2, r3
 8002d48:	2107      	movs	r1, #7
 8002d4a:	4807      	ldr	r0, [pc, #28]	; (8002d68 <USART2_PutBuffer+0x3c>)
 8002d4c:	f7ff fd2e 	bl	80027ac <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8002d50:	2107      	movs	r1, #7
 8002d52:	4805      	ldr	r0, [pc, #20]	; (8002d68 <USART2_PutBuffer+0x3c>)
 8002d54:	f7ff fdd0 	bl	80028f8 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8002d58:	2107      	movs	r1, #7
 8002d5a:	4803      	ldr	r0, [pc, #12]	; (8002d68 <USART2_PutBuffer+0x3c>)
 8002d5c:	f7ff fbd0 	bl	8002500 <LL_DMA_EnableChannel>
}
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40020000 	.word	0x40020000

08002d6c <USART2_CheckDmaReception>:
 */

uint16_t buf_read_pos = 0;

void USART2_CheckDmaReception(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 8002d72:	2106      	movs	r1, #6
 8002d74:	482a      	ldr	r0, [pc, #168]	; (8002e20 <USART2_CheckDmaReception+0xb4>)
 8002d76:	f7ff fd3d 	bl	80027f4 <LL_DMA_GetDataLength>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002d82:	80fb      	strh	r3, [r7, #6]

	if (pos >= DMA_USART2_BUFFER_SIZE)
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	2b7f      	cmp	r3, #127	; 0x7f
 8002d88:	d941      	bls.n	8002e0e <USART2_CheckDmaReception+0xa2>
	{
		// set the DMA address pointer back to the beginning of the buffer
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002d8a:	2106      	movs	r1, #6
 8002d8c:	4824      	ldr	r0, [pc, #144]	; (8002e20 <USART2_CheckDmaReception+0xb4>)
 8002d8e:	f7ff fbd7 	bl	8002540 <LL_DMA_DisableChannel>
		LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_6, (uint32_t)bufferUSART2dma);
 8002d92:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <USART2_CheckDmaReception+0xb8>)
 8002d94:	461a      	mov	r2, r3
 8002d96:	2106      	movs	r1, #6
 8002d98:	4821      	ldr	r0, [pc, #132]	; (8002e20 <USART2_CheckDmaReception+0xb4>)
 8002d9a:	f7ff fd7d 	bl	8002898 <LL_DMA_SetMemoryAddress>
		LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8002d9e:	2280      	movs	r2, #128	; 0x80
 8002da0:	2106      	movs	r1, #6
 8002da2:	481f      	ldr	r0, [pc, #124]	; (8002e20 <USART2_CheckDmaReception+0xb4>)
 8002da4:	f7ff fd02 	bl	80027ac <LL_DMA_SetDataLength>
		LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002da8:	2106      	movs	r1, #6
 8002daa:	481d      	ldr	r0, [pc, #116]	; (8002e20 <USART2_CheckDmaReception+0xb4>)
 8002dac:	f7ff fba8 	bl	8002500 <LL_DMA_EnableChannel>

		// process all data until the end of the buffer
		while(buf_read_pos < DMA_USART2_BUFFER_SIZE)
 8002db0:	e012      	b.n	8002dd8 <USART2_CheckDmaReception+0x6c>
		{
			if(USART2_ProcessData != 0)
 8002db2:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <USART2_CheckDmaReception+0xbc>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d008      	beq.n	8002dcc <USART2_CheckDmaReception+0x60>
			{
				USART2_ProcessData(bufferUSART2dma[buf_read_pos]);
 8002dba:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <USART2_CheckDmaReception+0xbc>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a1b      	ldr	r2, [pc, #108]	; (8002e2c <USART2_CheckDmaReception+0xc0>)
 8002dc0:	8812      	ldrh	r2, [r2, #0]
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4a17      	ldr	r2, [pc, #92]	; (8002e24 <USART2_CheckDmaReception+0xb8>)
 8002dc6:	5c52      	ldrb	r2, [r2, r1]
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4798      	blx	r3
			}
			buf_read_pos++;
 8002dcc:	4b17      	ldr	r3, [pc, #92]	; (8002e2c <USART2_CheckDmaReception+0xc0>)
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <USART2_CheckDmaReception+0xc0>)
 8002dd6:	801a      	strh	r2, [r3, #0]
		while(buf_read_pos < DMA_USART2_BUFFER_SIZE)
 8002dd8:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <USART2_CheckDmaReception+0xc0>)
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	2b7f      	cmp	r3, #127	; 0x7f
 8002dde:	d9e8      	bls.n	8002db2 <USART2_CheckDmaReception+0x46>
		}

		buf_read_pos = 0;
 8002de0:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <USART2_CheckDmaReception+0xc0>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	801a      	strh	r2, [r3, #0]
				USART2_ProcessData(bufferUSART2dma[buf_read_pos]);
			}
			buf_read_pos++;
		}
	}
}
 8002de6:	e017      	b.n	8002e18 <USART2_CheckDmaReception+0xac>
			if(USART2_ProcessData != 0)
 8002de8:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <USART2_CheckDmaReception+0xbc>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d008      	beq.n	8002e02 <USART2_CheckDmaReception+0x96>
				USART2_ProcessData(bufferUSART2dma[buf_read_pos]);
 8002df0:	4b0d      	ldr	r3, [pc, #52]	; (8002e28 <USART2_CheckDmaReception+0xbc>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a0d      	ldr	r2, [pc, #52]	; (8002e2c <USART2_CheckDmaReception+0xc0>)
 8002df6:	8812      	ldrh	r2, [r2, #0]
 8002df8:	4611      	mov	r1, r2
 8002dfa:	4a0a      	ldr	r2, [pc, #40]	; (8002e24 <USART2_CheckDmaReception+0xb8>)
 8002dfc:	5c52      	ldrb	r2, [r2, r1]
 8002dfe:	4610      	mov	r0, r2
 8002e00:	4798      	blx	r3
			buf_read_pos++;
 8002e02:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <USART2_CheckDmaReception+0xc0>)
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	3301      	adds	r3, #1
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <USART2_CheckDmaReception+0xc0>)
 8002e0c:	801a      	strh	r2, [r3, #0]
		while(buf_read_pos < pos)
 8002e0e:	4b07      	ldr	r3, [pc, #28]	; (8002e2c <USART2_CheckDmaReception+0xc0>)
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	88fa      	ldrh	r2, [r7, #6]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d8e7      	bhi.n	8002de8 <USART2_CheckDmaReception+0x7c>
}
 8002e18:	bf00      	nop
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40020000 	.word	0x40020000
 8002e24:	200002ec 	.word	0x200002ec
 8002e28:	2000036c 	.word	0x2000036c
 8002e2c:	20000370 	.word	0x20000370

08002e30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e68 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e34:	f7ff fada 	bl	80023ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e38:	480c      	ldr	r0, [pc, #48]	; (8002e6c <LoopForever+0x6>)
  ldr r1, =_edata
 8002e3a:	490d      	ldr	r1, [pc, #52]	; (8002e70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e3c:	4a0d      	ldr	r2, [pc, #52]	; (8002e74 <LoopForever+0xe>)
  movs r3, #0
 8002e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e40:	e002      	b.n	8002e48 <LoopCopyDataInit>

08002e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e46:	3304      	adds	r3, #4

08002e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e4c:	d3f9      	bcc.n	8002e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e4e:	4a0a      	ldr	r2, [pc, #40]	; (8002e78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e50:	4c0a      	ldr	r4, [pc, #40]	; (8002e7c <LoopForever+0x16>)
  movs r3, #0
 8002e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e54:	e001      	b.n	8002e5a <LoopFillZerobss>

08002e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e58:	3204      	adds	r2, #4

08002e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e5c:	d3fb      	bcc.n	8002e56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e5e:	f001 fbf5 	bl	800464c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e62:	f7fe ff31 	bl	8001cc8 <main>

08002e66 <LoopForever>:

LoopForever:
    b LoopForever
 8002e66:	e7fe      	b.n	8002e66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e68:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e70:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 8002e74:	080078e8 	.word	0x080078e8
  ldr r2, =_sbss
 8002e78:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 8002e7c:	200004c0 	.word	0x200004c0

08002e80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e80:	e7fe      	b.n	8002e80 <ADC1_2_IRQHandler>

08002e82 <LL_GPIO_SetPinMode>:
{
 8002e82:	b480      	push	{r7}
 8002e84:	b089      	sub	sp, #36	; 0x24
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	fa93 f3a3 	rbit	r3, r3
 8002e9c:	613b      	str	r3, [r7, #16]
  return result;
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	fab3 f383 	clz	r3, r3
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	2103      	movs	r1, #3
 8002eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	401a      	ands	r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	61bb      	str	r3, [r7, #24]
  return result;
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	fab3 f383 	clz	r3, r3
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	601a      	str	r2, [r3, #0]
}
 8002ed4:	bf00      	nop
 8002ed6:	3724      	adds	r7, #36	; 0x24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <LL_GPIO_SetPinOutputType>:
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	401a      	ands	r2, r3
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	fb01 f303 	mul.w	r3, r1, r3
 8002efe:	431a      	orrs	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	605a      	str	r2, [r3, #4]
}
 8002f04:	bf00      	nop
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <LL_GPIO_SetPinSpeed>:
{
 8002f10:	b480      	push	{r7}
 8002f12:	b089      	sub	sp, #36	; 0x24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	fa93 f3a3 	rbit	r3, r3
 8002f2a:	613b      	str	r3, [r7, #16]
  return result;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	fab3 f383 	clz	r3, r3
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	2103      	movs	r1, #3
 8002f38:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	401a      	ands	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	fa93 f3a3 	rbit	r3, r3
 8002f4a:	61bb      	str	r3, [r7, #24]
  return result;
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	fab3 f383 	clz	r3, r3
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	609a      	str	r2, [r3, #8]
}
 8002f62:	bf00      	nop
 8002f64:	3724      	adds	r7, #36	; 0x24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <LL_GPIO_SetPinPull>:
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b089      	sub	sp, #36	; 0x24
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	fa93 f3a3 	rbit	r3, r3
 8002f88:	613b      	str	r3, [r7, #16]
  return result;
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	fab3 f383 	clz	r3, r3
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	2103      	movs	r1, #3
 8002f96:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	401a      	ands	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	fa93 f3a3 	rbit	r3, r3
 8002fa8:	61bb      	str	r3, [r7, #24]
  return result;
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	fab3 f383 	clz	r3, r3
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	60da      	str	r2, [r3, #12]
}
 8002fc0:	bf00      	nop
 8002fc2:	3724      	adds	r7, #36	; 0x24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <LL_GPIO_SetAFPin_0_7>:
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b089      	sub	sp, #36	; 0x24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a1a      	ldr	r2, [r3, #32]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	fa93 f3a3 	rbit	r3, r3
 8002fe6:	613b      	str	r3, [r7, #16]
  return result;
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	fab3 f383 	clz	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	210f      	movs	r1, #15
 8002ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	61bb      	str	r3, [r7, #24]
  return result;
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	b2db      	uxtb	r3, r3
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	fa01 f303 	lsl.w	r3, r1, r3
 8003018:	431a      	orrs	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	621a      	str	r2, [r3, #32]
}
 800301e:	bf00      	nop
 8003020:	3724      	adds	r7, #36	; 0x24
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <LL_GPIO_SetAFPin_8_15>:
{
 800302a:	b480      	push	{r7}
 800302c:	b089      	sub	sp, #36	; 0x24
 800302e:	af00      	add	r7, sp, #0
 8003030:	60f8      	str	r0, [r7, #12]
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	0a1b      	lsrs	r3, r3, #8
 800303e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	fa93 f3a3 	rbit	r3, r3
 8003046:	613b      	str	r3, [r7, #16]
  return result;
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	fab3 f383 	clz	r3, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	210f      	movs	r1, #15
 8003054:	fa01 f303 	lsl.w	r3, r1, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	401a      	ands	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	0a1b      	lsrs	r3, r3, #8
 8003060:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	fa93 f3a3 	rbit	r3, r3
 8003068:	61bb      	str	r3, [r7, #24]
  return result;
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	fab3 f383 	clz	r3, r3
 8003070:	b2db      	uxtb	r3, r3
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	fa01 f303 	lsl.w	r3, r1, r3
 800307a:	431a      	orrs	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003080:	bf00      	nop
 8003082:	3724      	adds	r7, #36	; 0x24
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	fa93 f3a3 	rbit	r3, r3
 80030a2:	613b      	str	r3, [r7, #16]
  return result;
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	fab3 f383 	clz	r3, r3
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80030ae:	e051      	b.n	8003154 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	2101      	movs	r1, #1
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	fa01 f303 	lsl.w	r3, r1, r3
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d043      	beq.n	800314e <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d003      	beq.n	80030d6 <LL_GPIO_Init+0x4a>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d10e      	bne.n	80030f4 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	461a      	mov	r2, r3
 80030dc:	69b9      	ldr	r1, [r7, #24]
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7ff ff16 	bl	8002f10 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	6819      	ldr	r1, [r3, #0]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	461a      	mov	r2, r3
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff fef6 	bl	8002ee0 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	461a      	mov	r2, r3
 80030fa:	69b9      	ldr	r1, [r7, #24]
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff ff36 	bl	8002f6e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d11a      	bne.n	8003140 <LL_GPIO_Init+0xb4>
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	fa93 f3a3 	rbit	r3, r3
 8003114:	60bb      	str	r3, [r7, #8]
  return result;
 8003116:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003118:	fab3 f383 	clz	r3, r3
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b07      	cmp	r3, #7
 8003120:	d807      	bhi.n	8003132 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	461a      	mov	r2, r3
 8003128:	69b9      	ldr	r1, [r7, #24]
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7ff ff4e 	bl	8002fcc <LL_GPIO_SetAFPin_0_7>
 8003130:	e006      	b.n	8003140 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	461a      	mov	r2, r3
 8003138:	69b9      	ldr	r1, [r7, #24]
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff ff75 	bl	800302a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	461a      	mov	r2, r3
 8003146:	69b9      	ldr	r1, [r7, #24]
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7ff fe9a 	bl	8002e82 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	3301      	adds	r3, #1
 8003152:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	fa22 f303 	lsr.w	r3, r2, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1a6      	bne.n	80030b0 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3720      	adds	r7, #32
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <LL_I2C_Enable>:
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f043 0201 	orr.w	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	601a      	str	r2, [r3, #0]
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <LL_I2C_Disable>:
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f023 0201 	bic.w	r2, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	601a      	str	r2, [r3, #0]
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <LL_I2C_ConfigFilters>:
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	0219      	lsls	r1, r3, #8
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	430b      	orrs	r3, r1
 80031c8:	431a      	orrs	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	601a      	str	r2, [r3, #0]
}
 80031ce:	bf00      	nop
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <LL_I2C_SetOwnAddress1>:
{
 80031da:	b480      	push	{r7}
 80031dc:	b085      	sub	sp, #20
 80031de:	af00      	add	r7, sp, #0
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80031ee:	f023 0307 	bic.w	r3, r3, #7
 80031f2:	68b9      	ldr	r1, [r7, #8]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	431a      	orrs	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	609a      	str	r2, [r3, #8]
}
 80031fe:	bf00      	nop
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <LL_I2C_EnableOwnAddress1>:
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	609a      	str	r2, [r3, #8]
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <LL_I2C_DisableOwnAddress1>:
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	609a      	str	r2, [r3, #8]
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <LL_I2C_SetTiming>:
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	611a      	str	r2, [r3, #16]
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <LL_I2C_SetMode>:
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	601a      	str	r2, [r3, #0]
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <LL_I2C_AcknowledgeNextData>:
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	605a      	str	r2, [r3, #4]
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff ff65 	bl	800318c <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	6899      	ldr	r1, [r3, #8]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	461a      	mov	r2, r3
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff ff6d 	bl	80031ac <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4619      	mov	r1, r3
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff ffb6 	bl	800324a <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff ff44 	bl	800316c <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff ffa0 	bl	800322a <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	6919      	ldr	r1, [r3, #16]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	461a      	mov	r2, r3
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff ff70 	bl	80031da <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff ff81 	bl	800320a <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4619      	mov	r1, r3
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff ffa9 	bl	8003266 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	4619      	mov	r1, r3
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff ffb6 	bl	800328c <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <LL_RCC_HSI_IsReady>:
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8003330:	4b06      	ldr	r3, [pc, #24]	; (800334c <LL_RCC_HSI_IsReady+0x20>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b02      	cmp	r3, #2
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
}
 8003342:	4618      	mov	r0, r3
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	40021000 	.word	0x40021000

08003350 <LL_RCC_LSE_IsReady>:
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8003354:	4b06      	ldr	r3, [pc, #24]	; (8003370 <LL_RCC_LSE_IsReady+0x20>)
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b02      	cmp	r3, #2
 800335e:	bf0c      	ite	eq
 8003360:	2301      	moveq	r3, #1
 8003362:	2300      	movne	r3, #0
 8003364:	b2db      	uxtb	r3, r3
}
 8003366:	4618      	mov	r0, r3
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	40021000 	.word	0x40021000

08003374 <LL_RCC_GetSysClkSource>:
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003378:	4b04      	ldr	r3, [pc, #16]	; (800338c <LL_RCC_GetSysClkSource+0x18>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 030c 	and.w	r3, r3, #12
}
 8003380:	4618      	mov	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40021000 	.word	0x40021000

08003390 <LL_RCC_GetAHBPrescaler>:
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003394:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <LL_RCC_GetAHBPrescaler+0x18>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800339c:	4618      	mov	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40021000 	.word	0x40021000

080033ac <LL_RCC_GetAPB1Prescaler>:
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80033b0:	4b04      	ldr	r3, [pc, #16]	; (80033c4 <LL_RCC_GetAPB1Prescaler+0x18>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40021000 	.word	0x40021000

080033c8 <LL_RCC_GetAPB2Prescaler>:
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80033cc:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <LL_RCC_GetAPB2Prescaler+0x18>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40021000 	.word	0x40021000

080033e4 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80033ec:	4b07      	ldr	r3, [pc, #28]	; (800340c <LL_RCC_GetUSARTClockSource+0x28>)
 80033ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033f0:	2103      	movs	r1, #3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	fa01 f303 	lsl.w	r3, r1, r3
 80033f8:	401a      	ands	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	061b      	lsls	r3, r3, #24
 80033fe:	4313      	orrs	r3, r2
}
 8003400:	4618      	mov	r0, r3
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	40021000 	.word	0x40021000

08003410 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8003414:	4b04      	ldr	r3, [pc, #16]	; (8003428 <LL_RCC_PLL_GetMainSource+0x18>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 800341c:	4618      	mov	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000

0800342c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8003430:	4b04      	ldr	r3, [pc, #16]	; (8003444 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8003438:	4618      	mov	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	40021000 	.word	0x40021000

08003448 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 800344c:	4b04      	ldr	r3, [pc, #16]	; (8003460 <LL_RCC_PLL_GetPrediv+0x18>)
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	f003 030f 	and.w	r3, r3, #15
}
 8003454:	4618      	mov	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40021000 	.word	0x40021000

08003464 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800346c:	f000 f862 	bl	8003534 <RCC_GetSystemClockFreq>
 8003470:	4602      	mov	r2, r0
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f000 f880 	bl	8003580 <RCC_GetHCLKClockFreq>
 8003480:	4602      	mov	r2, r0
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	4618      	mov	r0, r3
 800348c:	f000 f88e 	bl	80035ac <RCC_GetPCLK1ClockFreq>
 8003490:	4602      	mov	r2, r0
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	4618      	mov	r0, r3
 800349c:	f000 f89a 	bl	80035d4 <RCC_GetPCLK2ClockFreq>
 80034a0:	4602      	mov	r2, r0
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	60da      	str	r2, [r3, #12]
}
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d130      	bne.n	8003524 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff ff8e 	bl	80033e4 <LL_RCC_GetUSARTClockSource>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b03      	cmp	r3, #3
 80034cc:	d00a      	beq.n	80034e4 <LL_RCC_GetUSARTClockFreq+0x34>
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d819      	bhi.n	8003506 <LL_RCC_GetUSARTClockFreq+0x56>
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d002      	beq.n	80034dc <LL_RCC_GetUSARTClockFreq+0x2c>
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d00c      	beq.n	80034f4 <LL_RCC_GetUSARTClockFreq+0x44>
 80034da:	e014      	b.n	8003506 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80034dc:	f000 f82a 	bl	8003534 <RCC_GetSystemClockFreq>
 80034e0:	60f8      	str	r0, [r7, #12]
        break;
 80034e2:	e01f      	b.n	8003524 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80034e4:	f7ff ff22 	bl	800332c <LL_RCC_HSI_IsReady>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d017      	beq.n	800351e <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 80034ee:	4b10      	ldr	r3, [pc, #64]	; (8003530 <LL_RCC_GetUSARTClockFreq+0x80>)
 80034f0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80034f2:	e014      	b.n	800351e <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80034f4:	f7ff ff2c 	bl	8003350 <LL_RCC_LSE_IsReady>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d011      	beq.n	8003522 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 80034fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003502:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003504:	e00d      	b.n	8003522 <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003506:	f000 f815 	bl	8003534 <RCC_GetSystemClockFreq>
 800350a:	4603      	mov	r3, r0
 800350c:	4618      	mov	r0, r3
 800350e:	f000 f837 	bl	8003580 <RCC_GetHCLKClockFreq>
 8003512:	4603      	mov	r3, r0
 8003514:	4618      	mov	r0, r3
 8003516:	f000 f849 	bl	80035ac <RCC_GetPCLK1ClockFreq>
 800351a:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 800351c:	e002      	b.n	8003524 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 800351e:	bf00      	nop
 8003520:	e000      	b.n	8003524 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8003522:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8003524:	68fb      	ldr	r3, [r7, #12]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	007a1200 	.word	0x007a1200

08003534 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800353e:	f7ff ff19 	bl	8003374 <LL_RCC_GetSysClkSource>
 8003542:	4603      	mov	r3, r0
 8003544:	2b08      	cmp	r3, #8
 8003546:	d00c      	beq.n	8003562 <RCC_GetSystemClockFreq+0x2e>
 8003548:	2b08      	cmp	r3, #8
 800354a:	d80e      	bhi.n	800356a <RCC_GetSystemClockFreq+0x36>
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <RCC_GetSystemClockFreq+0x22>
 8003550:	2b04      	cmp	r3, #4
 8003552:	d003      	beq.n	800355c <RCC_GetSystemClockFreq+0x28>
 8003554:	e009      	b.n	800356a <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003556:	4b09      	ldr	r3, [pc, #36]	; (800357c <RCC_GetSystemClockFreq+0x48>)
 8003558:	607b      	str	r3, [r7, #4]
      break;
 800355a:	e009      	b.n	8003570 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800355c:	4b07      	ldr	r3, [pc, #28]	; (800357c <RCC_GetSystemClockFreq+0x48>)
 800355e:	607b      	str	r3, [r7, #4]
      break;
 8003560:	e006      	b.n	8003570 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003562:	f000 f84b 	bl	80035fc <RCC_PLL_GetFreqDomain_SYS>
 8003566:	6078      	str	r0, [r7, #4]
      break;
 8003568:	e002      	b.n	8003570 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800356a:	4b04      	ldr	r3, [pc, #16]	; (800357c <RCC_GetSystemClockFreq+0x48>)
 800356c:	607b      	str	r3, [r7, #4]
      break;
 800356e:	bf00      	nop
  }

  return frequency;
 8003570:	687b      	ldr	r3, [r7, #4]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	007a1200 	.word	0x007a1200

08003580 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003588:	f7ff ff02 	bl	8003390 <LL_RCC_GetAHBPrescaler>
 800358c:	4603      	mov	r3, r0
 800358e:	091b      	lsrs	r3, r3, #4
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	4a04      	ldr	r2, [pc, #16]	; (80035a8 <RCC_GetHCLKClockFreq+0x28>)
 8003596:	5cd3      	ldrb	r3, [r2, r3]
 8003598:	461a      	mov	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	40d3      	lsrs	r3, r2
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	08007518 	.word	0x08007518

080035ac <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80035b4:	f7ff fefa 	bl	80033ac <LL_RCC_GetAPB1Prescaler>
 80035b8:	4603      	mov	r3, r0
 80035ba:	0a1b      	lsrs	r3, r3, #8
 80035bc:	4a04      	ldr	r2, [pc, #16]	; (80035d0 <RCC_GetPCLK1ClockFreq+0x24>)
 80035be:	5cd3      	ldrb	r3, [r2, r3]
 80035c0:	461a      	mov	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	40d3      	lsrs	r3, r2
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	08007528 	.word	0x08007528

080035d4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80035dc:	f7ff fef4 	bl	80033c8 <LL_RCC_GetAPB2Prescaler>
 80035e0:	4603      	mov	r3, r0
 80035e2:	0adb      	lsrs	r3, r3, #11
 80035e4:	4a04      	ldr	r2, [pc, #16]	; (80035f8 <RCC_GetPCLK2ClockFreq+0x24>)
 80035e6:	5cd3      	ldrb	r3, [r2, r3]
 80035e8:	461a      	mov	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	40d3      	lsrs	r3, r2
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	08007528 	.word	0x08007528

080035fc <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80035fc:	b590      	push	{r4, r7, lr}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	2300      	movs	r3, #0
 8003608:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800360a:	f7ff ff01 	bl	8003410 <LL_RCC_PLL_GetMainSource>
 800360e:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d004      	beq.n	8003620 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800361c:	d003      	beq.n	8003626 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800361e:	e005      	b.n	800362c <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8003620:	4b13      	ldr	r3, [pc, #76]	; (8003670 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003622:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8003624:	e005      	b.n	8003632 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003626:	4b13      	ldr	r3, [pc, #76]	; (8003674 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003628:	60fb      	str	r3, [r7, #12]
      break;
 800362a:	e002      	b.n	8003632 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 800362c:	4b10      	ldr	r3, [pc, #64]	; (8003670 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800362e:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8003630:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8003632:	f7ff ff09 	bl	8003448 <LL_RCC_PLL_GetPrediv>
 8003636:	4603      	mov	r3, r0
 8003638:	3301      	adds	r3, #1
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	fbb2 f4f3 	udiv	r4, r2, r3
 8003640:	f7ff fef4 	bl	800342c <LL_RCC_PLL_GetMultiplicator>
 8003644:	4603      	mov	r3, r0
 8003646:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800364a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800364e:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	fa92 f2a2 	rbit	r2, r2
 8003656:	603a      	str	r2, [r7, #0]
  return result;
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	fab2 f282 	clz	r2, r2
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	40d3      	lsrs	r3, r2
 8003662:	3302      	adds	r3, #2
 8003664:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	bd90      	pop	{r4, r7, pc}
 8003670:	003d0900 	.word	0x003d0900
 8003674:	007a1200 	.word	0x007a1200

08003678 <LL_USART_IsEnabled>:
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <LL_USART_IsEnabled+0x18>
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <LL_USART_IsEnabled+0x1a>
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <LL_USART_SetStopBitsLength>:
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	605a      	str	r2, [r3, #4]
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <LL_USART_SetHWFlowCtrl>:
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	609a      	str	r2, [r3, #8]
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <LL_USART_SetBaudRate>:
{
 80036ea:	b480      	push	{r7}
 80036ec:	b087      	sub	sp, #28
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	607a      	str	r2, [r7, #4]
 80036f6:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036fe:	d11a      	bne.n	8003736 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	005a      	lsls	r2, r3, #1
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	085b      	lsrs	r3, r3, #1
 8003708:	441a      	add	r2, r3
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003710:	b29b      	uxth	r3, r3
 8003712:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800371a:	4013      	ands	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	085b      	lsrs	r3, r3, #1
 8003722:	b29b      	uxth	r3, r3
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4313      	orrs	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	60da      	str	r2, [r3, #12]
}
 8003734:	e00a      	b.n	800374c <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	085a      	lsrs	r2, r3, #1
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	441a      	add	r2, r3
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	fbb2 f3f3 	udiv	r3, r2, r3
 8003744:	b29b      	uxth	r3, r3
 8003746:	461a      	mov	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	60da      	str	r2, [r3, #12]
}
 800374c:	bf00      	nop
 800374e:	371c      	adds	r7, #28
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003766:	2300      	movs	r3, #0
 8003768:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff ff84 	bl	8003678 <LL_USART_IsEnabled>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d14e      	bne.n	8003814 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	4b29      	ldr	r3, [pc, #164]	; (8003820 <LL_USART_Init+0xc8>)
 800377c:	4013      	ands	r3, r2
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	6851      	ldr	r1, [r2, #4]
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	68d2      	ldr	r2, [r2, #12]
 8003786:	4311      	orrs	r1, r2
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	6912      	ldr	r2, [r2, #16]
 800378c:	4311      	orrs	r1, r2
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	6992      	ldr	r2, [r2, #24]
 8003792:	430a      	orrs	r2, r1
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	4619      	mov	r1, r3
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff ff7c 	bl	800369e <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	4619      	mov	r1, r3
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7ff ff89 	bl	80036c4 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a1b      	ldr	r2, [pc, #108]	; (8003824 <LL_USART_Init+0xcc>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d104      	bne.n	80037c4 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80037ba:	2000      	movs	r0, #0
 80037bc:	f7ff fe78 	bl	80034b0 <LL_RCC_GetUSARTClockFreq>
 80037c0:	61b8      	str	r0, [r7, #24]
 80037c2:	e016      	b.n	80037f2 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a18      	ldr	r2, [pc, #96]	; (8003828 <LL_USART_Init+0xd0>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d107      	bne.n	80037dc <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80037cc:	f107 0308 	add.w	r3, r7, #8
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff fe47 	bl	8003464 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	61bb      	str	r3, [r7, #24]
 80037da:	e00a      	b.n	80037f2 <LL_USART_Init+0x9a>
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a13      	ldr	r2, [pc, #76]	; (800382c <LL_USART_Init+0xd4>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d106      	bne.n	80037f2 <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80037e4:	f107 0308 	add.w	r3, r7, #8
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff fe3b 	bl	8003464 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00d      	beq.n	8003814 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d009      	beq.n	8003814 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8003800:	2300      	movs	r3, #0
 8003802:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800380c:	69b9      	ldr	r1, [r7, #24]
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff ff6b 	bl	80036ea <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003814:	7ffb      	ldrb	r3, [r7, #31]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3720      	adds	r7, #32
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	efff69f3 	.word	0xefff69f3
 8003824:	40013800 	.word	0x40013800
 8003828:	40004400 	.word	0x40004400
 800382c:	40004800 	.word	0x40004800

08003830 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003842:	4a07      	ldr	r2, [pc, #28]	; (8003860 <LL_InitTick+0x30>)
 8003844:	3b01      	subs	r3, #1
 8003846:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003848:	4b05      	ldr	r3, [pc, #20]	; (8003860 <LL_InitTick+0x30>)
 800384a:	2200      	movs	r2, #0
 800384c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800384e:	4b04      	ldr	r3, [pc, #16]	; (8003860 <LL_InitTick+0x30>)
 8003850:	2205      	movs	r2, #5
 8003852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	e000e010 	.word	0xe000e010

08003864 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800386c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff ffdd 	bl	8003830 <LL_InitTick>
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003888:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <LL_mDelay+0x48>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800388e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003896:	d00c      	beq.n	80038b2 <LL_mDelay+0x32>
  {
    Delay++;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3301      	adds	r3, #1
 800389c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800389e:	e008      	b.n	80038b2 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80038a0:	4b09      	ldr	r3, [pc, #36]	; (80038c8 <LL_mDelay+0x48>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d002      	beq.n	80038b2 <LL_mDelay+0x32>
    {
      Delay--;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	607b      	str	r3, [r7, #4]
  while (Delay)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1f3      	bne.n	80038a0 <LL_mDelay+0x20>
    }
  }
}
 80038b8:	bf00      	nop
 80038ba:	bf00      	nop
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	e000e010 	.word	0xe000e010

080038cc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80038d4:	4a04      	ldr	r2, [pc, #16]	; (80038e8 <LL_SetSystemCoreClock+0x1c>)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6013      	str	r3, [r2, #0]
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	20000084 	.word	0x20000084

080038ec <malloc>:
 80038ec:	4b02      	ldr	r3, [pc, #8]	; (80038f8 <malloc+0xc>)
 80038ee:	4601      	mov	r1, r0
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	f000 b82b 	b.w	800394c <_malloc_r>
 80038f6:	bf00      	nop
 80038f8:	200000e0 	.word	0x200000e0

080038fc <free>:
 80038fc:	4b02      	ldr	r3, [pc, #8]	; (8003908 <free+0xc>)
 80038fe:	4601      	mov	r1, r0
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	f001 bd47 	b.w	8005394 <_free_r>
 8003906:	bf00      	nop
 8003908:	200000e0 	.word	0x200000e0

0800390c <sbrk_aligned>:
 800390c:	b570      	push	{r4, r5, r6, lr}
 800390e:	4e0e      	ldr	r6, [pc, #56]	; (8003948 <sbrk_aligned+0x3c>)
 8003910:	460c      	mov	r4, r1
 8003912:	6831      	ldr	r1, [r6, #0]
 8003914:	4605      	mov	r5, r0
 8003916:	b911      	cbnz	r1, 800391e <sbrk_aligned+0x12>
 8003918:	f000 fe70 	bl	80045fc <_sbrk_r>
 800391c:	6030      	str	r0, [r6, #0]
 800391e:	4621      	mov	r1, r4
 8003920:	4628      	mov	r0, r5
 8003922:	f000 fe6b 	bl	80045fc <_sbrk_r>
 8003926:	1c43      	adds	r3, r0, #1
 8003928:	d00a      	beq.n	8003940 <sbrk_aligned+0x34>
 800392a:	1cc4      	adds	r4, r0, #3
 800392c:	f024 0403 	bic.w	r4, r4, #3
 8003930:	42a0      	cmp	r0, r4
 8003932:	d007      	beq.n	8003944 <sbrk_aligned+0x38>
 8003934:	1a21      	subs	r1, r4, r0
 8003936:	4628      	mov	r0, r5
 8003938:	f000 fe60 	bl	80045fc <_sbrk_r>
 800393c:	3001      	adds	r0, #1
 800393e:	d101      	bne.n	8003944 <sbrk_aligned+0x38>
 8003940:	f04f 34ff 	mov.w	r4, #4294967295
 8003944:	4620      	mov	r0, r4
 8003946:	bd70      	pop	{r4, r5, r6, pc}
 8003948:	20000378 	.word	0x20000378

0800394c <_malloc_r>:
 800394c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003950:	1ccd      	adds	r5, r1, #3
 8003952:	f025 0503 	bic.w	r5, r5, #3
 8003956:	3508      	adds	r5, #8
 8003958:	2d0c      	cmp	r5, #12
 800395a:	bf38      	it	cc
 800395c:	250c      	movcc	r5, #12
 800395e:	2d00      	cmp	r5, #0
 8003960:	4607      	mov	r7, r0
 8003962:	db01      	blt.n	8003968 <_malloc_r+0x1c>
 8003964:	42a9      	cmp	r1, r5
 8003966:	d905      	bls.n	8003974 <_malloc_r+0x28>
 8003968:	230c      	movs	r3, #12
 800396a:	603b      	str	r3, [r7, #0]
 800396c:	2600      	movs	r6, #0
 800396e:	4630      	mov	r0, r6
 8003970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003974:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a48 <_malloc_r+0xfc>
 8003978:	f000 f868 	bl	8003a4c <__malloc_lock>
 800397c:	f8d8 3000 	ldr.w	r3, [r8]
 8003980:	461c      	mov	r4, r3
 8003982:	bb5c      	cbnz	r4, 80039dc <_malloc_r+0x90>
 8003984:	4629      	mov	r1, r5
 8003986:	4638      	mov	r0, r7
 8003988:	f7ff ffc0 	bl	800390c <sbrk_aligned>
 800398c:	1c43      	adds	r3, r0, #1
 800398e:	4604      	mov	r4, r0
 8003990:	d155      	bne.n	8003a3e <_malloc_r+0xf2>
 8003992:	f8d8 4000 	ldr.w	r4, [r8]
 8003996:	4626      	mov	r6, r4
 8003998:	2e00      	cmp	r6, #0
 800399a:	d145      	bne.n	8003a28 <_malloc_r+0xdc>
 800399c:	2c00      	cmp	r4, #0
 800399e:	d048      	beq.n	8003a32 <_malloc_r+0xe6>
 80039a0:	6823      	ldr	r3, [r4, #0]
 80039a2:	4631      	mov	r1, r6
 80039a4:	4638      	mov	r0, r7
 80039a6:	eb04 0903 	add.w	r9, r4, r3
 80039aa:	f000 fe27 	bl	80045fc <_sbrk_r>
 80039ae:	4581      	cmp	r9, r0
 80039b0:	d13f      	bne.n	8003a32 <_malloc_r+0xe6>
 80039b2:	6821      	ldr	r1, [r4, #0]
 80039b4:	1a6d      	subs	r5, r5, r1
 80039b6:	4629      	mov	r1, r5
 80039b8:	4638      	mov	r0, r7
 80039ba:	f7ff ffa7 	bl	800390c <sbrk_aligned>
 80039be:	3001      	adds	r0, #1
 80039c0:	d037      	beq.n	8003a32 <_malloc_r+0xe6>
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	442b      	add	r3, r5
 80039c6:	6023      	str	r3, [r4, #0]
 80039c8:	f8d8 3000 	ldr.w	r3, [r8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d038      	beq.n	8003a42 <_malloc_r+0xf6>
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	42a2      	cmp	r2, r4
 80039d4:	d12b      	bne.n	8003a2e <_malloc_r+0xe2>
 80039d6:	2200      	movs	r2, #0
 80039d8:	605a      	str	r2, [r3, #4]
 80039da:	e00f      	b.n	80039fc <_malloc_r+0xb0>
 80039dc:	6822      	ldr	r2, [r4, #0]
 80039de:	1b52      	subs	r2, r2, r5
 80039e0:	d41f      	bmi.n	8003a22 <_malloc_r+0xd6>
 80039e2:	2a0b      	cmp	r2, #11
 80039e4:	d917      	bls.n	8003a16 <_malloc_r+0xca>
 80039e6:	1961      	adds	r1, r4, r5
 80039e8:	42a3      	cmp	r3, r4
 80039ea:	6025      	str	r5, [r4, #0]
 80039ec:	bf18      	it	ne
 80039ee:	6059      	strne	r1, [r3, #4]
 80039f0:	6863      	ldr	r3, [r4, #4]
 80039f2:	bf08      	it	eq
 80039f4:	f8c8 1000 	streq.w	r1, [r8]
 80039f8:	5162      	str	r2, [r4, r5]
 80039fa:	604b      	str	r3, [r1, #4]
 80039fc:	4638      	mov	r0, r7
 80039fe:	f104 060b 	add.w	r6, r4, #11
 8003a02:	f000 f829 	bl	8003a58 <__malloc_unlock>
 8003a06:	f026 0607 	bic.w	r6, r6, #7
 8003a0a:	1d23      	adds	r3, r4, #4
 8003a0c:	1af2      	subs	r2, r6, r3
 8003a0e:	d0ae      	beq.n	800396e <_malloc_r+0x22>
 8003a10:	1b9b      	subs	r3, r3, r6
 8003a12:	50a3      	str	r3, [r4, r2]
 8003a14:	e7ab      	b.n	800396e <_malloc_r+0x22>
 8003a16:	42a3      	cmp	r3, r4
 8003a18:	6862      	ldr	r2, [r4, #4]
 8003a1a:	d1dd      	bne.n	80039d8 <_malloc_r+0x8c>
 8003a1c:	f8c8 2000 	str.w	r2, [r8]
 8003a20:	e7ec      	b.n	80039fc <_malloc_r+0xb0>
 8003a22:	4623      	mov	r3, r4
 8003a24:	6864      	ldr	r4, [r4, #4]
 8003a26:	e7ac      	b.n	8003982 <_malloc_r+0x36>
 8003a28:	4634      	mov	r4, r6
 8003a2a:	6876      	ldr	r6, [r6, #4]
 8003a2c:	e7b4      	b.n	8003998 <_malloc_r+0x4c>
 8003a2e:	4613      	mov	r3, r2
 8003a30:	e7cc      	b.n	80039cc <_malloc_r+0x80>
 8003a32:	230c      	movs	r3, #12
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	4638      	mov	r0, r7
 8003a38:	f000 f80e 	bl	8003a58 <__malloc_unlock>
 8003a3c:	e797      	b.n	800396e <_malloc_r+0x22>
 8003a3e:	6025      	str	r5, [r4, #0]
 8003a40:	e7dc      	b.n	80039fc <_malloc_r+0xb0>
 8003a42:	605b      	str	r3, [r3, #4]
 8003a44:	deff      	udf	#255	; 0xff
 8003a46:	bf00      	nop
 8003a48:	20000374 	.word	0x20000374

08003a4c <__malloc_lock>:
 8003a4c:	4801      	ldr	r0, [pc, #4]	; (8003a54 <__malloc_lock+0x8>)
 8003a4e:	f000 be22 	b.w	8004696 <__retarget_lock_acquire_recursive>
 8003a52:	bf00      	nop
 8003a54:	200004bc 	.word	0x200004bc

08003a58 <__malloc_unlock>:
 8003a58:	4801      	ldr	r0, [pc, #4]	; (8003a60 <__malloc_unlock+0x8>)
 8003a5a:	f000 be1d 	b.w	8004698 <__retarget_lock_release_recursive>
 8003a5e:	bf00      	nop
 8003a60:	200004bc 	.word	0x200004bc

08003a64 <__cvt>:
 8003a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a68:	ec55 4b10 	vmov	r4, r5, d0
 8003a6c:	2d00      	cmp	r5, #0
 8003a6e:	460e      	mov	r6, r1
 8003a70:	4619      	mov	r1, r3
 8003a72:	462b      	mov	r3, r5
 8003a74:	bfbb      	ittet	lt
 8003a76:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003a7a:	461d      	movlt	r5, r3
 8003a7c:	2300      	movge	r3, #0
 8003a7e:	232d      	movlt	r3, #45	; 0x2d
 8003a80:	700b      	strb	r3, [r1, #0]
 8003a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a84:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003a88:	4691      	mov	r9, r2
 8003a8a:	f023 0820 	bic.w	r8, r3, #32
 8003a8e:	bfbc      	itt	lt
 8003a90:	4622      	movlt	r2, r4
 8003a92:	4614      	movlt	r4, r2
 8003a94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003a98:	d005      	beq.n	8003aa6 <__cvt+0x42>
 8003a9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003a9e:	d100      	bne.n	8003aa2 <__cvt+0x3e>
 8003aa0:	3601      	adds	r6, #1
 8003aa2:	2102      	movs	r1, #2
 8003aa4:	e000      	b.n	8003aa8 <__cvt+0x44>
 8003aa6:	2103      	movs	r1, #3
 8003aa8:	ab03      	add	r3, sp, #12
 8003aaa:	9301      	str	r3, [sp, #4]
 8003aac:	ab02      	add	r3, sp, #8
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	ec45 4b10 	vmov	d0, r4, r5
 8003ab4:	4653      	mov	r3, sl
 8003ab6:	4632      	mov	r2, r6
 8003ab8:	f000 fe7a 	bl	80047b0 <_dtoa_r>
 8003abc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003ac0:	4607      	mov	r7, r0
 8003ac2:	d102      	bne.n	8003aca <__cvt+0x66>
 8003ac4:	f019 0f01 	tst.w	r9, #1
 8003ac8:	d022      	beq.n	8003b10 <__cvt+0xac>
 8003aca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ace:	eb07 0906 	add.w	r9, r7, r6
 8003ad2:	d110      	bne.n	8003af6 <__cvt+0x92>
 8003ad4:	783b      	ldrb	r3, [r7, #0]
 8003ad6:	2b30      	cmp	r3, #48	; 0x30
 8003ad8:	d10a      	bne.n	8003af0 <__cvt+0x8c>
 8003ada:	2200      	movs	r2, #0
 8003adc:	2300      	movs	r3, #0
 8003ade:	4620      	mov	r0, r4
 8003ae0:	4629      	mov	r1, r5
 8003ae2:	f7fc fff1 	bl	8000ac8 <__aeabi_dcmpeq>
 8003ae6:	b918      	cbnz	r0, 8003af0 <__cvt+0x8c>
 8003ae8:	f1c6 0601 	rsb	r6, r6, #1
 8003aec:	f8ca 6000 	str.w	r6, [sl]
 8003af0:	f8da 3000 	ldr.w	r3, [sl]
 8003af4:	4499      	add	r9, r3
 8003af6:	2200      	movs	r2, #0
 8003af8:	2300      	movs	r3, #0
 8003afa:	4620      	mov	r0, r4
 8003afc:	4629      	mov	r1, r5
 8003afe:	f7fc ffe3 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b02:	b108      	cbz	r0, 8003b08 <__cvt+0xa4>
 8003b04:	f8cd 900c 	str.w	r9, [sp, #12]
 8003b08:	2230      	movs	r2, #48	; 0x30
 8003b0a:	9b03      	ldr	r3, [sp, #12]
 8003b0c:	454b      	cmp	r3, r9
 8003b0e:	d307      	bcc.n	8003b20 <__cvt+0xbc>
 8003b10:	9b03      	ldr	r3, [sp, #12]
 8003b12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b14:	1bdb      	subs	r3, r3, r7
 8003b16:	4638      	mov	r0, r7
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	b004      	add	sp, #16
 8003b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b20:	1c59      	adds	r1, r3, #1
 8003b22:	9103      	str	r1, [sp, #12]
 8003b24:	701a      	strb	r2, [r3, #0]
 8003b26:	e7f0      	b.n	8003b0a <__cvt+0xa6>

08003b28 <__exponent>:
 8003b28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2900      	cmp	r1, #0
 8003b2e:	bfb8      	it	lt
 8003b30:	4249      	neglt	r1, r1
 8003b32:	f803 2b02 	strb.w	r2, [r3], #2
 8003b36:	bfb4      	ite	lt
 8003b38:	222d      	movlt	r2, #45	; 0x2d
 8003b3a:	222b      	movge	r2, #43	; 0x2b
 8003b3c:	2909      	cmp	r1, #9
 8003b3e:	7042      	strb	r2, [r0, #1]
 8003b40:	dd2a      	ble.n	8003b98 <__exponent+0x70>
 8003b42:	f10d 0207 	add.w	r2, sp, #7
 8003b46:	4617      	mov	r7, r2
 8003b48:	260a      	movs	r6, #10
 8003b4a:	4694      	mov	ip, r2
 8003b4c:	fb91 f5f6 	sdiv	r5, r1, r6
 8003b50:	fb06 1415 	mls	r4, r6, r5, r1
 8003b54:	3430      	adds	r4, #48	; 0x30
 8003b56:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003b5a:	460c      	mov	r4, r1
 8003b5c:	2c63      	cmp	r4, #99	; 0x63
 8003b5e:	f102 32ff 	add.w	r2, r2, #4294967295
 8003b62:	4629      	mov	r1, r5
 8003b64:	dcf1      	bgt.n	8003b4a <__exponent+0x22>
 8003b66:	3130      	adds	r1, #48	; 0x30
 8003b68:	f1ac 0402 	sub.w	r4, ip, #2
 8003b6c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003b70:	1c41      	adds	r1, r0, #1
 8003b72:	4622      	mov	r2, r4
 8003b74:	42ba      	cmp	r2, r7
 8003b76:	d30a      	bcc.n	8003b8e <__exponent+0x66>
 8003b78:	f10d 0209 	add.w	r2, sp, #9
 8003b7c:	eba2 020c 	sub.w	r2, r2, ip
 8003b80:	42bc      	cmp	r4, r7
 8003b82:	bf88      	it	hi
 8003b84:	2200      	movhi	r2, #0
 8003b86:	4413      	add	r3, r2
 8003b88:	1a18      	subs	r0, r3, r0
 8003b8a:	b003      	add	sp, #12
 8003b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b8e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003b92:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003b96:	e7ed      	b.n	8003b74 <__exponent+0x4c>
 8003b98:	2330      	movs	r3, #48	; 0x30
 8003b9a:	3130      	adds	r1, #48	; 0x30
 8003b9c:	7083      	strb	r3, [r0, #2]
 8003b9e:	70c1      	strb	r1, [r0, #3]
 8003ba0:	1d03      	adds	r3, r0, #4
 8003ba2:	e7f1      	b.n	8003b88 <__exponent+0x60>

08003ba4 <_printf_float>:
 8003ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ba8:	ed2d 8b02 	vpush	{d8}
 8003bac:	b08d      	sub	sp, #52	; 0x34
 8003bae:	460c      	mov	r4, r1
 8003bb0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003bb4:	4616      	mov	r6, r2
 8003bb6:	461f      	mov	r7, r3
 8003bb8:	4605      	mov	r5, r0
 8003bba:	f000 fce7 	bl	800458c <_localeconv_r>
 8003bbe:	f8d0 a000 	ldr.w	sl, [r0]
 8003bc2:	4650      	mov	r0, sl
 8003bc4:	f7fc fb54 	bl	8000270 <strlen>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	930a      	str	r3, [sp, #40]	; 0x28
 8003bcc:	6823      	ldr	r3, [r4, #0]
 8003bce:	9305      	str	r3, [sp, #20]
 8003bd0:	f8d8 3000 	ldr.w	r3, [r8]
 8003bd4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003bd8:	3307      	adds	r3, #7
 8003bda:	f023 0307 	bic.w	r3, r3, #7
 8003bde:	f103 0208 	add.w	r2, r3, #8
 8003be2:	f8c8 2000 	str.w	r2, [r8]
 8003be6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003bea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003bee:	9307      	str	r3, [sp, #28]
 8003bf0:	f8cd 8018 	str.w	r8, [sp, #24]
 8003bf4:	ee08 0a10 	vmov	s16, r0
 8003bf8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003bfc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c00:	4b9e      	ldr	r3, [pc, #632]	; (8003e7c <_printf_float+0x2d8>)
 8003c02:	f04f 32ff 	mov.w	r2, #4294967295
 8003c06:	f7fc ff91 	bl	8000b2c <__aeabi_dcmpun>
 8003c0a:	bb88      	cbnz	r0, 8003c70 <_printf_float+0xcc>
 8003c0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c10:	4b9a      	ldr	r3, [pc, #616]	; (8003e7c <_printf_float+0x2d8>)
 8003c12:	f04f 32ff 	mov.w	r2, #4294967295
 8003c16:	f7fc ff6b 	bl	8000af0 <__aeabi_dcmple>
 8003c1a:	bb48      	cbnz	r0, 8003c70 <_printf_float+0xcc>
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2300      	movs	r3, #0
 8003c20:	4640      	mov	r0, r8
 8003c22:	4649      	mov	r1, r9
 8003c24:	f7fc ff5a 	bl	8000adc <__aeabi_dcmplt>
 8003c28:	b110      	cbz	r0, 8003c30 <_printf_float+0x8c>
 8003c2a:	232d      	movs	r3, #45	; 0x2d
 8003c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c30:	4a93      	ldr	r2, [pc, #588]	; (8003e80 <_printf_float+0x2dc>)
 8003c32:	4b94      	ldr	r3, [pc, #592]	; (8003e84 <_printf_float+0x2e0>)
 8003c34:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003c38:	bf94      	ite	ls
 8003c3a:	4690      	movls	r8, r2
 8003c3c:	4698      	movhi	r8, r3
 8003c3e:	2303      	movs	r3, #3
 8003c40:	6123      	str	r3, [r4, #16]
 8003c42:	9b05      	ldr	r3, [sp, #20]
 8003c44:	f023 0304 	bic.w	r3, r3, #4
 8003c48:	6023      	str	r3, [r4, #0]
 8003c4a:	f04f 0900 	mov.w	r9, #0
 8003c4e:	9700      	str	r7, [sp, #0]
 8003c50:	4633      	mov	r3, r6
 8003c52:	aa0b      	add	r2, sp, #44	; 0x2c
 8003c54:	4621      	mov	r1, r4
 8003c56:	4628      	mov	r0, r5
 8003c58:	f000 f9da 	bl	8004010 <_printf_common>
 8003c5c:	3001      	adds	r0, #1
 8003c5e:	f040 8090 	bne.w	8003d82 <_printf_float+0x1de>
 8003c62:	f04f 30ff 	mov.w	r0, #4294967295
 8003c66:	b00d      	add	sp, #52	; 0x34
 8003c68:	ecbd 8b02 	vpop	{d8}
 8003c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c70:	4642      	mov	r2, r8
 8003c72:	464b      	mov	r3, r9
 8003c74:	4640      	mov	r0, r8
 8003c76:	4649      	mov	r1, r9
 8003c78:	f7fc ff58 	bl	8000b2c <__aeabi_dcmpun>
 8003c7c:	b140      	cbz	r0, 8003c90 <_printf_float+0xec>
 8003c7e:	464b      	mov	r3, r9
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	bfbc      	itt	lt
 8003c84:	232d      	movlt	r3, #45	; 0x2d
 8003c86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003c8a:	4a7f      	ldr	r2, [pc, #508]	; (8003e88 <_printf_float+0x2e4>)
 8003c8c:	4b7f      	ldr	r3, [pc, #508]	; (8003e8c <_printf_float+0x2e8>)
 8003c8e:	e7d1      	b.n	8003c34 <_printf_float+0x90>
 8003c90:	6863      	ldr	r3, [r4, #4]
 8003c92:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003c96:	9206      	str	r2, [sp, #24]
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	d13f      	bne.n	8003d1c <_printf_float+0x178>
 8003c9c:	2306      	movs	r3, #6
 8003c9e:	6063      	str	r3, [r4, #4]
 8003ca0:	9b05      	ldr	r3, [sp, #20]
 8003ca2:	6861      	ldr	r1, [r4, #4]
 8003ca4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003ca8:	2300      	movs	r3, #0
 8003caa:	9303      	str	r3, [sp, #12]
 8003cac:	ab0a      	add	r3, sp, #40	; 0x28
 8003cae:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003cb2:	ab09      	add	r3, sp, #36	; 0x24
 8003cb4:	ec49 8b10 	vmov	d0, r8, r9
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	6022      	str	r2, [r4, #0]
 8003cbc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003cc0:	4628      	mov	r0, r5
 8003cc2:	f7ff fecf 	bl	8003a64 <__cvt>
 8003cc6:	9b06      	ldr	r3, [sp, #24]
 8003cc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003cca:	2b47      	cmp	r3, #71	; 0x47
 8003ccc:	4680      	mov	r8, r0
 8003cce:	d108      	bne.n	8003ce2 <_printf_float+0x13e>
 8003cd0:	1cc8      	adds	r0, r1, #3
 8003cd2:	db02      	blt.n	8003cda <_printf_float+0x136>
 8003cd4:	6863      	ldr	r3, [r4, #4]
 8003cd6:	4299      	cmp	r1, r3
 8003cd8:	dd41      	ble.n	8003d5e <_printf_float+0x1ba>
 8003cda:	f1ab 0302 	sub.w	r3, fp, #2
 8003cde:	fa5f fb83 	uxtb.w	fp, r3
 8003ce2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003ce6:	d820      	bhi.n	8003d2a <_printf_float+0x186>
 8003ce8:	3901      	subs	r1, #1
 8003cea:	465a      	mov	r2, fp
 8003cec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003cf0:	9109      	str	r1, [sp, #36]	; 0x24
 8003cf2:	f7ff ff19 	bl	8003b28 <__exponent>
 8003cf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003cf8:	1813      	adds	r3, r2, r0
 8003cfa:	2a01      	cmp	r2, #1
 8003cfc:	4681      	mov	r9, r0
 8003cfe:	6123      	str	r3, [r4, #16]
 8003d00:	dc02      	bgt.n	8003d08 <_printf_float+0x164>
 8003d02:	6822      	ldr	r2, [r4, #0]
 8003d04:	07d2      	lsls	r2, r2, #31
 8003d06:	d501      	bpl.n	8003d0c <_printf_float+0x168>
 8003d08:	3301      	adds	r3, #1
 8003d0a:	6123      	str	r3, [r4, #16]
 8003d0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d09c      	beq.n	8003c4e <_printf_float+0xaa>
 8003d14:	232d      	movs	r3, #45	; 0x2d
 8003d16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d1a:	e798      	b.n	8003c4e <_printf_float+0xaa>
 8003d1c:	9a06      	ldr	r2, [sp, #24]
 8003d1e:	2a47      	cmp	r2, #71	; 0x47
 8003d20:	d1be      	bne.n	8003ca0 <_printf_float+0xfc>
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1bc      	bne.n	8003ca0 <_printf_float+0xfc>
 8003d26:	2301      	movs	r3, #1
 8003d28:	e7b9      	b.n	8003c9e <_printf_float+0xfa>
 8003d2a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003d2e:	d118      	bne.n	8003d62 <_printf_float+0x1be>
 8003d30:	2900      	cmp	r1, #0
 8003d32:	6863      	ldr	r3, [r4, #4]
 8003d34:	dd0b      	ble.n	8003d4e <_printf_float+0x1aa>
 8003d36:	6121      	str	r1, [r4, #16]
 8003d38:	b913      	cbnz	r3, 8003d40 <_printf_float+0x19c>
 8003d3a:	6822      	ldr	r2, [r4, #0]
 8003d3c:	07d0      	lsls	r0, r2, #31
 8003d3e:	d502      	bpl.n	8003d46 <_printf_float+0x1a2>
 8003d40:	3301      	adds	r3, #1
 8003d42:	440b      	add	r3, r1
 8003d44:	6123      	str	r3, [r4, #16]
 8003d46:	65a1      	str	r1, [r4, #88]	; 0x58
 8003d48:	f04f 0900 	mov.w	r9, #0
 8003d4c:	e7de      	b.n	8003d0c <_printf_float+0x168>
 8003d4e:	b913      	cbnz	r3, 8003d56 <_printf_float+0x1b2>
 8003d50:	6822      	ldr	r2, [r4, #0]
 8003d52:	07d2      	lsls	r2, r2, #31
 8003d54:	d501      	bpl.n	8003d5a <_printf_float+0x1b6>
 8003d56:	3302      	adds	r3, #2
 8003d58:	e7f4      	b.n	8003d44 <_printf_float+0x1a0>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e7f2      	b.n	8003d44 <_printf_float+0x1a0>
 8003d5e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d64:	4299      	cmp	r1, r3
 8003d66:	db05      	blt.n	8003d74 <_printf_float+0x1d0>
 8003d68:	6823      	ldr	r3, [r4, #0]
 8003d6a:	6121      	str	r1, [r4, #16]
 8003d6c:	07d8      	lsls	r0, r3, #31
 8003d6e:	d5ea      	bpl.n	8003d46 <_printf_float+0x1a2>
 8003d70:	1c4b      	adds	r3, r1, #1
 8003d72:	e7e7      	b.n	8003d44 <_printf_float+0x1a0>
 8003d74:	2900      	cmp	r1, #0
 8003d76:	bfd4      	ite	le
 8003d78:	f1c1 0202 	rsble	r2, r1, #2
 8003d7c:	2201      	movgt	r2, #1
 8003d7e:	4413      	add	r3, r2
 8003d80:	e7e0      	b.n	8003d44 <_printf_float+0x1a0>
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	055a      	lsls	r2, r3, #21
 8003d86:	d407      	bmi.n	8003d98 <_printf_float+0x1f4>
 8003d88:	6923      	ldr	r3, [r4, #16]
 8003d8a:	4642      	mov	r2, r8
 8003d8c:	4631      	mov	r1, r6
 8003d8e:	4628      	mov	r0, r5
 8003d90:	47b8      	blx	r7
 8003d92:	3001      	adds	r0, #1
 8003d94:	d12c      	bne.n	8003df0 <_printf_float+0x24c>
 8003d96:	e764      	b.n	8003c62 <_printf_float+0xbe>
 8003d98:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003d9c:	f240 80e0 	bls.w	8003f60 <_printf_float+0x3bc>
 8003da0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003da4:	2200      	movs	r2, #0
 8003da6:	2300      	movs	r3, #0
 8003da8:	f7fc fe8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8003dac:	2800      	cmp	r0, #0
 8003dae:	d034      	beq.n	8003e1a <_printf_float+0x276>
 8003db0:	4a37      	ldr	r2, [pc, #220]	; (8003e90 <_printf_float+0x2ec>)
 8003db2:	2301      	movs	r3, #1
 8003db4:	4631      	mov	r1, r6
 8003db6:	4628      	mov	r0, r5
 8003db8:	47b8      	blx	r7
 8003dba:	3001      	adds	r0, #1
 8003dbc:	f43f af51 	beq.w	8003c62 <_printf_float+0xbe>
 8003dc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	db02      	blt.n	8003dce <_printf_float+0x22a>
 8003dc8:	6823      	ldr	r3, [r4, #0]
 8003dca:	07d8      	lsls	r0, r3, #31
 8003dcc:	d510      	bpl.n	8003df0 <_printf_float+0x24c>
 8003dce:	ee18 3a10 	vmov	r3, s16
 8003dd2:	4652      	mov	r2, sl
 8003dd4:	4631      	mov	r1, r6
 8003dd6:	4628      	mov	r0, r5
 8003dd8:	47b8      	blx	r7
 8003dda:	3001      	adds	r0, #1
 8003ddc:	f43f af41 	beq.w	8003c62 <_printf_float+0xbe>
 8003de0:	f04f 0800 	mov.w	r8, #0
 8003de4:	f104 091a 	add.w	r9, r4, #26
 8003de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003dea:	3b01      	subs	r3, #1
 8003dec:	4543      	cmp	r3, r8
 8003dee:	dc09      	bgt.n	8003e04 <_printf_float+0x260>
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	079b      	lsls	r3, r3, #30
 8003df4:	f100 8107 	bmi.w	8004006 <_printf_float+0x462>
 8003df8:	68e0      	ldr	r0, [r4, #12]
 8003dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003dfc:	4298      	cmp	r0, r3
 8003dfe:	bfb8      	it	lt
 8003e00:	4618      	movlt	r0, r3
 8003e02:	e730      	b.n	8003c66 <_printf_float+0xc2>
 8003e04:	2301      	movs	r3, #1
 8003e06:	464a      	mov	r2, r9
 8003e08:	4631      	mov	r1, r6
 8003e0a:	4628      	mov	r0, r5
 8003e0c:	47b8      	blx	r7
 8003e0e:	3001      	adds	r0, #1
 8003e10:	f43f af27 	beq.w	8003c62 <_printf_float+0xbe>
 8003e14:	f108 0801 	add.w	r8, r8, #1
 8003e18:	e7e6      	b.n	8003de8 <_printf_float+0x244>
 8003e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	dc39      	bgt.n	8003e94 <_printf_float+0x2f0>
 8003e20:	4a1b      	ldr	r2, [pc, #108]	; (8003e90 <_printf_float+0x2ec>)
 8003e22:	2301      	movs	r3, #1
 8003e24:	4631      	mov	r1, r6
 8003e26:	4628      	mov	r0, r5
 8003e28:	47b8      	blx	r7
 8003e2a:	3001      	adds	r0, #1
 8003e2c:	f43f af19 	beq.w	8003c62 <_printf_float+0xbe>
 8003e30:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003e34:	4313      	orrs	r3, r2
 8003e36:	d102      	bne.n	8003e3e <_printf_float+0x29a>
 8003e38:	6823      	ldr	r3, [r4, #0]
 8003e3a:	07d9      	lsls	r1, r3, #31
 8003e3c:	d5d8      	bpl.n	8003df0 <_printf_float+0x24c>
 8003e3e:	ee18 3a10 	vmov	r3, s16
 8003e42:	4652      	mov	r2, sl
 8003e44:	4631      	mov	r1, r6
 8003e46:	4628      	mov	r0, r5
 8003e48:	47b8      	blx	r7
 8003e4a:	3001      	adds	r0, #1
 8003e4c:	f43f af09 	beq.w	8003c62 <_printf_float+0xbe>
 8003e50:	f04f 0900 	mov.w	r9, #0
 8003e54:	f104 0a1a 	add.w	sl, r4, #26
 8003e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e5a:	425b      	negs	r3, r3
 8003e5c:	454b      	cmp	r3, r9
 8003e5e:	dc01      	bgt.n	8003e64 <_printf_float+0x2c0>
 8003e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e62:	e792      	b.n	8003d8a <_printf_float+0x1e6>
 8003e64:	2301      	movs	r3, #1
 8003e66:	4652      	mov	r2, sl
 8003e68:	4631      	mov	r1, r6
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	47b8      	blx	r7
 8003e6e:	3001      	adds	r0, #1
 8003e70:	f43f aef7 	beq.w	8003c62 <_printf_float+0xbe>
 8003e74:	f109 0901 	add.w	r9, r9, #1
 8003e78:	e7ee      	b.n	8003e58 <_printf_float+0x2b4>
 8003e7a:	bf00      	nop
 8003e7c:	7fefffff 	.word	0x7fefffff
 8003e80:	08007537 	.word	0x08007537
 8003e84:	0800753b 	.word	0x0800753b
 8003e88:	0800753f 	.word	0x0800753f
 8003e8c:	08007543 	.word	0x08007543
 8003e90:	08007547 	.word	0x08007547
 8003e94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	bfa8      	it	ge
 8003e9c:	461a      	movge	r2, r3
 8003e9e:	2a00      	cmp	r2, #0
 8003ea0:	4691      	mov	r9, r2
 8003ea2:	dc37      	bgt.n	8003f14 <_printf_float+0x370>
 8003ea4:	f04f 0b00 	mov.w	fp, #0
 8003ea8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003eac:	f104 021a 	add.w	r2, r4, #26
 8003eb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003eb2:	9305      	str	r3, [sp, #20]
 8003eb4:	eba3 0309 	sub.w	r3, r3, r9
 8003eb8:	455b      	cmp	r3, fp
 8003eba:	dc33      	bgt.n	8003f24 <_printf_float+0x380>
 8003ebc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	db3b      	blt.n	8003f3c <_printf_float+0x398>
 8003ec4:	6823      	ldr	r3, [r4, #0]
 8003ec6:	07da      	lsls	r2, r3, #31
 8003ec8:	d438      	bmi.n	8003f3c <_printf_float+0x398>
 8003eca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003ece:	eba2 0903 	sub.w	r9, r2, r3
 8003ed2:	9b05      	ldr	r3, [sp, #20]
 8003ed4:	1ad2      	subs	r2, r2, r3
 8003ed6:	4591      	cmp	r9, r2
 8003ed8:	bfa8      	it	ge
 8003eda:	4691      	movge	r9, r2
 8003edc:	f1b9 0f00 	cmp.w	r9, #0
 8003ee0:	dc35      	bgt.n	8003f4e <_printf_float+0x3aa>
 8003ee2:	f04f 0800 	mov.w	r8, #0
 8003ee6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003eea:	f104 0a1a 	add.w	sl, r4, #26
 8003eee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ef2:	1a9b      	subs	r3, r3, r2
 8003ef4:	eba3 0309 	sub.w	r3, r3, r9
 8003ef8:	4543      	cmp	r3, r8
 8003efa:	f77f af79 	ble.w	8003df0 <_printf_float+0x24c>
 8003efe:	2301      	movs	r3, #1
 8003f00:	4652      	mov	r2, sl
 8003f02:	4631      	mov	r1, r6
 8003f04:	4628      	mov	r0, r5
 8003f06:	47b8      	blx	r7
 8003f08:	3001      	adds	r0, #1
 8003f0a:	f43f aeaa 	beq.w	8003c62 <_printf_float+0xbe>
 8003f0e:	f108 0801 	add.w	r8, r8, #1
 8003f12:	e7ec      	b.n	8003eee <_printf_float+0x34a>
 8003f14:	4613      	mov	r3, r2
 8003f16:	4631      	mov	r1, r6
 8003f18:	4642      	mov	r2, r8
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	47b8      	blx	r7
 8003f1e:	3001      	adds	r0, #1
 8003f20:	d1c0      	bne.n	8003ea4 <_printf_float+0x300>
 8003f22:	e69e      	b.n	8003c62 <_printf_float+0xbe>
 8003f24:	2301      	movs	r3, #1
 8003f26:	4631      	mov	r1, r6
 8003f28:	4628      	mov	r0, r5
 8003f2a:	9205      	str	r2, [sp, #20]
 8003f2c:	47b8      	blx	r7
 8003f2e:	3001      	adds	r0, #1
 8003f30:	f43f ae97 	beq.w	8003c62 <_printf_float+0xbe>
 8003f34:	9a05      	ldr	r2, [sp, #20]
 8003f36:	f10b 0b01 	add.w	fp, fp, #1
 8003f3a:	e7b9      	b.n	8003eb0 <_printf_float+0x30c>
 8003f3c:	ee18 3a10 	vmov	r3, s16
 8003f40:	4652      	mov	r2, sl
 8003f42:	4631      	mov	r1, r6
 8003f44:	4628      	mov	r0, r5
 8003f46:	47b8      	blx	r7
 8003f48:	3001      	adds	r0, #1
 8003f4a:	d1be      	bne.n	8003eca <_printf_float+0x326>
 8003f4c:	e689      	b.n	8003c62 <_printf_float+0xbe>
 8003f4e:	9a05      	ldr	r2, [sp, #20]
 8003f50:	464b      	mov	r3, r9
 8003f52:	4442      	add	r2, r8
 8003f54:	4631      	mov	r1, r6
 8003f56:	4628      	mov	r0, r5
 8003f58:	47b8      	blx	r7
 8003f5a:	3001      	adds	r0, #1
 8003f5c:	d1c1      	bne.n	8003ee2 <_printf_float+0x33e>
 8003f5e:	e680      	b.n	8003c62 <_printf_float+0xbe>
 8003f60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f62:	2a01      	cmp	r2, #1
 8003f64:	dc01      	bgt.n	8003f6a <_printf_float+0x3c6>
 8003f66:	07db      	lsls	r3, r3, #31
 8003f68:	d53a      	bpl.n	8003fe0 <_printf_float+0x43c>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	4642      	mov	r2, r8
 8003f6e:	4631      	mov	r1, r6
 8003f70:	4628      	mov	r0, r5
 8003f72:	47b8      	blx	r7
 8003f74:	3001      	adds	r0, #1
 8003f76:	f43f ae74 	beq.w	8003c62 <_printf_float+0xbe>
 8003f7a:	ee18 3a10 	vmov	r3, s16
 8003f7e:	4652      	mov	r2, sl
 8003f80:	4631      	mov	r1, r6
 8003f82:	4628      	mov	r0, r5
 8003f84:	47b8      	blx	r7
 8003f86:	3001      	adds	r0, #1
 8003f88:	f43f ae6b 	beq.w	8003c62 <_printf_float+0xbe>
 8003f8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003f90:	2200      	movs	r2, #0
 8003f92:	2300      	movs	r3, #0
 8003f94:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003f98:	f7fc fd96 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f9c:	b9d8      	cbnz	r0, 8003fd6 <_printf_float+0x432>
 8003f9e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003fa2:	f108 0201 	add.w	r2, r8, #1
 8003fa6:	4631      	mov	r1, r6
 8003fa8:	4628      	mov	r0, r5
 8003faa:	47b8      	blx	r7
 8003fac:	3001      	adds	r0, #1
 8003fae:	d10e      	bne.n	8003fce <_printf_float+0x42a>
 8003fb0:	e657      	b.n	8003c62 <_printf_float+0xbe>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	4652      	mov	r2, sl
 8003fb6:	4631      	mov	r1, r6
 8003fb8:	4628      	mov	r0, r5
 8003fba:	47b8      	blx	r7
 8003fbc:	3001      	adds	r0, #1
 8003fbe:	f43f ae50 	beq.w	8003c62 <_printf_float+0xbe>
 8003fc2:	f108 0801 	add.w	r8, r8, #1
 8003fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	4543      	cmp	r3, r8
 8003fcc:	dcf1      	bgt.n	8003fb2 <_printf_float+0x40e>
 8003fce:	464b      	mov	r3, r9
 8003fd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003fd4:	e6da      	b.n	8003d8c <_printf_float+0x1e8>
 8003fd6:	f04f 0800 	mov.w	r8, #0
 8003fda:	f104 0a1a 	add.w	sl, r4, #26
 8003fde:	e7f2      	b.n	8003fc6 <_printf_float+0x422>
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	4642      	mov	r2, r8
 8003fe4:	e7df      	b.n	8003fa6 <_printf_float+0x402>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	464a      	mov	r2, r9
 8003fea:	4631      	mov	r1, r6
 8003fec:	4628      	mov	r0, r5
 8003fee:	47b8      	blx	r7
 8003ff0:	3001      	adds	r0, #1
 8003ff2:	f43f ae36 	beq.w	8003c62 <_printf_float+0xbe>
 8003ff6:	f108 0801 	add.w	r8, r8, #1
 8003ffa:	68e3      	ldr	r3, [r4, #12]
 8003ffc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ffe:	1a5b      	subs	r3, r3, r1
 8004000:	4543      	cmp	r3, r8
 8004002:	dcf0      	bgt.n	8003fe6 <_printf_float+0x442>
 8004004:	e6f8      	b.n	8003df8 <_printf_float+0x254>
 8004006:	f04f 0800 	mov.w	r8, #0
 800400a:	f104 0919 	add.w	r9, r4, #25
 800400e:	e7f4      	b.n	8003ffa <_printf_float+0x456>

08004010 <_printf_common>:
 8004010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004014:	4616      	mov	r6, r2
 8004016:	4699      	mov	r9, r3
 8004018:	688a      	ldr	r2, [r1, #8]
 800401a:	690b      	ldr	r3, [r1, #16]
 800401c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004020:	4293      	cmp	r3, r2
 8004022:	bfb8      	it	lt
 8004024:	4613      	movlt	r3, r2
 8004026:	6033      	str	r3, [r6, #0]
 8004028:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800402c:	4607      	mov	r7, r0
 800402e:	460c      	mov	r4, r1
 8004030:	b10a      	cbz	r2, 8004036 <_printf_common+0x26>
 8004032:	3301      	adds	r3, #1
 8004034:	6033      	str	r3, [r6, #0]
 8004036:	6823      	ldr	r3, [r4, #0]
 8004038:	0699      	lsls	r1, r3, #26
 800403a:	bf42      	ittt	mi
 800403c:	6833      	ldrmi	r3, [r6, #0]
 800403e:	3302      	addmi	r3, #2
 8004040:	6033      	strmi	r3, [r6, #0]
 8004042:	6825      	ldr	r5, [r4, #0]
 8004044:	f015 0506 	ands.w	r5, r5, #6
 8004048:	d106      	bne.n	8004058 <_printf_common+0x48>
 800404a:	f104 0a19 	add.w	sl, r4, #25
 800404e:	68e3      	ldr	r3, [r4, #12]
 8004050:	6832      	ldr	r2, [r6, #0]
 8004052:	1a9b      	subs	r3, r3, r2
 8004054:	42ab      	cmp	r3, r5
 8004056:	dc26      	bgt.n	80040a6 <_printf_common+0x96>
 8004058:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800405c:	1e13      	subs	r3, r2, #0
 800405e:	6822      	ldr	r2, [r4, #0]
 8004060:	bf18      	it	ne
 8004062:	2301      	movne	r3, #1
 8004064:	0692      	lsls	r2, r2, #26
 8004066:	d42b      	bmi.n	80040c0 <_printf_common+0xb0>
 8004068:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800406c:	4649      	mov	r1, r9
 800406e:	4638      	mov	r0, r7
 8004070:	47c0      	blx	r8
 8004072:	3001      	adds	r0, #1
 8004074:	d01e      	beq.n	80040b4 <_printf_common+0xa4>
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	6922      	ldr	r2, [r4, #16]
 800407a:	f003 0306 	and.w	r3, r3, #6
 800407e:	2b04      	cmp	r3, #4
 8004080:	bf02      	ittt	eq
 8004082:	68e5      	ldreq	r5, [r4, #12]
 8004084:	6833      	ldreq	r3, [r6, #0]
 8004086:	1aed      	subeq	r5, r5, r3
 8004088:	68a3      	ldr	r3, [r4, #8]
 800408a:	bf0c      	ite	eq
 800408c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004090:	2500      	movne	r5, #0
 8004092:	4293      	cmp	r3, r2
 8004094:	bfc4      	itt	gt
 8004096:	1a9b      	subgt	r3, r3, r2
 8004098:	18ed      	addgt	r5, r5, r3
 800409a:	2600      	movs	r6, #0
 800409c:	341a      	adds	r4, #26
 800409e:	42b5      	cmp	r5, r6
 80040a0:	d11a      	bne.n	80040d8 <_printf_common+0xc8>
 80040a2:	2000      	movs	r0, #0
 80040a4:	e008      	b.n	80040b8 <_printf_common+0xa8>
 80040a6:	2301      	movs	r3, #1
 80040a8:	4652      	mov	r2, sl
 80040aa:	4649      	mov	r1, r9
 80040ac:	4638      	mov	r0, r7
 80040ae:	47c0      	blx	r8
 80040b0:	3001      	adds	r0, #1
 80040b2:	d103      	bne.n	80040bc <_printf_common+0xac>
 80040b4:	f04f 30ff 	mov.w	r0, #4294967295
 80040b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040bc:	3501      	adds	r5, #1
 80040be:	e7c6      	b.n	800404e <_printf_common+0x3e>
 80040c0:	18e1      	adds	r1, r4, r3
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	2030      	movs	r0, #48	; 0x30
 80040c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040ca:	4422      	add	r2, r4
 80040cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040d4:	3302      	adds	r3, #2
 80040d6:	e7c7      	b.n	8004068 <_printf_common+0x58>
 80040d8:	2301      	movs	r3, #1
 80040da:	4622      	mov	r2, r4
 80040dc:	4649      	mov	r1, r9
 80040de:	4638      	mov	r0, r7
 80040e0:	47c0      	blx	r8
 80040e2:	3001      	adds	r0, #1
 80040e4:	d0e6      	beq.n	80040b4 <_printf_common+0xa4>
 80040e6:	3601      	adds	r6, #1
 80040e8:	e7d9      	b.n	800409e <_printf_common+0x8e>
	...

080040ec <_printf_i>:
 80040ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040f0:	7e0f      	ldrb	r7, [r1, #24]
 80040f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040f4:	2f78      	cmp	r7, #120	; 0x78
 80040f6:	4691      	mov	r9, r2
 80040f8:	4680      	mov	r8, r0
 80040fa:	460c      	mov	r4, r1
 80040fc:	469a      	mov	sl, r3
 80040fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004102:	d807      	bhi.n	8004114 <_printf_i+0x28>
 8004104:	2f62      	cmp	r7, #98	; 0x62
 8004106:	d80a      	bhi.n	800411e <_printf_i+0x32>
 8004108:	2f00      	cmp	r7, #0
 800410a:	f000 80d4 	beq.w	80042b6 <_printf_i+0x1ca>
 800410e:	2f58      	cmp	r7, #88	; 0x58
 8004110:	f000 80c0 	beq.w	8004294 <_printf_i+0x1a8>
 8004114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004118:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800411c:	e03a      	b.n	8004194 <_printf_i+0xa8>
 800411e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004122:	2b15      	cmp	r3, #21
 8004124:	d8f6      	bhi.n	8004114 <_printf_i+0x28>
 8004126:	a101      	add	r1, pc, #4	; (adr r1, 800412c <_printf_i+0x40>)
 8004128:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800412c:	08004185 	.word	0x08004185
 8004130:	08004199 	.word	0x08004199
 8004134:	08004115 	.word	0x08004115
 8004138:	08004115 	.word	0x08004115
 800413c:	08004115 	.word	0x08004115
 8004140:	08004115 	.word	0x08004115
 8004144:	08004199 	.word	0x08004199
 8004148:	08004115 	.word	0x08004115
 800414c:	08004115 	.word	0x08004115
 8004150:	08004115 	.word	0x08004115
 8004154:	08004115 	.word	0x08004115
 8004158:	0800429d 	.word	0x0800429d
 800415c:	080041c5 	.word	0x080041c5
 8004160:	08004257 	.word	0x08004257
 8004164:	08004115 	.word	0x08004115
 8004168:	08004115 	.word	0x08004115
 800416c:	080042bf 	.word	0x080042bf
 8004170:	08004115 	.word	0x08004115
 8004174:	080041c5 	.word	0x080041c5
 8004178:	08004115 	.word	0x08004115
 800417c:	08004115 	.word	0x08004115
 8004180:	0800425f 	.word	0x0800425f
 8004184:	682b      	ldr	r3, [r5, #0]
 8004186:	1d1a      	adds	r2, r3, #4
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	602a      	str	r2, [r5, #0]
 800418c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004190:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004194:	2301      	movs	r3, #1
 8004196:	e09f      	b.n	80042d8 <_printf_i+0x1ec>
 8004198:	6820      	ldr	r0, [r4, #0]
 800419a:	682b      	ldr	r3, [r5, #0]
 800419c:	0607      	lsls	r7, r0, #24
 800419e:	f103 0104 	add.w	r1, r3, #4
 80041a2:	6029      	str	r1, [r5, #0]
 80041a4:	d501      	bpl.n	80041aa <_printf_i+0xbe>
 80041a6:	681e      	ldr	r6, [r3, #0]
 80041a8:	e003      	b.n	80041b2 <_printf_i+0xc6>
 80041aa:	0646      	lsls	r6, r0, #25
 80041ac:	d5fb      	bpl.n	80041a6 <_printf_i+0xba>
 80041ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80041b2:	2e00      	cmp	r6, #0
 80041b4:	da03      	bge.n	80041be <_printf_i+0xd2>
 80041b6:	232d      	movs	r3, #45	; 0x2d
 80041b8:	4276      	negs	r6, r6
 80041ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041be:	485a      	ldr	r0, [pc, #360]	; (8004328 <_printf_i+0x23c>)
 80041c0:	230a      	movs	r3, #10
 80041c2:	e012      	b.n	80041ea <_printf_i+0xfe>
 80041c4:	682b      	ldr	r3, [r5, #0]
 80041c6:	6820      	ldr	r0, [r4, #0]
 80041c8:	1d19      	adds	r1, r3, #4
 80041ca:	6029      	str	r1, [r5, #0]
 80041cc:	0605      	lsls	r5, r0, #24
 80041ce:	d501      	bpl.n	80041d4 <_printf_i+0xe8>
 80041d0:	681e      	ldr	r6, [r3, #0]
 80041d2:	e002      	b.n	80041da <_printf_i+0xee>
 80041d4:	0641      	lsls	r1, r0, #25
 80041d6:	d5fb      	bpl.n	80041d0 <_printf_i+0xe4>
 80041d8:	881e      	ldrh	r6, [r3, #0]
 80041da:	4853      	ldr	r0, [pc, #332]	; (8004328 <_printf_i+0x23c>)
 80041dc:	2f6f      	cmp	r7, #111	; 0x6f
 80041de:	bf0c      	ite	eq
 80041e0:	2308      	moveq	r3, #8
 80041e2:	230a      	movne	r3, #10
 80041e4:	2100      	movs	r1, #0
 80041e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041ea:	6865      	ldr	r5, [r4, #4]
 80041ec:	60a5      	str	r5, [r4, #8]
 80041ee:	2d00      	cmp	r5, #0
 80041f0:	bfa2      	ittt	ge
 80041f2:	6821      	ldrge	r1, [r4, #0]
 80041f4:	f021 0104 	bicge.w	r1, r1, #4
 80041f8:	6021      	strge	r1, [r4, #0]
 80041fa:	b90e      	cbnz	r6, 8004200 <_printf_i+0x114>
 80041fc:	2d00      	cmp	r5, #0
 80041fe:	d04b      	beq.n	8004298 <_printf_i+0x1ac>
 8004200:	4615      	mov	r5, r2
 8004202:	fbb6 f1f3 	udiv	r1, r6, r3
 8004206:	fb03 6711 	mls	r7, r3, r1, r6
 800420a:	5dc7      	ldrb	r7, [r0, r7]
 800420c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004210:	4637      	mov	r7, r6
 8004212:	42bb      	cmp	r3, r7
 8004214:	460e      	mov	r6, r1
 8004216:	d9f4      	bls.n	8004202 <_printf_i+0x116>
 8004218:	2b08      	cmp	r3, #8
 800421a:	d10b      	bne.n	8004234 <_printf_i+0x148>
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	07de      	lsls	r6, r3, #31
 8004220:	d508      	bpl.n	8004234 <_printf_i+0x148>
 8004222:	6923      	ldr	r3, [r4, #16]
 8004224:	6861      	ldr	r1, [r4, #4]
 8004226:	4299      	cmp	r1, r3
 8004228:	bfde      	ittt	le
 800422a:	2330      	movle	r3, #48	; 0x30
 800422c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004230:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004234:	1b52      	subs	r2, r2, r5
 8004236:	6122      	str	r2, [r4, #16]
 8004238:	f8cd a000 	str.w	sl, [sp]
 800423c:	464b      	mov	r3, r9
 800423e:	aa03      	add	r2, sp, #12
 8004240:	4621      	mov	r1, r4
 8004242:	4640      	mov	r0, r8
 8004244:	f7ff fee4 	bl	8004010 <_printf_common>
 8004248:	3001      	adds	r0, #1
 800424a:	d14a      	bne.n	80042e2 <_printf_i+0x1f6>
 800424c:	f04f 30ff 	mov.w	r0, #4294967295
 8004250:	b004      	add	sp, #16
 8004252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004256:	6823      	ldr	r3, [r4, #0]
 8004258:	f043 0320 	orr.w	r3, r3, #32
 800425c:	6023      	str	r3, [r4, #0]
 800425e:	4833      	ldr	r0, [pc, #204]	; (800432c <_printf_i+0x240>)
 8004260:	2778      	movs	r7, #120	; 0x78
 8004262:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	6829      	ldr	r1, [r5, #0]
 800426a:	061f      	lsls	r7, r3, #24
 800426c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004270:	d402      	bmi.n	8004278 <_printf_i+0x18c>
 8004272:	065f      	lsls	r7, r3, #25
 8004274:	bf48      	it	mi
 8004276:	b2b6      	uxthmi	r6, r6
 8004278:	07df      	lsls	r7, r3, #31
 800427a:	bf48      	it	mi
 800427c:	f043 0320 	orrmi.w	r3, r3, #32
 8004280:	6029      	str	r1, [r5, #0]
 8004282:	bf48      	it	mi
 8004284:	6023      	strmi	r3, [r4, #0]
 8004286:	b91e      	cbnz	r6, 8004290 <_printf_i+0x1a4>
 8004288:	6823      	ldr	r3, [r4, #0]
 800428a:	f023 0320 	bic.w	r3, r3, #32
 800428e:	6023      	str	r3, [r4, #0]
 8004290:	2310      	movs	r3, #16
 8004292:	e7a7      	b.n	80041e4 <_printf_i+0xf8>
 8004294:	4824      	ldr	r0, [pc, #144]	; (8004328 <_printf_i+0x23c>)
 8004296:	e7e4      	b.n	8004262 <_printf_i+0x176>
 8004298:	4615      	mov	r5, r2
 800429a:	e7bd      	b.n	8004218 <_printf_i+0x12c>
 800429c:	682b      	ldr	r3, [r5, #0]
 800429e:	6826      	ldr	r6, [r4, #0]
 80042a0:	6961      	ldr	r1, [r4, #20]
 80042a2:	1d18      	adds	r0, r3, #4
 80042a4:	6028      	str	r0, [r5, #0]
 80042a6:	0635      	lsls	r5, r6, #24
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	d501      	bpl.n	80042b0 <_printf_i+0x1c4>
 80042ac:	6019      	str	r1, [r3, #0]
 80042ae:	e002      	b.n	80042b6 <_printf_i+0x1ca>
 80042b0:	0670      	lsls	r0, r6, #25
 80042b2:	d5fb      	bpl.n	80042ac <_printf_i+0x1c0>
 80042b4:	8019      	strh	r1, [r3, #0]
 80042b6:	2300      	movs	r3, #0
 80042b8:	6123      	str	r3, [r4, #16]
 80042ba:	4615      	mov	r5, r2
 80042bc:	e7bc      	b.n	8004238 <_printf_i+0x14c>
 80042be:	682b      	ldr	r3, [r5, #0]
 80042c0:	1d1a      	adds	r2, r3, #4
 80042c2:	602a      	str	r2, [r5, #0]
 80042c4:	681d      	ldr	r5, [r3, #0]
 80042c6:	6862      	ldr	r2, [r4, #4]
 80042c8:	2100      	movs	r1, #0
 80042ca:	4628      	mov	r0, r5
 80042cc:	f7fb ff80 	bl	80001d0 <memchr>
 80042d0:	b108      	cbz	r0, 80042d6 <_printf_i+0x1ea>
 80042d2:	1b40      	subs	r0, r0, r5
 80042d4:	6060      	str	r0, [r4, #4]
 80042d6:	6863      	ldr	r3, [r4, #4]
 80042d8:	6123      	str	r3, [r4, #16]
 80042da:	2300      	movs	r3, #0
 80042dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042e0:	e7aa      	b.n	8004238 <_printf_i+0x14c>
 80042e2:	6923      	ldr	r3, [r4, #16]
 80042e4:	462a      	mov	r2, r5
 80042e6:	4649      	mov	r1, r9
 80042e8:	4640      	mov	r0, r8
 80042ea:	47d0      	blx	sl
 80042ec:	3001      	adds	r0, #1
 80042ee:	d0ad      	beq.n	800424c <_printf_i+0x160>
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	079b      	lsls	r3, r3, #30
 80042f4:	d413      	bmi.n	800431e <_printf_i+0x232>
 80042f6:	68e0      	ldr	r0, [r4, #12]
 80042f8:	9b03      	ldr	r3, [sp, #12]
 80042fa:	4298      	cmp	r0, r3
 80042fc:	bfb8      	it	lt
 80042fe:	4618      	movlt	r0, r3
 8004300:	e7a6      	b.n	8004250 <_printf_i+0x164>
 8004302:	2301      	movs	r3, #1
 8004304:	4632      	mov	r2, r6
 8004306:	4649      	mov	r1, r9
 8004308:	4640      	mov	r0, r8
 800430a:	47d0      	blx	sl
 800430c:	3001      	adds	r0, #1
 800430e:	d09d      	beq.n	800424c <_printf_i+0x160>
 8004310:	3501      	adds	r5, #1
 8004312:	68e3      	ldr	r3, [r4, #12]
 8004314:	9903      	ldr	r1, [sp, #12]
 8004316:	1a5b      	subs	r3, r3, r1
 8004318:	42ab      	cmp	r3, r5
 800431a:	dcf2      	bgt.n	8004302 <_printf_i+0x216>
 800431c:	e7eb      	b.n	80042f6 <_printf_i+0x20a>
 800431e:	2500      	movs	r5, #0
 8004320:	f104 0619 	add.w	r6, r4, #25
 8004324:	e7f5      	b.n	8004312 <_printf_i+0x226>
 8004326:	bf00      	nop
 8004328:	08007549 	.word	0x08007549
 800432c:	0800755a 	.word	0x0800755a

08004330 <std>:
 8004330:	2300      	movs	r3, #0
 8004332:	b510      	push	{r4, lr}
 8004334:	4604      	mov	r4, r0
 8004336:	e9c0 3300 	strd	r3, r3, [r0]
 800433a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800433e:	6083      	str	r3, [r0, #8]
 8004340:	8181      	strh	r1, [r0, #12]
 8004342:	6643      	str	r3, [r0, #100]	; 0x64
 8004344:	81c2      	strh	r2, [r0, #14]
 8004346:	6183      	str	r3, [r0, #24]
 8004348:	4619      	mov	r1, r3
 800434a:	2208      	movs	r2, #8
 800434c:	305c      	adds	r0, #92	; 0x5c
 800434e:	f000 f914 	bl	800457a <memset>
 8004352:	4b0d      	ldr	r3, [pc, #52]	; (8004388 <std+0x58>)
 8004354:	6263      	str	r3, [r4, #36]	; 0x24
 8004356:	4b0d      	ldr	r3, [pc, #52]	; (800438c <std+0x5c>)
 8004358:	62a3      	str	r3, [r4, #40]	; 0x28
 800435a:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <std+0x60>)
 800435c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800435e:	4b0d      	ldr	r3, [pc, #52]	; (8004394 <std+0x64>)
 8004360:	6323      	str	r3, [r4, #48]	; 0x30
 8004362:	4b0d      	ldr	r3, [pc, #52]	; (8004398 <std+0x68>)
 8004364:	6224      	str	r4, [r4, #32]
 8004366:	429c      	cmp	r4, r3
 8004368:	d006      	beq.n	8004378 <std+0x48>
 800436a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800436e:	4294      	cmp	r4, r2
 8004370:	d002      	beq.n	8004378 <std+0x48>
 8004372:	33d0      	adds	r3, #208	; 0xd0
 8004374:	429c      	cmp	r4, r3
 8004376:	d105      	bne.n	8004384 <std+0x54>
 8004378:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800437c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004380:	f000 b988 	b.w	8004694 <__retarget_lock_init_recursive>
 8004384:	bd10      	pop	{r4, pc}
 8004386:	bf00      	nop
 8004388:	080044f5 	.word	0x080044f5
 800438c:	08004517 	.word	0x08004517
 8004390:	0800454f 	.word	0x0800454f
 8004394:	08004573 	.word	0x08004573
 8004398:	2000037c 	.word	0x2000037c

0800439c <stdio_exit_handler>:
 800439c:	4a02      	ldr	r2, [pc, #8]	; (80043a8 <stdio_exit_handler+0xc>)
 800439e:	4903      	ldr	r1, [pc, #12]	; (80043ac <stdio_exit_handler+0x10>)
 80043a0:	4803      	ldr	r0, [pc, #12]	; (80043b0 <stdio_exit_handler+0x14>)
 80043a2:	f000 b869 	b.w	8004478 <_fwalk_sglue>
 80043a6:	bf00      	nop
 80043a8:	20000088 	.word	0x20000088
 80043ac:	08005ee1 	.word	0x08005ee1
 80043b0:	20000094 	.word	0x20000094

080043b4 <cleanup_stdio>:
 80043b4:	6841      	ldr	r1, [r0, #4]
 80043b6:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <cleanup_stdio+0x34>)
 80043b8:	4299      	cmp	r1, r3
 80043ba:	b510      	push	{r4, lr}
 80043bc:	4604      	mov	r4, r0
 80043be:	d001      	beq.n	80043c4 <cleanup_stdio+0x10>
 80043c0:	f001 fd8e 	bl	8005ee0 <_fflush_r>
 80043c4:	68a1      	ldr	r1, [r4, #8]
 80043c6:	4b09      	ldr	r3, [pc, #36]	; (80043ec <cleanup_stdio+0x38>)
 80043c8:	4299      	cmp	r1, r3
 80043ca:	d002      	beq.n	80043d2 <cleanup_stdio+0x1e>
 80043cc:	4620      	mov	r0, r4
 80043ce:	f001 fd87 	bl	8005ee0 <_fflush_r>
 80043d2:	68e1      	ldr	r1, [r4, #12]
 80043d4:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <cleanup_stdio+0x3c>)
 80043d6:	4299      	cmp	r1, r3
 80043d8:	d004      	beq.n	80043e4 <cleanup_stdio+0x30>
 80043da:	4620      	mov	r0, r4
 80043dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043e0:	f001 bd7e 	b.w	8005ee0 <_fflush_r>
 80043e4:	bd10      	pop	{r4, pc}
 80043e6:	bf00      	nop
 80043e8:	2000037c 	.word	0x2000037c
 80043ec:	200003e4 	.word	0x200003e4
 80043f0:	2000044c 	.word	0x2000044c

080043f4 <global_stdio_init.part.0>:
 80043f4:	b510      	push	{r4, lr}
 80043f6:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <global_stdio_init.part.0+0x30>)
 80043f8:	4c0b      	ldr	r4, [pc, #44]	; (8004428 <global_stdio_init.part.0+0x34>)
 80043fa:	4a0c      	ldr	r2, [pc, #48]	; (800442c <global_stdio_init.part.0+0x38>)
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	4620      	mov	r0, r4
 8004400:	2200      	movs	r2, #0
 8004402:	2104      	movs	r1, #4
 8004404:	f7ff ff94 	bl	8004330 <std>
 8004408:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800440c:	2201      	movs	r2, #1
 800440e:	2109      	movs	r1, #9
 8004410:	f7ff ff8e 	bl	8004330 <std>
 8004414:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004418:	2202      	movs	r2, #2
 800441a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800441e:	2112      	movs	r1, #18
 8004420:	f7ff bf86 	b.w	8004330 <std>
 8004424:	200004b4 	.word	0x200004b4
 8004428:	2000037c 	.word	0x2000037c
 800442c:	0800439d 	.word	0x0800439d

08004430 <__sfp_lock_acquire>:
 8004430:	4801      	ldr	r0, [pc, #4]	; (8004438 <__sfp_lock_acquire+0x8>)
 8004432:	f000 b930 	b.w	8004696 <__retarget_lock_acquire_recursive>
 8004436:	bf00      	nop
 8004438:	200004bd 	.word	0x200004bd

0800443c <__sfp_lock_release>:
 800443c:	4801      	ldr	r0, [pc, #4]	; (8004444 <__sfp_lock_release+0x8>)
 800443e:	f000 b92b 	b.w	8004698 <__retarget_lock_release_recursive>
 8004442:	bf00      	nop
 8004444:	200004bd 	.word	0x200004bd

08004448 <__sinit>:
 8004448:	b510      	push	{r4, lr}
 800444a:	4604      	mov	r4, r0
 800444c:	f7ff fff0 	bl	8004430 <__sfp_lock_acquire>
 8004450:	6a23      	ldr	r3, [r4, #32]
 8004452:	b11b      	cbz	r3, 800445c <__sinit+0x14>
 8004454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004458:	f7ff bff0 	b.w	800443c <__sfp_lock_release>
 800445c:	4b04      	ldr	r3, [pc, #16]	; (8004470 <__sinit+0x28>)
 800445e:	6223      	str	r3, [r4, #32]
 8004460:	4b04      	ldr	r3, [pc, #16]	; (8004474 <__sinit+0x2c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1f5      	bne.n	8004454 <__sinit+0xc>
 8004468:	f7ff ffc4 	bl	80043f4 <global_stdio_init.part.0>
 800446c:	e7f2      	b.n	8004454 <__sinit+0xc>
 800446e:	bf00      	nop
 8004470:	080043b5 	.word	0x080043b5
 8004474:	200004b4 	.word	0x200004b4

08004478 <_fwalk_sglue>:
 8004478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800447c:	4607      	mov	r7, r0
 800447e:	4688      	mov	r8, r1
 8004480:	4614      	mov	r4, r2
 8004482:	2600      	movs	r6, #0
 8004484:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004488:	f1b9 0901 	subs.w	r9, r9, #1
 800448c:	d505      	bpl.n	800449a <_fwalk_sglue+0x22>
 800448e:	6824      	ldr	r4, [r4, #0]
 8004490:	2c00      	cmp	r4, #0
 8004492:	d1f7      	bne.n	8004484 <_fwalk_sglue+0xc>
 8004494:	4630      	mov	r0, r6
 8004496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800449a:	89ab      	ldrh	r3, [r5, #12]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d907      	bls.n	80044b0 <_fwalk_sglue+0x38>
 80044a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044a4:	3301      	adds	r3, #1
 80044a6:	d003      	beq.n	80044b0 <_fwalk_sglue+0x38>
 80044a8:	4629      	mov	r1, r5
 80044aa:	4638      	mov	r0, r7
 80044ac:	47c0      	blx	r8
 80044ae:	4306      	orrs	r6, r0
 80044b0:	3568      	adds	r5, #104	; 0x68
 80044b2:	e7e9      	b.n	8004488 <_fwalk_sglue+0x10>

080044b4 <siprintf>:
 80044b4:	b40e      	push	{r1, r2, r3}
 80044b6:	b500      	push	{lr}
 80044b8:	b09c      	sub	sp, #112	; 0x70
 80044ba:	ab1d      	add	r3, sp, #116	; 0x74
 80044bc:	9002      	str	r0, [sp, #8]
 80044be:	9006      	str	r0, [sp, #24]
 80044c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80044c4:	4809      	ldr	r0, [pc, #36]	; (80044ec <siprintf+0x38>)
 80044c6:	9107      	str	r1, [sp, #28]
 80044c8:	9104      	str	r1, [sp, #16]
 80044ca:	4909      	ldr	r1, [pc, #36]	; (80044f0 <siprintf+0x3c>)
 80044cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80044d0:	9105      	str	r1, [sp, #20]
 80044d2:	6800      	ldr	r0, [r0, #0]
 80044d4:	9301      	str	r3, [sp, #4]
 80044d6:	a902      	add	r1, sp, #8
 80044d8:	f001 fb7e 	bl	8005bd8 <_svfiprintf_r>
 80044dc:	9b02      	ldr	r3, [sp, #8]
 80044de:	2200      	movs	r2, #0
 80044e0:	701a      	strb	r2, [r3, #0]
 80044e2:	b01c      	add	sp, #112	; 0x70
 80044e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80044e8:	b003      	add	sp, #12
 80044ea:	4770      	bx	lr
 80044ec:	200000e0 	.word	0x200000e0
 80044f0:	ffff0208 	.word	0xffff0208

080044f4 <__sread>:
 80044f4:	b510      	push	{r4, lr}
 80044f6:	460c      	mov	r4, r1
 80044f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044fc:	f000 f86c 	bl	80045d8 <_read_r>
 8004500:	2800      	cmp	r0, #0
 8004502:	bfab      	itete	ge
 8004504:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004506:	89a3      	ldrhlt	r3, [r4, #12]
 8004508:	181b      	addge	r3, r3, r0
 800450a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800450e:	bfac      	ite	ge
 8004510:	6563      	strge	r3, [r4, #84]	; 0x54
 8004512:	81a3      	strhlt	r3, [r4, #12]
 8004514:	bd10      	pop	{r4, pc}

08004516 <__swrite>:
 8004516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800451a:	461f      	mov	r7, r3
 800451c:	898b      	ldrh	r3, [r1, #12]
 800451e:	05db      	lsls	r3, r3, #23
 8004520:	4605      	mov	r5, r0
 8004522:	460c      	mov	r4, r1
 8004524:	4616      	mov	r6, r2
 8004526:	d505      	bpl.n	8004534 <__swrite+0x1e>
 8004528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800452c:	2302      	movs	r3, #2
 800452e:	2200      	movs	r2, #0
 8004530:	f000 f840 	bl	80045b4 <_lseek_r>
 8004534:	89a3      	ldrh	r3, [r4, #12]
 8004536:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800453a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800453e:	81a3      	strh	r3, [r4, #12]
 8004540:	4632      	mov	r2, r6
 8004542:	463b      	mov	r3, r7
 8004544:	4628      	mov	r0, r5
 8004546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800454a:	f000 b867 	b.w	800461c <_write_r>

0800454e <__sseek>:
 800454e:	b510      	push	{r4, lr}
 8004550:	460c      	mov	r4, r1
 8004552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004556:	f000 f82d 	bl	80045b4 <_lseek_r>
 800455a:	1c43      	adds	r3, r0, #1
 800455c:	89a3      	ldrh	r3, [r4, #12]
 800455e:	bf15      	itete	ne
 8004560:	6560      	strne	r0, [r4, #84]	; 0x54
 8004562:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004566:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800456a:	81a3      	strheq	r3, [r4, #12]
 800456c:	bf18      	it	ne
 800456e:	81a3      	strhne	r3, [r4, #12]
 8004570:	bd10      	pop	{r4, pc}

08004572 <__sclose>:
 8004572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004576:	f000 b80d 	b.w	8004594 <_close_r>

0800457a <memset>:
 800457a:	4402      	add	r2, r0
 800457c:	4603      	mov	r3, r0
 800457e:	4293      	cmp	r3, r2
 8004580:	d100      	bne.n	8004584 <memset+0xa>
 8004582:	4770      	bx	lr
 8004584:	f803 1b01 	strb.w	r1, [r3], #1
 8004588:	e7f9      	b.n	800457e <memset+0x4>
	...

0800458c <_localeconv_r>:
 800458c:	4800      	ldr	r0, [pc, #0]	; (8004590 <_localeconv_r+0x4>)
 800458e:	4770      	bx	lr
 8004590:	200001d4 	.word	0x200001d4

08004594 <_close_r>:
 8004594:	b538      	push	{r3, r4, r5, lr}
 8004596:	4d06      	ldr	r5, [pc, #24]	; (80045b0 <_close_r+0x1c>)
 8004598:	2300      	movs	r3, #0
 800459a:	4604      	mov	r4, r0
 800459c:	4608      	mov	r0, r1
 800459e:	602b      	str	r3, [r5, #0]
 80045a0:	f7fd feb9 	bl	8002316 <_close>
 80045a4:	1c43      	adds	r3, r0, #1
 80045a6:	d102      	bne.n	80045ae <_close_r+0x1a>
 80045a8:	682b      	ldr	r3, [r5, #0]
 80045aa:	b103      	cbz	r3, 80045ae <_close_r+0x1a>
 80045ac:	6023      	str	r3, [r4, #0]
 80045ae:	bd38      	pop	{r3, r4, r5, pc}
 80045b0:	200004b8 	.word	0x200004b8

080045b4 <_lseek_r>:
 80045b4:	b538      	push	{r3, r4, r5, lr}
 80045b6:	4d07      	ldr	r5, [pc, #28]	; (80045d4 <_lseek_r+0x20>)
 80045b8:	4604      	mov	r4, r0
 80045ba:	4608      	mov	r0, r1
 80045bc:	4611      	mov	r1, r2
 80045be:	2200      	movs	r2, #0
 80045c0:	602a      	str	r2, [r5, #0]
 80045c2:	461a      	mov	r2, r3
 80045c4:	f7fd fece 	bl	8002364 <_lseek>
 80045c8:	1c43      	adds	r3, r0, #1
 80045ca:	d102      	bne.n	80045d2 <_lseek_r+0x1e>
 80045cc:	682b      	ldr	r3, [r5, #0]
 80045ce:	b103      	cbz	r3, 80045d2 <_lseek_r+0x1e>
 80045d0:	6023      	str	r3, [r4, #0]
 80045d2:	bd38      	pop	{r3, r4, r5, pc}
 80045d4:	200004b8 	.word	0x200004b8

080045d8 <_read_r>:
 80045d8:	b538      	push	{r3, r4, r5, lr}
 80045da:	4d07      	ldr	r5, [pc, #28]	; (80045f8 <_read_r+0x20>)
 80045dc:	4604      	mov	r4, r0
 80045de:	4608      	mov	r0, r1
 80045e0:	4611      	mov	r1, r2
 80045e2:	2200      	movs	r2, #0
 80045e4:	602a      	str	r2, [r5, #0]
 80045e6:	461a      	mov	r2, r3
 80045e8:	f7fd fe5c 	bl	80022a4 <_read>
 80045ec:	1c43      	adds	r3, r0, #1
 80045ee:	d102      	bne.n	80045f6 <_read_r+0x1e>
 80045f0:	682b      	ldr	r3, [r5, #0]
 80045f2:	b103      	cbz	r3, 80045f6 <_read_r+0x1e>
 80045f4:	6023      	str	r3, [r4, #0]
 80045f6:	bd38      	pop	{r3, r4, r5, pc}
 80045f8:	200004b8 	.word	0x200004b8

080045fc <_sbrk_r>:
 80045fc:	b538      	push	{r3, r4, r5, lr}
 80045fe:	4d06      	ldr	r5, [pc, #24]	; (8004618 <_sbrk_r+0x1c>)
 8004600:	2300      	movs	r3, #0
 8004602:	4604      	mov	r4, r0
 8004604:	4608      	mov	r0, r1
 8004606:	602b      	str	r3, [r5, #0]
 8004608:	f7fd feba 	bl	8002380 <_sbrk>
 800460c:	1c43      	adds	r3, r0, #1
 800460e:	d102      	bne.n	8004616 <_sbrk_r+0x1a>
 8004610:	682b      	ldr	r3, [r5, #0]
 8004612:	b103      	cbz	r3, 8004616 <_sbrk_r+0x1a>
 8004614:	6023      	str	r3, [r4, #0]
 8004616:	bd38      	pop	{r3, r4, r5, pc}
 8004618:	200004b8 	.word	0x200004b8

0800461c <_write_r>:
 800461c:	b538      	push	{r3, r4, r5, lr}
 800461e:	4d07      	ldr	r5, [pc, #28]	; (800463c <_write_r+0x20>)
 8004620:	4604      	mov	r4, r0
 8004622:	4608      	mov	r0, r1
 8004624:	4611      	mov	r1, r2
 8004626:	2200      	movs	r2, #0
 8004628:	602a      	str	r2, [r5, #0]
 800462a:	461a      	mov	r2, r3
 800462c:	f7fd fe57 	bl	80022de <_write>
 8004630:	1c43      	adds	r3, r0, #1
 8004632:	d102      	bne.n	800463a <_write_r+0x1e>
 8004634:	682b      	ldr	r3, [r5, #0]
 8004636:	b103      	cbz	r3, 800463a <_write_r+0x1e>
 8004638:	6023      	str	r3, [r4, #0]
 800463a:	bd38      	pop	{r3, r4, r5, pc}
 800463c:	200004b8 	.word	0x200004b8

08004640 <__errno>:
 8004640:	4b01      	ldr	r3, [pc, #4]	; (8004648 <__errno+0x8>)
 8004642:	6818      	ldr	r0, [r3, #0]
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	200000e0 	.word	0x200000e0

0800464c <__libc_init_array>:
 800464c:	b570      	push	{r4, r5, r6, lr}
 800464e:	4d0d      	ldr	r5, [pc, #52]	; (8004684 <__libc_init_array+0x38>)
 8004650:	4c0d      	ldr	r4, [pc, #52]	; (8004688 <__libc_init_array+0x3c>)
 8004652:	1b64      	subs	r4, r4, r5
 8004654:	10a4      	asrs	r4, r4, #2
 8004656:	2600      	movs	r6, #0
 8004658:	42a6      	cmp	r6, r4
 800465a:	d109      	bne.n	8004670 <__libc_init_array+0x24>
 800465c:	4d0b      	ldr	r5, [pc, #44]	; (800468c <__libc_init_array+0x40>)
 800465e:	4c0c      	ldr	r4, [pc, #48]	; (8004690 <__libc_init_array+0x44>)
 8004660:	f002 ff0a 	bl	8007478 <_init>
 8004664:	1b64      	subs	r4, r4, r5
 8004666:	10a4      	asrs	r4, r4, #2
 8004668:	2600      	movs	r6, #0
 800466a:	42a6      	cmp	r6, r4
 800466c:	d105      	bne.n	800467a <__libc_init_array+0x2e>
 800466e:	bd70      	pop	{r4, r5, r6, pc}
 8004670:	f855 3b04 	ldr.w	r3, [r5], #4
 8004674:	4798      	blx	r3
 8004676:	3601      	adds	r6, #1
 8004678:	e7ee      	b.n	8004658 <__libc_init_array+0xc>
 800467a:	f855 3b04 	ldr.w	r3, [r5], #4
 800467e:	4798      	blx	r3
 8004680:	3601      	adds	r6, #1
 8004682:	e7f2      	b.n	800466a <__libc_init_array+0x1e>
 8004684:	080078e0 	.word	0x080078e0
 8004688:	080078e0 	.word	0x080078e0
 800468c:	080078e0 	.word	0x080078e0
 8004690:	080078e4 	.word	0x080078e4

08004694 <__retarget_lock_init_recursive>:
 8004694:	4770      	bx	lr

08004696 <__retarget_lock_acquire_recursive>:
 8004696:	4770      	bx	lr

08004698 <__retarget_lock_release_recursive>:
 8004698:	4770      	bx	lr

0800469a <quorem>:
 800469a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800469e:	6903      	ldr	r3, [r0, #16]
 80046a0:	690c      	ldr	r4, [r1, #16]
 80046a2:	42a3      	cmp	r3, r4
 80046a4:	4607      	mov	r7, r0
 80046a6:	db7e      	blt.n	80047a6 <quorem+0x10c>
 80046a8:	3c01      	subs	r4, #1
 80046aa:	f101 0814 	add.w	r8, r1, #20
 80046ae:	f100 0514 	add.w	r5, r0, #20
 80046b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80046b6:	9301      	str	r3, [sp, #4]
 80046b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80046bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80046c0:	3301      	adds	r3, #1
 80046c2:	429a      	cmp	r2, r3
 80046c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80046c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80046cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80046d0:	d331      	bcc.n	8004736 <quorem+0x9c>
 80046d2:	f04f 0e00 	mov.w	lr, #0
 80046d6:	4640      	mov	r0, r8
 80046d8:	46ac      	mov	ip, r5
 80046da:	46f2      	mov	sl, lr
 80046dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80046e0:	b293      	uxth	r3, r2
 80046e2:	fb06 e303 	mla	r3, r6, r3, lr
 80046e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80046ea:	0c1a      	lsrs	r2, r3, #16
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	ebaa 0303 	sub.w	r3, sl, r3
 80046f2:	f8dc a000 	ldr.w	sl, [ip]
 80046f6:	fa13 f38a 	uxtah	r3, r3, sl
 80046fa:	fb06 220e 	mla	r2, r6, lr, r2
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	9b00      	ldr	r3, [sp, #0]
 8004702:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004706:	b292      	uxth	r2, r2
 8004708:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800470c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004710:	f8bd 3000 	ldrh.w	r3, [sp]
 8004714:	4581      	cmp	r9, r0
 8004716:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800471a:	f84c 3b04 	str.w	r3, [ip], #4
 800471e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004722:	d2db      	bcs.n	80046dc <quorem+0x42>
 8004724:	f855 300b 	ldr.w	r3, [r5, fp]
 8004728:	b92b      	cbnz	r3, 8004736 <quorem+0x9c>
 800472a:	9b01      	ldr	r3, [sp, #4]
 800472c:	3b04      	subs	r3, #4
 800472e:	429d      	cmp	r5, r3
 8004730:	461a      	mov	r2, r3
 8004732:	d32c      	bcc.n	800478e <quorem+0xf4>
 8004734:	613c      	str	r4, [r7, #16]
 8004736:	4638      	mov	r0, r7
 8004738:	f001 f8f4 	bl	8005924 <__mcmp>
 800473c:	2800      	cmp	r0, #0
 800473e:	db22      	blt.n	8004786 <quorem+0xec>
 8004740:	3601      	adds	r6, #1
 8004742:	4629      	mov	r1, r5
 8004744:	2000      	movs	r0, #0
 8004746:	f858 2b04 	ldr.w	r2, [r8], #4
 800474a:	f8d1 c000 	ldr.w	ip, [r1]
 800474e:	b293      	uxth	r3, r2
 8004750:	1ac3      	subs	r3, r0, r3
 8004752:	0c12      	lsrs	r2, r2, #16
 8004754:	fa13 f38c 	uxtah	r3, r3, ip
 8004758:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800475c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004760:	b29b      	uxth	r3, r3
 8004762:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004766:	45c1      	cmp	r9, r8
 8004768:	f841 3b04 	str.w	r3, [r1], #4
 800476c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004770:	d2e9      	bcs.n	8004746 <quorem+0xac>
 8004772:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004776:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800477a:	b922      	cbnz	r2, 8004786 <quorem+0xec>
 800477c:	3b04      	subs	r3, #4
 800477e:	429d      	cmp	r5, r3
 8004780:	461a      	mov	r2, r3
 8004782:	d30a      	bcc.n	800479a <quorem+0x100>
 8004784:	613c      	str	r4, [r7, #16]
 8004786:	4630      	mov	r0, r6
 8004788:	b003      	add	sp, #12
 800478a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800478e:	6812      	ldr	r2, [r2, #0]
 8004790:	3b04      	subs	r3, #4
 8004792:	2a00      	cmp	r2, #0
 8004794:	d1ce      	bne.n	8004734 <quorem+0x9a>
 8004796:	3c01      	subs	r4, #1
 8004798:	e7c9      	b.n	800472e <quorem+0x94>
 800479a:	6812      	ldr	r2, [r2, #0]
 800479c:	3b04      	subs	r3, #4
 800479e:	2a00      	cmp	r2, #0
 80047a0:	d1f0      	bne.n	8004784 <quorem+0xea>
 80047a2:	3c01      	subs	r4, #1
 80047a4:	e7eb      	b.n	800477e <quorem+0xe4>
 80047a6:	2000      	movs	r0, #0
 80047a8:	e7ee      	b.n	8004788 <quorem+0xee>
 80047aa:	0000      	movs	r0, r0
 80047ac:	0000      	movs	r0, r0
	...

080047b0 <_dtoa_r>:
 80047b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047b4:	ed2d 8b04 	vpush	{d8-d9}
 80047b8:	69c5      	ldr	r5, [r0, #28]
 80047ba:	b093      	sub	sp, #76	; 0x4c
 80047bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80047c0:	ec57 6b10 	vmov	r6, r7, d0
 80047c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80047c8:	9107      	str	r1, [sp, #28]
 80047ca:	4604      	mov	r4, r0
 80047cc:	920a      	str	r2, [sp, #40]	; 0x28
 80047ce:	930d      	str	r3, [sp, #52]	; 0x34
 80047d0:	b975      	cbnz	r5, 80047f0 <_dtoa_r+0x40>
 80047d2:	2010      	movs	r0, #16
 80047d4:	f7ff f88a 	bl	80038ec <malloc>
 80047d8:	4602      	mov	r2, r0
 80047da:	61e0      	str	r0, [r4, #28]
 80047dc:	b920      	cbnz	r0, 80047e8 <_dtoa_r+0x38>
 80047de:	4bae      	ldr	r3, [pc, #696]	; (8004a98 <_dtoa_r+0x2e8>)
 80047e0:	21ef      	movs	r1, #239	; 0xef
 80047e2:	48ae      	ldr	r0, [pc, #696]	; (8004a9c <_dtoa_r+0x2ec>)
 80047e4:	f001 fbcc 	bl	8005f80 <__assert_func>
 80047e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80047ec:	6005      	str	r5, [r0, #0]
 80047ee:	60c5      	str	r5, [r0, #12]
 80047f0:	69e3      	ldr	r3, [r4, #28]
 80047f2:	6819      	ldr	r1, [r3, #0]
 80047f4:	b151      	cbz	r1, 800480c <_dtoa_r+0x5c>
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	604a      	str	r2, [r1, #4]
 80047fa:	2301      	movs	r3, #1
 80047fc:	4093      	lsls	r3, r2
 80047fe:	608b      	str	r3, [r1, #8]
 8004800:	4620      	mov	r0, r4
 8004802:	f000 fe53 	bl	80054ac <_Bfree>
 8004806:	69e3      	ldr	r3, [r4, #28]
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	1e3b      	subs	r3, r7, #0
 800480e:	bfbb      	ittet	lt
 8004810:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004814:	9303      	strlt	r3, [sp, #12]
 8004816:	2300      	movge	r3, #0
 8004818:	2201      	movlt	r2, #1
 800481a:	bfac      	ite	ge
 800481c:	f8c8 3000 	strge.w	r3, [r8]
 8004820:	f8c8 2000 	strlt.w	r2, [r8]
 8004824:	4b9e      	ldr	r3, [pc, #632]	; (8004aa0 <_dtoa_r+0x2f0>)
 8004826:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800482a:	ea33 0308 	bics.w	r3, r3, r8
 800482e:	d11b      	bne.n	8004868 <_dtoa_r+0xb8>
 8004830:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004832:	f242 730f 	movw	r3, #9999	; 0x270f
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800483c:	4333      	orrs	r3, r6
 800483e:	f000 8593 	beq.w	8005368 <_dtoa_r+0xbb8>
 8004842:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004844:	b963      	cbnz	r3, 8004860 <_dtoa_r+0xb0>
 8004846:	4b97      	ldr	r3, [pc, #604]	; (8004aa4 <_dtoa_r+0x2f4>)
 8004848:	e027      	b.n	800489a <_dtoa_r+0xea>
 800484a:	4b97      	ldr	r3, [pc, #604]	; (8004aa8 <_dtoa_r+0x2f8>)
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	3308      	adds	r3, #8
 8004850:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	9800      	ldr	r0, [sp, #0]
 8004856:	b013      	add	sp, #76	; 0x4c
 8004858:	ecbd 8b04 	vpop	{d8-d9}
 800485c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004860:	4b90      	ldr	r3, [pc, #576]	; (8004aa4 <_dtoa_r+0x2f4>)
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	3303      	adds	r3, #3
 8004866:	e7f3      	b.n	8004850 <_dtoa_r+0xa0>
 8004868:	ed9d 7b02 	vldr	d7, [sp, #8]
 800486c:	2200      	movs	r2, #0
 800486e:	ec51 0b17 	vmov	r0, r1, d7
 8004872:	eeb0 8a47 	vmov.f32	s16, s14
 8004876:	eef0 8a67 	vmov.f32	s17, s15
 800487a:	2300      	movs	r3, #0
 800487c:	f7fc f924 	bl	8000ac8 <__aeabi_dcmpeq>
 8004880:	4681      	mov	r9, r0
 8004882:	b160      	cbz	r0, 800489e <_dtoa_r+0xee>
 8004884:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004886:	2301      	movs	r3, #1
 8004888:	6013      	str	r3, [r2, #0]
 800488a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 8568 	beq.w	8005362 <_dtoa_r+0xbb2>
 8004892:	4b86      	ldr	r3, [pc, #536]	; (8004aac <_dtoa_r+0x2fc>)
 8004894:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	3b01      	subs	r3, #1
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	e7da      	b.n	8004854 <_dtoa_r+0xa4>
 800489e:	aa10      	add	r2, sp, #64	; 0x40
 80048a0:	a911      	add	r1, sp, #68	; 0x44
 80048a2:	4620      	mov	r0, r4
 80048a4:	eeb0 0a48 	vmov.f32	s0, s16
 80048a8:	eef0 0a68 	vmov.f32	s1, s17
 80048ac:	f001 f8e0 	bl	8005a70 <__d2b>
 80048b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80048b4:	4682      	mov	sl, r0
 80048b6:	2d00      	cmp	r5, #0
 80048b8:	d07f      	beq.n	80049ba <_dtoa_r+0x20a>
 80048ba:	ee18 3a90 	vmov	r3, s17
 80048be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048c2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80048c6:	ec51 0b18 	vmov	r0, r1, d8
 80048ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80048ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80048d2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80048d6:	4619      	mov	r1, r3
 80048d8:	2200      	movs	r2, #0
 80048da:	4b75      	ldr	r3, [pc, #468]	; (8004ab0 <_dtoa_r+0x300>)
 80048dc:	f7fb fcd4 	bl	8000288 <__aeabi_dsub>
 80048e0:	a367      	add	r3, pc, #412	; (adr r3, 8004a80 <_dtoa_r+0x2d0>)
 80048e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e6:	f7fb fe87 	bl	80005f8 <__aeabi_dmul>
 80048ea:	a367      	add	r3, pc, #412	; (adr r3, 8004a88 <_dtoa_r+0x2d8>)
 80048ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f0:	f7fb fccc 	bl	800028c <__adddf3>
 80048f4:	4606      	mov	r6, r0
 80048f6:	4628      	mov	r0, r5
 80048f8:	460f      	mov	r7, r1
 80048fa:	f7fb fe13 	bl	8000524 <__aeabi_i2d>
 80048fe:	a364      	add	r3, pc, #400	; (adr r3, 8004a90 <_dtoa_r+0x2e0>)
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	f7fb fe78 	bl	80005f8 <__aeabi_dmul>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4630      	mov	r0, r6
 800490e:	4639      	mov	r1, r7
 8004910:	f7fb fcbc 	bl	800028c <__adddf3>
 8004914:	4606      	mov	r6, r0
 8004916:	460f      	mov	r7, r1
 8004918:	f7fc f91e 	bl	8000b58 <__aeabi_d2iz>
 800491c:	2200      	movs	r2, #0
 800491e:	4683      	mov	fp, r0
 8004920:	2300      	movs	r3, #0
 8004922:	4630      	mov	r0, r6
 8004924:	4639      	mov	r1, r7
 8004926:	f7fc f8d9 	bl	8000adc <__aeabi_dcmplt>
 800492a:	b148      	cbz	r0, 8004940 <_dtoa_r+0x190>
 800492c:	4658      	mov	r0, fp
 800492e:	f7fb fdf9 	bl	8000524 <__aeabi_i2d>
 8004932:	4632      	mov	r2, r6
 8004934:	463b      	mov	r3, r7
 8004936:	f7fc f8c7 	bl	8000ac8 <__aeabi_dcmpeq>
 800493a:	b908      	cbnz	r0, 8004940 <_dtoa_r+0x190>
 800493c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004940:	f1bb 0f16 	cmp.w	fp, #22
 8004944:	d857      	bhi.n	80049f6 <_dtoa_r+0x246>
 8004946:	4b5b      	ldr	r3, [pc, #364]	; (8004ab4 <_dtoa_r+0x304>)
 8004948:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800494c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004950:	ec51 0b18 	vmov	r0, r1, d8
 8004954:	f7fc f8c2 	bl	8000adc <__aeabi_dcmplt>
 8004958:	2800      	cmp	r0, #0
 800495a:	d04e      	beq.n	80049fa <_dtoa_r+0x24a>
 800495c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004960:	2300      	movs	r3, #0
 8004962:	930c      	str	r3, [sp, #48]	; 0x30
 8004964:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004966:	1b5b      	subs	r3, r3, r5
 8004968:	1e5a      	subs	r2, r3, #1
 800496a:	bf45      	ittet	mi
 800496c:	f1c3 0301 	rsbmi	r3, r3, #1
 8004970:	9305      	strmi	r3, [sp, #20]
 8004972:	2300      	movpl	r3, #0
 8004974:	2300      	movmi	r3, #0
 8004976:	9206      	str	r2, [sp, #24]
 8004978:	bf54      	ite	pl
 800497a:	9305      	strpl	r3, [sp, #20]
 800497c:	9306      	strmi	r3, [sp, #24]
 800497e:	f1bb 0f00 	cmp.w	fp, #0
 8004982:	db3c      	blt.n	80049fe <_dtoa_r+0x24e>
 8004984:	9b06      	ldr	r3, [sp, #24]
 8004986:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800498a:	445b      	add	r3, fp
 800498c:	9306      	str	r3, [sp, #24]
 800498e:	2300      	movs	r3, #0
 8004990:	9308      	str	r3, [sp, #32]
 8004992:	9b07      	ldr	r3, [sp, #28]
 8004994:	2b09      	cmp	r3, #9
 8004996:	d868      	bhi.n	8004a6a <_dtoa_r+0x2ba>
 8004998:	2b05      	cmp	r3, #5
 800499a:	bfc4      	itt	gt
 800499c:	3b04      	subgt	r3, #4
 800499e:	9307      	strgt	r3, [sp, #28]
 80049a0:	9b07      	ldr	r3, [sp, #28]
 80049a2:	f1a3 0302 	sub.w	r3, r3, #2
 80049a6:	bfcc      	ite	gt
 80049a8:	2500      	movgt	r5, #0
 80049aa:	2501      	movle	r5, #1
 80049ac:	2b03      	cmp	r3, #3
 80049ae:	f200 8085 	bhi.w	8004abc <_dtoa_r+0x30c>
 80049b2:	e8df f003 	tbb	[pc, r3]
 80049b6:	3b2e      	.short	0x3b2e
 80049b8:	5839      	.short	0x5839
 80049ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80049be:	441d      	add	r5, r3
 80049c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	bfc1      	itttt	gt
 80049c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80049cc:	fa08 f803 	lslgt.w	r8, r8, r3
 80049d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80049d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80049d8:	bfd6      	itet	le
 80049da:	f1c3 0320 	rsble	r3, r3, #32
 80049de:	ea48 0003 	orrgt.w	r0, r8, r3
 80049e2:	fa06 f003 	lslle.w	r0, r6, r3
 80049e6:	f7fb fd8d 	bl	8000504 <__aeabi_ui2d>
 80049ea:	2201      	movs	r2, #1
 80049ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80049f0:	3d01      	subs	r5, #1
 80049f2:	920e      	str	r2, [sp, #56]	; 0x38
 80049f4:	e76f      	b.n	80048d6 <_dtoa_r+0x126>
 80049f6:	2301      	movs	r3, #1
 80049f8:	e7b3      	b.n	8004962 <_dtoa_r+0x1b2>
 80049fa:	900c      	str	r0, [sp, #48]	; 0x30
 80049fc:	e7b2      	b.n	8004964 <_dtoa_r+0x1b4>
 80049fe:	9b05      	ldr	r3, [sp, #20]
 8004a00:	eba3 030b 	sub.w	r3, r3, fp
 8004a04:	9305      	str	r3, [sp, #20]
 8004a06:	f1cb 0300 	rsb	r3, fp, #0
 8004a0a:	9308      	str	r3, [sp, #32]
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a10:	e7bf      	b.n	8004992 <_dtoa_r+0x1e2>
 8004a12:	2300      	movs	r3, #0
 8004a14:	9309      	str	r3, [sp, #36]	; 0x24
 8004a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	dc52      	bgt.n	8004ac2 <_dtoa_r+0x312>
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	9301      	str	r3, [sp, #4]
 8004a20:	9304      	str	r3, [sp, #16]
 8004a22:	461a      	mov	r2, r3
 8004a24:	920a      	str	r2, [sp, #40]	; 0x28
 8004a26:	e00b      	b.n	8004a40 <_dtoa_r+0x290>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e7f3      	b.n	8004a14 <_dtoa_r+0x264>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a32:	445b      	add	r3, fp
 8004a34:	9301      	str	r3, [sp, #4]
 8004a36:	3301      	adds	r3, #1
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	9304      	str	r3, [sp, #16]
 8004a3c:	bfb8      	it	lt
 8004a3e:	2301      	movlt	r3, #1
 8004a40:	69e0      	ldr	r0, [r4, #28]
 8004a42:	2100      	movs	r1, #0
 8004a44:	2204      	movs	r2, #4
 8004a46:	f102 0614 	add.w	r6, r2, #20
 8004a4a:	429e      	cmp	r6, r3
 8004a4c:	d93d      	bls.n	8004aca <_dtoa_r+0x31a>
 8004a4e:	6041      	str	r1, [r0, #4]
 8004a50:	4620      	mov	r0, r4
 8004a52:	f000 fceb 	bl	800542c <_Balloc>
 8004a56:	9000      	str	r0, [sp, #0]
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	d139      	bne.n	8004ad0 <_dtoa_r+0x320>
 8004a5c:	4b16      	ldr	r3, [pc, #88]	; (8004ab8 <_dtoa_r+0x308>)
 8004a5e:	4602      	mov	r2, r0
 8004a60:	f240 11af 	movw	r1, #431	; 0x1af
 8004a64:	e6bd      	b.n	80047e2 <_dtoa_r+0x32>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e7e1      	b.n	8004a2e <_dtoa_r+0x27e>
 8004a6a:	2501      	movs	r5, #1
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	9307      	str	r3, [sp, #28]
 8004a70:	9509      	str	r5, [sp, #36]	; 0x24
 8004a72:	f04f 33ff 	mov.w	r3, #4294967295
 8004a76:	9301      	str	r3, [sp, #4]
 8004a78:	9304      	str	r3, [sp, #16]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	2312      	movs	r3, #18
 8004a7e:	e7d1      	b.n	8004a24 <_dtoa_r+0x274>
 8004a80:	636f4361 	.word	0x636f4361
 8004a84:	3fd287a7 	.word	0x3fd287a7
 8004a88:	8b60c8b3 	.word	0x8b60c8b3
 8004a8c:	3fc68a28 	.word	0x3fc68a28
 8004a90:	509f79fb 	.word	0x509f79fb
 8004a94:	3fd34413 	.word	0x3fd34413
 8004a98:	08007578 	.word	0x08007578
 8004a9c:	0800758f 	.word	0x0800758f
 8004aa0:	7ff00000 	.word	0x7ff00000
 8004aa4:	08007574 	.word	0x08007574
 8004aa8:	0800756b 	.word	0x0800756b
 8004aac:	08007548 	.word	0x08007548
 8004ab0:	3ff80000 	.word	0x3ff80000
 8004ab4:	08007680 	.word	0x08007680
 8004ab8:	080075e7 	.word	0x080075e7
 8004abc:	2301      	movs	r3, #1
 8004abe:	9309      	str	r3, [sp, #36]	; 0x24
 8004ac0:	e7d7      	b.n	8004a72 <_dtoa_r+0x2c2>
 8004ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ac4:	9301      	str	r3, [sp, #4]
 8004ac6:	9304      	str	r3, [sp, #16]
 8004ac8:	e7ba      	b.n	8004a40 <_dtoa_r+0x290>
 8004aca:	3101      	adds	r1, #1
 8004acc:	0052      	lsls	r2, r2, #1
 8004ace:	e7ba      	b.n	8004a46 <_dtoa_r+0x296>
 8004ad0:	69e3      	ldr	r3, [r4, #28]
 8004ad2:	9a00      	ldr	r2, [sp, #0]
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	9b04      	ldr	r3, [sp, #16]
 8004ad8:	2b0e      	cmp	r3, #14
 8004ada:	f200 80a8 	bhi.w	8004c2e <_dtoa_r+0x47e>
 8004ade:	2d00      	cmp	r5, #0
 8004ae0:	f000 80a5 	beq.w	8004c2e <_dtoa_r+0x47e>
 8004ae4:	f1bb 0f00 	cmp.w	fp, #0
 8004ae8:	dd38      	ble.n	8004b5c <_dtoa_r+0x3ac>
 8004aea:	4bc0      	ldr	r3, [pc, #768]	; (8004dec <_dtoa_r+0x63c>)
 8004aec:	f00b 020f 	and.w	r2, fp, #15
 8004af0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004af4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004af8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004afc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8004b00:	d019      	beq.n	8004b36 <_dtoa_r+0x386>
 8004b02:	4bbb      	ldr	r3, [pc, #748]	; (8004df0 <_dtoa_r+0x640>)
 8004b04:	ec51 0b18 	vmov	r0, r1, d8
 8004b08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b0c:	f7fb fe9e 	bl	800084c <__aeabi_ddiv>
 8004b10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b14:	f008 080f 	and.w	r8, r8, #15
 8004b18:	2503      	movs	r5, #3
 8004b1a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8004df0 <_dtoa_r+0x640>
 8004b1e:	f1b8 0f00 	cmp.w	r8, #0
 8004b22:	d10a      	bne.n	8004b3a <_dtoa_r+0x38a>
 8004b24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b28:	4632      	mov	r2, r6
 8004b2a:	463b      	mov	r3, r7
 8004b2c:	f7fb fe8e 	bl	800084c <__aeabi_ddiv>
 8004b30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b34:	e02b      	b.n	8004b8e <_dtoa_r+0x3de>
 8004b36:	2502      	movs	r5, #2
 8004b38:	e7ef      	b.n	8004b1a <_dtoa_r+0x36a>
 8004b3a:	f018 0f01 	tst.w	r8, #1
 8004b3e:	d008      	beq.n	8004b52 <_dtoa_r+0x3a2>
 8004b40:	4630      	mov	r0, r6
 8004b42:	4639      	mov	r1, r7
 8004b44:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004b48:	f7fb fd56 	bl	80005f8 <__aeabi_dmul>
 8004b4c:	3501      	adds	r5, #1
 8004b4e:	4606      	mov	r6, r0
 8004b50:	460f      	mov	r7, r1
 8004b52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004b56:	f109 0908 	add.w	r9, r9, #8
 8004b5a:	e7e0      	b.n	8004b1e <_dtoa_r+0x36e>
 8004b5c:	f000 809f 	beq.w	8004c9e <_dtoa_r+0x4ee>
 8004b60:	f1cb 0600 	rsb	r6, fp, #0
 8004b64:	4ba1      	ldr	r3, [pc, #644]	; (8004dec <_dtoa_r+0x63c>)
 8004b66:	4fa2      	ldr	r7, [pc, #648]	; (8004df0 <_dtoa_r+0x640>)
 8004b68:	f006 020f 	and.w	r2, r6, #15
 8004b6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b74:	ec51 0b18 	vmov	r0, r1, d8
 8004b78:	f7fb fd3e 	bl	80005f8 <__aeabi_dmul>
 8004b7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b80:	1136      	asrs	r6, r6, #4
 8004b82:	2300      	movs	r3, #0
 8004b84:	2502      	movs	r5, #2
 8004b86:	2e00      	cmp	r6, #0
 8004b88:	d17e      	bne.n	8004c88 <_dtoa_r+0x4d8>
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1d0      	bne.n	8004b30 <_dtoa_r+0x380>
 8004b8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b90:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 8084 	beq.w	8004ca2 <_dtoa_r+0x4f2>
 8004b9a:	4b96      	ldr	r3, [pc, #600]	; (8004df4 <_dtoa_r+0x644>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	4640      	mov	r0, r8
 8004ba0:	4649      	mov	r1, r9
 8004ba2:	f7fb ff9b 	bl	8000adc <__aeabi_dcmplt>
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	d07b      	beq.n	8004ca2 <_dtoa_r+0x4f2>
 8004baa:	9b04      	ldr	r3, [sp, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d078      	beq.n	8004ca2 <_dtoa_r+0x4f2>
 8004bb0:	9b01      	ldr	r3, [sp, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	dd39      	ble.n	8004c2a <_dtoa_r+0x47a>
 8004bb6:	4b90      	ldr	r3, [pc, #576]	; (8004df8 <_dtoa_r+0x648>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	4640      	mov	r0, r8
 8004bbc:	4649      	mov	r1, r9
 8004bbe:	f7fb fd1b 	bl	80005f8 <__aeabi_dmul>
 8004bc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bc6:	9e01      	ldr	r6, [sp, #4]
 8004bc8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004bcc:	3501      	adds	r5, #1
 8004bce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	f7fb fca6 	bl	8000524 <__aeabi_i2d>
 8004bd8:	4642      	mov	r2, r8
 8004bda:	464b      	mov	r3, r9
 8004bdc:	f7fb fd0c 	bl	80005f8 <__aeabi_dmul>
 8004be0:	4b86      	ldr	r3, [pc, #536]	; (8004dfc <_dtoa_r+0x64c>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	f7fb fb52 	bl	800028c <__adddf3>
 8004be8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004bec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bf0:	9303      	str	r3, [sp, #12]
 8004bf2:	2e00      	cmp	r6, #0
 8004bf4:	d158      	bne.n	8004ca8 <_dtoa_r+0x4f8>
 8004bf6:	4b82      	ldr	r3, [pc, #520]	; (8004e00 <_dtoa_r+0x650>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	4640      	mov	r0, r8
 8004bfc:	4649      	mov	r1, r9
 8004bfe:	f7fb fb43 	bl	8000288 <__aeabi_dsub>
 8004c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c06:	4680      	mov	r8, r0
 8004c08:	4689      	mov	r9, r1
 8004c0a:	f7fb ff85 	bl	8000b18 <__aeabi_dcmpgt>
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	f040 8296 	bne.w	8005140 <_dtoa_r+0x990>
 8004c14:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004c18:	4640      	mov	r0, r8
 8004c1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c1e:	4649      	mov	r1, r9
 8004c20:	f7fb ff5c 	bl	8000adc <__aeabi_dcmplt>
 8004c24:	2800      	cmp	r0, #0
 8004c26:	f040 8289 	bne.w	800513c <_dtoa_r+0x98c>
 8004c2a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004c2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f2c0 814e 	blt.w	8004ed2 <_dtoa_r+0x722>
 8004c36:	f1bb 0f0e 	cmp.w	fp, #14
 8004c3a:	f300 814a 	bgt.w	8004ed2 <_dtoa_r+0x722>
 8004c3e:	4b6b      	ldr	r3, [pc, #428]	; (8004dec <_dtoa_r+0x63c>)
 8004c40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004c44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f280 80dc 	bge.w	8004e08 <_dtoa_r+0x658>
 8004c50:	9b04      	ldr	r3, [sp, #16]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f300 80d8 	bgt.w	8004e08 <_dtoa_r+0x658>
 8004c58:	f040 826f 	bne.w	800513a <_dtoa_r+0x98a>
 8004c5c:	4b68      	ldr	r3, [pc, #416]	; (8004e00 <_dtoa_r+0x650>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	4640      	mov	r0, r8
 8004c62:	4649      	mov	r1, r9
 8004c64:	f7fb fcc8 	bl	80005f8 <__aeabi_dmul>
 8004c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c6c:	f7fb ff4a 	bl	8000b04 <__aeabi_dcmpge>
 8004c70:	9e04      	ldr	r6, [sp, #16]
 8004c72:	4637      	mov	r7, r6
 8004c74:	2800      	cmp	r0, #0
 8004c76:	f040 8245 	bne.w	8005104 <_dtoa_r+0x954>
 8004c7a:	9d00      	ldr	r5, [sp, #0]
 8004c7c:	2331      	movs	r3, #49	; 0x31
 8004c7e:	f805 3b01 	strb.w	r3, [r5], #1
 8004c82:	f10b 0b01 	add.w	fp, fp, #1
 8004c86:	e241      	b.n	800510c <_dtoa_r+0x95c>
 8004c88:	07f2      	lsls	r2, r6, #31
 8004c8a:	d505      	bpl.n	8004c98 <_dtoa_r+0x4e8>
 8004c8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c90:	f7fb fcb2 	bl	80005f8 <__aeabi_dmul>
 8004c94:	3501      	adds	r5, #1
 8004c96:	2301      	movs	r3, #1
 8004c98:	1076      	asrs	r6, r6, #1
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	e773      	b.n	8004b86 <_dtoa_r+0x3d6>
 8004c9e:	2502      	movs	r5, #2
 8004ca0:	e775      	b.n	8004b8e <_dtoa_r+0x3de>
 8004ca2:	9e04      	ldr	r6, [sp, #16]
 8004ca4:	465f      	mov	r7, fp
 8004ca6:	e792      	b.n	8004bce <_dtoa_r+0x41e>
 8004ca8:	9900      	ldr	r1, [sp, #0]
 8004caa:	4b50      	ldr	r3, [pc, #320]	; (8004dec <_dtoa_r+0x63c>)
 8004cac:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004cb0:	4431      	add	r1, r6
 8004cb2:	9102      	str	r1, [sp, #8]
 8004cb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004cb6:	eeb0 9a47 	vmov.f32	s18, s14
 8004cba:	eef0 9a67 	vmov.f32	s19, s15
 8004cbe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004cc2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004cc6:	2900      	cmp	r1, #0
 8004cc8:	d044      	beq.n	8004d54 <_dtoa_r+0x5a4>
 8004cca:	494e      	ldr	r1, [pc, #312]	; (8004e04 <_dtoa_r+0x654>)
 8004ccc:	2000      	movs	r0, #0
 8004cce:	f7fb fdbd 	bl	800084c <__aeabi_ddiv>
 8004cd2:	ec53 2b19 	vmov	r2, r3, d9
 8004cd6:	f7fb fad7 	bl	8000288 <__aeabi_dsub>
 8004cda:	9d00      	ldr	r5, [sp, #0]
 8004cdc:	ec41 0b19 	vmov	d9, r0, r1
 8004ce0:	4649      	mov	r1, r9
 8004ce2:	4640      	mov	r0, r8
 8004ce4:	f7fb ff38 	bl	8000b58 <__aeabi_d2iz>
 8004ce8:	4606      	mov	r6, r0
 8004cea:	f7fb fc1b 	bl	8000524 <__aeabi_i2d>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4640      	mov	r0, r8
 8004cf4:	4649      	mov	r1, r9
 8004cf6:	f7fb fac7 	bl	8000288 <__aeabi_dsub>
 8004cfa:	3630      	adds	r6, #48	; 0x30
 8004cfc:	f805 6b01 	strb.w	r6, [r5], #1
 8004d00:	ec53 2b19 	vmov	r2, r3, d9
 8004d04:	4680      	mov	r8, r0
 8004d06:	4689      	mov	r9, r1
 8004d08:	f7fb fee8 	bl	8000adc <__aeabi_dcmplt>
 8004d0c:	2800      	cmp	r0, #0
 8004d0e:	d164      	bne.n	8004dda <_dtoa_r+0x62a>
 8004d10:	4642      	mov	r2, r8
 8004d12:	464b      	mov	r3, r9
 8004d14:	4937      	ldr	r1, [pc, #220]	; (8004df4 <_dtoa_r+0x644>)
 8004d16:	2000      	movs	r0, #0
 8004d18:	f7fb fab6 	bl	8000288 <__aeabi_dsub>
 8004d1c:	ec53 2b19 	vmov	r2, r3, d9
 8004d20:	f7fb fedc 	bl	8000adc <__aeabi_dcmplt>
 8004d24:	2800      	cmp	r0, #0
 8004d26:	f040 80b6 	bne.w	8004e96 <_dtoa_r+0x6e6>
 8004d2a:	9b02      	ldr	r3, [sp, #8]
 8004d2c:	429d      	cmp	r5, r3
 8004d2e:	f43f af7c 	beq.w	8004c2a <_dtoa_r+0x47a>
 8004d32:	4b31      	ldr	r3, [pc, #196]	; (8004df8 <_dtoa_r+0x648>)
 8004d34:	ec51 0b19 	vmov	r0, r1, d9
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f7fb fc5d 	bl	80005f8 <__aeabi_dmul>
 8004d3e:	4b2e      	ldr	r3, [pc, #184]	; (8004df8 <_dtoa_r+0x648>)
 8004d40:	ec41 0b19 	vmov	d9, r0, r1
 8004d44:	2200      	movs	r2, #0
 8004d46:	4640      	mov	r0, r8
 8004d48:	4649      	mov	r1, r9
 8004d4a:	f7fb fc55 	bl	80005f8 <__aeabi_dmul>
 8004d4e:	4680      	mov	r8, r0
 8004d50:	4689      	mov	r9, r1
 8004d52:	e7c5      	b.n	8004ce0 <_dtoa_r+0x530>
 8004d54:	ec51 0b17 	vmov	r0, r1, d7
 8004d58:	f7fb fc4e 	bl	80005f8 <__aeabi_dmul>
 8004d5c:	9b02      	ldr	r3, [sp, #8]
 8004d5e:	9d00      	ldr	r5, [sp, #0]
 8004d60:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d62:	ec41 0b19 	vmov	d9, r0, r1
 8004d66:	4649      	mov	r1, r9
 8004d68:	4640      	mov	r0, r8
 8004d6a:	f7fb fef5 	bl	8000b58 <__aeabi_d2iz>
 8004d6e:	4606      	mov	r6, r0
 8004d70:	f7fb fbd8 	bl	8000524 <__aeabi_i2d>
 8004d74:	3630      	adds	r6, #48	; 0x30
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4640      	mov	r0, r8
 8004d7c:	4649      	mov	r1, r9
 8004d7e:	f7fb fa83 	bl	8000288 <__aeabi_dsub>
 8004d82:	f805 6b01 	strb.w	r6, [r5], #1
 8004d86:	9b02      	ldr	r3, [sp, #8]
 8004d88:	429d      	cmp	r5, r3
 8004d8a:	4680      	mov	r8, r0
 8004d8c:	4689      	mov	r9, r1
 8004d8e:	f04f 0200 	mov.w	r2, #0
 8004d92:	d124      	bne.n	8004dde <_dtoa_r+0x62e>
 8004d94:	4b1b      	ldr	r3, [pc, #108]	; (8004e04 <_dtoa_r+0x654>)
 8004d96:	ec51 0b19 	vmov	r0, r1, d9
 8004d9a:	f7fb fa77 	bl	800028c <__adddf3>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	4640      	mov	r0, r8
 8004da4:	4649      	mov	r1, r9
 8004da6:	f7fb feb7 	bl	8000b18 <__aeabi_dcmpgt>
 8004daa:	2800      	cmp	r0, #0
 8004dac:	d173      	bne.n	8004e96 <_dtoa_r+0x6e6>
 8004dae:	ec53 2b19 	vmov	r2, r3, d9
 8004db2:	4914      	ldr	r1, [pc, #80]	; (8004e04 <_dtoa_r+0x654>)
 8004db4:	2000      	movs	r0, #0
 8004db6:	f7fb fa67 	bl	8000288 <__aeabi_dsub>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4640      	mov	r0, r8
 8004dc0:	4649      	mov	r1, r9
 8004dc2:	f7fb fe8b 	bl	8000adc <__aeabi_dcmplt>
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	f43f af2f 	beq.w	8004c2a <_dtoa_r+0x47a>
 8004dcc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004dce:	1e6b      	subs	r3, r5, #1
 8004dd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8004dd2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004dd6:	2b30      	cmp	r3, #48	; 0x30
 8004dd8:	d0f8      	beq.n	8004dcc <_dtoa_r+0x61c>
 8004dda:	46bb      	mov	fp, r7
 8004ddc:	e04a      	b.n	8004e74 <_dtoa_r+0x6c4>
 8004dde:	4b06      	ldr	r3, [pc, #24]	; (8004df8 <_dtoa_r+0x648>)
 8004de0:	f7fb fc0a 	bl	80005f8 <__aeabi_dmul>
 8004de4:	4680      	mov	r8, r0
 8004de6:	4689      	mov	r9, r1
 8004de8:	e7bd      	b.n	8004d66 <_dtoa_r+0x5b6>
 8004dea:	bf00      	nop
 8004dec:	08007680 	.word	0x08007680
 8004df0:	08007658 	.word	0x08007658
 8004df4:	3ff00000 	.word	0x3ff00000
 8004df8:	40240000 	.word	0x40240000
 8004dfc:	401c0000 	.word	0x401c0000
 8004e00:	40140000 	.word	0x40140000
 8004e04:	3fe00000 	.word	0x3fe00000
 8004e08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004e0c:	9d00      	ldr	r5, [sp, #0]
 8004e0e:	4642      	mov	r2, r8
 8004e10:	464b      	mov	r3, r9
 8004e12:	4630      	mov	r0, r6
 8004e14:	4639      	mov	r1, r7
 8004e16:	f7fb fd19 	bl	800084c <__aeabi_ddiv>
 8004e1a:	f7fb fe9d 	bl	8000b58 <__aeabi_d2iz>
 8004e1e:	9001      	str	r0, [sp, #4]
 8004e20:	f7fb fb80 	bl	8000524 <__aeabi_i2d>
 8004e24:	4642      	mov	r2, r8
 8004e26:	464b      	mov	r3, r9
 8004e28:	f7fb fbe6 	bl	80005f8 <__aeabi_dmul>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	460b      	mov	r3, r1
 8004e30:	4630      	mov	r0, r6
 8004e32:	4639      	mov	r1, r7
 8004e34:	f7fb fa28 	bl	8000288 <__aeabi_dsub>
 8004e38:	9e01      	ldr	r6, [sp, #4]
 8004e3a:	9f04      	ldr	r7, [sp, #16]
 8004e3c:	3630      	adds	r6, #48	; 0x30
 8004e3e:	f805 6b01 	strb.w	r6, [r5], #1
 8004e42:	9e00      	ldr	r6, [sp, #0]
 8004e44:	1bae      	subs	r6, r5, r6
 8004e46:	42b7      	cmp	r7, r6
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	d134      	bne.n	8004eb8 <_dtoa_r+0x708>
 8004e4e:	f7fb fa1d 	bl	800028c <__adddf3>
 8004e52:	4642      	mov	r2, r8
 8004e54:	464b      	mov	r3, r9
 8004e56:	4606      	mov	r6, r0
 8004e58:	460f      	mov	r7, r1
 8004e5a:	f7fb fe5d 	bl	8000b18 <__aeabi_dcmpgt>
 8004e5e:	b9c8      	cbnz	r0, 8004e94 <_dtoa_r+0x6e4>
 8004e60:	4642      	mov	r2, r8
 8004e62:	464b      	mov	r3, r9
 8004e64:	4630      	mov	r0, r6
 8004e66:	4639      	mov	r1, r7
 8004e68:	f7fb fe2e 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e6c:	b110      	cbz	r0, 8004e74 <_dtoa_r+0x6c4>
 8004e6e:	9b01      	ldr	r3, [sp, #4]
 8004e70:	07db      	lsls	r3, r3, #31
 8004e72:	d40f      	bmi.n	8004e94 <_dtoa_r+0x6e4>
 8004e74:	4651      	mov	r1, sl
 8004e76:	4620      	mov	r0, r4
 8004e78:	f000 fb18 	bl	80054ac <_Bfree>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e80:	702b      	strb	r3, [r5, #0]
 8004e82:	f10b 0301 	add.w	r3, fp, #1
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f43f ace2 	beq.w	8004854 <_dtoa_r+0xa4>
 8004e90:	601d      	str	r5, [r3, #0]
 8004e92:	e4df      	b.n	8004854 <_dtoa_r+0xa4>
 8004e94:	465f      	mov	r7, fp
 8004e96:	462b      	mov	r3, r5
 8004e98:	461d      	mov	r5, r3
 8004e9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e9e:	2a39      	cmp	r2, #57	; 0x39
 8004ea0:	d106      	bne.n	8004eb0 <_dtoa_r+0x700>
 8004ea2:	9a00      	ldr	r2, [sp, #0]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d1f7      	bne.n	8004e98 <_dtoa_r+0x6e8>
 8004ea8:	9900      	ldr	r1, [sp, #0]
 8004eaa:	2230      	movs	r2, #48	; 0x30
 8004eac:	3701      	adds	r7, #1
 8004eae:	700a      	strb	r2, [r1, #0]
 8004eb0:	781a      	ldrb	r2, [r3, #0]
 8004eb2:	3201      	adds	r2, #1
 8004eb4:	701a      	strb	r2, [r3, #0]
 8004eb6:	e790      	b.n	8004dda <_dtoa_r+0x62a>
 8004eb8:	4ba3      	ldr	r3, [pc, #652]	; (8005148 <_dtoa_r+0x998>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f7fb fb9c 	bl	80005f8 <__aeabi_dmul>
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	4606      	mov	r6, r0
 8004ec6:	460f      	mov	r7, r1
 8004ec8:	f7fb fdfe 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	d09e      	beq.n	8004e0e <_dtoa_r+0x65e>
 8004ed0:	e7d0      	b.n	8004e74 <_dtoa_r+0x6c4>
 8004ed2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ed4:	2a00      	cmp	r2, #0
 8004ed6:	f000 80ca 	beq.w	800506e <_dtoa_r+0x8be>
 8004eda:	9a07      	ldr	r2, [sp, #28]
 8004edc:	2a01      	cmp	r2, #1
 8004ede:	f300 80ad 	bgt.w	800503c <_dtoa_r+0x88c>
 8004ee2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ee4:	2a00      	cmp	r2, #0
 8004ee6:	f000 80a5 	beq.w	8005034 <_dtoa_r+0x884>
 8004eea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004eee:	9e08      	ldr	r6, [sp, #32]
 8004ef0:	9d05      	ldr	r5, [sp, #20]
 8004ef2:	9a05      	ldr	r2, [sp, #20]
 8004ef4:	441a      	add	r2, r3
 8004ef6:	9205      	str	r2, [sp, #20]
 8004ef8:	9a06      	ldr	r2, [sp, #24]
 8004efa:	2101      	movs	r1, #1
 8004efc:	441a      	add	r2, r3
 8004efe:	4620      	mov	r0, r4
 8004f00:	9206      	str	r2, [sp, #24]
 8004f02:	f000 fb89 	bl	8005618 <__i2b>
 8004f06:	4607      	mov	r7, r0
 8004f08:	b165      	cbz	r5, 8004f24 <_dtoa_r+0x774>
 8004f0a:	9b06      	ldr	r3, [sp, #24]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	dd09      	ble.n	8004f24 <_dtoa_r+0x774>
 8004f10:	42ab      	cmp	r3, r5
 8004f12:	9a05      	ldr	r2, [sp, #20]
 8004f14:	bfa8      	it	ge
 8004f16:	462b      	movge	r3, r5
 8004f18:	1ad2      	subs	r2, r2, r3
 8004f1a:	9205      	str	r2, [sp, #20]
 8004f1c:	9a06      	ldr	r2, [sp, #24]
 8004f1e:	1aed      	subs	r5, r5, r3
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	9306      	str	r3, [sp, #24]
 8004f24:	9b08      	ldr	r3, [sp, #32]
 8004f26:	b1f3      	cbz	r3, 8004f66 <_dtoa_r+0x7b6>
 8004f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 80a3 	beq.w	8005076 <_dtoa_r+0x8c6>
 8004f30:	2e00      	cmp	r6, #0
 8004f32:	dd10      	ble.n	8004f56 <_dtoa_r+0x7a6>
 8004f34:	4639      	mov	r1, r7
 8004f36:	4632      	mov	r2, r6
 8004f38:	4620      	mov	r0, r4
 8004f3a:	f000 fc2d 	bl	8005798 <__pow5mult>
 8004f3e:	4652      	mov	r2, sl
 8004f40:	4601      	mov	r1, r0
 8004f42:	4607      	mov	r7, r0
 8004f44:	4620      	mov	r0, r4
 8004f46:	f000 fb7d 	bl	8005644 <__multiply>
 8004f4a:	4651      	mov	r1, sl
 8004f4c:	4680      	mov	r8, r0
 8004f4e:	4620      	mov	r0, r4
 8004f50:	f000 faac 	bl	80054ac <_Bfree>
 8004f54:	46c2      	mov	sl, r8
 8004f56:	9b08      	ldr	r3, [sp, #32]
 8004f58:	1b9a      	subs	r2, r3, r6
 8004f5a:	d004      	beq.n	8004f66 <_dtoa_r+0x7b6>
 8004f5c:	4651      	mov	r1, sl
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f000 fc1a 	bl	8005798 <__pow5mult>
 8004f64:	4682      	mov	sl, r0
 8004f66:	2101      	movs	r1, #1
 8004f68:	4620      	mov	r0, r4
 8004f6a:	f000 fb55 	bl	8005618 <__i2b>
 8004f6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	4606      	mov	r6, r0
 8004f74:	f340 8081 	ble.w	800507a <_dtoa_r+0x8ca>
 8004f78:	461a      	mov	r2, r3
 8004f7a:	4601      	mov	r1, r0
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	f000 fc0b 	bl	8005798 <__pow5mult>
 8004f82:	9b07      	ldr	r3, [sp, #28]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	4606      	mov	r6, r0
 8004f88:	dd7a      	ble.n	8005080 <_dtoa_r+0x8d0>
 8004f8a:	f04f 0800 	mov.w	r8, #0
 8004f8e:	6933      	ldr	r3, [r6, #16]
 8004f90:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004f94:	6918      	ldr	r0, [r3, #16]
 8004f96:	f000 faf1 	bl	800557c <__hi0bits>
 8004f9a:	f1c0 0020 	rsb	r0, r0, #32
 8004f9e:	9b06      	ldr	r3, [sp, #24]
 8004fa0:	4418      	add	r0, r3
 8004fa2:	f010 001f 	ands.w	r0, r0, #31
 8004fa6:	f000 8094 	beq.w	80050d2 <_dtoa_r+0x922>
 8004faa:	f1c0 0320 	rsb	r3, r0, #32
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	f340 8085 	ble.w	80050be <_dtoa_r+0x90e>
 8004fb4:	9b05      	ldr	r3, [sp, #20]
 8004fb6:	f1c0 001c 	rsb	r0, r0, #28
 8004fba:	4403      	add	r3, r0
 8004fbc:	9305      	str	r3, [sp, #20]
 8004fbe:	9b06      	ldr	r3, [sp, #24]
 8004fc0:	4403      	add	r3, r0
 8004fc2:	4405      	add	r5, r0
 8004fc4:	9306      	str	r3, [sp, #24]
 8004fc6:	9b05      	ldr	r3, [sp, #20]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	dd05      	ble.n	8004fd8 <_dtoa_r+0x828>
 8004fcc:	4651      	mov	r1, sl
 8004fce:	461a      	mov	r2, r3
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	f000 fc3b 	bl	800584c <__lshift>
 8004fd6:	4682      	mov	sl, r0
 8004fd8:	9b06      	ldr	r3, [sp, #24]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	dd05      	ble.n	8004fea <_dtoa_r+0x83a>
 8004fde:	4631      	mov	r1, r6
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	f000 fc32 	bl	800584c <__lshift>
 8004fe8:	4606      	mov	r6, r0
 8004fea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d072      	beq.n	80050d6 <_dtoa_r+0x926>
 8004ff0:	4631      	mov	r1, r6
 8004ff2:	4650      	mov	r0, sl
 8004ff4:	f000 fc96 	bl	8005924 <__mcmp>
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	da6c      	bge.n	80050d6 <_dtoa_r+0x926>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	4651      	mov	r1, sl
 8005000:	220a      	movs	r2, #10
 8005002:	4620      	mov	r0, r4
 8005004:	f000 fa74 	bl	80054f0 <__multadd>
 8005008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800500a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800500e:	4682      	mov	sl, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 81b0 	beq.w	8005376 <_dtoa_r+0xbc6>
 8005016:	2300      	movs	r3, #0
 8005018:	4639      	mov	r1, r7
 800501a:	220a      	movs	r2, #10
 800501c:	4620      	mov	r0, r4
 800501e:	f000 fa67 	bl	80054f0 <__multadd>
 8005022:	9b01      	ldr	r3, [sp, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	4607      	mov	r7, r0
 8005028:	f300 8096 	bgt.w	8005158 <_dtoa_r+0x9a8>
 800502c:	9b07      	ldr	r3, [sp, #28]
 800502e:	2b02      	cmp	r3, #2
 8005030:	dc59      	bgt.n	80050e6 <_dtoa_r+0x936>
 8005032:	e091      	b.n	8005158 <_dtoa_r+0x9a8>
 8005034:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005036:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800503a:	e758      	b.n	8004eee <_dtoa_r+0x73e>
 800503c:	9b04      	ldr	r3, [sp, #16]
 800503e:	1e5e      	subs	r6, r3, #1
 8005040:	9b08      	ldr	r3, [sp, #32]
 8005042:	42b3      	cmp	r3, r6
 8005044:	bfbf      	itttt	lt
 8005046:	9b08      	ldrlt	r3, [sp, #32]
 8005048:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800504a:	9608      	strlt	r6, [sp, #32]
 800504c:	1af3      	sublt	r3, r6, r3
 800504e:	bfb4      	ite	lt
 8005050:	18d2      	addlt	r2, r2, r3
 8005052:	1b9e      	subge	r6, r3, r6
 8005054:	9b04      	ldr	r3, [sp, #16]
 8005056:	bfbc      	itt	lt
 8005058:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800505a:	2600      	movlt	r6, #0
 800505c:	2b00      	cmp	r3, #0
 800505e:	bfb7      	itett	lt
 8005060:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005064:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005068:	1a9d      	sublt	r5, r3, r2
 800506a:	2300      	movlt	r3, #0
 800506c:	e741      	b.n	8004ef2 <_dtoa_r+0x742>
 800506e:	9e08      	ldr	r6, [sp, #32]
 8005070:	9d05      	ldr	r5, [sp, #20]
 8005072:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005074:	e748      	b.n	8004f08 <_dtoa_r+0x758>
 8005076:	9a08      	ldr	r2, [sp, #32]
 8005078:	e770      	b.n	8004f5c <_dtoa_r+0x7ac>
 800507a:	9b07      	ldr	r3, [sp, #28]
 800507c:	2b01      	cmp	r3, #1
 800507e:	dc19      	bgt.n	80050b4 <_dtoa_r+0x904>
 8005080:	9b02      	ldr	r3, [sp, #8]
 8005082:	b9bb      	cbnz	r3, 80050b4 <_dtoa_r+0x904>
 8005084:	9b03      	ldr	r3, [sp, #12]
 8005086:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800508a:	b99b      	cbnz	r3, 80050b4 <_dtoa_r+0x904>
 800508c:	9b03      	ldr	r3, [sp, #12]
 800508e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005092:	0d1b      	lsrs	r3, r3, #20
 8005094:	051b      	lsls	r3, r3, #20
 8005096:	b183      	cbz	r3, 80050ba <_dtoa_r+0x90a>
 8005098:	9b05      	ldr	r3, [sp, #20]
 800509a:	3301      	adds	r3, #1
 800509c:	9305      	str	r3, [sp, #20]
 800509e:	9b06      	ldr	r3, [sp, #24]
 80050a0:	3301      	adds	r3, #1
 80050a2:	9306      	str	r3, [sp, #24]
 80050a4:	f04f 0801 	mov.w	r8, #1
 80050a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f47f af6f 	bne.w	8004f8e <_dtoa_r+0x7de>
 80050b0:	2001      	movs	r0, #1
 80050b2:	e774      	b.n	8004f9e <_dtoa_r+0x7ee>
 80050b4:	f04f 0800 	mov.w	r8, #0
 80050b8:	e7f6      	b.n	80050a8 <_dtoa_r+0x8f8>
 80050ba:	4698      	mov	r8, r3
 80050bc:	e7f4      	b.n	80050a8 <_dtoa_r+0x8f8>
 80050be:	d082      	beq.n	8004fc6 <_dtoa_r+0x816>
 80050c0:	9a05      	ldr	r2, [sp, #20]
 80050c2:	331c      	adds	r3, #28
 80050c4:	441a      	add	r2, r3
 80050c6:	9205      	str	r2, [sp, #20]
 80050c8:	9a06      	ldr	r2, [sp, #24]
 80050ca:	441a      	add	r2, r3
 80050cc:	441d      	add	r5, r3
 80050ce:	9206      	str	r2, [sp, #24]
 80050d0:	e779      	b.n	8004fc6 <_dtoa_r+0x816>
 80050d2:	4603      	mov	r3, r0
 80050d4:	e7f4      	b.n	80050c0 <_dtoa_r+0x910>
 80050d6:	9b04      	ldr	r3, [sp, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	dc37      	bgt.n	800514c <_dtoa_r+0x99c>
 80050dc:	9b07      	ldr	r3, [sp, #28]
 80050de:	2b02      	cmp	r3, #2
 80050e0:	dd34      	ble.n	800514c <_dtoa_r+0x99c>
 80050e2:	9b04      	ldr	r3, [sp, #16]
 80050e4:	9301      	str	r3, [sp, #4]
 80050e6:	9b01      	ldr	r3, [sp, #4]
 80050e8:	b963      	cbnz	r3, 8005104 <_dtoa_r+0x954>
 80050ea:	4631      	mov	r1, r6
 80050ec:	2205      	movs	r2, #5
 80050ee:	4620      	mov	r0, r4
 80050f0:	f000 f9fe 	bl	80054f0 <__multadd>
 80050f4:	4601      	mov	r1, r0
 80050f6:	4606      	mov	r6, r0
 80050f8:	4650      	mov	r0, sl
 80050fa:	f000 fc13 	bl	8005924 <__mcmp>
 80050fe:	2800      	cmp	r0, #0
 8005100:	f73f adbb 	bgt.w	8004c7a <_dtoa_r+0x4ca>
 8005104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005106:	9d00      	ldr	r5, [sp, #0]
 8005108:	ea6f 0b03 	mvn.w	fp, r3
 800510c:	f04f 0800 	mov.w	r8, #0
 8005110:	4631      	mov	r1, r6
 8005112:	4620      	mov	r0, r4
 8005114:	f000 f9ca 	bl	80054ac <_Bfree>
 8005118:	2f00      	cmp	r7, #0
 800511a:	f43f aeab 	beq.w	8004e74 <_dtoa_r+0x6c4>
 800511e:	f1b8 0f00 	cmp.w	r8, #0
 8005122:	d005      	beq.n	8005130 <_dtoa_r+0x980>
 8005124:	45b8      	cmp	r8, r7
 8005126:	d003      	beq.n	8005130 <_dtoa_r+0x980>
 8005128:	4641      	mov	r1, r8
 800512a:	4620      	mov	r0, r4
 800512c:	f000 f9be 	bl	80054ac <_Bfree>
 8005130:	4639      	mov	r1, r7
 8005132:	4620      	mov	r0, r4
 8005134:	f000 f9ba 	bl	80054ac <_Bfree>
 8005138:	e69c      	b.n	8004e74 <_dtoa_r+0x6c4>
 800513a:	2600      	movs	r6, #0
 800513c:	4637      	mov	r7, r6
 800513e:	e7e1      	b.n	8005104 <_dtoa_r+0x954>
 8005140:	46bb      	mov	fp, r7
 8005142:	4637      	mov	r7, r6
 8005144:	e599      	b.n	8004c7a <_dtoa_r+0x4ca>
 8005146:	bf00      	nop
 8005148:	40240000 	.word	0x40240000
 800514c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 80c8 	beq.w	80052e4 <_dtoa_r+0xb34>
 8005154:	9b04      	ldr	r3, [sp, #16]
 8005156:	9301      	str	r3, [sp, #4]
 8005158:	2d00      	cmp	r5, #0
 800515a:	dd05      	ble.n	8005168 <_dtoa_r+0x9b8>
 800515c:	4639      	mov	r1, r7
 800515e:	462a      	mov	r2, r5
 8005160:	4620      	mov	r0, r4
 8005162:	f000 fb73 	bl	800584c <__lshift>
 8005166:	4607      	mov	r7, r0
 8005168:	f1b8 0f00 	cmp.w	r8, #0
 800516c:	d05b      	beq.n	8005226 <_dtoa_r+0xa76>
 800516e:	6879      	ldr	r1, [r7, #4]
 8005170:	4620      	mov	r0, r4
 8005172:	f000 f95b 	bl	800542c <_Balloc>
 8005176:	4605      	mov	r5, r0
 8005178:	b928      	cbnz	r0, 8005186 <_dtoa_r+0x9d6>
 800517a:	4b83      	ldr	r3, [pc, #524]	; (8005388 <_dtoa_r+0xbd8>)
 800517c:	4602      	mov	r2, r0
 800517e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005182:	f7ff bb2e 	b.w	80047e2 <_dtoa_r+0x32>
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	3202      	adds	r2, #2
 800518a:	0092      	lsls	r2, r2, #2
 800518c:	f107 010c 	add.w	r1, r7, #12
 8005190:	300c      	adds	r0, #12
 8005192:	f000 fee7 	bl	8005f64 <memcpy>
 8005196:	2201      	movs	r2, #1
 8005198:	4629      	mov	r1, r5
 800519a:	4620      	mov	r0, r4
 800519c:	f000 fb56 	bl	800584c <__lshift>
 80051a0:	9b00      	ldr	r3, [sp, #0]
 80051a2:	3301      	adds	r3, #1
 80051a4:	9304      	str	r3, [sp, #16]
 80051a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051aa:	4413      	add	r3, r2
 80051ac:	9308      	str	r3, [sp, #32]
 80051ae:	9b02      	ldr	r3, [sp, #8]
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	46b8      	mov	r8, r7
 80051b6:	9306      	str	r3, [sp, #24]
 80051b8:	4607      	mov	r7, r0
 80051ba:	9b04      	ldr	r3, [sp, #16]
 80051bc:	4631      	mov	r1, r6
 80051be:	3b01      	subs	r3, #1
 80051c0:	4650      	mov	r0, sl
 80051c2:	9301      	str	r3, [sp, #4]
 80051c4:	f7ff fa69 	bl	800469a <quorem>
 80051c8:	4641      	mov	r1, r8
 80051ca:	9002      	str	r0, [sp, #8]
 80051cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80051d0:	4650      	mov	r0, sl
 80051d2:	f000 fba7 	bl	8005924 <__mcmp>
 80051d6:	463a      	mov	r2, r7
 80051d8:	9005      	str	r0, [sp, #20]
 80051da:	4631      	mov	r1, r6
 80051dc:	4620      	mov	r0, r4
 80051de:	f000 fbbd 	bl	800595c <__mdiff>
 80051e2:	68c2      	ldr	r2, [r0, #12]
 80051e4:	4605      	mov	r5, r0
 80051e6:	bb02      	cbnz	r2, 800522a <_dtoa_r+0xa7a>
 80051e8:	4601      	mov	r1, r0
 80051ea:	4650      	mov	r0, sl
 80051ec:	f000 fb9a 	bl	8005924 <__mcmp>
 80051f0:	4602      	mov	r2, r0
 80051f2:	4629      	mov	r1, r5
 80051f4:	4620      	mov	r0, r4
 80051f6:	9209      	str	r2, [sp, #36]	; 0x24
 80051f8:	f000 f958 	bl	80054ac <_Bfree>
 80051fc:	9b07      	ldr	r3, [sp, #28]
 80051fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005200:	9d04      	ldr	r5, [sp, #16]
 8005202:	ea43 0102 	orr.w	r1, r3, r2
 8005206:	9b06      	ldr	r3, [sp, #24]
 8005208:	4319      	orrs	r1, r3
 800520a:	d110      	bne.n	800522e <_dtoa_r+0xa7e>
 800520c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005210:	d029      	beq.n	8005266 <_dtoa_r+0xab6>
 8005212:	9b05      	ldr	r3, [sp, #20]
 8005214:	2b00      	cmp	r3, #0
 8005216:	dd02      	ble.n	800521e <_dtoa_r+0xa6e>
 8005218:	9b02      	ldr	r3, [sp, #8]
 800521a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800521e:	9b01      	ldr	r3, [sp, #4]
 8005220:	f883 9000 	strb.w	r9, [r3]
 8005224:	e774      	b.n	8005110 <_dtoa_r+0x960>
 8005226:	4638      	mov	r0, r7
 8005228:	e7ba      	b.n	80051a0 <_dtoa_r+0x9f0>
 800522a:	2201      	movs	r2, #1
 800522c:	e7e1      	b.n	80051f2 <_dtoa_r+0xa42>
 800522e:	9b05      	ldr	r3, [sp, #20]
 8005230:	2b00      	cmp	r3, #0
 8005232:	db04      	blt.n	800523e <_dtoa_r+0xa8e>
 8005234:	9907      	ldr	r1, [sp, #28]
 8005236:	430b      	orrs	r3, r1
 8005238:	9906      	ldr	r1, [sp, #24]
 800523a:	430b      	orrs	r3, r1
 800523c:	d120      	bne.n	8005280 <_dtoa_r+0xad0>
 800523e:	2a00      	cmp	r2, #0
 8005240:	dded      	ble.n	800521e <_dtoa_r+0xa6e>
 8005242:	4651      	mov	r1, sl
 8005244:	2201      	movs	r2, #1
 8005246:	4620      	mov	r0, r4
 8005248:	f000 fb00 	bl	800584c <__lshift>
 800524c:	4631      	mov	r1, r6
 800524e:	4682      	mov	sl, r0
 8005250:	f000 fb68 	bl	8005924 <__mcmp>
 8005254:	2800      	cmp	r0, #0
 8005256:	dc03      	bgt.n	8005260 <_dtoa_r+0xab0>
 8005258:	d1e1      	bne.n	800521e <_dtoa_r+0xa6e>
 800525a:	f019 0f01 	tst.w	r9, #1
 800525e:	d0de      	beq.n	800521e <_dtoa_r+0xa6e>
 8005260:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005264:	d1d8      	bne.n	8005218 <_dtoa_r+0xa68>
 8005266:	9a01      	ldr	r2, [sp, #4]
 8005268:	2339      	movs	r3, #57	; 0x39
 800526a:	7013      	strb	r3, [r2, #0]
 800526c:	462b      	mov	r3, r5
 800526e:	461d      	mov	r5, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005276:	2a39      	cmp	r2, #57	; 0x39
 8005278:	d06c      	beq.n	8005354 <_dtoa_r+0xba4>
 800527a:	3201      	adds	r2, #1
 800527c:	701a      	strb	r2, [r3, #0]
 800527e:	e747      	b.n	8005110 <_dtoa_r+0x960>
 8005280:	2a00      	cmp	r2, #0
 8005282:	dd07      	ble.n	8005294 <_dtoa_r+0xae4>
 8005284:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005288:	d0ed      	beq.n	8005266 <_dtoa_r+0xab6>
 800528a:	9a01      	ldr	r2, [sp, #4]
 800528c:	f109 0301 	add.w	r3, r9, #1
 8005290:	7013      	strb	r3, [r2, #0]
 8005292:	e73d      	b.n	8005110 <_dtoa_r+0x960>
 8005294:	9b04      	ldr	r3, [sp, #16]
 8005296:	9a08      	ldr	r2, [sp, #32]
 8005298:	f803 9c01 	strb.w	r9, [r3, #-1]
 800529c:	4293      	cmp	r3, r2
 800529e:	d043      	beq.n	8005328 <_dtoa_r+0xb78>
 80052a0:	4651      	mov	r1, sl
 80052a2:	2300      	movs	r3, #0
 80052a4:	220a      	movs	r2, #10
 80052a6:	4620      	mov	r0, r4
 80052a8:	f000 f922 	bl	80054f0 <__multadd>
 80052ac:	45b8      	cmp	r8, r7
 80052ae:	4682      	mov	sl, r0
 80052b0:	f04f 0300 	mov.w	r3, #0
 80052b4:	f04f 020a 	mov.w	r2, #10
 80052b8:	4641      	mov	r1, r8
 80052ba:	4620      	mov	r0, r4
 80052bc:	d107      	bne.n	80052ce <_dtoa_r+0xb1e>
 80052be:	f000 f917 	bl	80054f0 <__multadd>
 80052c2:	4680      	mov	r8, r0
 80052c4:	4607      	mov	r7, r0
 80052c6:	9b04      	ldr	r3, [sp, #16]
 80052c8:	3301      	adds	r3, #1
 80052ca:	9304      	str	r3, [sp, #16]
 80052cc:	e775      	b.n	80051ba <_dtoa_r+0xa0a>
 80052ce:	f000 f90f 	bl	80054f0 <__multadd>
 80052d2:	4639      	mov	r1, r7
 80052d4:	4680      	mov	r8, r0
 80052d6:	2300      	movs	r3, #0
 80052d8:	220a      	movs	r2, #10
 80052da:	4620      	mov	r0, r4
 80052dc:	f000 f908 	bl	80054f0 <__multadd>
 80052e0:	4607      	mov	r7, r0
 80052e2:	e7f0      	b.n	80052c6 <_dtoa_r+0xb16>
 80052e4:	9b04      	ldr	r3, [sp, #16]
 80052e6:	9301      	str	r3, [sp, #4]
 80052e8:	9d00      	ldr	r5, [sp, #0]
 80052ea:	4631      	mov	r1, r6
 80052ec:	4650      	mov	r0, sl
 80052ee:	f7ff f9d4 	bl	800469a <quorem>
 80052f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80052f6:	9b00      	ldr	r3, [sp, #0]
 80052f8:	f805 9b01 	strb.w	r9, [r5], #1
 80052fc:	1aea      	subs	r2, r5, r3
 80052fe:	9b01      	ldr	r3, [sp, #4]
 8005300:	4293      	cmp	r3, r2
 8005302:	dd07      	ble.n	8005314 <_dtoa_r+0xb64>
 8005304:	4651      	mov	r1, sl
 8005306:	2300      	movs	r3, #0
 8005308:	220a      	movs	r2, #10
 800530a:	4620      	mov	r0, r4
 800530c:	f000 f8f0 	bl	80054f0 <__multadd>
 8005310:	4682      	mov	sl, r0
 8005312:	e7ea      	b.n	80052ea <_dtoa_r+0xb3a>
 8005314:	9b01      	ldr	r3, [sp, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	bfc8      	it	gt
 800531a:	461d      	movgt	r5, r3
 800531c:	9b00      	ldr	r3, [sp, #0]
 800531e:	bfd8      	it	le
 8005320:	2501      	movle	r5, #1
 8005322:	441d      	add	r5, r3
 8005324:	f04f 0800 	mov.w	r8, #0
 8005328:	4651      	mov	r1, sl
 800532a:	2201      	movs	r2, #1
 800532c:	4620      	mov	r0, r4
 800532e:	f000 fa8d 	bl	800584c <__lshift>
 8005332:	4631      	mov	r1, r6
 8005334:	4682      	mov	sl, r0
 8005336:	f000 faf5 	bl	8005924 <__mcmp>
 800533a:	2800      	cmp	r0, #0
 800533c:	dc96      	bgt.n	800526c <_dtoa_r+0xabc>
 800533e:	d102      	bne.n	8005346 <_dtoa_r+0xb96>
 8005340:	f019 0f01 	tst.w	r9, #1
 8005344:	d192      	bne.n	800526c <_dtoa_r+0xabc>
 8005346:	462b      	mov	r3, r5
 8005348:	461d      	mov	r5, r3
 800534a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800534e:	2a30      	cmp	r2, #48	; 0x30
 8005350:	d0fa      	beq.n	8005348 <_dtoa_r+0xb98>
 8005352:	e6dd      	b.n	8005110 <_dtoa_r+0x960>
 8005354:	9a00      	ldr	r2, [sp, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d189      	bne.n	800526e <_dtoa_r+0xabe>
 800535a:	f10b 0b01 	add.w	fp, fp, #1
 800535e:	2331      	movs	r3, #49	; 0x31
 8005360:	e796      	b.n	8005290 <_dtoa_r+0xae0>
 8005362:	4b0a      	ldr	r3, [pc, #40]	; (800538c <_dtoa_r+0xbdc>)
 8005364:	f7ff ba99 	b.w	800489a <_dtoa_r+0xea>
 8005368:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800536a:	2b00      	cmp	r3, #0
 800536c:	f47f aa6d 	bne.w	800484a <_dtoa_r+0x9a>
 8005370:	4b07      	ldr	r3, [pc, #28]	; (8005390 <_dtoa_r+0xbe0>)
 8005372:	f7ff ba92 	b.w	800489a <_dtoa_r+0xea>
 8005376:	9b01      	ldr	r3, [sp, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	dcb5      	bgt.n	80052e8 <_dtoa_r+0xb38>
 800537c:	9b07      	ldr	r3, [sp, #28]
 800537e:	2b02      	cmp	r3, #2
 8005380:	f73f aeb1 	bgt.w	80050e6 <_dtoa_r+0x936>
 8005384:	e7b0      	b.n	80052e8 <_dtoa_r+0xb38>
 8005386:	bf00      	nop
 8005388:	080075e7 	.word	0x080075e7
 800538c:	08007547 	.word	0x08007547
 8005390:	0800756b 	.word	0x0800756b

08005394 <_free_r>:
 8005394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005396:	2900      	cmp	r1, #0
 8005398:	d044      	beq.n	8005424 <_free_r+0x90>
 800539a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800539e:	9001      	str	r0, [sp, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f1a1 0404 	sub.w	r4, r1, #4
 80053a6:	bfb8      	it	lt
 80053a8:	18e4      	addlt	r4, r4, r3
 80053aa:	f7fe fb4f 	bl	8003a4c <__malloc_lock>
 80053ae:	4a1e      	ldr	r2, [pc, #120]	; (8005428 <_free_r+0x94>)
 80053b0:	9801      	ldr	r0, [sp, #4]
 80053b2:	6813      	ldr	r3, [r2, #0]
 80053b4:	b933      	cbnz	r3, 80053c4 <_free_r+0x30>
 80053b6:	6063      	str	r3, [r4, #4]
 80053b8:	6014      	str	r4, [r2, #0]
 80053ba:	b003      	add	sp, #12
 80053bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053c0:	f7fe bb4a 	b.w	8003a58 <__malloc_unlock>
 80053c4:	42a3      	cmp	r3, r4
 80053c6:	d908      	bls.n	80053da <_free_r+0x46>
 80053c8:	6825      	ldr	r5, [r4, #0]
 80053ca:	1961      	adds	r1, r4, r5
 80053cc:	428b      	cmp	r3, r1
 80053ce:	bf01      	itttt	eq
 80053d0:	6819      	ldreq	r1, [r3, #0]
 80053d2:	685b      	ldreq	r3, [r3, #4]
 80053d4:	1949      	addeq	r1, r1, r5
 80053d6:	6021      	streq	r1, [r4, #0]
 80053d8:	e7ed      	b.n	80053b6 <_free_r+0x22>
 80053da:	461a      	mov	r2, r3
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	b10b      	cbz	r3, 80053e4 <_free_r+0x50>
 80053e0:	42a3      	cmp	r3, r4
 80053e2:	d9fa      	bls.n	80053da <_free_r+0x46>
 80053e4:	6811      	ldr	r1, [r2, #0]
 80053e6:	1855      	adds	r5, r2, r1
 80053e8:	42a5      	cmp	r5, r4
 80053ea:	d10b      	bne.n	8005404 <_free_r+0x70>
 80053ec:	6824      	ldr	r4, [r4, #0]
 80053ee:	4421      	add	r1, r4
 80053f0:	1854      	adds	r4, r2, r1
 80053f2:	42a3      	cmp	r3, r4
 80053f4:	6011      	str	r1, [r2, #0]
 80053f6:	d1e0      	bne.n	80053ba <_free_r+0x26>
 80053f8:	681c      	ldr	r4, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	6053      	str	r3, [r2, #4]
 80053fe:	440c      	add	r4, r1
 8005400:	6014      	str	r4, [r2, #0]
 8005402:	e7da      	b.n	80053ba <_free_r+0x26>
 8005404:	d902      	bls.n	800540c <_free_r+0x78>
 8005406:	230c      	movs	r3, #12
 8005408:	6003      	str	r3, [r0, #0]
 800540a:	e7d6      	b.n	80053ba <_free_r+0x26>
 800540c:	6825      	ldr	r5, [r4, #0]
 800540e:	1961      	adds	r1, r4, r5
 8005410:	428b      	cmp	r3, r1
 8005412:	bf04      	itt	eq
 8005414:	6819      	ldreq	r1, [r3, #0]
 8005416:	685b      	ldreq	r3, [r3, #4]
 8005418:	6063      	str	r3, [r4, #4]
 800541a:	bf04      	itt	eq
 800541c:	1949      	addeq	r1, r1, r5
 800541e:	6021      	streq	r1, [r4, #0]
 8005420:	6054      	str	r4, [r2, #4]
 8005422:	e7ca      	b.n	80053ba <_free_r+0x26>
 8005424:	b003      	add	sp, #12
 8005426:	bd30      	pop	{r4, r5, pc}
 8005428:	20000374 	.word	0x20000374

0800542c <_Balloc>:
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	69c6      	ldr	r6, [r0, #28]
 8005430:	4604      	mov	r4, r0
 8005432:	460d      	mov	r5, r1
 8005434:	b976      	cbnz	r6, 8005454 <_Balloc+0x28>
 8005436:	2010      	movs	r0, #16
 8005438:	f7fe fa58 	bl	80038ec <malloc>
 800543c:	4602      	mov	r2, r0
 800543e:	61e0      	str	r0, [r4, #28]
 8005440:	b920      	cbnz	r0, 800544c <_Balloc+0x20>
 8005442:	4b18      	ldr	r3, [pc, #96]	; (80054a4 <_Balloc+0x78>)
 8005444:	4818      	ldr	r0, [pc, #96]	; (80054a8 <_Balloc+0x7c>)
 8005446:	216b      	movs	r1, #107	; 0x6b
 8005448:	f000 fd9a 	bl	8005f80 <__assert_func>
 800544c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005450:	6006      	str	r6, [r0, #0]
 8005452:	60c6      	str	r6, [r0, #12]
 8005454:	69e6      	ldr	r6, [r4, #28]
 8005456:	68f3      	ldr	r3, [r6, #12]
 8005458:	b183      	cbz	r3, 800547c <_Balloc+0x50>
 800545a:	69e3      	ldr	r3, [r4, #28]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005462:	b9b8      	cbnz	r0, 8005494 <_Balloc+0x68>
 8005464:	2101      	movs	r1, #1
 8005466:	fa01 f605 	lsl.w	r6, r1, r5
 800546a:	1d72      	adds	r2, r6, #5
 800546c:	0092      	lsls	r2, r2, #2
 800546e:	4620      	mov	r0, r4
 8005470:	f000 fda4 	bl	8005fbc <_calloc_r>
 8005474:	b160      	cbz	r0, 8005490 <_Balloc+0x64>
 8005476:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800547a:	e00e      	b.n	800549a <_Balloc+0x6e>
 800547c:	2221      	movs	r2, #33	; 0x21
 800547e:	2104      	movs	r1, #4
 8005480:	4620      	mov	r0, r4
 8005482:	f000 fd9b 	bl	8005fbc <_calloc_r>
 8005486:	69e3      	ldr	r3, [r4, #28]
 8005488:	60f0      	str	r0, [r6, #12]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e4      	bne.n	800545a <_Balloc+0x2e>
 8005490:	2000      	movs	r0, #0
 8005492:	bd70      	pop	{r4, r5, r6, pc}
 8005494:	6802      	ldr	r2, [r0, #0]
 8005496:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800549a:	2300      	movs	r3, #0
 800549c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80054a0:	e7f7      	b.n	8005492 <_Balloc+0x66>
 80054a2:	bf00      	nop
 80054a4:	08007578 	.word	0x08007578
 80054a8:	080075f8 	.word	0x080075f8

080054ac <_Bfree>:
 80054ac:	b570      	push	{r4, r5, r6, lr}
 80054ae:	69c6      	ldr	r6, [r0, #28]
 80054b0:	4605      	mov	r5, r0
 80054b2:	460c      	mov	r4, r1
 80054b4:	b976      	cbnz	r6, 80054d4 <_Bfree+0x28>
 80054b6:	2010      	movs	r0, #16
 80054b8:	f7fe fa18 	bl	80038ec <malloc>
 80054bc:	4602      	mov	r2, r0
 80054be:	61e8      	str	r0, [r5, #28]
 80054c0:	b920      	cbnz	r0, 80054cc <_Bfree+0x20>
 80054c2:	4b09      	ldr	r3, [pc, #36]	; (80054e8 <_Bfree+0x3c>)
 80054c4:	4809      	ldr	r0, [pc, #36]	; (80054ec <_Bfree+0x40>)
 80054c6:	218f      	movs	r1, #143	; 0x8f
 80054c8:	f000 fd5a 	bl	8005f80 <__assert_func>
 80054cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054d0:	6006      	str	r6, [r0, #0]
 80054d2:	60c6      	str	r6, [r0, #12]
 80054d4:	b13c      	cbz	r4, 80054e6 <_Bfree+0x3a>
 80054d6:	69eb      	ldr	r3, [r5, #28]
 80054d8:	6862      	ldr	r2, [r4, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054e0:	6021      	str	r1, [r4, #0]
 80054e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80054e6:	bd70      	pop	{r4, r5, r6, pc}
 80054e8:	08007578 	.word	0x08007578
 80054ec:	080075f8 	.word	0x080075f8

080054f0 <__multadd>:
 80054f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054f4:	690d      	ldr	r5, [r1, #16]
 80054f6:	4607      	mov	r7, r0
 80054f8:	460c      	mov	r4, r1
 80054fa:	461e      	mov	r6, r3
 80054fc:	f101 0c14 	add.w	ip, r1, #20
 8005500:	2000      	movs	r0, #0
 8005502:	f8dc 3000 	ldr.w	r3, [ip]
 8005506:	b299      	uxth	r1, r3
 8005508:	fb02 6101 	mla	r1, r2, r1, r6
 800550c:	0c1e      	lsrs	r6, r3, #16
 800550e:	0c0b      	lsrs	r3, r1, #16
 8005510:	fb02 3306 	mla	r3, r2, r6, r3
 8005514:	b289      	uxth	r1, r1
 8005516:	3001      	adds	r0, #1
 8005518:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800551c:	4285      	cmp	r5, r0
 800551e:	f84c 1b04 	str.w	r1, [ip], #4
 8005522:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005526:	dcec      	bgt.n	8005502 <__multadd+0x12>
 8005528:	b30e      	cbz	r6, 800556e <__multadd+0x7e>
 800552a:	68a3      	ldr	r3, [r4, #8]
 800552c:	42ab      	cmp	r3, r5
 800552e:	dc19      	bgt.n	8005564 <__multadd+0x74>
 8005530:	6861      	ldr	r1, [r4, #4]
 8005532:	4638      	mov	r0, r7
 8005534:	3101      	adds	r1, #1
 8005536:	f7ff ff79 	bl	800542c <_Balloc>
 800553a:	4680      	mov	r8, r0
 800553c:	b928      	cbnz	r0, 800554a <__multadd+0x5a>
 800553e:	4602      	mov	r2, r0
 8005540:	4b0c      	ldr	r3, [pc, #48]	; (8005574 <__multadd+0x84>)
 8005542:	480d      	ldr	r0, [pc, #52]	; (8005578 <__multadd+0x88>)
 8005544:	21ba      	movs	r1, #186	; 0xba
 8005546:	f000 fd1b 	bl	8005f80 <__assert_func>
 800554a:	6922      	ldr	r2, [r4, #16]
 800554c:	3202      	adds	r2, #2
 800554e:	f104 010c 	add.w	r1, r4, #12
 8005552:	0092      	lsls	r2, r2, #2
 8005554:	300c      	adds	r0, #12
 8005556:	f000 fd05 	bl	8005f64 <memcpy>
 800555a:	4621      	mov	r1, r4
 800555c:	4638      	mov	r0, r7
 800555e:	f7ff ffa5 	bl	80054ac <_Bfree>
 8005562:	4644      	mov	r4, r8
 8005564:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005568:	3501      	adds	r5, #1
 800556a:	615e      	str	r6, [r3, #20]
 800556c:	6125      	str	r5, [r4, #16]
 800556e:	4620      	mov	r0, r4
 8005570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005574:	080075e7 	.word	0x080075e7
 8005578:	080075f8 	.word	0x080075f8

0800557c <__hi0bits>:
 800557c:	0c03      	lsrs	r3, r0, #16
 800557e:	041b      	lsls	r3, r3, #16
 8005580:	b9d3      	cbnz	r3, 80055b8 <__hi0bits+0x3c>
 8005582:	0400      	lsls	r0, r0, #16
 8005584:	2310      	movs	r3, #16
 8005586:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800558a:	bf04      	itt	eq
 800558c:	0200      	lsleq	r0, r0, #8
 800558e:	3308      	addeq	r3, #8
 8005590:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005594:	bf04      	itt	eq
 8005596:	0100      	lsleq	r0, r0, #4
 8005598:	3304      	addeq	r3, #4
 800559a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800559e:	bf04      	itt	eq
 80055a0:	0080      	lsleq	r0, r0, #2
 80055a2:	3302      	addeq	r3, #2
 80055a4:	2800      	cmp	r0, #0
 80055a6:	db05      	blt.n	80055b4 <__hi0bits+0x38>
 80055a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80055ac:	f103 0301 	add.w	r3, r3, #1
 80055b0:	bf08      	it	eq
 80055b2:	2320      	moveq	r3, #32
 80055b4:	4618      	mov	r0, r3
 80055b6:	4770      	bx	lr
 80055b8:	2300      	movs	r3, #0
 80055ba:	e7e4      	b.n	8005586 <__hi0bits+0xa>

080055bc <__lo0bits>:
 80055bc:	6803      	ldr	r3, [r0, #0]
 80055be:	f013 0207 	ands.w	r2, r3, #7
 80055c2:	d00c      	beq.n	80055de <__lo0bits+0x22>
 80055c4:	07d9      	lsls	r1, r3, #31
 80055c6:	d422      	bmi.n	800560e <__lo0bits+0x52>
 80055c8:	079a      	lsls	r2, r3, #30
 80055ca:	bf49      	itett	mi
 80055cc:	085b      	lsrmi	r3, r3, #1
 80055ce:	089b      	lsrpl	r3, r3, #2
 80055d0:	6003      	strmi	r3, [r0, #0]
 80055d2:	2201      	movmi	r2, #1
 80055d4:	bf5c      	itt	pl
 80055d6:	6003      	strpl	r3, [r0, #0]
 80055d8:	2202      	movpl	r2, #2
 80055da:	4610      	mov	r0, r2
 80055dc:	4770      	bx	lr
 80055de:	b299      	uxth	r1, r3
 80055e0:	b909      	cbnz	r1, 80055e6 <__lo0bits+0x2a>
 80055e2:	0c1b      	lsrs	r3, r3, #16
 80055e4:	2210      	movs	r2, #16
 80055e6:	b2d9      	uxtb	r1, r3
 80055e8:	b909      	cbnz	r1, 80055ee <__lo0bits+0x32>
 80055ea:	3208      	adds	r2, #8
 80055ec:	0a1b      	lsrs	r3, r3, #8
 80055ee:	0719      	lsls	r1, r3, #28
 80055f0:	bf04      	itt	eq
 80055f2:	091b      	lsreq	r3, r3, #4
 80055f4:	3204      	addeq	r2, #4
 80055f6:	0799      	lsls	r1, r3, #30
 80055f8:	bf04      	itt	eq
 80055fa:	089b      	lsreq	r3, r3, #2
 80055fc:	3202      	addeq	r2, #2
 80055fe:	07d9      	lsls	r1, r3, #31
 8005600:	d403      	bmi.n	800560a <__lo0bits+0x4e>
 8005602:	085b      	lsrs	r3, r3, #1
 8005604:	f102 0201 	add.w	r2, r2, #1
 8005608:	d003      	beq.n	8005612 <__lo0bits+0x56>
 800560a:	6003      	str	r3, [r0, #0]
 800560c:	e7e5      	b.n	80055da <__lo0bits+0x1e>
 800560e:	2200      	movs	r2, #0
 8005610:	e7e3      	b.n	80055da <__lo0bits+0x1e>
 8005612:	2220      	movs	r2, #32
 8005614:	e7e1      	b.n	80055da <__lo0bits+0x1e>
	...

08005618 <__i2b>:
 8005618:	b510      	push	{r4, lr}
 800561a:	460c      	mov	r4, r1
 800561c:	2101      	movs	r1, #1
 800561e:	f7ff ff05 	bl	800542c <_Balloc>
 8005622:	4602      	mov	r2, r0
 8005624:	b928      	cbnz	r0, 8005632 <__i2b+0x1a>
 8005626:	4b05      	ldr	r3, [pc, #20]	; (800563c <__i2b+0x24>)
 8005628:	4805      	ldr	r0, [pc, #20]	; (8005640 <__i2b+0x28>)
 800562a:	f240 1145 	movw	r1, #325	; 0x145
 800562e:	f000 fca7 	bl	8005f80 <__assert_func>
 8005632:	2301      	movs	r3, #1
 8005634:	6144      	str	r4, [r0, #20]
 8005636:	6103      	str	r3, [r0, #16]
 8005638:	bd10      	pop	{r4, pc}
 800563a:	bf00      	nop
 800563c:	080075e7 	.word	0x080075e7
 8005640:	080075f8 	.word	0x080075f8

08005644 <__multiply>:
 8005644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005648:	4691      	mov	r9, r2
 800564a:	690a      	ldr	r2, [r1, #16]
 800564c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005650:	429a      	cmp	r2, r3
 8005652:	bfb8      	it	lt
 8005654:	460b      	movlt	r3, r1
 8005656:	460c      	mov	r4, r1
 8005658:	bfbc      	itt	lt
 800565a:	464c      	movlt	r4, r9
 800565c:	4699      	movlt	r9, r3
 800565e:	6927      	ldr	r7, [r4, #16]
 8005660:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005664:	68a3      	ldr	r3, [r4, #8]
 8005666:	6861      	ldr	r1, [r4, #4]
 8005668:	eb07 060a 	add.w	r6, r7, sl
 800566c:	42b3      	cmp	r3, r6
 800566e:	b085      	sub	sp, #20
 8005670:	bfb8      	it	lt
 8005672:	3101      	addlt	r1, #1
 8005674:	f7ff feda 	bl	800542c <_Balloc>
 8005678:	b930      	cbnz	r0, 8005688 <__multiply+0x44>
 800567a:	4602      	mov	r2, r0
 800567c:	4b44      	ldr	r3, [pc, #272]	; (8005790 <__multiply+0x14c>)
 800567e:	4845      	ldr	r0, [pc, #276]	; (8005794 <__multiply+0x150>)
 8005680:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005684:	f000 fc7c 	bl	8005f80 <__assert_func>
 8005688:	f100 0514 	add.w	r5, r0, #20
 800568c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005690:	462b      	mov	r3, r5
 8005692:	2200      	movs	r2, #0
 8005694:	4543      	cmp	r3, r8
 8005696:	d321      	bcc.n	80056dc <__multiply+0x98>
 8005698:	f104 0314 	add.w	r3, r4, #20
 800569c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80056a0:	f109 0314 	add.w	r3, r9, #20
 80056a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80056a8:	9202      	str	r2, [sp, #8]
 80056aa:	1b3a      	subs	r2, r7, r4
 80056ac:	3a15      	subs	r2, #21
 80056ae:	f022 0203 	bic.w	r2, r2, #3
 80056b2:	3204      	adds	r2, #4
 80056b4:	f104 0115 	add.w	r1, r4, #21
 80056b8:	428f      	cmp	r7, r1
 80056ba:	bf38      	it	cc
 80056bc:	2204      	movcc	r2, #4
 80056be:	9201      	str	r2, [sp, #4]
 80056c0:	9a02      	ldr	r2, [sp, #8]
 80056c2:	9303      	str	r3, [sp, #12]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d80c      	bhi.n	80056e2 <__multiply+0x9e>
 80056c8:	2e00      	cmp	r6, #0
 80056ca:	dd03      	ble.n	80056d4 <__multiply+0x90>
 80056cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d05b      	beq.n	800578c <__multiply+0x148>
 80056d4:	6106      	str	r6, [r0, #16]
 80056d6:	b005      	add	sp, #20
 80056d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056dc:	f843 2b04 	str.w	r2, [r3], #4
 80056e0:	e7d8      	b.n	8005694 <__multiply+0x50>
 80056e2:	f8b3 a000 	ldrh.w	sl, [r3]
 80056e6:	f1ba 0f00 	cmp.w	sl, #0
 80056ea:	d024      	beq.n	8005736 <__multiply+0xf2>
 80056ec:	f104 0e14 	add.w	lr, r4, #20
 80056f0:	46a9      	mov	r9, r5
 80056f2:	f04f 0c00 	mov.w	ip, #0
 80056f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80056fa:	f8d9 1000 	ldr.w	r1, [r9]
 80056fe:	fa1f fb82 	uxth.w	fp, r2
 8005702:	b289      	uxth	r1, r1
 8005704:	fb0a 110b 	mla	r1, sl, fp, r1
 8005708:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800570c:	f8d9 2000 	ldr.w	r2, [r9]
 8005710:	4461      	add	r1, ip
 8005712:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005716:	fb0a c20b 	mla	r2, sl, fp, ip
 800571a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800571e:	b289      	uxth	r1, r1
 8005720:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005724:	4577      	cmp	r7, lr
 8005726:	f849 1b04 	str.w	r1, [r9], #4
 800572a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800572e:	d8e2      	bhi.n	80056f6 <__multiply+0xb2>
 8005730:	9a01      	ldr	r2, [sp, #4]
 8005732:	f845 c002 	str.w	ip, [r5, r2]
 8005736:	9a03      	ldr	r2, [sp, #12]
 8005738:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800573c:	3304      	adds	r3, #4
 800573e:	f1b9 0f00 	cmp.w	r9, #0
 8005742:	d021      	beq.n	8005788 <__multiply+0x144>
 8005744:	6829      	ldr	r1, [r5, #0]
 8005746:	f104 0c14 	add.w	ip, r4, #20
 800574a:	46ae      	mov	lr, r5
 800574c:	f04f 0a00 	mov.w	sl, #0
 8005750:	f8bc b000 	ldrh.w	fp, [ip]
 8005754:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005758:	fb09 220b 	mla	r2, r9, fp, r2
 800575c:	4452      	add	r2, sl
 800575e:	b289      	uxth	r1, r1
 8005760:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005764:	f84e 1b04 	str.w	r1, [lr], #4
 8005768:	f85c 1b04 	ldr.w	r1, [ip], #4
 800576c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005770:	f8be 1000 	ldrh.w	r1, [lr]
 8005774:	fb09 110a 	mla	r1, r9, sl, r1
 8005778:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800577c:	4567      	cmp	r7, ip
 800577e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005782:	d8e5      	bhi.n	8005750 <__multiply+0x10c>
 8005784:	9a01      	ldr	r2, [sp, #4]
 8005786:	50a9      	str	r1, [r5, r2]
 8005788:	3504      	adds	r5, #4
 800578a:	e799      	b.n	80056c0 <__multiply+0x7c>
 800578c:	3e01      	subs	r6, #1
 800578e:	e79b      	b.n	80056c8 <__multiply+0x84>
 8005790:	080075e7 	.word	0x080075e7
 8005794:	080075f8 	.word	0x080075f8

08005798 <__pow5mult>:
 8005798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800579c:	4615      	mov	r5, r2
 800579e:	f012 0203 	ands.w	r2, r2, #3
 80057a2:	4606      	mov	r6, r0
 80057a4:	460f      	mov	r7, r1
 80057a6:	d007      	beq.n	80057b8 <__pow5mult+0x20>
 80057a8:	4c25      	ldr	r4, [pc, #148]	; (8005840 <__pow5mult+0xa8>)
 80057aa:	3a01      	subs	r2, #1
 80057ac:	2300      	movs	r3, #0
 80057ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80057b2:	f7ff fe9d 	bl	80054f0 <__multadd>
 80057b6:	4607      	mov	r7, r0
 80057b8:	10ad      	asrs	r5, r5, #2
 80057ba:	d03d      	beq.n	8005838 <__pow5mult+0xa0>
 80057bc:	69f4      	ldr	r4, [r6, #28]
 80057be:	b97c      	cbnz	r4, 80057e0 <__pow5mult+0x48>
 80057c0:	2010      	movs	r0, #16
 80057c2:	f7fe f893 	bl	80038ec <malloc>
 80057c6:	4602      	mov	r2, r0
 80057c8:	61f0      	str	r0, [r6, #28]
 80057ca:	b928      	cbnz	r0, 80057d8 <__pow5mult+0x40>
 80057cc:	4b1d      	ldr	r3, [pc, #116]	; (8005844 <__pow5mult+0xac>)
 80057ce:	481e      	ldr	r0, [pc, #120]	; (8005848 <__pow5mult+0xb0>)
 80057d0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80057d4:	f000 fbd4 	bl	8005f80 <__assert_func>
 80057d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057dc:	6004      	str	r4, [r0, #0]
 80057de:	60c4      	str	r4, [r0, #12]
 80057e0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80057e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80057e8:	b94c      	cbnz	r4, 80057fe <__pow5mult+0x66>
 80057ea:	f240 2171 	movw	r1, #625	; 0x271
 80057ee:	4630      	mov	r0, r6
 80057f0:	f7ff ff12 	bl	8005618 <__i2b>
 80057f4:	2300      	movs	r3, #0
 80057f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80057fa:	4604      	mov	r4, r0
 80057fc:	6003      	str	r3, [r0, #0]
 80057fe:	f04f 0900 	mov.w	r9, #0
 8005802:	07eb      	lsls	r3, r5, #31
 8005804:	d50a      	bpl.n	800581c <__pow5mult+0x84>
 8005806:	4639      	mov	r1, r7
 8005808:	4622      	mov	r2, r4
 800580a:	4630      	mov	r0, r6
 800580c:	f7ff ff1a 	bl	8005644 <__multiply>
 8005810:	4639      	mov	r1, r7
 8005812:	4680      	mov	r8, r0
 8005814:	4630      	mov	r0, r6
 8005816:	f7ff fe49 	bl	80054ac <_Bfree>
 800581a:	4647      	mov	r7, r8
 800581c:	106d      	asrs	r5, r5, #1
 800581e:	d00b      	beq.n	8005838 <__pow5mult+0xa0>
 8005820:	6820      	ldr	r0, [r4, #0]
 8005822:	b938      	cbnz	r0, 8005834 <__pow5mult+0x9c>
 8005824:	4622      	mov	r2, r4
 8005826:	4621      	mov	r1, r4
 8005828:	4630      	mov	r0, r6
 800582a:	f7ff ff0b 	bl	8005644 <__multiply>
 800582e:	6020      	str	r0, [r4, #0]
 8005830:	f8c0 9000 	str.w	r9, [r0]
 8005834:	4604      	mov	r4, r0
 8005836:	e7e4      	b.n	8005802 <__pow5mult+0x6a>
 8005838:	4638      	mov	r0, r7
 800583a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800583e:	bf00      	nop
 8005840:	08007748 	.word	0x08007748
 8005844:	08007578 	.word	0x08007578
 8005848:	080075f8 	.word	0x080075f8

0800584c <__lshift>:
 800584c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005850:	460c      	mov	r4, r1
 8005852:	6849      	ldr	r1, [r1, #4]
 8005854:	6923      	ldr	r3, [r4, #16]
 8005856:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800585a:	68a3      	ldr	r3, [r4, #8]
 800585c:	4607      	mov	r7, r0
 800585e:	4691      	mov	r9, r2
 8005860:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005864:	f108 0601 	add.w	r6, r8, #1
 8005868:	42b3      	cmp	r3, r6
 800586a:	db0b      	blt.n	8005884 <__lshift+0x38>
 800586c:	4638      	mov	r0, r7
 800586e:	f7ff fddd 	bl	800542c <_Balloc>
 8005872:	4605      	mov	r5, r0
 8005874:	b948      	cbnz	r0, 800588a <__lshift+0x3e>
 8005876:	4602      	mov	r2, r0
 8005878:	4b28      	ldr	r3, [pc, #160]	; (800591c <__lshift+0xd0>)
 800587a:	4829      	ldr	r0, [pc, #164]	; (8005920 <__lshift+0xd4>)
 800587c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005880:	f000 fb7e 	bl	8005f80 <__assert_func>
 8005884:	3101      	adds	r1, #1
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	e7ee      	b.n	8005868 <__lshift+0x1c>
 800588a:	2300      	movs	r3, #0
 800588c:	f100 0114 	add.w	r1, r0, #20
 8005890:	f100 0210 	add.w	r2, r0, #16
 8005894:	4618      	mov	r0, r3
 8005896:	4553      	cmp	r3, sl
 8005898:	db33      	blt.n	8005902 <__lshift+0xb6>
 800589a:	6920      	ldr	r0, [r4, #16]
 800589c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80058a0:	f104 0314 	add.w	r3, r4, #20
 80058a4:	f019 091f 	ands.w	r9, r9, #31
 80058a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80058ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80058b0:	d02b      	beq.n	800590a <__lshift+0xbe>
 80058b2:	f1c9 0e20 	rsb	lr, r9, #32
 80058b6:	468a      	mov	sl, r1
 80058b8:	2200      	movs	r2, #0
 80058ba:	6818      	ldr	r0, [r3, #0]
 80058bc:	fa00 f009 	lsl.w	r0, r0, r9
 80058c0:	4310      	orrs	r0, r2
 80058c2:	f84a 0b04 	str.w	r0, [sl], #4
 80058c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80058ca:	459c      	cmp	ip, r3
 80058cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80058d0:	d8f3      	bhi.n	80058ba <__lshift+0x6e>
 80058d2:	ebac 0304 	sub.w	r3, ip, r4
 80058d6:	3b15      	subs	r3, #21
 80058d8:	f023 0303 	bic.w	r3, r3, #3
 80058dc:	3304      	adds	r3, #4
 80058de:	f104 0015 	add.w	r0, r4, #21
 80058e2:	4584      	cmp	ip, r0
 80058e4:	bf38      	it	cc
 80058e6:	2304      	movcc	r3, #4
 80058e8:	50ca      	str	r2, [r1, r3]
 80058ea:	b10a      	cbz	r2, 80058f0 <__lshift+0xa4>
 80058ec:	f108 0602 	add.w	r6, r8, #2
 80058f0:	3e01      	subs	r6, #1
 80058f2:	4638      	mov	r0, r7
 80058f4:	612e      	str	r6, [r5, #16]
 80058f6:	4621      	mov	r1, r4
 80058f8:	f7ff fdd8 	bl	80054ac <_Bfree>
 80058fc:	4628      	mov	r0, r5
 80058fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005902:	f842 0f04 	str.w	r0, [r2, #4]!
 8005906:	3301      	adds	r3, #1
 8005908:	e7c5      	b.n	8005896 <__lshift+0x4a>
 800590a:	3904      	subs	r1, #4
 800590c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005910:	f841 2f04 	str.w	r2, [r1, #4]!
 8005914:	459c      	cmp	ip, r3
 8005916:	d8f9      	bhi.n	800590c <__lshift+0xc0>
 8005918:	e7ea      	b.n	80058f0 <__lshift+0xa4>
 800591a:	bf00      	nop
 800591c:	080075e7 	.word	0x080075e7
 8005920:	080075f8 	.word	0x080075f8

08005924 <__mcmp>:
 8005924:	b530      	push	{r4, r5, lr}
 8005926:	6902      	ldr	r2, [r0, #16]
 8005928:	690c      	ldr	r4, [r1, #16]
 800592a:	1b12      	subs	r2, r2, r4
 800592c:	d10e      	bne.n	800594c <__mcmp+0x28>
 800592e:	f100 0314 	add.w	r3, r0, #20
 8005932:	3114      	adds	r1, #20
 8005934:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005938:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800593c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005940:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005944:	42a5      	cmp	r5, r4
 8005946:	d003      	beq.n	8005950 <__mcmp+0x2c>
 8005948:	d305      	bcc.n	8005956 <__mcmp+0x32>
 800594a:	2201      	movs	r2, #1
 800594c:	4610      	mov	r0, r2
 800594e:	bd30      	pop	{r4, r5, pc}
 8005950:	4283      	cmp	r3, r0
 8005952:	d3f3      	bcc.n	800593c <__mcmp+0x18>
 8005954:	e7fa      	b.n	800594c <__mcmp+0x28>
 8005956:	f04f 32ff 	mov.w	r2, #4294967295
 800595a:	e7f7      	b.n	800594c <__mcmp+0x28>

0800595c <__mdiff>:
 800595c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005960:	460c      	mov	r4, r1
 8005962:	4606      	mov	r6, r0
 8005964:	4611      	mov	r1, r2
 8005966:	4620      	mov	r0, r4
 8005968:	4690      	mov	r8, r2
 800596a:	f7ff ffdb 	bl	8005924 <__mcmp>
 800596e:	1e05      	subs	r5, r0, #0
 8005970:	d110      	bne.n	8005994 <__mdiff+0x38>
 8005972:	4629      	mov	r1, r5
 8005974:	4630      	mov	r0, r6
 8005976:	f7ff fd59 	bl	800542c <_Balloc>
 800597a:	b930      	cbnz	r0, 800598a <__mdiff+0x2e>
 800597c:	4b3a      	ldr	r3, [pc, #232]	; (8005a68 <__mdiff+0x10c>)
 800597e:	4602      	mov	r2, r0
 8005980:	f240 2137 	movw	r1, #567	; 0x237
 8005984:	4839      	ldr	r0, [pc, #228]	; (8005a6c <__mdiff+0x110>)
 8005986:	f000 fafb 	bl	8005f80 <__assert_func>
 800598a:	2301      	movs	r3, #1
 800598c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005990:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005994:	bfa4      	itt	ge
 8005996:	4643      	movge	r3, r8
 8005998:	46a0      	movge	r8, r4
 800599a:	4630      	mov	r0, r6
 800599c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80059a0:	bfa6      	itte	ge
 80059a2:	461c      	movge	r4, r3
 80059a4:	2500      	movge	r5, #0
 80059a6:	2501      	movlt	r5, #1
 80059a8:	f7ff fd40 	bl	800542c <_Balloc>
 80059ac:	b920      	cbnz	r0, 80059b8 <__mdiff+0x5c>
 80059ae:	4b2e      	ldr	r3, [pc, #184]	; (8005a68 <__mdiff+0x10c>)
 80059b0:	4602      	mov	r2, r0
 80059b2:	f240 2145 	movw	r1, #581	; 0x245
 80059b6:	e7e5      	b.n	8005984 <__mdiff+0x28>
 80059b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80059bc:	6926      	ldr	r6, [r4, #16]
 80059be:	60c5      	str	r5, [r0, #12]
 80059c0:	f104 0914 	add.w	r9, r4, #20
 80059c4:	f108 0514 	add.w	r5, r8, #20
 80059c8:	f100 0e14 	add.w	lr, r0, #20
 80059cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80059d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80059d4:	f108 0210 	add.w	r2, r8, #16
 80059d8:	46f2      	mov	sl, lr
 80059da:	2100      	movs	r1, #0
 80059dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80059e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80059e4:	fa11 f88b 	uxtah	r8, r1, fp
 80059e8:	b299      	uxth	r1, r3
 80059ea:	0c1b      	lsrs	r3, r3, #16
 80059ec:	eba8 0801 	sub.w	r8, r8, r1
 80059f0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80059f4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80059f8:	fa1f f888 	uxth.w	r8, r8
 80059fc:	1419      	asrs	r1, r3, #16
 80059fe:	454e      	cmp	r6, r9
 8005a00:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005a04:	f84a 3b04 	str.w	r3, [sl], #4
 8005a08:	d8e8      	bhi.n	80059dc <__mdiff+0x80>
 8005a0a:	1b33      	subs	r3, r6, r4
 8005a0c:	3b15      	subs	r3, #21
 8005a0e:	f023 0303 	bic.w	r3, r3, #3
 8005a12:	3304      	adds	r3, #4
 8005a14:	3415      	adds	r4, #21
 8005a16:	42a6      	cmp	r6, r4
 8005a18:	bf38      	it	cc
 8005a1a:	2304      	movcc	r3, #4
 8005a1c:	441d      	add	r5, r3
 8005a1e:	4473      	add	r3, lr
 8005a20:	469e      	mov	lr, r3
 8005a22:	462e      	mov	r6, r5
 8005a24:	4566      	cmp	r6, ip
 8005a26:	d30e      	bcc.n	8005a46 <__mdiff+0xea>
 8005a28:	f10c 0203 	add.w	r2, ip, #3
 8005a2c:	1b52      	subs	r2, r2, r5
 8005a2e:	f022 0203 	bic.w	r2, r2, #3
 8005a32:	3d03      	subs	r5, #3
 8005a34:	45ac      	cmp	ip, r5
 8005a36:	bf38      	it	cc
 8005a38:	2200      	movcc	r2, #0
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005a40:	b17a      	cbz	r2, 8005a62 <__mdiff+0x106>
 8005a42:	6107      	str	r7, [r0, #16]
 8005a44:	e7a4      	b.n	8005990 <__mdiff+0x34>
 8005a46:	f856 8b04 	ldr.w	r8, [r6], #4
 8005a4a:	fa11 f288 	uxtah	r2, r1, r8
 8005a4e:	1414      	asrs	r4, r2, #16
 8005a50:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005a54:	b292      	uxth	r2, r2
 8005a56:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005a5a:	f84e 2b04 	str.w	r2, [lr], #4
 8005a5e:	1421      	asrs	r1, r4, #16
 8005a60:	e7e0      	b.n	8005a24 <__mdiff+0xc8>
 8005a62:	3f01      	subs	r7, #1
 8005a64:	e7ea      	b.n	8005a3c <__mdiff+0xe0>
 8005a66:	bf00      	nop
 8005a68:	080075e7 	.word	0x080075e7
 8005a6c:	080075f8 	.word	0x080075f8

08005a70 <__d2b>:
 8005a70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a74:	460f      	mov	r7, r1
 8005a76:	2101      	movs	r1, #1
 8005a78:	ec59 8b10 	vmov	r8, r9, d0
 8005a7c:	4616      	mov	r6, r2
 8005a7e:	f7ff fcd5 	bl	800542c <_Balloc>
 8005a82:	4604      	mov	r4, r0
 8005a84:	b930      	cbnz	r0, 8005a94 <__d2b+0x24>
 8005a86:	4602      	mov	r2, r0
 8005a88:	4b24      	ldr	r3, [pc, #144]	; (8005b1c <__d2b+0xac>)
 8005a8a:	4825      	ldr	r0, [pc, #148]	; (8005b20 <__d2b+0xb0>)
 8005a8c:	f240 310f 	movw	r1, #783	; 0x30f
 8005a90:	f000 fa76 	bl	8005f80 <__assert_func>
 8005a94:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005a98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a9c:	bb2d      	cbnz	r5, 8005aea <__d2b+0x7a>
 8005a9e:	9301      	str	r3, [sp, #4]
 8005aa0:	f1b8 0300 	subs.w	r3, r8, #0
 8005aa4:	d026      	beq.n	8005af4 <__d2b+0x84>
 8005aa6:	4668      	mov	r0, sp
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	f7ff fd87 	bl	80055bc <__lo0bits>
 8005aae:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005ab2:	b1e8      	cbz	r0, 8005af0 <__d2b+0x80>
 8005ab4:	f1c0 0320 	rsb	r3, r0, #32
 8005ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8005abc:	430b      	orrs	r3, r1
 8005abe:	40c2      	lsrs	r2, r0
 8005ac0:	6163      	str	r3, [r4, #20]
 8005ac2:	9201      	str	r2, [sp, #4]
 8005ac4:	9b01      	ldr	r3, [sp, #4]
 8005ac6:	61a3      	str	r3, [r4, #24]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	bf14      	ite	ne
 8005acc:	2202      	movne	r2, #2
 8005ace:	2201      	moveq	r2, #1
 8005ad0:	6122      	str	r2, [r4, #16]
 8005ad2:	b1bd      	cbz	r5, 8005b04 <__d2b+0x94>
 8005ad4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005ad8:	4405      	add	r5, r0
 8005ada:	603d      	str	r5, [r7, #0]
 8005adc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005ae0:	6030      	str	r0, [r6, #0]
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	b003      	add	sp, #12
 8005ae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005aea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aee:	e7d6      	b.n	8005a9e <__d2b+0x2e>
 8005af0:	6161      	str	r1, [r4, #20]
 8005af2:	e7e7      	b.n	8005ac4 <__d2b+0x54>
 8005af4:	a801      	add	r0, sp, #4
 8005af6:	f7ff fd61 	bl	80055bc <__lo0bits>
 8005afa:	9b01      	ldr	r3, [sp, #4]
 8005afc:	6163      	str	r3, [r4, #20]
 8005afe:	3020      	adds	r0, #32
 8005b00:	2201      	movs	r2, #1
 8005b02:	e7e5      	b.n	8005ad0 <__d2b+0x60>
 8005b04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005b08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005b0c:	6038      	str	r0, [r7, #0]
 8005b0e:	6918      	ldr	r0, [r3, #16]
 8005b10:	f7ff fd34 	bl	800557c <__hi0bits>
 8005b14:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005b18:	e7e2      	b.n	8005ae0 <__d2b+0x70>
 8005b1a:	bf00      	nop
 8005b1c:	080075e7 	.word	0x080075e7
 8005b20:	080075f8 	.word	0x080075f8

08005b24 <__ssputs_r>:
 8005b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b28:	688e      	ldr	r6, [r1, #8]
 8005b2a:	461f      	mov	r7, r3
 8005b2c:	42be      	cmp	r6, r7
 8005b2e:	680b      	ldr	r3, [r1, #0]
 8005b30:	4682      	mov	sl, r0
 8005b32:	460c      	mov	r4, r1
 8005b34:	4690      	mov	r8, r2
 8005b36:	d82c      	bhi.n	8005b92 <__ssputs_r+0x6e>
 8005b38:	898a      	ldrh	r2, [r1, #12]
 8005b3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b3e:	d026      	beq.n	8005b8e <__ssputs_r+0x6a>
 8005b40:	6965      	ldr	r5, [r4, #20]
 8005b42:	6909      	ldr	r1, [r1, #16]
 8005b44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b48:	eba3 0901 	sub.w	r9, r3, r1
 8005b4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b50:	1c7b      	adds	r3, r7, #1
 8005b52:	444b      	add	r3, r9
 8005b54:	106d      	asrs	r5, r5, #1
 8005b56:	429d      	cmp	r5, r3
 8005b58:	bf38      	it	cc
 8005b5a:	461d      	movcc	r5, r3
 8005b5c:	0553      	lsls	r3, r2, #21
 8005b5e:	d527      	bpl.n	8005bb0 <__ssputs_r+0x8c>
 8005b60:	4629      	mov	r1, r5
 8005b62:	f7fd fef3 	bl	800394c <_malloc_r>
 8005b66:	4606      	mov	r6, r0
 8005b68:	b360      	cbz	r0, 8005bc4 <__ssputs_r+0xa0>
 8005b6a:	6921      	ldr	r1, [r4, #16]
 8005b6c:	464a      	mov	r2, r9
 8005b6e:	f000 f9f9 	bl	8005f64 <memcpy>
 8005b72:	89a3      	ldrh	r3, [r4, #12]
 8005b74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b7c:	81a3      	strh	r3, [r4, #12]
 8005b7e:	6126      	str	r6, [r4, #16]
 8005b80:	6165      	str	r5, [r4, #20]
 8005b82:	444e      	add	r6, r9
 8005b84:	eba5 0509 	sub.w	r5, r5, r9
 8005b88:	6026      	str	r6, [r4, #0]
 8005b8a:	60a5      	str	r5, [r4, #8]
 8005b8c:	463e      	mov	r6, r7
 8005b8e:	42be      	cmp	r6, r7
 8005b90:	d900      	bls.n	8005b94 <__ssputs_r+0x70>
 8005b92:	463e      	mov	r6, r7
 8005b94:	6820      	ldr	r0, [r4, #0]
 8005b96:	4632      	mov	r2, r6
 8005b98:	4641      	mov	r1, r8
 8005b9a:	f000 f9c9 	bl	8005f30 <memmove>
 8005b9e:	68a3      	ldr	r3, [r4, #8]
 8005ba0:	1b9b      	subs	r3, r3, r6
 8005ba2:	60a3      	str	r3, [r4, #8]
 8005ba4:	6823      	ldr	r3, [r4, #0]
 8005ba6:	4433      	add	r3, r6
 8005ba8:	6023      	str	r3, [r4, #0]
 8005baa:	2000      	movs	r0, #0
 8005bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bb0:	462a      	mov	r2, r5
 8005bb2:	f000 fa2b 	bl	800600c <_realloc_r>
 8005bb6:	4606      	mov	r6, r0
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	d1e0      	bne.n	8005b7e <__ssputs_r+0x5a>
 8005bbc:	6921      	ldr	r1, [r4, #16]
 8005bbe:	4650      	mov	r0, sl
 8005bc0:	f7ff fbe8 	bl	8005394 <_free_r>
 8005bc4:	230c      	movs	r3, #12
 8005bc6:	f8ca 3000 	str.w	r3, [sl]
 8005bca:	89a3      	ldrh	r3, [r4, #12]
 8005bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bd0:	81a3      	strh	r3, [r4, #12]
 8005bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd6:	e7e9      	b.n	8005bac <__ssputs_r+0x88>

08005bd8 <_svfiprintf_r>:
 8005bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bdc:	4698      	mov	r8, r3
 8005bde:	898b      	ldrh	r3, [r1, #12]
 8005be0:	061b      	lsls	r3, r3, #24
 8005be2:	b09d      	sub	sp, #116	; 0x74
 8005be4:	4607      	mov	r7, r0
 8005be6:	460d      	mov	r5, r1
 8005be8:	4614      	mov	r4, r2
 8005bea:	d50e      	bpl.n	8005c0a <_svfiprintf_r+0x32>
 8005bec:	690b      	ldr	r3, [r1, #16]
 8005bee:	b963      	cbnz	r3, 8005c0a <_svfiprintf_r+0x32>
 8005bf0:	2140      	movs	r1, #64	; 0x40
 8005bf2:	f7fd feab 	bl	800394c <_malloc_r>
 8005bf6:	6028      	str	r0, [r5, #0]
 8005bf8:	6128      	str	r0, [r5, #16]
 8005bfa:	b920      	cbnz	r0, 8005c06 <_svfiprintf_r+0x2e>
 8005bfc:	230c      	movs	r3, #12
 8005bfe:	603b      	str	r3, [r7, #0]
 8005c00:	f04f 30ff 	mov.w	r0, #4294967295
 8005c04:	e0d0      	b.n	8005da8 <_svfiprintf_r+0x1d0>
 8005c06:	2340      	movs	r3, #64	; 0x40
 8005c08:	616b      	str	r3, [r5, #20]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c0e:	2320      	movs	r3, #32
 8005c10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c14:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c18:	2330      	movs	r3, #48	; 0x30
 8005c1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005dc0 <_svfiprintf_r+0x1e8>
 8005c1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c22:	f04f 0901 	mov.w	r9, #1
 8005c26:	4623      	mov	r3, r4
 8005c28:	469a      	mov	sl, r3
 8005c2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c2e:	b10a      	cbz	r2, 8005c34 <_svfiprintf_r+0x5c>
 8005c30:	2a25      	cmp	r2, #37	; 0x25
 8005c32:	d1f9      	bne.n	8005c28 <_svfiprintf_r+0x50>
 8005c34:	ebba 0b04 	subs.w	fp, sl, r4
 8005c38:	d00b      	beq.n	8005c52 <_svfiprintf_r+0x7a>
 8005c3a:	465b      	mov	r3, fp
 8005c3c:	4622      	mov	r2, r4
 8005c3e:	4629      	mov	r1, r5
 8005c40:	4638      	mov	r0, r7
 8005c42:	f7ff ff6f 	bl	8005b24 <__ssputs_r>
 8005c46:	3001      	adds	r0, #1
 8005c48:	f000 80a9 	beq.w	8005d9e <_svfiprintf_r+0x1c6>
 8005c4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c4e:	445a      	add	r2, fp
 8005c50:	9209      	str	r2, [sp, #36]	; 0x24
 8005c52:	f89a 3000 	ldrb.w	r3, [sl]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 80a1 	beq.w	8005d9e <_svfiprintf_r+0x1c6>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c66:	f10a 0a01 	add.w	sl, sl, #1
 8005c6a:	9304      	str	r3, [sp, #16]
 8005c6c:	9307      	str	r3, [sp, #28]
 8005c6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c72:	931a      	str	r3, [sp, #104]	; 0x68
 8005c74:	4654      	mov	r4, sl
 8005c76:	2205      	movs	r2, #5
 8005c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c7c:	4850      	ldr	r0, [pc, #320]	; (8005dc0 <_svfiprintf_r+0x1e8>)
 8005c7e:	f7fa faa7 	bl	80001d0 <memchr>
 8005c82:	9a04      	ldr	r2, [sp, #16]
 8005c84:	b9d8      	cbnz	r0, 8005cbe <_svfiprintf_r+0xe6>
 8005c86:	06d0      	lsls	r0, r2, #27
 8005c88:	bf44      	itt	mi
 8005c8a:	2320      	movmi	r3, #32
 8005c8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c90:	0711      	lsls	r1, r2, #28
 8005c92:	bf44      	itt	mi
 8005c94:	232b      	movmi	r3, #43	; 0x2b
 8005c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c9a:	f89a 3000 	ldrb.w	r3, [sl]
 8005c9e:	2b2a      	cmp	r3, #42	; 0x2a
 8005ca0:	d015      	beq.n	8005cce <_svfiprintf_r+0xf6>
 8005ca2:	9a07      	ldr	r2, [sp, #28]
 8005ca4:	4654      	mov	r4, sl
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	f04f 0c0a 	mov.w	ip, #10
 8005cac:	4621      	mov	r1, r4
 8005cae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cb2:	3b30      	subs	r3, #48	; 0x30
 8005cb4:	2b09      	cmp	r3, #9
 8005cb6:	d94d      	bls.n	8005d54 <_svfiprintf_r+0x17c>
 8005cb8:	b1b0      	cbz	r0, 8005ce8 <_svfiprintf_r+0x110>
 8005cba:	9207      	str	r2, [sp, #28]
 8005cbc:	e014      	b.n	8005ce8 <_svfiprintf_r+0x110>
 8005cbe:	eba0 0308 	sub.w	r3, r0, r8
 8005cc2:	fa09 f303 	lsl.w	r3, r9, r3
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	9304      	str	r3, [sp, #16]
 8005cca:	46a2      	mov	sl, r4
 8005ccc:	e7d2      	b.n	8005c74 <_svfiprintf_r+0x9c>
 8005cce:	9b03      	ldr	r3, [sp, #12]
 8005cd0:	1d19      	adds	r1, r3, #4
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	9103      	str	r1, [sp, #12]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	bfbb      	ittet	lt
 8005cda:	425b      	neglt	r3, r3
 8005cdc:	f042 0202 	orrlt.w	r2, r2, #2
 8005ce0:	9307      	strge	r3, [sp, #28]
 8005ce2:	9307      	strlt	r3, [sp, #28]
 8005ce4:	bfb8      	it	lt
 8005ce6:	9204      	strlt	r2, [sp, #16]
 8005ce8:	7823      	ldrb	r3, [r4, #0]
 8005cea:	2b2e      	cmp	r3, #46	; 0x2e
 8005cec:	d10c      	bne.n	8005d08 <_svfiprintf_r+0x130>
 8005cee:	7863      	ldrb	r3, [r4, #1]
 8005cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8005cf2:	d134      	bne.n	8005d5e <_svfiprintf_r+0x186>
 8005cf4:	9b03      	ldr	r3, [sp, #12]
 8005cf6:	1d1a      	adds	r2, r3, #4
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	9203      	str	r2, [sp, #12]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	bfb8      	it	lt
 8005d00:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d04:	3402      	adds	r4, #2
 8005d06:	9305      	str	r3, [sp, #20]
 8005d08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005dd0 <_svfiprintf_r+0x1f8>
 8005d0c:	7821      	ldrb	r1, [r4, #0]
 8005d0e:	2203      	movs	r2, #3
 8005d10:	4650      	mov	r0, sl
 8005d12:	f7fa fa5d 	bl	80001d0 <memchr>
 8005d16:	b138      	cbz	r0, 8005d28 <_svfiprintf_r+0x150>
 8005d18:	9b04      	ldr	r3, [sp, #16]
 8005d1a:	eba0 000a 	sub.w	r0, r0, sl
 8005d1e:	2240      	movs	r2, #64	; 0x40
 8005d20:	4082      	lsls	r2, r0
 8005d22:	4313      	orrs	r3, r2
 8005d24:	3401      	adds	r4, #1
 8005d26:	9304      	str	r3, [sp, #16]
 8005d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d2c:	4825      	ldr	r0, [pc, #148]	; (8005dc4 <_svfiprintf_r+0x1ec>)
 8005d2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d32:	2206      	movs	r2, #6
 8005d34:	f7fa fa4c 	bl	80001d0 <memchr>
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	d038      	beq.n	8005dae <_svfiprintf_r+0x1d6>
 8005d3c:	4b22      	ldr	r3, [pc, #136]	; (8005dc8 <_svfiprintf_r+0x1f0>)
 8005d3e:	bb1b      	cbnz	r3, 8005d88 <_svfiprintf_r+0x1b0>
 8005d40:	9b03      	ldr	r3, [sp, #12]
 8005d42:	3307      	adds	r3, #7
 8005d44:	f023 0307 	bic.w	r3, r3, #7
 8005d48:	3308      	adds	r3, #8
 8005d4a:	9303      	str	r3, [sp, #12]
 8005d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d4e:	4433      	add	r3, r6
 8005d50:	9309      	str	r3, [sp, #36]	; 0x24
 8005d52:	e768      	b.n	8005c26 <_svfiprintf_r+0x4e>
 8005d54:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d58:	460c      	mov	r4, r1
 8005d5a:	2001      	movs	r0, #1
 8005d5c:	e7a6      	b.n	8005cac <_svfiprintf_r+0xd4>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	3401      	adds	r4, #1
 8005d62:	9305      	str	r3, [sp, #20]
 8005d64:	4619      	mov	r1, r3
 8005d66:	f04f 0c0a 	mov.w	ip, #10
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d70:	3a30      	subs	r2, #48	; 0x30
 8005d72:	2a09      	cmp	r2, #9
 8005d74:	d903      	bls.n	8005d7e <_svfiprintf_r+0x1a6>
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d0c6      	beq.n	8005d08 <_svfiprintf_r+0x130>
 8005d7a:	9105      	str	r1, [sp, #20]
 8005d7c:	e7c4      	b.n	8005d08 <_svfiprintf_r+0x130>
 8005d7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d82:	4604      	mov	r4, r0
 8005d84:	2301      	movs	r3, #1
 8005d86:	e7f0      	b.n	8005d6a <_svfiprintf_r+0x192>
 8005d88:	ab03      	add	r3, sp, #12
 8005d8a:	9300      	str	r3, [sp, #0]
 8005d8c:	462a      	mov	r2, r5
 8005d8e:	4b0f      	ldr	r3, [pc, #60]	; (8005dcc <_svfiprintf_r+0x1f4>)
 8005d90:	a904      	add	r1, sp, #16
 8005d92:	4638      	mov	r0, r7
 8005d94:	f7fd ff06 	bl	8003ba4 <_printf_float>
 8005d98:	1c42      	adds	r2, r0, #1
 8005d9a:	4606      	mov	r6, r0
 8005d9c:	d1d6      	bne.n	8005d4c <_svfiprintf_r+0x174>
 8005d9e:	89ab      	ldrh	r3, [r5, #12]
 8005da0:	065b      	lsls	r3, r3, #25
 8005da2:	f53f af2d 	bmi.w	8005c00 <_svfiprintf_r+0x28>
 8005da6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005da8:	b01d      	add	sp, #116	; 0x74
 8005daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dae:	ab03      	add	r3, sp, #12
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	462a      	mov	r2, r5
 8005db4:	4b05      	ldr	r3, [pc, #20]	; (8005dcc <_svfiprintf_r+0x1f4>)
 8005db6:	a904      	add	r1, sp, #16
 8005db8:	4638      	mov	r0, r7
 8005dba:	f7fe f997 	bl	80040ec <_printf_i>
 8005dbe:	e7eb      	b.n	8005d98 <_svfiprintf_r+0x1c0>
 8005dc0:	08007754 	.word	0x08007754
 8005dc4:	0800775e 	.word	0x0800775e
 8005dc8:	08003ba5 	.word	0x08003ba5
 8005dcc:	08005b25 	.word	0x08005b25
 8005dd0:	0800775a 	.word	0x0800775a

08005dd4 <__sflush_r>:
 8005dd4:	898a      	ldrh	r2, [r1, #12]
 8005dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dda:	4605      	mov	r5, r0
 8005ddc:	0710      	lsls	r0, r2, #28
 8005dde:	460c      	mov	r4, r1
 8005de0:	d458      	bmi.n	8005e94 <__sflush_r+0xc0>
 8005de2:	684b      	ldr	r3, [r1, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	dc05      	bgt.n	8005df4 <__sflush_r+0x20>
 8005de8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	dc02      	bgt.n	8005df4 <__sflush_r+0x20>
 8005dee:	2000      	movs	r0, #0
 8005df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005df4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005df6:	2e00      	cmp	r6, #0
 8005df8:	d0f9      	beq.n	8005dee <__sflush_r+0x1a>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e00:	682f      	ldr	r7, [r5, #0]
 8005e02:	6a21      	ldr	r1, [r4, #32]
 8005e04:	602b      	str	r3, [r5, #0]
 8005e06:	d032      	beq.n	8005e6e <__sflush_r+0x9a>
 8005e08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e0a:	89a3      	ldrh	r3, [r4, #12]
 8005e0c:	075a      	lsls	r2, r3, #29
 8005e0e:	d505      	bpl.n	8005e1c <__sflush_r+0x48>
 8005e10:	6863      	ldr	r3, [r4, #4]
 8005e12:	1ac0      	subs	r0, r0, r3
 8005e14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e16:	b10b      	cbz	r3, 8005e1c <__sflush_r+0x48>
 8005e18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e1a:	1ac0      	subs	r0, r0, r3
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	4602      	mov	r2, r0
 8005e20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e22:	6a21      	ldr	r1, [r4, #32]
 8005e24:	4628      	mov	r0, r5
 8005e26:	47b0      	blx	r6
 8005e28:	1c43      	adds	r3, r0, #1
 8005e2a:	89a3      	ldrh	r3, [r4, #12]
 8005e2c:	d106      	bne.n	8005e3c <__sflush_r+0x68>
 8005e2e:	6829      	ldr	r1, [r5, #0]
 8005e30:	291d      	cmp	r1, #29
 8005e32:	d82b      	bhi.n	8005e8c <__sflush_r+0xb8>
 8005e34:	4a29      	ldr	r2, [pc, #164]	; (8005edc <__sflush_r+0x108>)
 8005e36:	410a      	asrs	r2, r1
 8005e38:	07d6      	lsls	r6, r2, #31
 8005e3a:	d427      	bmi.n	8005e8c <__sflush_r+0xb8>
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	6062      	str	r2, [r4, #4]
 8005e40:	04d9      	lsls	r1, r3, #19
 8005e42:	6922      	ldr	r2, [r4, #16]
 8005e44:	6022      	str	r2, [r4, #0]
 8005e46:	d504      	bpl.n	8005e52 <__sflush_r+0x7e>
 8005e48:	1c42      	adds	r2, r0, #1
 8005e4a:	d101      	bne.n	8005e50 <__sflush_r+0x7c>
 8005e4c:	682b      	ldr	r3, [r5, #0]
 8005e4e:	b903      	cbnz	r3, 8005e52 <__sflush_r+0x7e>
 8005e50:	6560      	str	r0, [r4, #84]	; 0x54
 8005e52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e54:	602f      	str	r7, [r5, #0]
 8005e56:	2900      	cmp	r1, #0
 8005e58:	d0c9      	beq.n	8005dee <__sflush_r+0x1a>
 8005e5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e5e:	4299      	cmp	r1, r3
 8005e60:	d002      	beq.n	8005e68 <__sflush_r+0x94>
 8005e62:	4628      	mov	r0, r5
 8005e64:	f7ff fa96 	bl	8005394 <_free_r>
 8005e68:	2000      	movs	r0, #0
 8005e6a:	6360      	str	r0, [r4, #52]	; 0x34
 8005e6c:	e7c0      	b.n	8005df0 <__sflush_r+0x1c>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	4628      	mov	r0, r5
 8005e72:	47b0      	blx	r6
 8005e74:	1c41      	adds	r1, r0, #1
 8005e76:	d1c8      	bne.n	8005e0a <__sflush_r+0x36>
 8005e78:	682b      	ldr	r3, [r5, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0c5      	beq.n	8005e0a <__sflush_r+0x36>
 8005e7e:	2b1d      	cmp	r3, #29
 8005e80:	d001      	beq.n	8005e86 <__sflush_r+0xb2>
 8005e82:	2b16      	cmp	r3, #22
 8005e84:	d101      	bne.n	8005e8a <__sflush_r+0xb6>
 8005e86:	602f      	str	r7, [r5, #0]
 8005e88:	e7b1      	b.n	8005dee <__sflush_r+0x1a>
 8005e8a:	89a3      	ldrh	r3, [r4, #12]
 8005e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e90:	81a3      	strh	r3, [r4, #12]
 8005e92:	e7ad      	b.n	8005df0 <__sflush_r+0x1c>
 8005e94:	690f      	ldr	r7, [r1, #16]
 8005e96:	2f00      	cmp	r7, #0
 8005e98:	d0a9      	beq.n	8005dee <__sflush_r+0x1a>
 8005e9a:	0793      	lsls	r3, r2, #30
 8005e9c:	680e      	ldr	r6, [r1, #0]
 8005e9e:	bf08      	it	eq
 8005ea0:	694b      	ldreq	r3, [r1, #20]
 8005ea2:	600f      	str	r7, [r1, #0]
 8005ea4:	bf18      	it	ne
 8005ea6:	2300      	movne	r3, #0
 8005ea8:	eba6 0807 	sub.w	r8, r6, r7
 8005eac:	608b      	str	r3, [r1, #8]
 8005eae:	f1b8 0f00 	cmp.w	r8, #0
 8005eb2:	dd9c      	ble.n	8005dee <__sflush_r+0x1a>
 8005eb4:	6a21      	ldr	r1, [r4, #32]
 8005eb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005eb8:	4643      	mov	r3, r8
 8005eba:	463a      	mov	r2, r7
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	47b0      	blx	r6
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	dc06      	bgt.n	8005ed2 <__sflush_r+0xfe>
 8005ec4:	89a3      	ldrh	r3, [r4, #12]
 8005ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eca:	81a3      	strh	r3, [r4, #12]
 8005ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed0:	e78e      	b.n	8005df0 <__sflush_r+0x1c>
 8005ed2:	4407      	add	r7, r0
 8005ed4:	eba8 0800 	sub.w	r8, r8, r0
 8005ed8:	e7e9      	b.n	8005eae <__sflush_r+0xda>
 8005eda:	bf00      	nop
 8005edc:	dfbffffe 	.word	0xdfbffffe

08005ee0 <_fflush_r>:
 8005ee0:	b538      	push	{r3, r4, r5, lr}
 8005ee2:	690b      	ldr	r3, [r1, #16]
 8005ee4:	4605      	mov	r5, r0
 8005ee6:	460c      	mov	r4, r1
 8005ee8:	b913      	cbnz	r3, 8005ef0 <_fflush_r+0x10>
 8005eea:	2500      	movs	r5, #0
 8005eec:	4628      	mov	r0, r5
 8005eee:	bd38      	pop	{r3, r4, r5, pc}
 8005ef0:	b118      	cbz	r0, 8005efa <_fflush_r+0x1a>
 8005ef2:	6a03      	ldr	r3, [r0, #32]
 8005ef4:	b90b      	cbnz	r3, 8005efa <_fflush_r+0x1a>
 8005ef6:	f7fe faa7 	bl	8004448 <__sinit>
 8005efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0f3      	beq.n	8005eea <_fflush_r+0xa>
 8005f02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f04:	07d0      	lsls	r0, r2, #31
 8005f06:	d404      	bmi.n	8005f12 <_fflush_r+0x32>
 8005f08:	0599      	lsls	r1, r3, #22
 8005f0a:	d402      	bmi.n	8005f12 <_fflush_r+0x32>
 8005f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f0e:	f7fe fbc2 	bl	8004696 <__retarget_lock_acquire_recursive>
 8005f12:	4628      	mov	r0, r5
 8005f14:	4621      	mov	r1, r4
 8005f16:	f7ff ff5d 	bl	8005dd4 <__sflush_r>
 8005f1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f1c:	07da      	lsls	r2, r3, #31
 8005f1e:	4605      	mov	r5, r0
 8005f20:	d4e4      	bmi.n	8005eec <_fflush_r+0xc>
 8005f22:	89a3      	ldrh	r3, [r4, #12]
 8005f24:	059b      	lsls	r3, r3, #22
 8005f26:	d4e1      	bmi.n	8005eec <_fflush_r+0xc>
 8005f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f2a:	f7fe fbb5 	bl	8004698 <__retarget_lock_release_recursive>
 8005f2e:	e7dd      	b.n	8005eec <_fflush_r+0xc>

08005f30 <memmove>:
 8005f30:	4288      	cmp	r0, r1
 8005f32:	b510      	push	{r4, lr}
 8005f34:	eb01 0402 	add.w	r4, r1, r2
 8005f38:	d902      	bls.n	8005f40 <memmove+0x10>
 8005f3a:	4284      	cmp	r4, r0
 8005f3c:	4623      	mov	r3, r4
 8005f3e:	d807      	bhi.n	8005f50 <memmove+0x20>
 8005f40:	1e43      	subs	r3, r0, #1
 8005f42:	42a1      	cmp	r1, r4
 8005f44:	d008      	beq.n	8005f58 <memmove+0x28>
 8005f46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f4e:	e7f8      	b.n	8005f42 <memmove+0x12>
 8005f50:	4402      	add	r2, r0
 8005f52:	4601      	mov	r1, r0
 8005f54:	428a      	cmp	r2, r1
 8005f56:	d100      	bne.n	8005f5a <memmove+0x2a>
 8005f58:	bd10      	pop	{r4, pc}
 8005f5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f62:	e7f7      	b.n	8005f54 <memmove+0x24>

08005f64 <memcpy>:
 8005f64:	440a      	add	r2, r1
 8005f66:	4291      	cmp	r1, r2
 8005f68:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f6c:	d100      	bne.n	8005f70 <memcpy+0xc>
 8005f6e:	4770      	bx	lr
 8005f70:	b510      	push	{r4, lr}
 8005f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f7a:	4291      	cmp	r1, r2
 8005f7c:	d1f9      	bne.n	8005f72 <memcpy+0xe>
 8005f7e:	bd10      	pop	{r4, pc}

08005f80 <__assert_func>:
 8005f80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f82:	4614      	mov	r4, r2
 8005f84:	461a      	mov	r2, r3
 8005f86:	4b09      	ldr	r3, [pc, #36]	; (8005fac <__assert_func+0x2c>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4605      	mov	r5, r0
 8005f8c:	68d8      	ldr	r0, [r3, #12]
 8005f8e:	b14c      	cbz	r4, 8005fa4 <__assert_func+0x24>
 8005f90:	4b07      	ldr	r3, [pc, #28]	; (8005fb0 <__assert_func+0x30>)
 8005f92:	9100      	str	r1, [sp, #0]
 8005f94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f98:	4906      	ldr	r1, [pc, #24]	; (8005fb4 <__assert_func+0x34>)
 8005f9a:	462b      	mov	r3, r5
 8005f9c:	f000 f872 	bl	8006084 <fiprintf>
 8005fa0:	f000 f882 	bl	80060a8 <abort>
 8005fa4:	4b04      	ldr	r3, [pc, #16]	; (8005fb8 <__assert_func+0x38>)
 8005fa6:	461c      	mov	r4, r3
 8005fa8:	e7f3      	b.n	8005f92 <__assert_func+0x12>
 8005faa:	bf00      	nop
 8005fac:	200000e0 	.word	0x200000e0
 8005fb0:	0800776f 	.word	0x0800776f
 8005fb4:	0800777c 	.word	0x0800777c
 8005fb8:	080077aa 	.word	0x080077aa

08005fbc <_calloc_r>:
 8005fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fbe:	fba1 2402 	umull	r2, r4, r1, r2
 8005fc2:	b94c      	cbnz	r4, 8005fd8 <_calloc_r+0x1c>
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	9201      	str	r2, [sp, #4]
 8005fc8:	f7fd fcc0 	bl	800394c <_malloc_r>
 8005fcc:	9a01      	ldr	r2, [sp, #4]
 8005fce:	4605      	mov	r5, r0
 8005fd0:	b930      	cbnz	r0, 8005fe0 <_calloc_r+0x24>
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	b003      	add	sp, #12
 8005fd6:	bd30      	pop	{r4, r5, pc}
 8005fd8:	220c      	movs	r2, #12
 8005fda:	6002      	str	r2, [r0, #0]
 8005fdc:	2500      	movs	r5, #0
 8005fde:	e7f8      	b.n	8005fd2 <_calloc_r+0x16>
 8005fe0:	4621      	mov	r1, r4
 8005fe2:	f7fe faca 	bl	800457a <memset>
 8005fe6:	e7f4      	b.n	8005fd2 <_calloc_r+0x16>

08005fe8 <__ascii_mbtowc>:
 8005fe8:	b082      	sub	sp, #8
 8005fea:	b901      	cbnz	r1, 8005fee <__ascii_mbtowc+0x6>
 8005fec:	a901      	add	r1, sp, #4
 8005fee:	b142      	cbz	r2, 8006002 <__ascii_mbtowc+0x1a>
 8005ff0:	b14b      	cbz	r3, 8006006 <__ascii_mbtowc+0x1e>
 8005ff2:	7813      	ldrb	r3, [r2, #0]
 8005ff4:	600b      	str	r3, [r1, #0]
 8005ff6:	7812      	ldrb	r2, [r2, #0]
 8005ff8:	1e10      	subs	r0, r2, #0
 8005ffa:	bf18      	it	ne
 8005ffc:	2001      	movne	r0, #1
 8005ffe:	b002      	add	sp, #8
 8006000:	4770      	bx	lr
 8006002:	4610      	mov	r0, r2
 8006004:	e7fb      	b.n	8005ffe <__ascii_mbtowc+0x16>
 8006006:	f06f 0001 	mvn.w	r0, #1
 800600a:	e7f8      	b.n	8005ffe <__ascii_mbtowc+0x16>

0800600c <_realloc_r>:
 800600c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006010:	4680      	mov	r8, r0
 8006012:	4614      	mov	r4, r2
 8006014:	460e      	mov	r6, r1
 8006016:	b921      	cbnz	r1, 8006022 <_realloc_r+0x16>
 8006018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800601c:	4611      	mov	r1, r2
 800601e:	f7fd bc95 	b.w	800394c <_malloc_r>
 8006022:	b92a      	cbnz	r2, 8006030 <_realloc_r+0x24>
 8006024:	f7ff f9b6 	bl	8005394 <_free_r>
 8006028:	4625      	mov	r5, r4
 800602a:	4628      	mov	r0, r5
 800602c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006030:	f000 f841 	bl	80060b6 <_malloc_usable_size_r>
 8006034:	4284      	cmp	r4, r0
 8006036:	4607      	mov	r7, r0
 8006038:	d802      	bhi.n	8006040 <_realloc_r+0x34>
 800603a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800603e:	d812      	bhi.n	8006066 <_realloc_r+0x5a>
 8006040:	4621      	mov	r1, r4
 8006042:	4640      	mov	r0, r8
 8006044:	f7fd fc82 	bl	800394c <_malloc_r>
 8006048:	4605      	mov	r5, r0
 800604a:	2800      	cmp	r0, #0
 800604c:	d0ed      	beq.n	800602a <_realloc_r+0x1e>
 800604e:	42bc      	cmp	r4, r7
 8006050:	4622      	mov	r2, r4
 8006052:	4631      	mov	r1, r6
 8006054:	bf28      	it	cs
 8006056:	463a      	movcs	r2, r7
 8006058:	f7ff ff84 	bl	8005f64 <memcpy>
 800605c:	4631      	mov	r1, r6
 800605e:	4640      	mov	r0, r8
 8006060:	f7ff f998 	bl	8005394 <_free_r>
 8006064:	e7e1      	b.n	800602a <_realloc_r+0x1e>
 8006066:	4635      	mov	r5, r6
 8006068:	e7df      	b.n	800602a <_realloc_r+0x1e>

0800606a <__ascii_wctomb>:
 800606a:	b149      	cbz	r1, 8006080 <__ascii_wctomb+0x16>
 800606c:	2aff      	cmp	r2, #255	; 0xff
 800606e:	bf85      	ittet	hi
 8006070:	238a      	movhi	r3, #138	; 0x8a
 8006072:	6003      	strhi	r3, [r0, #0]
 8006074:	700a      	strbls	r2, [r1, #0]
 8006076:	f04f 30ff 	movhi.w	r0, #4294967295
 800607a:	bf98      	it	ls
 800607c:	2001      	movls	r0, #1
 800607e:	4770      	bx	lr
 8006080:	4608      	mov	r0, r1
 8006082:	4770      	bx	lr

08006084 <fiprintf>:
 8006084:	b40e      	push	{r1, r2, r3}
 8006086:	b503      	push	{r0, r1, lr}
 8006088:	4601      	mov	r1, r0
 800608a:	ab03      	add	r3, sp, #12
 800608c:	4805      	ldr	r0, [pc, #20]	; (80060a4 <fiprintf+0x20>)
 800608e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006092:	6800      	ldr	r0, [r0, #0]
 8006094:	9301      	str	r3, [sp, #4]
 8006096:	f000 f83f 	bl	8006118 <_vfiprintf_r>
 800609a:	b002      	add	sp, #8
 800609c:	f85d eb04 	ldr.w	lr, [sp], #4
 80060a0:	b003      	add	sp, #12
 80060a2:	4770      	bx	lr
 80060a4:	200000e0 	.word	0x200000e0

080060a8 <abort>:
 80060a8:	b508      	push	{r3, lr}
 80060aa:	2006      	movs	r0, #6
 80060ac:	f000 fa0c 	bl	80064c8 <raise>
 80060b0:	2001      	movs	r0, #1
 80060b2:	f7fc f8ed 	bl	8002290 <_exit>

080060b6 <_malloc_usable_size_r>:
 80060b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060ba:	1f18      	subs	r0, r3, #4
 80060bc:	2b00      	cmp	r3, #0
 80060be:	bfbc      	itt	lt
 80060c0:	580b      	ldrlt	r3, [r1, r0]
 80060c2:	18c0      	addlt	r0, r0, r3
 80060c4:	4770      	bx	lr

080060c6 <__sfputc_r>:
 80060c6:	6893      	ldr	r3, [r2, #8]
 80060c8:	3b01      	subs	r3, #1
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	b410      	push	{r4}
 80060ce:	6093      	str	r3, [r2, #8]
 80060d0:	da08      	bge.n	80060e4 <__sfputc_r+0x1e>
 80060d2:	6994      	ldr	r4, [r2, #24]
 80060d4:	42a3      	cmp	r3, r4
 80060d6:	db01      	blt.n	80060dc <__sfputc_r+0x16>
 80060d8:	290a      	cmp	r1, #10
 80060da:	d103      	bne.n	80060e4 <__sfputc_r+0x1e>
 80060dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060e0:	f000 b934 	b.w	800634c <__swbuf_r>
 80060e4:	6813      	ldr	r3, [r2, #0]
 80060e6:	1c58      	adds	r0, r3, #1
 80060e8:	6010      	str	r0, [r2, #0]
 80060ea:	7019      	strb	r1, [r3, #0]
 80060ec:	4608      	mov	r0, r1
 80060ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <__sfputs_r>:
 80060f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f6:	4606      	mov	r6, r0
 80060f8:	460f      	mov	r7, r1
 80060fa:	4614      	mov	r4, r2
 80060fc:	18d5      	adds	r5, r2, r3
 80060fe:	42ac      	cmp	r4, r5
 8006100:	d101      	bne.n	8006106 <__sfputs_r+0x12>
 8006102:	2000      	movs	r0, #0
 8006104:	e007      	b.n	8006116 <__sfputs_r+0x22>
 8006106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800610a:	463a      	mov	r2, r7
 800610c:	4630      	mov	r0, r6
 800610e:	f7ff ffda 	bl	80060c6 <__sfputc_r>
 8006112:	1c43      	adds	r3, r0, #1
 8006114:	d1f3      	bne.n	80060fe <__sfputs_r+0xa>
 8006116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006118 <_vfiprintf_r>:
 8006118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611c:	460d      	mov	r5, r1
 800611e:	b09d      	sub	sp, #116	; 0x74
 8006120:	4614      	mov	r4, r2
 8006122:	4698      	mov	r8, r3
 8006124:	4606      	mov	r6, r0
 8006126:	b118      	cbz	r0, 8006130 <_vfiprintf_r+0x18>
 8006128:	6a03      	ldr	r3, [r0, #32]
 800612a:	b90b      	cbnz	r3, 8006130 <_vfiprintf_r+0x18>
 800612c:	f7fe f98c 	bl	8004448 <__sinit>
 8006130:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006132:	07d9      	lsls	r1, r3, #31
 8006134:	d405      	bmi.n	8006142 <_vfiprintf_r+0x2a>
 8006136:	89ab      	ldrh	r3, [r5, #12]
 8006138:	059a      	lsls	r2, r3, #22
 800613a:	d402      	bmi.n	8006142 <_vfiprintf_r+0x2a>
 800613c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800613e:	f7fe faaa 	bl	8004696 <__retarget_lock_acquire_recursive>
 8006142:	89ab      	ldrh	r3, [r5, #12]
 8006144:	071b      	lsls	r3, r3, #28
 8006146:	d501      	bpl.n	800614c <_vfiprintf_r+0x34>
 8006148:	692b      	ldr	r3, [r5, #16]
 800614a:	b99b      	cbnz	r3, 8006174 <_vfiprintf_r+0x5c>
 800614c:	4629      	mov	r1, r5
 800614e:	4630      	mov	r0, r6
 8006150:	f000 f93a 	bl	80063c8 <__swsetup_r>
 8006154:	b170      	cbz	r0, 8006174 <_vfiprintf_r+0x5c>
 8006156:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006158:	07dc      	lsls	r4, r3, #31
 800615a:	d504      	bpl.n	8006166 <_vfiprintf_r+0x4e>
 800615c:	f04f 30ff 	mov.w	r0, #4294967295
 8006160:	b01d      	add	sp, #116	; 0x74
 8006162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006166:	89ab      	ldrh	r3, [r5, #12]
 8006168:	0598      	lsls	r0, r3, #22
 800616a:	d4f7      	bmi.n	800615c <_vfiprintf_r+0x44>
 800616c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800616e:	f7fe fa93 	bl	8004698 <__retarget_lock_release_recursive>
 8006172:	e7f3      	b.n	800615c <_vfiprintf_r+0x44>
 8006174:	2300      	movs	r3, #0
 8006176:	9309      	str	r3, [sp, #36]	; 0x24
 8006178:	2320      	movs	r3, #32
 800617a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800617e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006182:	2330      	movs	r3, #48	; 0x30
 8006184:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006338 <_vfiprintf_r+0x220>
 8006188:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800618c:	f04f 0901 	mov.w	r9, #1
 8006190:	4623      	mov	r3, r4
 8006192:	469a      	mov	sl, r3
 8006194:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006198:	b10a      	cbz	r2, 800619e <_vfiprintf_r+0x86>
 800619a:	2a25      	cmp	r2, #37	; 0x25
 800619c:	d1f9      	bne.n	8006192 <_vfiprintf_r+0x7a>
 800619e:	ebba 0b04 	subs.w	fp, sl, r4
 80061a2:	d00b      	beq.n	80061bc <_vfiprintf_r+0xa4>
 80061a4:	465b      	mov	r3, fp
 80061a6:	4622      	mov	r2, r4
 80061a8:	4629      	mov	r1, r5
 80061aa:	4630      	mov	r0, r6
 80061ac:	f7ff ffa2 	bl	80060f4 <__sfputs_r>
 80061b0:	3001      	adds	r0, #1
 80061b2:	f000 80a9 	beq.w	8006308 <_vfiprintf_r+0x1f0>
 80061b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061b8:	445a      	add	r2, fp
 80061ba:	9209      	str	r2, [sp, #36]	; 0x24
 80061bc:	f89a 3000 	ldrb.w	r3, [sl]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f000 80a1 	beq.w	8006308 <_vfiprintf_r+0x1f0>
 80061c6:	2300      	movs	r3, #0
 80061c8:	f04f 32ff 	mov.w	r2, #4294967295
 80061cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061d0:	f10a 0a01 	add.w	sl, sl, #1
 80061d4:	9304      	str	r3, [sp, #16]
 80061d6:	9307      	str	r3, [sp, #28]
 80061d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061dc:	931a      	str	r3, [sp, #104]	; 0x68
 80061de:	4654      	mov	r4, sl
 80061e0:	2205      	movs	r2, #5
 80061e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061e6:	4854      	ldr	r0, [pc, #336]	; (8006338 <_vfiprintf_r+0x220>)
 80061e8:	f7f9 fff2 	bl	80001d0 <memchr>
 80061ec:	9a04      	ldr	r2, [sp, #16]
 80061ee:	b9d8      	cbnz	r0, 8006228 <_vfiprintf_r+0x110>
 80061f0:	06d1      	lsls	r1, r2, #27
 80061f2:	bf44      	itt	mi
 80061f4:	2320      	movmi	r3, #32
 80061f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061fa:	0713      	lsls	r3, r2, #28
 80061fc:	bf44      	itt	mi
 80061fe:	232b      	movmi	r3, #43	; 0x2b
 8006200:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006204:	f89a 3000 	ldrb.w	r3, [sl]
 8006208:	2b2a      	cmp	r3, #42	; 0x2a
 800620a:	d015      	beq.n	8006238 <_vfiprintf_r+0x120>
 800620c:	9a07      	ldr	r2, [sp, #28]
 800620e:	4654      	mov	r4, sl
 8006210:	2000      	movs	r0, #0
 8006212:	f04f 0c0a 	mov.w	ip, #10
 8006216:	4621      	mov	r1, r4
 8006218:	f811 3b01 	ldrb.w	r3, [r1], #1
 800621c:	3b30      	subs	r3, #48	; 0x30
 800621e:	2b09      	cmp	r3, #9
 8006220:	d94d      	bls.n	80062be <_vfiprintf_r+0x1a6>
 8006222:	b1b0      	cbz	r0, 8006252 <_vfiprintf_r+0x13a>
 8006224:	9207      	str	r2, [sp, #28]
 8006226:	e014      	b.n	8006252 <_vfiprintf_r+0x13a>
 8006228:	eba0 0308 	sub.w	r3, r0, r8
 800622c:	fa09 f303 	lsl.w	r3, r9, r3
 8006230:	4313      	orrs	r3, r2
 8006232:	9304      	str	r3, [sp, #16]
 8006234:	46a2      	mov	sl, r4
 8006236:	e7d2      	b.n	80061de <_vfiprintf_r+0xc6>
 8006238:	9b03      	ldr	r3, [sp, #12]
 800623a:	1d19      	adds	r1, r3, #4
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	9103      	str	r1, [sp, #12]
 8006240:	2b00      	cmp	r3, #0
 8006242:	bfbb      	ittet	lt
 8006244:	425b      	neglt	r3, r3
 8006246:	f042 0202 	orrlt.w	r2, r2, #2
 800624a:	9307      	strge	r3, [sp, #28]
 800624c:	9307      	strlt	r3, [sp, #28]
 800624e:	bfb8      	it	lt
 8006250:	9204      	strlt	r2, [sp, #16]
 8006252:	7823      	ldrb	r3, [r4, #0]
 8006254:	2b2e      	cmp	r3, #46	; 0x2e
 8006256:	d10c      	bne.n	8006272 <_vfiprintf_r+0x15a>
 8006258:	7863      	ldrb	r3, [r4, #1]
 800625a:	2b2a      	cmp	r3, #42	; 0x2a
 800625c:	d134      	bne.n	80062c8 <_vfiprintf_r+0x1b0>
 800625e:	9b03      	ldr	r3, [sp, #12]
 8006260:	1d1a      	adds	r2, r3, #4
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	9203      	str	r2, [sp, #12]
 8006266:	2b00      	cmp	r3, #0
 8006268:	bfb8      	it	lt
 800626a:	f04f 33ff 	movlt.w	r3, #4294967295
 800626e:	3402      	adds	r4, #2
 8006270:	9305      	str	r3, [sp, #20]
 8006272:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006348 <_vfiprintf_r+0x230>
 8006276:	7821      	ldrb	r1, [r4, #0]
 8006278:	2203      	movs	r2, #3
 800627a:	4650      	mov	r0, sl
 800627c:	f7f9 ffa8 	bl	80001d0 <memchr>
 8006280:	b138      	cbz	r0, 8006292 <_vfiprintf_r+0x17a>
 8006282:	9b04      	ldr	r3, [sp, #16]
 8006284:	eba0 000a 	sub.w	r0, r0, sl
 8006288:	2240      	movs	r2, #64	; 0x40
 800628a:	4082      	lsls	r2, r0
 800628c:	4313      	orrs	r3, r2
 800628e:	3401      	adds	r4, #1
 8006290:	9304      	str	r3, [sp, #16]
 8006292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006296:	4829      	ldr	r0, [pc, #164]	; (800633c <_vfiprintf_r+0x224>)
 8006298:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800629c:	2206      	movs	r2, #6
 800629e:	f7f9 ff97 	bl	80001d0 <memchr>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d03f      	beq.n	8006326 <_vfiprintf_r+0x20e>
 80062a6:	4b26      	ldr	r3, [pc, #152]	; (8006340 <_vfiprintf_r+0x228>)
 80062a8:	bb1b      	cbnz	r3, 80062f2 <_vfiprintf_r+0x1da>
 80062aa:	9b03      	ldr	r3, [sp, #12]
 80062ac:	3307      	adds	r3, #7
 80062ae:	f023 0307 	bic.w	r3, r3, #7
 80062b2:	3308      	adds	r3, #8
 80062b4:	9303      	str	r3, [sp, #12]
 80062b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062b8:	443b      	add	r3, r7
 80062ba:	9309      	str	r3, [sp, #36]	; 0x24
 80062bc:	e768      	b.n	8006190 <_vfiprintf_r+0x78>
 80062be:	fb0c 3202 	mla	r2, ip, r2, r3
 80062c2:	460c      	mov	r4, r1
 80062c4:	2001      	movs	r0, #1
 80062c6:	e7a6      	b.n	8006216 <_vfiprintf_r+0xfe>
 80062c8:	2300      	movs	r3, #0
 80062ca:	3401      	adds	r4, #1
 80062cc:	9305      	str	r3, [sp, #20]
 80062ce:	4619      	mov	r1, r3
 80062d0:	f04f 0c0a 	mov.w	ip, #10
 80062d4:	4620      	mov	r0, r4
 80062d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062da:	3a30      	subs	r2, #48	; 0x30
 80062dc:	2a09      	cmp	r2, #9
 80062de:	d903      	bls.n	80062e8 <_vfiprintf_r+0x1d0>
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d0c6      	beq.n	8006272 <_vfiprintf_r+0x15a>
 80062e4:	9105      	str	r1, [sp, #20]
 80062e6:	e7c4      	b.n	8006272 <_vfiprintf_r+0x15a>
 80062e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80062ec:	4604      	mov	r4, r0
 80062ee:	2301      	movs	r3, #1
 80062f0:	e7f0      	b.n	80062d4 <_vfiprintf_r+0x1bc>
 80062f2:	ab03      	add	r3, sp, #12
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	462a      	mov	r2, r5
 80062f8:	4b12      	ldr	r3, [pc, #72]	; (8006344 <_vfiprintf_r+0x22c>)
 80062fa:	a904      	add	r1, sp, #16
 80062fc:	4630      	mov	r0, r6
 80062fe:	f7fd fc51 	bl	8003ba4 <_printf_float>
 8006302:	4607      	mov	r7, r0
 8006304:	1c78      	adds	r0, r7, #1
 8006306:	d1d6      	bne.n	80062b6 <_vfiprintf_r+0x19e>
 8006308:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800630a:	07d9      	lsls	r1, r3, #31
 800630c:	d405      	bmi.n	800631a <_vfiprintf_r+0x202>
 800630e:	89ab      	ldrh	r3, [r5, #12]
 8006310:	059a      	lsls	r2, r3, #22
 8006312:	d402      	bmi.n	800631a <_vfiprintf_r+0x202>
 8006314:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006316:	f7fe f9bf 	bl	8004698 <__retarget_lock_release_recursive>
 800631a:	89ab      	ldrh	r3, [r5, #12]
 800631c:	065b      	lsls	r3, r3, #25
 800631e:	f53f af1d 	bmi.w	800615c <_vfiprintf_r+0x44>
 8006322:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006324:	e71c      	b.n	8006160 <_vfiprintf_r+0x48>
 8006326:	ab03      	add	r3, sp, #12
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	462a      	mov	r2, r5
 800632c:	4b05      	ldr	r3, [pc, #20]	; (8006344 <_vfiprintf_r+0x22c>)
 800632e:	a904      	add	r1, sp, #16
 8006330:	4630      	mov	r0, r6
 8006332:	f7fd fedb 	bl	80040ec <_printf_i>
 8006336:	e7e4      	b.n	8006302 <_vfiprintf_r+0x1ea>
 8006338:	08007754 	.word	0x08007754
 800633c:	0800775e 	.word	0x0800775e
 8006340:	08003ba5 	.word	0x08003ba5
 8006344:	080060f5 	.word	0x080060f5
 8006348:	0800775a 	.word	0x0800775a

0800634c <__swbuf_r>:
 800634c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800634e:	460e      	mov	r6, r1
 8006350:	4614      	mov	r4, r2
 8006352:	4605      	mov	r5, r0
 8006354:	b118      	cbz	r0, 800635e <__swbuf_r+0x12>
 8006356:	6a03      	ldr	r3, [r0, #32]
 8006358:	b90b      	cbnz	r3, 800635e <__swbuf_r+0x12>
 800635a:	f7fe f875 	bl	8004448 <__sinit>
 800635e:	69a3      	ldr	r3, [r4, #24]
 8006360:	60a3      	str	r3, [r4, #8]
 8006362:	89a3      	ldrh	r3, [r4, #12]
 8006364:	071a      	lsls	r2, r3, #28
 8006366:	d525      	bpl.n	80063b4 <__swbuf_r+0x68>
 8006368:	6923      	ldr	r3, [r4, #16]
 800636a:	b31b      	cbz	r3, 80063b4 <__swbuf_r+0x68>
 800636c:	6823      	ldr	r3, [r4, #0]
 800636e:	6922      	ldr	r2, [r4, #16]
 8006370:	1a98      	subs	r0, r3, r2
 8006372:	6963      	ldr	r3, [r4, #20]
 8006374:	b2f6      	uxtb	r6, r6
 8006376:	4283      	cmp	r3, r0
 8006378:	4637      	mov	r7, r6
 800637a:	dc04      	bgt.n	8006386 <__swbuf_r+0x3a>
 800637c:	4621      	mov	r1, r4
 800637e:	4628      	mov	r0, r5
 8006380:	f7ff fdae 	bl	8005ee0 <_fflush_r>
 8006384:	b9e0      	cbnz	r0, 80063c0 <__swbuf_r+0x74>
 8006386:	68a3      	ldr	r3, [r4, #8]
 8006388:	3b01      	subs	r3, #1
 800638a:	60a3      	str	r3, [r4, #8]
 800638c:	6823      	ldr	r3, [r4, #0]
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	6022      	str	r2, [r4, #0]
 8006392:	701e      	strb	r6, [r3, #0]
 8006394:	6962      	ldr	r2, [r4, #20]
 8006396:	1c43      	adds	r3, r0, #1
 8006398:	429a      	cmp	r2, r3
 800639a:	d004      	beq.n	80063a6 <__swbuf_r+0x5a>
 800639c:	89a3      	ldrh	r3, [r4, #12]
 800639e:	07db      	lsls	r3, r3, #31
 80063a0:	d506      	bpl.n	80063b0 <__swbuf_r+0x64>
 80063a2:	2e0a      	cmp	r6, #10
 80063a4:	d104      	bne.n	80063b0 <__swbuf_r+0x64>
 80063a6:	4621      	mov	r1, r4
 80063a8:	4628      	mov	r0, r5
 80063aa:	f7ff fd99 	bl	8005ee0 <_fflush_r>
 80063ae:	b938      	cbnz	r0, 80063c0 <__swbuf_r+0x74>
 80063b0:	4638      	mov	r0, r7
 80063b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063b4:	4621      	mov	r1, r4
 80063b6:	4628      	mov	r0, r5
 80063b8:	f000 f806 	bl	80063c8 <__swsetup_r>
 80063bc:	2800      	cmp	r0, #0
 80063be:	d0d5      	beq.n	800636c <__swbuf_r+0x20>
 80063c0:	f04f 37ff 	mov.w	r7, #4294967295
 80063c4:	e7f4      	b.n	80063b0 <__swbuf_r+0x64>
	...

080063c8 <__swsetup_r>:
 80063c8:	b538      	push	{r3, r4, r5, lr}
 80063ca:	4b2a      	ldr	r3, [pc, #168]	; (8006474 <__swsetup_r+0xac>)
 80063cc:	4605      	mov	r5, r0
 80063ce:	6818      	ldr	r0, [r3, #0]
 80063d0:	460c      	mov	r4, r1
 80063d2:	b118      	cbz	r0, 80063dc <__swsetup_r+0x14>
 80063d4:	6a03      	ldr	r3, [r0, #32]
 80063d6:	b90b      	cbnz	r3, 80063dc <__swsetup_r+0x14>
 80063d8:	f7fe f836 	bl	8004448 <__sinit>
 80063dc:	89a3      	ldrh	r3, [r4, #12]
 80063de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063e2:	0718      	lsls	r0, r3, #28
 80063e4:	d422      	bmi.n	800642c <__swsetup_r+0x64>
 80063e6:	06d9      	lsls	r1, r3, #27
 80063e8:	d407      	bmi.n	80063fa <__swsetup_r+0x32>
 80063ea:	2309      	movs	r3, #9
 80063ec:	602b      	str	r3, [r5, #0]
 80063ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80063f2:	81a3      	strh	r3, [r4, #12]
 80063f4:	f04f 30ff 	mov.w	r0, #4294967295
 80063f8:	e034      	b.n	8006464 <__swsetup_r+0x9c>
 80063fa:	0758      	lsls	r0, r3, #29
 80063fc:	d512      	bpl.n	8006424 <__swsetup_r+0x5c>
 80063fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006400:	b141      	cbz	r1, 8006414 <__swsetup_r+0x4c>
 8006402:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006406:	4299      	cmp	r1, r3
 8006408:	d002      	beq.n	8006410 <__swsetup_r+0x48>
 800640a:	4628      	mov	r0, r5
 800640c:	f7fe ffc2 	bl	8005394 <_free_r>
 8006410:	2300      	movs	r3, #0
 8006412:	6363      	str	r3, [r4, #52]	; 0x34
 8006414:	89a3      	ldrh	r3, [r4, #12]
 8006416:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800641a:	81a3      	strh	r3, [r4, #12]
 800641c:	2300      	movs	r3, #0
 800641e:	6063      	str	r3, [r4, #4]
 8006420:	6923      	ldr	r3, [r4, #16]
 8006422:	6023      	str	r3, [r4, #0]
 8006424:	89a3      	ldrh	r3, [r4, #12]
 8006426:	f043 0308 	orr.w	r3, r3, #8
 800642a:	81a3      	strh	r3, [r4, #12]
 800642c:	6923      	ldr	r3, [r4, #16]
 800642e:	b94b      	cbnz	r3, 8006444 <__swsetup_r+0x7c>
 8006430:	89a3      	ldrh	r3, [r4, #12]
 8006432:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006436:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800643a:	d003      	beq.n	8006444 <__swsetup_r+0x7c>
 800643c:	4621      	mov	r1, r4
 800643e:	4628      	mov	r0, r5
 8006440:	f000 f884 	bl	800654c <__smakebuf_r>
 8006444:	89a0      	ldrh	r0, [r4, #12]
 8006446:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800644a:	f010 0301 	ands.w	r3, r0, #1
 800644e:	d00a      	beq.n	8006466 <__swsetup_r+0x9e>
 8006450:	2300      	movs	r3, #0
 8006452:	60a3      	str	r3, [r4, #8]
 8006454:	6963      	ldr	r3, [r4, #20]
 8006456:	425b      	negs	r3, r3
 8006458:	61a3      	str	r3, [r4, #24]
 800645a:	6923      	ldr	r3, [r4, #16]
 800645c:	b943      	cbnz	r3, 8006470 <__swsetup_r+0xa8>
 800645e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006462:	d1c4      	bne.n	80063ee <__swsetup_r+0x26>
 8006464:	bd38      	pop	{r3, r4, r5, pc}
 8006466:	0781      	lsls	r1, r0, #30
 8006468:	bf58      	it	pl
 800646a:	6963      	ldrpl	r3, [r4, #20]
 800646c:	60a3      	str	r3, [r4, #8]
 800646e:	e7f4      	b.n	800645a <__swsetup_r+0x92>
 8006470:	2000      	movs	r0, #0
 8006472:	e7f7      	b.n	8006464 <__swsetup_r+0x9c>
 8006474:	200000e0 	.word	0x200000e0

08006478 <_raise_r>:
 8006478:	291f      	cmp	r1, #31
 800647a:	b538      	push	{r3, r4, r5, lr}
 800647c:	4604      	mov	r4, r0
 800647e:	460d      	mov	r5, r1
 8006480:	d904      	bls.n	800648c <_raise_r+0x14>
 8006482:	2316      	movs	r3, #22
 8006484:	6003      	str	r3, [r0, #0]
 8006486:	f04f 30ff 	mov.w	r0, #4294967295
 800648a:	bd38      	pop	{r3, r4, r5, pc}
 800648c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800648e:	b112      	cbz	r2, 8006496 <_raise_r+0x1e>
 8006490:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006494:	b94b      	cbnz	r3, 80064aa <_raise_r+0x32>
 8006496:	4620      	mov	r0, r4
 8006498:	f000 f830 	bl	80064fc <_getpid_r>
 800649c:	462a      	mov	r2, r5
 800649e:	4601      	mov	r1, r0
 80064a0:	4620      	mov	r0, r4
 80064a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064a6:	f000 b817 	b.w	80064d8 <_kill_r>
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d00a      	beq.n	80064c4 <_raise_r+0x4c>
 80064ae:	1c59      	adds	r1, r3, #1
 80064b0:	d103      	bne.n	80064ba <_raise_r+0x42>
 80064b2:	2316      	movs	r3, #22
 80064b4:	6003      	str	r3, [r0, #0]
 80064b6:	2001      	movs	r0, #1
 80064b8:	e7e7      	b.n	800648a <_raise_r+0x12>
 80064ba:	2400      	movs	r4, #0
 80064bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80064c0:	4628      	mov	r0, r5
 80064c2:	4798      	blx	r3
 80064c4:	2000      	movs	r0, #0
 80064c6:	e7e0      	b.n	800648a <_raise_r+0x12>

080064c8 <raise>:
 80064c8:	4b02      	ldr	r3, [pc, #8]	; (80064d4 <raise+0xc>)
 80064ca:	4601      	mov	r1, r0
 80064cc:	6818      	ldr	r0, [r3, #0]
 80064ce:	f7ff bfd3 	b.w	8006478 <_raise_r>
 80064d2:	bf00      	nop
 80064d4:	200000e0 	.word	0x200000e0

080064d8 <_kill_r>:
 80064d8:	b538      	push	{r3, r4, r5, lr}
 80064da:	4d07      	ldr	r5, [pc, #28]	; (80064f8 <_kill_r+0x20>)
 80064dc:	2300      	movs	r3, #0
 80064de:	4604      	mov	r4, r0
 80064e0:	4608      	mov	r0, r1
 80064e2:	4611      	mov	r1, r2
 80064e4:	602b      	str	r3, [r5, #0]
 80064e6:	f7fb fec3 	bl	8002270 <_kill>
 80064ea:	1c43      	adds	r3, r0, #1
 80064ec:	d102      	bne.n	80064f4 <_kill_r+0x1c>
 80064ee:	682b      	ldr	r3, [r5, #0]
 80064f0:	b103      	cbz	r3, 80064f4 <_kill_r+0x1c>
 80064f2:	6023      	str	r3, [r4, #0]
 80064f4:	bd38      	pop	{r3, r4, r5, pc}
 80064f6:	bf00      	nop
 80064f8:	200004b8 	.word	0x200004b8

080064fc <_getpid_r>:
 80064fc:	f7fb beb0 	b.w	8002260 <_getpid>

08006500 <__swhatbuf_r>:
 8006500:	b570      	push	{r4, r5, r6, lr}
 8006502:	460c      	mov	r4, r1
 8006504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006508:	2900      	cmp	r1, #0
 800650a:	b096      	sub	sp, #88	; 0x58
 800650c:	4615      	mov	r5, r2
 800650e:	461e      	mov	r6, r3
 8006510:	da0d      	bge.n	800652e <__swhatbuf_r+0x2e>
 8006512:	89a3      	ldrh	r3, [r4, #12]
 8006514:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006518:	f04f 0100 	mov.w	r1, #0
 800651c:	bf0c      	ite	eq
 800651e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006522:	2340      	movne	r3, #64	; 0x40
 8006524:	2000      	movs	r0, #0
 8006526:	6031      	str	r1, [r6, #0]
 8006528:	602b      	str	r3, [r5, #0]
 800652a:	b016      	add	sp, #88	; 0x58
 800652c:	bd70      	pop	{r4, r5, r6, pc}
 800652e:	466a      	mov	r2, sp
 8006530:	f000 f848 	bl	80065c4 <_fstat_r>
 8006534:	2800      	cmp	r0, #0
 8006536:	dbec      	blt.n	8006512 <__swhatbuf_r+0x12>
 8006538:	9901      	ldr	r1, [sp, #4]
 800653a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800653e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006542:	4259      	negs	r1, r3
 8006544:	4159      	adcs	r1, r3
 8006546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800654a:	e7eb      	b.n	8006524 <__swhatbuf_r+0x24>

0800654c <__smakebuf_r>:
 800654c:	898b      	ldrh	r3, [r1, #12]
 800654e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006550:	079d      	lsls	r5, r3, #30
 8006552:	4606      	mov	r6, r0
 8006554:	460c      	mov	r4, r1
 8006556:	d507      	bpl.n	8006568 <__smakebuf_r+0x1c>
 8006558:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800655c:	6023      	str	r3, [r4, #0]
 800655e:	6123      	str	r3, [r4, #16]
 8006560:	2301      	movs	r3, #1
 8006562:	6163      	str	r3, [r4, #20]
 8006564:	b002      	add	sp, #8
 8006566:	bd70      	pop	{r4, r5, r6, pc}
 8006568:	ab01      	add	r3, sp, #4
 800656a:	466a      	mov	r2, sp
 800656c:	f7ff ffc8 	bl	8006500 <__swhatbuf_r>
 8006570:	9900      	ldr	r1, [sp, #0]
 8006572:	4605      	mov	r5, r0
 8006574:	4630      	mov	r0, r6
 8006576:	f7fd f9e9 	bl	800394c <_malloc_r>
 800657a:	b948      	cbnz	r0, 8006590 <__smakebuf_r+0x44>
 800657c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006580:	059a      	lsls	r2, r3, #22
 8006582:	d4ef      	bmi.n	8006564 <__smakebuf_r+0x18>
 8006584:	f023 0303 	bic.w	r3, r3, #3
 8006588:	f043 0302 	orr.w	r3, r3, #2
 800658c:	81a3      	strh	r3, [r4, #12]
 800658e:	e7e3      	b.n	8006558 <__smakebuf_r+0xc>
 8006590:	89a3      	ldrh	r3, [r4, #12]
 8006592:	6020      	str	r0, [r4, #0]
 8006594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006598:	81a3      	strh	r3, [r4, #12]
 800659a:	9b00      	ldr	r3, [sp, #0]
 800659c:	6163      	str	r3, [r4, #20]
 800659e:	9b01      	ldr	r3, [sp, #4]
 80065a0:	6120      	str	r0, [r4, #16]
 80065a2:	b15b      	cbz	r3, 80065bc <__smakebuf_r+0x70>
 80065a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065a8:	4630      	mov	r0, r6
 80065aa:	f000 f81d 	bl	80065e8 <_isatty_r>
 80065ae:	b128      	cbz	r0, 80065bc <__smakebuf_r+0x70>
 80065b0:	89a3      	ldrh	r3, [r4, #12]
 80065b2:	f023 0303 	bic.w	r3, r3, #3
 80065b6:	f043 0301 	orr.w	r3, r3, #1
 80065ba:	81a3      	strh	r3, [r4, #12]
 80065bc:	89a3      	ldrh	r3, [r4, #12]
 80065be:	431d      	orrs	r5, r3
 80065c0:	81a5      	strh	r5, [r4, #12]
 80065c2:	e7cf      	b.n	8006564 <__smakebuf_r+0x18>

080065c4 <_fstat_r>:
 80065c4:	b538      	push	{r3, r4, r5, lr}
 80065c6:	4d07      	ldr	r5, [pc, #28]	; (80065e4 <_fstat_r+0x20>)
 80065c8:	2300      	movs	r3, #0
 80065ca:	4604      	mov	r4, r0
 80065cc:	4608      	mov	r0, r1
 80065ce:	4611      	mov	r1, r2
 80065d0:	602b      	str	r3, [r5, #0]
 80065d2:	f7fb feac 	bl	800232e <_fstat>
 80065d6:	1c43      	adds	r3, r0, #1
 80065d8:	d102      	bne.n	80065e0 <_fstat_r+0x1c>
 80065da:	682b      	ldr	r3, [r5, #0]
 80065dc:	b103      	cbz	r3, 80065e0 <_fstat_r+0x1c>
 80065de:	6023      	str	r3, [r4, #0]
 80065e0:	bd38      	pop	{r3, r4, r5, pc}
 80065e2:	bf00      	nop
 80065e4:	200004b8 	.word	0x200004b8

080065e8 <_isatty_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	4d06      	ldr	r5, [pc, #24]	; (8006604 <_isatty_r+0x1c>)
 80065ec:	2300      	movs	r3, #0
 80065ee:	4604      	mov	r4, r0
 80065f0:	4608      	mov	r0, r1
 80065f2:	602b      	str	r3, [r5, #0]
 80065f4:	f7fb feab 	bl	800234e <_isatty>
 80065f8:	1c43      	adds	r3, r0, #1
 80065fa:	d102      	bne.n	8006602 <_isatty_r+0x1a>
 80065fc:	682b      	ldr	r3, [r5, #0]
 80065fe:	b103      	cbz	r3, 8006602 <_isatty_r+0x1a>
 8006600:	6023      	str	r3, [r4, #0]
 8006602:	bd38      	pop	{r3, r4, r5, pc}
 8006604:	200004b8 	.word	0x200004b8

08006608 <pow>:
 8006608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660a:	ed2d 8b02 	vpush	{d8}
 800660e:	eeb0 8a40 	vmov.f32	s16, s0
 8006612:	eef0 8a60 	vmov.f32	s17, s1
 8006616:	ec55 4b11 	vmov	r4, r5, d1
 800661a:	f000 f871 	bl	8006700 <__ieee754_pow>
 800661e:	4622      	mov	r2, r4
 8006620:	462b      	mov	r3, r5
 8006622:	4620      	mov	r0, r4
 8006624:	4629      	mov	r1, r5
 8006626:	ec57 6b10 	vmov	r6, r7, d0
 800662a:	f7fa fa7f 	bl	8000b2c <__aeabi_dcmpun>
 800662e:	2800      	cmp	r0, #0
 8006630:	d13b      	bne.n	80066aa <pow+0xa2>
 8006632:	ec51 0b18 	vmov	r0, r1, d8
 8006636:	2200      	movs	r2, #0
 8006638:	2300      	movs	r3, #0
 800663a:	f7fa fa45 	bl	8000ac8 <__aeabi_dcmpeq>
 800663e:	b1b8      	cbz	r0, 8006670 <pow+0x68>
 8006640:	2200      	movs	r2, #0
 8006642:	2300      	movs	r3, #0
 8006644:	4620      	mov	r0, r4
 8006646:	4629      	mov	r1, r5
 8006648:	f7fa fa3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800664c:	2800      	cmp	r0, #0
 800664e:	d146      	bne.n	80066de <pow+0xd6>
 8006650:	ec45 4b10 	vmov	d0, r4, r5
 8006654:	f000 f848 	bl	80066e8 <finite>
 8006658:	b338      	cbz	r0, 80066aa <pow+0xa2>
 800665a:	2200      	movs	r2, #0
 800665c:	2300      	movs	r3, #0
 800665e:	4620      	mov	r0, r4
 8006660:	4629      	mov	r1, r5
 8006662:	f7fa fa3b 	bl	8000adc <__aeabi_dcmplt>
 8006666:	b300      	cbz	r0, 80066aa <pow+0xa2>
 8006668:	f7fd ffea 	bl	8004640 <__errno>
 800666c:	2322      	movs	r3, #34	; 0x22
 800666e:	e01b      	b.n	80066a8 <pow+0xa0>
 8006670:	ec47 6b10 	vmov	d0, r6, r7
 8006674:	f000 f838 	bl	80066e8 <finite>
 8006678:	b9e0      	cbnz	r0, 80066b4 <pow+0xac>
 800667a:	eeb0 0a48 	vmov.f32	s0, s16
 800667e:	eef0 0a68 	vmov.f32	s1, s17
 8006682:	f000 f831 	bl	80066e8 <finite>
 8006686:	b1a8      	cbz	r0, 80066b4 <pow+0xac>
 8006688:	ec45 4b10 	vmov	d0, r4, r5
 800668c:	f000 f82c 	bl	80066e8 <finite>
 8006690:	b180      	cbz	r0, 80066b4 <pow+0xac>
 8006692:	4632      	mov	r2, r6
 8006694:	463b      	mov	r3, r7
 8006696:	4630      	mov	r0, r6
 8006698:	4639      	mov	r1, r7
 800669a:	f7fa fa47 	bl	8000b2c <__aeabi_dcmpun>
 800669e:	2800      	cmp	r0, #0
 80066a0:	d0e2      	beq.n	8006668 <pow+0x60>
 80066a2:	f7fd ffcd 	bl	8004640 <__errno>
 80066a6:	2321      	movs	r3, #33	; 0x21
 80066a8:	6003      	str	r3, [r0, #0]
 80066aa:	ecbd 8b02 	vpop	{d8}
 80066ae:	ec47 6b10 	vmov	d0, r6, r7
 80066b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066b4:	2200      	movs	r2, #0
 80066b6:	2300      	movs	r3, #0
 80066b8:	4630      	mov	r0, r6
 80066ba:	4639      	mov	r1, r7
 80066bc:	f7fa fa04 	bl	8000ac8 <__aeabi_dcmpeq>
 80066c0:	2800      	cmp	r0, #0
 80066c2:	d0f2      	beq.n	80066aa <pow+0xa2>
 80066c4:	eeb0 0a48 	vmov.f32	s0, s16
 80066c8:	eef0 0a68 	vmov.f32	s1, s17
 80066cc:	f000 f80c 	bl	80066e8 <finite>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	d0ea      	beq.n	80066aa <pow+0xa2>
 80066d4:	ec45 4b10 	vmov	d0, r4, r5
 80066d8:	f000 f806 	bl	80066e8 <finite>
 80066dc:	e7c3      	b.n	8006666 <pow+0x5e>
 80066de:	4f01      	ldr	r7, [pc, #4]	; (80066e4 <pow+0xdc>)
 80066e0:	2600      	movs	r6, #0
 80066e2:	e7e2      	b.n	80066aa <pow+0xa2>
 80066e4:	3ff00000 	.word	0x3ff00000

080066e8 <finite>:
 80066e8:	b082      	sub	sp, #8
 80066ea:	ed8d 0b00 	vstr	d0, [sp]
 80066ee:	9801      	ldr	r0, [sp, #4]
 80066f0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80066f4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80066f8:	0fc0      	lsrs	r0, r0, #31
 80066fa:	b002      	add	sp, #8
 80066fc:	4770      	bx	lr
	...

08006700 <__ieee754_pow>:
 8006700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006704:	ed2d 8b06 	vpush	{d8-d10}
 8006708:	b089      	sub	sp, #36	; 0x24
 800670a:	ed8d 1b00 	vstr	d1, [sp]
 800670e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006712:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006716:	ea58 0102 	orrs.w	r1, r8, r2
 800671a:	ec57 6b10 	vmov	r6, r7, d0
 800671e:	d115      	bne.n	800674c <__ieee754_pow+0x4c>
 8006720:	19b3      	adds	r3, r6, r6
 8006722:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8006726:	4152      	adcs	r2, r2
 8006728:	4299      	cmp	r1, r3
 800672a:	4b89      	ldr	r3, [pc, #548]	; (8006950 <__ieee754_pow+0x250>)
 800672c:	4193      	sbcs	r3, r2
 800672e:	f080 84d1 	bcs.w	80070d4 <__ieee754_pow+0x9d4>
 8006732:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006736:	4630      	mov	r0, r6
 8006738:	4639      	mov	r1, r7
 800673a:	f7f9 fda7 	bl	800028c <__adddf3>
 800673e:	ec41 0b10 	vmov	d0, r0, r1
 8006742:	b009      	add	sp, #36	; 0x24
 8006744:	ecbd 8b06 	vpop	{d8-d10}
 8006748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674c:	4b81      	ldr	r3, [pc, #516]	; (8006954 <__ieee754_pow+0x254>)
 800674e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006752:	429c      	cmp	r4, r3
 8006754:	ee10 aa10 	vmov	sl, s0
 8006758:	463d      	mov	r5, r7
 800675a:	dc06      	bgt.n	800676a <__ieee754_pow+0x6a>
 800675c:	d101      	bne.n	8006762 <__ieee754_pow+0x62>
 800675e:	2e00      	cmp	r6, #0
 8006760:	d1e7      	bne.n	8006732 <__ieee754_pow+0x32>
 8006762:	4598      	cmp	r8, r3
 8006764:	dc01      	bgt.n	800676a <__ieee754_pow+0x6a>
 8006766:	d10f      	bne.n	8006788 <__ieee754_pow+0x88>
 8006768:	b172      	cbz	r2, 8006788 <__ieee754_pow+0x88>
 800676a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800676e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006772:	ea55 050a 	orrs.w	r5, r5, sl
 8006776:	d1dc      	bne.n	8006732 <__ieee754_pow+0x32>
 8006778:	e9dd 3200 	ldrd	r3, r2, [sp]
 800677c:	18db      	adds	r3, r3, r3
 800677e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006782:	4152      	adcs	r2, r2
 8006784:	429d      	cmp	r5, r3
 8006786:	e7d0      	b.n	800672a <__ieee754_pow+0x2a>
 8006788:	2d00      	cmp	r5, #0
 800678a:	da3b      	bge.n	8006804 <__ieee754_pow+0x104>
 800678c:	4b72      	ldr	r3, [pc, #456]	; (8006958 <__ieee754_pow+0x258>)
 800678e:	4598      	cmp	r8, r3
 8006790:	dc51      	bgt.n	8006836 <__ieee754_pow+0x136>
 8006792:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006796:	4598      	cmp	r8, r3
 8006798:	f340 84ab 	ble.w	80070f2 <__ieee754_pow+0x9f2>
 800679c:	ea4f 5328 	mov.w	r3, r8, asr #20
 80067a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80067a4:	2b14      	cmp	r3, #20
 80067a6:	dd0f      	ble.n	80067c8 <__ieee754_pow+0xc8>
 80067a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80067ac:	fa22 f103 	lsr.w	r1, r2, r3
 80067b0:	fa01 f303 	lsl.w	r3, r1, r3
 80067b4:	4293      	cmp	r3, r2
 80067b6:	f040 849c 	bne.w	80070f2 <__ieee754_pow+0x9f2>
 80067ba:	f001 0101 	and.w	r1, r1, #1
 80067be:	f1c1 0302 	rsb	r3, r1, #2
 80067c2:	9304      	str	r3, [sp, #16]
 80067c4:	b182      	cbz	r2, 80067e8 <__ieee754_pow+0xe8>
 80067c6:	e05f      	b.n	8006888 <__ieee754_pow+0x188>
 80067c8:	2a00      	cmp	r2, #0
 80067ca:	d15b      	bne.n	8006884 <__ieee754_pow+0x184>
 80067cc:	f1c3 0314 	rsb	r3, r3, #20
 80067d0:	fa48 f103 	asr.w	r1, r8, r3
 80067d4:	fa01 f303 	lsl.w	r3, r1, r3
 80067d8:	4543      	cmp	r3, r8
 80067da:	f040 8487 	bne.w	80070ec <__ieee754_pow+0x9ec>
 80067de:	f001 0101 	and.w	r1, r1, #1
 80067e2:	f1c1 0302 	rsb	r3, r1, #2
 80067e6:	9304      	str	r3, [sp, #16]
 80067e8:	4b5c      	ldr	r3, [pc, #368]	; (800695c <__ieee754_pow+0x25c>)
 80067ea:	4598      	cmp	r8, r3
 80067ec:	d132      	bne.n	8006854 <__ieee754_pow+0x154>
 80067ee:	f1b9 0f00 	cmp.w	r9, #0
 80067f2:	f280 8477 	bge.w	80070e4 <__ieee754_pow+0x9e4>
 80067f6:	4959      	ldr	r1, [pc, #356]	; (800695c <__ieee754_pow+0x25c>)
 80067f8:	4632      	mov	r2, r6
 80067fa:	463b      	mov	r3, r7
 80067fc:	2000      	movs	r0, #0
 80067fe:	f7fa f825 	bl	800084c <__aeabi_ddiv>
 8006802:	e79c      	b.n	800673e <__ieee754_pow+0x3e>
 8006804:	2300      	movs	r3, #0
 8006806:	9304      	str	r3, [sp, #16]
 8006808:	2a00      	cmp	r2, #0
 800680a:	d13d      	bne.n	8006888 <__ieee754_pow+0x188>
 800680c:	4b51      	ldr	r3, [pc, #324]	; (8006954 <__ieee754_pow+0x254>)
 800680e:	4598      	cmp	r8, r3
 8006810:	d1ea      	bne.n	80067e8 <__ieee754_pow+0xe8>
 8006812:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006816:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800681a:	ea53 030a 	orrs.w	r3, r3, sl
 800681e:	f000 8459 	beq.w	80070d4 <__ieee754_pow+0x9d4>
 8006822:	4b4f      	ldr	r3, [pc, #316]	; (8006960 <__ieee754_pow+0x260>)
 8006824:	429c      	cmp	r4, r3
 8006826:	dd08      	ble.n	800683a <__ieee754_pow+0x13a>
 8006828:	f1b9 0f00 	cmp.w	r9, #0
 800682c:	f2c0 8456 	blt.w	80070dc <__ieee754_pow+0x9dc>
 8006830:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006834:	e783      	b.n	800673e <__ieee754_pow+0x3e>
 8006836:	2302      	movs	r3, #2
 8006838:	e7e5      	b.n	8006806 <__ieee754_pow+0x106>
 800683a:	f1b9 0f00 	cmp.w	r9, #0
 800683e:	f04f 0000 	mov.w	r0, #0
 8006842:	f04f 0100 	mov.w	r1, #0
 8006846:	f6bf af7a 	bge.w	800673e <__ieee754_pow+0x3e>
 800684a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800684e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006852:	e774      	b.n	800673e <__ieee754_pow+0x3e>
 8006854:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006858:	d106      	bne.n	8006868 <__ieee754_pow+0x168>
 800685a:	4632      	mov	r2, r6
 800685c:	463b      	mov	r3, r7
 800685e:	4630      	mov	r0, r6
 8006860:	4639      	mov	r1, r7
 8006862:	f7f9 fec9 	bl	80005f8 <__aeabi_dmul>
 8006866:	e76a      	b.n	800673e <__ieee754_pow+0x3e>
 8006868:	4b3e      	ldr	r3, [pc, #248]	; (8006964 <__ieee754_pow+0x264>)
 800686a:	4599      	cmp	r9, r3
 800686c:	d10c      	bne.n	8006888 <__ieee754_pow+0x188>
 800686e:	2d00      	cmp	r5, #0
 8006870:	db0a      	blt.n	8006888 <__ieee754_pow+0x188>
 8006872:	ec47 6b10 	vmov	d0, r6, r7
 8006876:	b009      	add	sp, #36	; 0x24
 8006878:	ecbd 8b06 	vpop	{d8-d10}
 800687c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006880:	f000 bd20 	b.w	80072c4 <__ieee754_sqrt>
 8006884:	2300      	movs	r3, #0
 8006886:	9304      	str	r3, [sp, #16]
 8006888:	ec47 6b10 	vmov	d0, r6, r7
 800688c:	f000 fc62 	bl	8007154 <fabs>
 8006890:	ec51 0b10 	vmov	r0, r1, d0
 8006894:	f1ba 0f00 	cmp.w	sl, #0
 8006898:	d129      	bne.n	80068ee <__ieee754_pow+0x1ee>
 800689a:	b124      	cbz	r4, 80068a6 <__ieee754_pow+0x1a6>
 800689c:	4b2f      	ldr	r3, [pc, #188]	; (800695c <__ieee754_pow+0x25c>)
 800689e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d123      	bne.n	80068ee <__ieee754_pow+0x1ee>
 80068a6:	f1b9 0f00 	cmp.w	r9, #0
 80068aa:	da05      	bge.n	80068b8 <__ieee754_pow+0x1b8>
 80068ac:	4602      	mov	r2, r0
 80068ae:	460b      	mov	r3, r1
 80068b0:	2000      	movs	r0, #0
 80068b2:	492a      	ldr	r1, [pc, #168]	; (800695c <__ieee754_pow+0x25c>)
 80068b4:	f7f9 ffca 	bl	800084c <__aeabi_ddiv>
 80068b8:	2d00      	cmp	r5, #0
 80068ba:	f6bf af40 	bge.w	800673e <__ieee754_pow+0x3e>
 80068be:	9b04      	ldr	r3, [sp, #16]
 80068c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80068c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80068c8:	431c      	orrs	r4, r3
 80068ca:	d108      	bne.n	80068de <__ieee754_pow+0x1de>
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	4610      	mov	r0, r2
 80068d2:	4619      	mov	r1, r3
 80068d4:	f7f9 fcd8 	bl	8000288 <__aeabi_dsub>
 80068d8:	4602      	mov	r2, r0
 80068da:	460b      	mov	r3, r1
 80068dc:	e78f      	b.n	80067fe <__ieee754_pow+0xfe>
 80068de:	9b04      	ldr	r3, [sp, #16]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	f47f af2c 	bne.w	800673e <__ieee754_pow+0x3e>
 80068e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80068ea:	4619      	mov	r1, r3
 80068ec:	e727      	b.n	800673e <__ieee754_pow+0x3e>
 80068ee:	0feb      	lsrs	r3, r5, #31
 80068f0:	3b01      	subs	r3, #1
 80068f2:	9306      	str	r3, [sp, #24]
 80068f4:	9a06      	ldr	r2, [sp, #24]
 80068f6:	9b04      	ldr	r3, [sp, #16]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	d102      	bne.n	8006902 <__ieee754_pow+0x202>
 80068fc:	4632      	mov	r2, r6
 80068fe:	463b      	mov	r3, r7
 8006900:	e7e6      	b.n	80068d0 <__ieee754_pow+0x1d0>
 8006902:	4b19      	ldr	r3, [pc, #100]	; (8006968 <__ieee754_pow+0x268>)
 8006904:	4598      	cmp	r8, r3
 8006906:	f340 80fb 	ble.w	8006b00 <__ieee754_pow+0x400>
 800690a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800690e:	4598      	cmp	r8, r3
 8006910:	4b13      	ldr	r3, [pc, #76]	; (8006960 <__ieee754_pow+0x260>)
 8006912:	dd0c      	ble.n	800692e <__ieee754_pow+0x22e>
 8006914:	429c      	cmp	r4, r3
 8006916:	dc0f      	bgt.n	8006938 <__ieee754_pow+0x238>
 8006918:	f1b9 0f00 	cmp.w	r9, #0
 800691c:	da0f      	bge.n	800693e <__ieee754_pow+0x23e>
 800691e:	2000      	movs	r0, #0
 8006920:	b009      	add	sp, #36	; 0x24
 8006922:	ecbd 8b06 	vpop	{d8-d10}
 8006926:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692a:	f000 bcc2 	b.w	80072b2 <__math_oflow>
 800692e:	429c      	cmp	r4, r3
 8006930:	dbf2      	blt.n	8006918 <__ieee754_pow+0x218>
 8006932:	4b0a      	ldr	r3, [pc, #40]	; (800695c <__ieee754_pow+0x25c>)
 8006934:	429c      	cmp	r4, r3
 8006936:	dd19      	ble.n	800696c <__ieee754_pow+0x26c>
 8006938:	f1b9 0f00 	cmp.w	r9, #0
 800693c:	dcef      	bgt.n	800691e <__ieee754_pow+0x21e>
 800693e:	2000      	movs	r0, #0
 8006940:	b009      	add	sp, #36	; 0x24
 8006942:	ecbd 8b06 	vpop	{d8-d10}
 8006946:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800694a:	f000 bca9 	b.w	80072a0 <__math_uflow>
 800694e:	bf00      	nop
 8006950:	fff00000 	.word	0xfff00000
 8006954:	7ff00000 	.word	0x7ff00000
 8006958:	433fffff 	.word	0x433fffff
 800695c:	3ff00000 	.word	0x3ff00000
 8006960:	3fefffff 	.word	0x3fefffff
 8006964:	3fe00000 	.word	0x3fe00000
 8006968:	41e00000 	.word	0x41e00000
 800696c:	4b60      	ldr	r3, [pc, #384]	; (8006af0 <__ieee754_pow+0x3f0>)
 800696e:	2200      	movs	r2, #0
 8006970:	f7f9 fc8a 	bl	8000288 <__aeabi_dsub>
 8006974:	a354      	add	r3, pc, #336	; (adr r3, 8006ac8 <__ieee754_pow+0x3c8>)
 8006976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697a:	4604      	mov	r4, r0
 800697c:	460d      	mov	r5, r1
 800697e:	f7f9 fe3b 	bl	80005f8 <__aeabi_dmul>
 8006982:	a353      	add	r3, pc, #332	; (adr r3, 8006ad0 <__ieee754_pow+0x3d0>)
 8006984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006988:	4606      	mov	r6, r0
 800698a:	460f      	mov	r7, r1
 800698c:	4620      	mov	r0, r4
 800698e:	4629      	mov	r1, r5
 8006990:	f7f9 fe32 	bl	80005f8 <__aeabi_dmul>
 8006994:	4b57      	ldr	r3, [pc, #348]	; (8006af4 <__ieee754_pow+0x3f4>)
 8006996:	4682      	mov	sl, r0
 8006998:	468b      	mov	fp, r1
 800699a:	2200      	movs	r2, #0
 800699c:	4620      	mov	r0, r4
 800699e:	4629      	mov	r1, r5
 80069a0:	f7f9 fe2a 	bl	80005f8 <__aeabi_dmul>
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	a14b      	add	r1, pc, #300	; (adr r1, 8006ad8 <__ieee754_pow+0x3d8>)
 80069aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069ae:	f7f9 fc6b 	bl	8000288 <__aeabi_dsub>
 80069b2:	4622      	mov	r2, r4
 80069b4:	462b      	mov	r3, r5
 80069b6:	f7f9 fe1f 	bl	80005f8 <__aeabi_dmul>
 80069ba:	4602      	mov	r2, r0
 80069bc:	460b      	mov	r3, r1
 80069be:	2000      	movs	r0, #0
 80069c0:	494d      	ldr	r1, [pc, #308]	; (8006af8 <__ieee754_pow+0x3f8>)
 80069c2:	f7f9 fc61 	bl	8000288 <__aeabi_dsub>
 80069c6:	4622      	mov	r2, r4
 80069c8:	4680      	mov	r8, r0
 80069ca:	4689      	mov	r9, r1
 80069cc:	462b      	mov	r3, r5
 80069ce:	4620      	mov	r0, r4
 80069d0:	4629      	mov	r1, r5
 80069d2:	f7f9 fe11 	bl	80005f8 <__aeabi_dmul>
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	4640      	mov	r0, r8
 80069dc:	4649      	mov	r1, r9
 80069de:	f7f9 fe0b 	bl	80005f8 <__aeabi_dmul>
 80069e2:	a33f      	add	r3, pc, #252	; (adr r3, 8006ae0 <__ieee754_pow+0x3e0>)
 80069e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e8:	f7f9 fe06 	bl	80005f8 <__aeabi_dmul>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4650      	mov	r0, sl
 80069f2:	4659      	mov	r1, fp
 80069f4:	f7f9 fc48 	bl	8000288 <__aeabi_dsub>
 80069f8:	4602      	mov	r2, r0
 80069fa:	460b      	mov	r3, r1
 80069fc:	4680      	mov	r8, r0
 80069fe:	4689      	mov	r9, r1
 8006a00:	4630      	mov	r0, r6
 8006a02:	4639      	mov	r1, r7
 8006a04:	f7f9 fc42 	bl	800028c <__adddf3>
 8006a08:	2000      	movs	r0, #0
 8006a0a:	4632      	mov	r2, r6
 8006a0c:	463b      	mov	r3, r7
 8006a0e:	4604      	mov	r4, r0
 8006a10:	460d      	mov	r5, r1
 8006a12:	f7f9 fc39 	bl	8000288 <__aeabi_dsub>
 8006a16:	4602      	mov	r2, r0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4640      	mov	r0, r8
 8006a1c:	4649      	mov	r1, r9
 8006a1e:	f7f9 fc33 	bl	8000288 <__aeabi_dsub>
 8006a22:	9b04      	ldr	r3, [sp, #16]
 8006a24:	9a06      	ldr	r2, [sp, #24]
 8006a26:	3b01      	subs	r3, #1
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	4682      	mov	sl, r0
 8006a2c:	468b      	mov	fp, r1
 8006a2e:	f040 81e7 	bne.w	8006e00 <__ieee754_pow+0x700>
 8006a32:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006ae8 <__ieee754_pow+0x3e8>
 8006a36:	eeb0 8a47 	vmov.f32	s16, s14
 8006a3a:	eef0 8a67 	vmov.f32	s17, s15
 8006a3e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006a42:	2600      	movs	r6, #0
 8006a44:	4632      	mov	r2, r6
 8006a46:	463b      	mov	r3, r7
 8006a48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a4c:	f7f9 fc1c 	bl	8000288 <__aeabi_dsub>
 8006a50:	4622      	mov	r2, r4
 8006a52:	462b      	mov	r3, r5
 8006a54:	f7f9 fdd0 	bl	80005f8 <__aeabi_dmul>
 8006a58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a5c:	4680      	mov	r8, r0
 8006a5e:	4689      	mov	r9, r1
 8006a60:	4650      	mov	r0, sl
 8006a62:	4659      	mov	r1, fp
 8006a64:	f7f9 fdc8 	bl	80005f8 <__aeabi_dmul>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	4640      	mov	r0, r8
 8006a6e:	4649      	mov	r1, r9
 8006a70:	f7f9 fc0c 	bl	800028c <__adddf3>
 8006a74:	4632      	mov	r2, r6
 8006a76:	463b      	mov	r3, r7
 8006a78:	4680      	mov	r8, r0
 8006a7a:	4689      	mov	r9, r1
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	4629      	mov	r1, r5
 8006a80:	f7f9 fdba 	bl	80005f8 <__aeabi_dmul>
 8006a84:	460b      	mov	r3, r1
 8006a86:	4604      	mov	r4, r0
 8006a88:	460d      	mov	r5, r1
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	4649      	mov	r1, r9
 8006a8e:	4640      	mov	r0, r8
 8006a90:	f7f9 fbfc 	bl	800028c <__adddf3>
 8006a94:	4b19      	ldr	r3, [pc, #100]	; (8006afc <__ieee754_pow+0x3fc>)
 8006a96:	4299      	cmp	r1, r3
 8006a98:	ec45 4b19 	vmov	d9, r4, r5
 8006a9c:	4606      	mov	r6, r0
 8006a9e:	460f      	mov	r7, r1
 8006aa0:	468b      	mov	fp, r1
 8006aa2:	f340 82f0 	ble.w	8007086 <__ieee754_pow+0x986>
 8006aa6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006aaa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006aae:	4303      	orrs	r3, r0
 8006ab0:	f000 81e4 	beq.w	8006e7c <__ieee754_pow+0x77c>
 8006ab4:	ec51 0b18 	vmov	r0, r1, d8
 8006ab8:	2200      	movs	r2, #0
 8006aba:	2300      	movs	r3, #0
 8006abc:	f7fa f80e 	bl	8000adc <__aeabi_dcmplt>
 8006ac0:	3800      	subs	r0, #0
 8006ac2:	bf18      	it	ne
 8006ac4:	2001      	movne	r0, #1
 8006ac6:	e72b      	b.n	8006920 <__ieee754_pow+0x220>
 8006ac8:	60000000 	.word	0x60000000
 8006acc:	3ff71547 	.word	0x3ff71547
 8006ad0:	f85ddf44 	.word	0xf85ddf44
 8006ad4:	3e54ae0b 	.word	0x3e54ae0b
 8006ad8:	55555555 	.word	0x55555555
 8006adc:	3fd55555 	.word	0x3fd55555
 8006ae0:	652b82fe 	.word	0x652b82fe
 8006ae4:	3ff71547 	.word	0x3ff71547
 8006ae8:	00000000 	.word	0x00000000
 8006aec:	bff00000 	.word	0xbff00000
 8006af0:	3ff00000 	.word	0x3ff00000
 8006af4:	3fd00000 	.word	0x3fd00000
 8006af8:	3fe00000 	.word	0x3fe00000
 8006afc:	408fffff 	.word	0x408fffff
 8006b00:	4bd5      	ldr	r3, [pc, #852]	; (8006e58 <__ieee754_pow+0x758>)
 8006b02:	402b      	ands	r3, r5
 8006b04:	2200      	movs	r2, #0
 8006b06:	b92b      	cbnz	r3, 8006b14 <__ieee754_pow+0x414>
 8006b08:	4bd4      	ldr	r3, [pc, #848]	; (8006e5c <__ieee754_pow+0x75c>)
 8006b0a:	f7f9 fd75 	bl	80005f8 <__aeabi_dmul>
 8006b0e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006b12:	460c      	mov	r4, r1
 8006b14:	1523      	asrs	r3, r4, #20
 8006b16:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006b1a:	4413      	add	r3, r2
 8006b1c:	9305      	str	r3, [sp, #20]
 8006b1e:	4bd0      	ldr	r3, [pc, #832]	; (8006e60 <__ieee754_pow+0x760>)
 8006b20:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006b24:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006b28:	429c      	cmp	r4, r3
 8006b2a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006b2e:	dd08      	ble.n	8006b42 <__ieee754_pow+0x442>
 8006b30:	4bcc      	ldr	r3, [pc, #816]	; (8006e64 <__ieee754_pow+0x764>)
 8006b32:	429c      	cmp	r4, r3
 8006b34:	f340 8162 	ble.w	8006dfc <__ieee754_pow+0x6fc>
 8006b38:	9b05      	ldr	r3, [sp, #20]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	9305      	str	r3, [sp, #20]
 8006b3e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006b42:	2400      	movs	r4, #0
 8006b44:	00e3      	lsls	r3, r4, #3
 8006b46:	9307      	str	r3, [sp, #28]
 8006b48:	4bc7      	ldr	r3, [pc, #796]	; (8006e68 <__ieee754_pow+0x768>)
 8006b4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b4e:	ed93 7b00 	vldr	d7, [r3]
 8006b52:	4629      	mov	r1, r5
 8006b54:	ec53 2b17 	vmov	r2, r3, d7
 8006b58:	eeb0 9a47 	vmov.f32	s18, s14
 8006b5c:	eef0 9a67 	vmov.f32	s19, s15
 8006b60:	4682      	mov	sl, r0
 8006b62:	f7f9 fb91 	bl	8000288 <__aeabi_dsub>
 8006b66:	4652      	mov	r2, sl
 8006b68:	4606      	mov	r6, r0
 8006b6a:	460f      	mov	r7, r1
 8006b6c:	462b      	mov	r3, r5
 8006b6e:	ec51 0b19 	vmov	r0, r1, d9
 8006b72:	f7f9 fb8b 	bl	800028c <__adddf3>
 8006b76:	4602      	mov	r2, r0
 8006b78:	460b      	mov	r3, r1
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	49bb      	ldr	r1, [pc, #748]	; (8006e6c <__ieee754_pow+0x76c>)
 8006b7e:	f7f9 fe65 	bl	800084c <__aeabi_ddiv>
 8006b82:	ec41 0b1a 	vmov	d10, r0, r1
 8006b86:	4602      	mov	r2, r0
 8006b88:	460b      	mov	r3, r1
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	4639      	mov	r1, r7
 8006b8e:	f7f9 fd33 	bl	80005f8 <__aeabi_dmul>
 8006b92:	2300      	movs	r3, #0
 8006b94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b98:	9302      	str	r3, [sp, #8]
 8006b9a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006b9e:	46ab      	mov	fp, r5
 8006ba0:	106d      	asrs	r5, r5, #1
 8006ba2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006ba6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006baa:	ec41 0b18 	vmov	d8, r0, r1
 8006bae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	4640      	mov	r0, r8
 8006bb6:	4649      	mov	r1, r9
 8006bb8:	4614      	mov	r4, r2
 8006bba:	461d      	mov	r5, r3
 8006bbc:	f7f9 fd1c 	bl	80005f8 <__aeabi_dmul>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	4630      	mov	r0, r6
 8006bc6:	4639      	mov	r1, r7
 8006bc8:	f7f9 fb5e 	bl	8000288 <__aeabi_dsub>
 8006bcc:	ec53 2b19 	vmov	r2, r3, d9
 8006bd0:	4606      	mov	r6, r0
 8006bd2:	460f      	mov	r7, r1
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	4629      	mov	r1, r5
 8006bd8:	f7f9 fb56 	bl	8000288 <__aeabi_dsub>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	460b      	mov	r3, r1
 8006be0:	4650      	mov	r0, sl
 8006be2:	4659      	mov	r1, fp
 8006be4:	f7f9 fb50 	bl	8000288 <__aeabi_dsub>
 8006be8:	4642      	mov	r2, r8
 8006bea:	464b      	mov	r3, r9
 8006bec:	f7f9 fd04 	bl	80005f8 <__aeabi_dmul>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	4630      	mov	r0, r6
 8006bf6:	4639      	mov	r1, r7
 8006bf8:	f7f9 fb46 	bl	8000288 <__aeabi_dsub>
 8006bfc:	ec53 2b1a 	vmov	r2, r3, d10
 8006c00:	f7f9 fcfa 	bl	80005f8 <__aeabi_dmul>
 8006c04:	ec53 2b18 	vmov	r2, r3, d8
 8006c08:	ec41 0b19 	vmov	d9, r0, r1
 8006c0c:	ec51 0b18 	vmov	r0, r1, d8
 8006c10:	f7f9 fcf2 	bl	80005f8 <__aeabi_dmul>
 8006c14:	a37c      	add	r3, pc, #496	; (adr r3, 8006e08 <__ieee754_pow+0x708>)
 8006c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1a:	4604      	mov	r4, r0
 8006c1c:	460d      	mov	r5, r1
 8006c1e:	f7f9 fceb 	bl	80005f8 <__aeabi_dmul>
 8006c22:	a37b      	add	r3, pc, #492	; (adr r3, 8006e10 <__ieee754_pow+0x710>)
 8006c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c28:	f7f9 fb30 	bl	800028c <__adddf3>
 8006c2c:	4622      	mov	r2, r4
 8006c2e:	462b      	mov	r3, r5
 8006c30:	f7f9 fce2 	bl	80005f8 <__aeabi_dmul>
 8006c34:	a378      	add	r3, pc, #480	; (adr r3, 8006e18 <__ieee754_pow+0x718>)
 8006c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3a:	f7f9 fb27 	bl	800028c <__adddf3>
 8006c3e:	4622      	mov	r2, r4
 8006c40:	462b      	mov	r3, r5
 8006c42:	f7f9 fcd9 	bl	80005f8 <__aeabi_dmul>
 8006c46:	a376      	add	r3, pc, #472	; (adr r3, 8006e20 <__ieee754_pow+0x720>)
 8006c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4c:	f7f9 fb1e 	bl	800028c <__adddf3>
 8006c50:	4622      	mov	r2, r4
 8006c52:	462b      	mov	r3, r5
 8006c54:	f7f9 fcd0 	bl	80005f8 <__aeabi_dmul>
 8006c58:	a373      	add	r3, pc, #460	; (adr r3, 8006e28 <__ieee754_pow+0x728>)
 8006c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5e:	f7f9 fb15 	bl	800028c <__adddf3>
 8006c62:	4622      	mov	r2, r4
 8006c64:	462b      	mov	r3, r5
 8006c66:	f7f9 fcc7 	bl	80005f8 <__aeabi_dmul>
 8006c6a:	a371      	add	r3, pc, #452	; (adr r3, 8006e30 <__ieee754_pow+0x730>)
 8006c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c70:	f7f9 fb0c 	bl	800028c <__adddf3>
 8006c74:	4622      	mov	r2, r4
 8006c76:	4606      	mov	r6, r0
 8006c78:	460f      	mov	r7, r1
 8006c7a:	462b      	mov	r3, r5
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	4629      	mov	r1, r5
 8006c80:	f7f9 fcba 	bl	80005f8 <__aeabi_dmul>
 8006c84:	4602      	mov	r2, r0
 8006c86:	460b      	mov	r3, r1
 8006c88:	4630      	mov	r0, r6
 8006c8a:	4639      	mov	r1, r7
 8006c8c:	f7f9 fcb4 	bl	80005f8 <__aeabi_dmul>
 8006c90:	4642      	mov	r2, r8
 8006c92:	4604      	mov	r4, r0
 8006c94:	460d      	mov	r5, r1
 8006c96:	464b      	mov	r3, r9
 8006c98:	ec51 0b18 	vmov	r0, r1, d8
 8006c9c:	f7f9 faf6 	bl	800028c <__adddf3>
 8006ca0:	ec53 2b19 	vmov	r2, r3, d9
 8006ca4:	f7f9 fca8 	bl	80005f8 <__aeabi_dmul>
 8006ca8:	4622      	mov	r2, r4
 8006caa:	462b      	mov	r3, r5
 8006cac:	f7f9 faee 	bl	800028c <__adddf3>
 8006cb0:	4642      	mov	r2, r8
 8006cb2:	4682      	mov	sl, r0
 8006cb4:	468b      	mov	fp, r1
 8006cb6:	464b      	mov	r3, r9
 8006cb8:	4640      	mov	r0, r8
 8006cba:	4649      	mov	r1, r9
 8006cbc:	f7f9 fc9c 	bl	80005f8 <__aeabi_dmul>
 8006cc0:	4b6b      	ldr	r3, [pc, #428]	; (8006e70 <__ieee754_pow+0x770>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	4606      	mov	r6, r0
 8006cc6:	460f      	mov	r7, r1
 8006cc8:	f7f9 fae0 	bl	800028c <__adddf3>
 8006ccc:	4652      	mov	r2, sl
 8006cce:	465b      	mov	r3, fp
 8006cd0:	f7f9 fadc 	bl	800028c <__adddf3>
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	460d      	mov	r5, r1
 8006cda:	4602      	mov	r2, r0
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4640      	mov	r0, r8
 8006ce0:	4649      	mov	r1, r9
 8006ce2:	f7f9 fc89 	bl	80005f8 <__aeabi_dmul>
 8006ce6:	4b62      	ldr	r3, [pc, #392]	; (8006e70 <__ieee754_pow+0x770>)
 8006ce8:	4680      	mov	r8, r0
 8006cea:	4689      	mov	r9, r1
 8006cec:	2200      	movs	r2, #0
 8006cee:	4620      	mov	r0, r4
 8006cf0:	4629      	mov	r1, r5
 8006cf2:	f7f9 fac9 	bl	8000288 <__aeabi_dsub>
 8006cf6:	4632      	mov	r2, r6
 8006cf8:	463b      	mov	r3, r7
 8006cfa:	f7f9 fac5 	bl	8000288 <__aeabi_dsub>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	460b      	mov	r3, r1
 8006d02:	4650      	mov	r0, sl
 8006d04:	4659      	mov	r1, fp
 8006d06:	f7f9 fabf 	bl	8000288 <__aeabi_dsub>
 8006d0a:	ec53 2b18 	vmov	r2, r3, d8
 8006d0e:	f7f9 fc73 	bl	80005f8 <__aeabi_dmul>
 8006d12:	4622      	mov	r2, r4
 8006d14:	4606      	mov	r6, r0
 8006d16:	460f      	mov	r7, r1
 8006d18:	462b      	mov	r3, r5
 8006d1a:	ec51 0b19 	vmov	r0, r1, d9
 8006d1e:	f7f9 fc6b 	bl	80005f8 <__aeabi_dmul>
 8006d22:	4602      	mov	r2, r0
 8006d24:	460b      	mov	r3, r1
 8006d26:	4630      	mov	r0, r6
 8006d28:	4639      	mov	r1, r7
 8006d2a:	f7f9 faaf 	bl	800028c <__adddf3>
 8006d2e:	4606      	mov	r6, r0
 8006d30:	460f      	mov	r7, r1
 8006d32:	4602      	mov	r2, r0
 8006d34:	460b      	mov	r3, r1
 8006d36:	4640      	mov	r0, r8
 8006d38:	4649      	mov	r1, r9
 8006d3a:	f7f9 faa7 	bl	800028c <__adddf3>
 8006d3e:	a33e      	add	r3, pc, #248	; (adr r3, 8006e38 <__ieee754_pow+0x738>)
 8006d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d44:	2000      	movs	r0, #0
 8006d46:	4604      	mov	r4, r0
 8006d48:	460d      	mov	r5, r1
 8006d4a:	f7f9 fc55 	bl	80005f8 <__aeabi_dmul>
 8006d4e:	4642      	mov	r2, r8
 8006d50:	ec41 0b18 	vmov	d8, r0, r1
 8006d54:	464b      	mov	r3, r9
 8006d56:	4620      	mov	r0, r4
 8006d58:	4629      	mov	r1, r5
 8006d5a:	f7f9 fa95 	bl	8000288 <__aeabi_dsub>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	4630      	mov	r0, r6
 8006d64:	4639      	mov	r1, r7
 8006d66:	f7f9 fa8f 	bl	8000288 <__aeabi_dsub>
 8006d6a:	a335      	add	r3, pc, #212	; (adr r3, 8006e40 <__ieee754_pow+0x740>)
 8006d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d70:	f7f9 fc42 	bl	80005f8 <__aeabi_dmul>
 8006d74:	a334      	add	r3, pc, #208	; (adr r3, 8006e48 <__ieee754_pow+0x748>)
 8006d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7a:	4606      	mov	r6, r0
 8006d7c:	460f      	mov	r7, r1
 8006d7e:	4620      	mov	r0, r4
 8006d80:	4629      	mov	r1, r5
 8006d82:	f7f9 fc39 	bl	80005f8 <__aeabi_dmul>
 8006d86:	4602      	mov	r2, r0
 8006d88:	460b      	mov	r3, r1
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	4639      	mov	r1, r7
 8006d8e:	f7f9 fa7d 	bl	800028c <__adddf3>
 8006d92:	9a07      	ldr	r2, [sp, #28]
 8006d94:	4b37      	ldr	r3, [pc, #220]	; (8006e74 <__ieee754_pow+0x774>)
 8006d96:	4413      	add	r3, r2
 8006d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9c:	f7f9 fa76 	bl	800028c <__adddf3>
 8006da0:	4682      	mov	sl, r0
 8006da2:	9805      	ldr	r0, [sp, #20]
 8006da4:	468b      	mov	fp, r1
 8006da6:	f7f9 fbbd 	bl	8000524 <__aeabi_i2d>
 8006daa:	9a07      	ldr	r2, [sp, #28]
 8006dac:	4b32      	ldr	r3, [pc, #200]	; (8006e78 <__ieee754_pow+0x778>)
 8006dae:	4413      	add	r3, r2
 8006db0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006db4:	4606      	mov	r6, r0
 8006db6:	460f      	mov	r7, r1
 8006db8:	4652      	mov	r2, sl
 8006dba:	465b      	mov	r3, fp
 8006dbc:	ec51 0b18 	vmov	r0, r1, d8
 8006dc0:	f7f9 fa64 	bl	800028c <__adddf3>
 8006dc4:	4642      	mov	r2, r8
 8006dc6:	464b      	mov	r3, r9
 8006dc8:	f7f9 fa60 	bl	800028c <__adddf3>
 8006dcc:	4632      	mov	r2, r6
 8006dce:	463b      	mov	r3, r7
 8006dd0:	f7f9 fa5c 	bl	800028c <__adddf3>
 8006dd4:	2000      	movs	r0, #0
 8006dd6:	4632      	mov	r2, r6
 8006dd8:	463b      	mov	r3, r7
 8006dda:	4604      	mov	r4, r0
 8006ddc:	460d      	mov	r5, r1
 8006dde:	f7f9 fa53 	bl	8000288 <__aeabi_dsub>
 8006de2:	4642      	mov	r2, r8
 8006de4:	464b      	mov	r3, r9
 8006de6:	f7f9 fa4f 	bl	8000288 <__aeabi_dsub>
 8006dea:	ec53 2b18 	vmov	r2, r3, d8
 8006dee:	f7f9 fa4b 	bl	8000288 <__aeabi_dsub>
 8006df2:	4602      	mov	r2, r0
 8006df4:	460b      	mov	r3, r1
 8006df6:	4650      	mov	r0, sl
 8006df8:	4659      	mov	r1, fp
 8006dfa:	e610      	b.n	8006a1e <__ieee754_pow+0x31e>
 8006dfc:	2401      	movs	r4, #1
 8006dfe:	e6a1      	b.n	8006b44 <__ieee754_pow+0x444>
 8006e00:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006e50 <__ieee754_pow+0x750>
 8006e04:	e617      	b.n	8006a36 <__ieee754_pow+0x336>
 8006e06:	bf00      	nop
 8006e08:	4a454eef 	.word	0x4a454eef
 8006e0c:	3fca7e28 	.word	0x3fca7e28
 8006e10:	93c9db65 	.word	0x93c9db65
 8006e14:	3fcd864a 	.word	0x3fcd864a
 8006e18:	a91d4101 	.word	0xa91d4101
 8006e1c:	3fd17460 	.word	0x3fd17460
 8006e20:	518f264d 	.word	0x518f264d
 8006e24:	3fd55555 	.word	0x3fd55555
 8006e28:	db6fabff 	.word	0xdb6fabff
 8006e2c:	3fdb6db6 	.word	0x3fdb6db6
 8006e30:	33333303 	.word	0x33333303
 8006e34:	3fe33333 	.word	0x3fe33333
 8006e38:	e0000000 	.word	0xe0000000
 8006e3c:	3feec709 	.word	0x3feec709
 8006e40:	dc3a03fd 	.word	0xdc3a03fd
 8006e44:	3feec709 	.word	0x3feec709
 8006e48:	145b01f5 	.word	0x145b01f5
 8006e4c:	be3e2fe0 	.word	0xbe3e2fe0
 8006e50:	00000000 	.word	0x00000000
 8006e54:	3ff00000 	.word	0x3ff00000
 8006e58:	7ff00000 	.word	0x7ff00000
 8006e5c:	43400000 	.word	0x43400000
 8006e60:	0003988e 	.word	0x0003988e
 8006e64:	000bb679 	.word	0x000bb679
 8006e68:	080078b0 	.word	0x080078b0
 8006e6c:	3ff00000 	.word	0x3ff00000
 8006e70:	40080000 	.word	0x40080000
 8006e74:	080078d0 	.word	0x080078d0
 8006e78:	080078c0 	.word	0x080078c0
 8006e7c:	a3b3      	add	r3, pc, #716	; (adr r3, 800714c <__ieee754_pow+0xa4c>)
 8006e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e82:	4640      	mov	r0, r8
 8006e84:	4649      	mov	r1, r9
 8006e86:	f7f9 fa01 	bl	800028c <__adddf3>
 8006e8a:	4622      	mov	r2, r4
 8006e8c:	ec41 0b1a 	vmov	d10, r0, r1
 8006e90:	462b      	mov	r3, r5
 8006e92:	4630      	mov	r0, r6
 8006e94:	4639      	mov	r1, r7
 8006e96:	f7f9 f9f7 	bl	8000288 <__aeabi_dsub>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	ec51 0b1a 	vmov	r0, r1, d10
 8006ea2:	f7f9 fe39 	bl	8000b18 <__aeabi_dcmpgt>
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	f47f ae04 	bne.w	8006ab4 <__ieee754_pow+0x3b4>
 8006eac:	4aa2      	ldr	r2, [pc, #648]	; (8007138 <__ieee754_pow+0xa38>)
 8006eae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	f340 8107 	ble.w	80070c6 <__ieee754_pow+0x9c6>
 8006eb8:	151b      	asrs	r3, r3, #20
 8006eba:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006ebe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006ec2:	fa4a fa03 	asr.w	sl, sl, r3
 8006ec6:	44da      	add	sl, fp
 8006ec8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006ecc:	489b      	ldr	r0, [pc, #620]	; (800713c <__ieee754_pow+0xa3c>)
 8006ece:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006ed2:	4108      	asrs	r0, r1
 8006ed4:	ea00 030a 	and.w	r3, r0, sl
 8006ed8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006edc:	f1c1 0114 	rsb	r1, r1, #20
 8006ee0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006ee4:	fa4a fa01 	asr.w	sl, sl, r1
 8006ee8:	f1bb 0f00 	cmp.w	fp, #0
 8006eec:	f04f 0200 	mov.w	r2, #0
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	bfb8      	it	lt
 8006ef6:	f1ca 0a00 	rsblt	sl, sl, #0
 8006efa:	f7f9 f9c5 	bl	8000288 <__aeabi_dsub>
 8006efe:	ec41 0b19 	vmov	d9, r0, r1
 8006f02:	4642      	mov	r2, r8
 8006f04:	464b      	mov	r3, r9
 8006f06:	ec51 0b19 	vmov	r0, r1, d9
 8006f0a:	f7f9 f9bf 	bl	800028c <__adddf3>
 8006f0e:	a37a      	add	r3, pc, #488	; (adr r3, 80070f8 <__ieee754_pow+0x9f8>)
 8006f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f14:	2000      	movs	r0, #0
 8006f16:	4604      	mov	r4, r0
 8006f18:	460d      	mov	r5, r1
 8006f1a:	f7f9 fb6d 	bl	80005f8 <__aeabi_dmul>
 8006f1e:	ec53 2b19 	vmov	r2, r3, d9
 8006f22:	4606      	mov	r6, r0
 8006f24:	460f      	mov	r7, r1
 8006f26:	4620      	mov	r0, r4
 8006f28:	4629      	mov	r1, r5
 8006f2a:	f7f9 f9ad 	bl	8000288 <__aeabi_dsub>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	460b      	mov	r3, r1
 8006f32:	4640      	mov	r0, r8
 8006f34:	4649      	mov	r1, r9
 8006f36:	f7f9 f9a7 	bl	8000288 <__aeabi_dsub>
 8006f3a:	a371      	add	r3, pc, #452	; (adr r3, 8007100 <__ieee754_pow+0xa00>)
 8006f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f40:	f7f9 fb5a 	bl	80005f8 <__aeabi_dmul>
 8006f44:	a370      	add	r3, pc, #448	; (adr r3, 8007108 <__ieee754_pow+0xa08>)
 8006f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4a:	4680      	mov	r8, r0
 8006f4c:	4689      	mov	r9, r1
 8006f4e:	4620      	mov	r0, r4
 8006f50:	4629      	mov	r1, r5
 8006f52:	f7f9 fb51 	bl	80005f8 <__aeabi_dmul>
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	4640      	mov	r0, r8
 8006f5c:	4649      	mov	r1, r9
 8006f5e:	f7f9 f995 	bl	800028c <__adddf3>
 8006f62:	4604      	mov	r4, r0
 8006f64:	460d      	mov	r5, r1
 8006f66:	4602      	mov	r2, r0
 8006f68:	460b      	mov	r3, r1
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	4639      	mov	r1, r7
 8006f6e:	f7f9 f98d 	bl	800028c <__adddf3>
 8006f72:	4632      	mov	r2, r6
 8006f74:	463b      	mov	r3, r7
 8006f76:	4680      	mov	r8, r0
 8006f78:	4689      	mov	r9, r1
 8006f7a:	f7f9 f985 	bl	8000288 <__aeabi_dsub>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	4620      	mov	r0, r4
 8006f84:	4629      	mov	r1, r5
 8006f86:	f7f9 f97f 	bl	8000288 <__aeabi_dsub>
 8006f8a:	4642      	mov	r2, r8
 8006f8c:	4606      	mov	r6, r0
 8006f8e:	460f      	mov	r7, r1
 8006f90:	464b      	mov	r3, r9
 8006f92:	4640      	mov	r0, r8
 8006f94:	4649      	mov	r1, r9
 8006f96:	f7f9 fb2f 	bl	80005f8 <__aeabi_dmul>
 8006f9a:	a35d      	add	r3, pc, #372	; (adr r3, 8007110 <__ieee754_pow+0xa10>)
 8006f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa0:	4604      	mov	r4, r0
 8006fa2:	460d      	mov	r5, r1
 8006fa4:	f7f9 fb28 	bl	80005f8 <__aeabi_dmul>
 8006fa8:	a35b      	add	r3, pc, #364	; (adr r3, 8007118 <__ieee754_pow+0xa18>)
 8006faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fae:	f7f9 f96b 	bl	8000288 <__aeabi_dsub>
 8006fb2:	4622      	mov	r2, r4
 8006fb4:	462b      	mov	r3, r5
 8006fb6:	f7f9 fb1f 	bl	80005f8 <__aeabi_dmul>
 8006fba:	a359      	add	r3, pc, #356	; (adr r3, 8007120 <__ieee754_pow+0xa20>)
 8006fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc0:	f7f9 f964 	bl	800028c <__adddf3>
 8006fc4:	4622      	mov	r2, r4
 8006fc6:	462b      	mov	r3, r5
 8006fc8:	f7f9 fb16 	bl	80005f8 <__aeabi_dmul>
 8006fcc:	a356      	add	r3, pc, #344	; (adr r3, 8007128 <__ieee754_pow+0xa28>)
 8006fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd2:	f7f9 f959 	bl	8000288 <__aeabi_dsub>
 8006fd6:	4622      	mov	r2, r4
 8006fd8:	462b      	mov	r3, r5
 8006fda:	f7f9 fb0d 	bl	80005f8 <__aeabi_dmul>
 8006fde:	a354      	add	r3, pc, #336	; (adr r3, 8007130 <__ieee754_pow+0xa30>)
 8006fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe4:	f7f9 f952 	bl	800028c <__adddf3>
 8006fe8:	4622      	mov	r2, r4
 8006fea:	462b      	mov	r3, r5
 8006fec:	f7f9 fb04 	bl	80005f8 <__aeabi_dmul>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	4640      	mov	r0, r8
 8006ff6:	4649      	mov	r1, r9
 8006ff8:	f7f9 f946 	bl	8000288 <__aeabi_dsub>
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	460d      	mov	r5, r1
 8007000:	4602      	mov	r2, r0
 8007002:	460b      	mov	r3, r1
 8007004:	4640      	mov	r0, r8
 8007006:	4649      	mov	r1, r9
 8007008:	f7f9 faf6 	bl	80005f8 <__aeabi_dmul>
 800700c:	2200      	movs	r2, #0
 800700e:	ec41 0b19 	vmov	d9, r0, r1
 8007012:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007016:	4620      	mov	r0, r4
 8007018:	4629      	mov	r1, r5
 800701a:	f7f9 f935 	bl	8000288 <__aeabi_dsub>
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	ec51 0b19 	vmov	r0, r1, d9
 8007026:	f7f9 fc11 	bl	800084c <__aeabi_ddiv>
 800702a:	4632      	mov	r2, r6
 800702c:	4604      	mov	r4, r0
 800702e:	460d      	mov	r5, r1
 8007030:	463b      	mov	r3, r7
 8007032:	4640      	mov	r0, r8
 8007034:	4649      	mov	r1, r9
 8007036:	f7f9 fadf 	bl	80005f8 <__aeabi_dmul>
 800703a:	4632      	mov	r2, r6
 800703c:	463b      	mov	r3, r7
 800703e:	f7f9 f925 	bl	800028c <__adddf3>
 8007042:	4602      	mov	r2, r0
 8007044:	460b      	mov	r3, r1
 8007046:	4620      	mov	r0, r4
 8007048:	4629      	mov	r1, r5
 800704a:	f7f9 f91d 	bl	8000288 <__aeabi_dsub>
 800704e:	4642      	mov	r2, r8
 8007050:	464b      	mov	r3, r9
 8007052:	f7f9 f919 	bl	8000288 <__aeabi_dsub>
 8007056:	460b      	mov	r3, r1
 8007058:	4602      	mov	r2, r0
 800705a:	4939      	ldr	r1, [pc, #228]	; (8007140 <__ieee754_pow+0xa40>)
 800705c:	2000      	movs	r0, #0
 800705e:	f7f9 f913 	bl	8000288 <__aeabi_dsub>
 8007062:	ec41 0b10 	vmov	d0, r0, r1
 8007066:	ee10 3a90 	vmov	r3, s1
 800706a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800706e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007072:	da2b      	bge.n	80070cc <__ieee754_pow+0x9cc>
 8007074:	4650      	mov	r0, sl
 8007076:	f000 f877 	bl	8007168 <scalbn>
 800707a:	ec51 0b10 	vmov	r0, r1, d0
 800707e:	ec53 2b18 	vmov	r2, r3, d8
 8007082:	f7ff bbee 	b.w	8006862 <__ieee754_pow+0x162>
 8007086:	4b2f      	ldr	r3, [pc, #188]	; (8007144 <__ieee754_pow+0xa44>)
 8007088:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800708c:	429e      	cmp	r6, r3
 800708e:	f77f af0d 	ble.w	8006eac <__ieee754_pow+0x7ac>
 8007092:	4b2d      	ldr	r3, [pc, #180]	; (8007148 <__ieee754_pow+0xa48>)
 8007094:	440b      	add	r3, r1
 8007096:	4303      	orrs	r3, r0
 8007098:	d009      	beq.n	80070ae <__ieee754_pow+0x9ae>
 800709a:	ec51 0b18 	vmov	r0, r1, d8
 800709e:	2200      	movs	r2, #0
 80070a0:	2300      	movs	r3, #0
 80070a2:	f7f9 fd1b 	bl	8000adc <__aeabi_dcmplt>
 80070a6:	3800      	subs	r0, #0
 80070a8:	bf18      	it	ne
 80070aa:	2001      	movne	r0, #1
 80070ac:	e448      	b.n	8006940 <__ieee754_pow+0x240>
 80070ae:	4622      	mov	r2, r4
 80070b0:	462b      	mov	r3, r5
 80070b2:	f7f9 f8e9 	bl	8000288 <__aeabi_dsub>
 80070b6:	4642      	mov	r2, r8
 80070b8:	464b      	mov	r3, r9
 80070ba:	f7f9 fd23 	bl	8000b04 <__aeabi_dcmpge>
 80070be:	2800      	cmp	r0, #0
 80070c0:	f43f aef4 	beq.w	8006eac <__ieee754_pow+0x7ac>
 80070c4:	e7e9      	b.n	800709a <__ieee754_pow+0x99a>
 80070c6:	f04f 0a00 	mov.w	sl, #0
 80070ca:	e71a      	b.n	8006f02 <__ieee754_pow+0x802>
 80070cc:	ec51 0b10 	vmov	r0, r1, d0
 80070d0:	4619      	mov	r1, r3
 80070d2:	e7d4      	b.n	800707e <__ieee754_pow+0x97e>
 80070d4:	491a      	ldr	r1, [pc, #104]	; (8007140 <__ieee754_pow+0xa40>)
 80070d6:	2000      	movs	r0, #0
 80070d8:	f7ff bb31 	b.w	800673e <__ieee754_pow+0x3e>
 80070dc:	2000      	movs	r0, #0
 80070de:	2100      	movs	r1, #0
 80070e0:	f7ff bb2d 	b.w	800673e <__ieee754_pow+0x3e>
 80070e4:	4630      	mov	r0, r6
 80070e6:	4639      	mov	r1, r7
 80070e8:	f7ff bb29 	b.w	800673e <__ieee754_pow+0x3e>
 80070ec:	9204      	str	r2, [sp, #16]
 80070ee:	f7ff bb7b 	b.w	80067e8 <__ieee754_pow+0xe8>
 80070f2:	2300      	movs	r3, #0
 80070f4:	f7ff bb65 	b.w	80067c2 <__ieee754_pow+0xc2>
 80070f8:	00000000 	.word	0x00000000
 80070fc:	3fe62e43 	.word	0x3fe62e43
 8007100:	fefa39ef 	.word	0xfefa39ef
 8007104:	3fe62e42 	.word	0x3fe62e42
 8007108:	0ca86c39 	.word	0x0ca86c39
 800710c:	be205c61 	.word	0xbe205c61
 8007110:	72bea4d0 	.word	0x72bea4d0
 8007114:	3e663769 	.word	0x3e663769
 8007118:	c5d26bf1 	.word	0xc5d26bf1
 800711c:	3ebbbd41 	.word	0x3ebbbd41
 8007120:	af25de2c 	.word	0xaf25de2c
 8007124:	3f11566a 	.word	0x3f11566a
 8007128:	16bebd93 	.word	0x16bebd93
 800712c:	3f66c16c 	.word	0x3f66c16c
 8007130:	5555553e 	.word	0x5555553e
 8007134:	3fc55555 	.word	0x3fc55555
 8007138:	3fe00000 	.word	0x3fe00000
 800713c:	fff00000 	.word	0xfff00000
 8007140:	3ff00000 	.word	0x3ff00000
 8007144:	4090cbff 	.word	0x4090cbff
 8007148:	3f6f3400 	.word	0x3f6f3400
 800714c:	652b82fe 	.word	0x652b82fe
 8007150:	3c971547 	.word	0x3c971547

08007154 <fabs>:
 8007154:	ec51 0b10 	vmov	r0, r1, d0
 8007158:	ee10 2a10 	vmov	r2, s0
 800715c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007160:	ec43 2b10 	vmov	d0, r2, r3
 8007164:	4770      	bx	lr
	...

08007168 <scalbn>:
 8007168:	b570      	push	{r4, r5, r6, lr}
 800716a:	ec55 4b10 	vmov	r4, r5, d0
 800716e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007172:	4606      	mov	r6, r0
 8007174:	462b      	mov	r3, r5
 8007176:	b999      	cbnz	r1, 80071a0 <scalbn+0x38>
 8007178:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800717c:	4323      	orrs	r3, r4
 800717e:	d03f      	beq.n	8007200 <scalbn+0x98>
 8007180:	4b35      	ldr	r3, [pc, #212]	; (8007258 <scalbn+0xf0>)
 8007182:	4629      	mov	r1, r5
 8007184:	ee10 0a10 	vmov	r0, s0
 8007188:	2200      	movs	r2, #0
 800718a:	f7f9 fa35 	bl	80005f8 <__aeabi_dmul>
 800718e:	4b33      	ldr	r3, [pc, #204]	; (800725c <scalbn+0xf4>)
 8007190:	429e      	cmp	r6, r3
 8007192:	4604      	mov	r4, r0
 8007194:	460d      	mov	r5, r1
 8007196:	da10      	bge.n	80071ba <scalbn+0x52>
 8007198:	a327      	add	r3, pc, #156	; (adr r3, 8007238 <scalbn+0xd0>)
 800719a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719e:	e01f      	b.n	80071e0 <scalbn+0x78>
 80071a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80071a4:	4291      	cmp	r1, r2
 80071a6:	d10c      	bne.n	80071c2 <scalbn+0x5a>
 80071a8:	ee10 2a10 	vmov	r2, s0
 80071ac:	4620      	mov	r0, r4
 80071ae:	4629      	mov	r1, r5
 80071b0:	f7f9 f86c 	bl	800028c <__adddf3>
 80071b4:	4604      	mov	r4, r0
 80071b6:	460d      	mov	r5, r1
 80071b8:	e022      	b.n	8007200 <scalbn+0x98>
 80071ba:	460b      	mov	r3, r1
 80071bc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80071c0:	3936      	subs	r1, #54	; 0x36
 80071c2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80071c6:	4296      	cmp	r6, r2
 80071c8:	dd0d      	ble.n	80071e6 <scalbn+0x7e>
 80071ca:	2d00      	cmp	r5, #0
 80071cc:	a11c      	add	r1, pc, #112	; (adr r1, 8007240 <scalbn+0xd8>)
 80071ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071d2:	da02      	bge.n	80071da <scalbn+0x72>
 80071d4:	a11c      	add	r1, pc, #112	; (adr r1, 8007248 <scalbn+0xe0>)
 80071d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071da:	a319      	add	r3, pc, #100	; (adr r3, 8007240 <scalbn+0xd8>)
 80071dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e0:	f7f9 fa0a 	bl	80005f8 <__aeabi_dmul>
 80071e4:	e7e6      	b.n	80071b4 <scalbn+0x4c>
 80071e6:	1872      	adds	r2, r6, r1
 80071e8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80071ec:	428a      	cmp	r2, r1
 80071ee:	dcec      	bgt.n	80071ca <scalbn+0x62>
 80071f0:	2a00      	cmp	r2, #0
 80071f2:	dd08      	ble.n	8007206 <scalbn+0x9e>
 80071f4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80071f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80071fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007200:	ec45 4b10 	vmov	d0, r4, r5
 8007204:	bd70      	pop	{r4, r5, r6, pc}
 8007206:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800720a:	da08      	bge.n	800721e <scalbn+0xb6>
 800720c:	2d00      	cmp	r5, #0
 800720e:	a10a      	add	r1, pc, #40	; (adr r1, 8007238 <scalbn+0xd0>)
 8007210:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007214:	dac0      	bge.n	8007198 <scalbn+0x30>
 8007216:	a10e      	add	r1, pc, #56	; (adr r1, 8007250 <scalbn+0xe8>)
 8007218:	e9d1 0100 	ldrd	r0, r1, [r1]
 800721c:	e7bc      	b.n	8007198 <scalbn+0x30>
 800721e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007222:	3236      	adds	r2, #54	; 0x36
 8007224:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007228:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800722c:	4620      	mov	r0, r4
 800722e:	4b0c      	ldr	r3, [pc, #48]	; (8007260 <scalbn+0xf8>)
 8007230:	2200      	movs	r2, #0
 8007232:	e7d5      	b.n	80071e0 <scalbn+0x78>
 8007234:	f3af 8000 	nop.w
 8007238:	c2f8f359 	.word	0xc2f8f359
 800723c:	01a56e1f 	.word	0x01a56e1f
 8007240:	8800759c 	.word	0x8800759c
 8007244:	7e37e43c 	.word	0x7e37e43c
 8007248:	8800759c 	.word	0x8800759c
 800724c:	fe37e43c 	.word	0xfe37e43c
 8007250:	c2f8f359 	.word	0xc2f8f359
 8007254:	81a56e1f 	.word	0x81a56e1f
 8007258:	43500000 	.word	0x43500000
 800725c:	ffff3cb0 	.word	0xffff3cb0
 8007260:	3c900000 	.word	0x3c900000

08007264 <with_errno>:
 8007264:	b570      	push	{r4, r5, r6, lr}
 8007266:	4604      	mov	r4, r0
 8007268:	460d      	mov	r5, r1
 800726a:	4616      	mov	r6, r2
 800726c:	f7fd f9e8 	bl	8004640 <__errno>
 8007270:	4629      	mov	r1, r5
 8007272:	6006      	str	r6, [r0, #0]
 8007274:	4620      	mov	r0, r4
 8007276:	bd70      	pop	{r4, r5, r6, pc}

08007278 <xflow>:
 8007278:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800727a:	4614      	mov	r4, r2
 800727c:	461d      	mov	r5, r3
 800727e:	b108      	cbz	r0, 8007284 <xflow+0xc>
 8007280:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007284:	e9cd 2300 	strd	r2, r3, [sp]
 8007288:	e9dd 2300 	ldrd	r2, r3, [sp]
 800728c:	4620      	mov	r0, r4
 800728e:	4629      	mov	r1, r5
 8007290:	f7f9 f9b2 	bl	80005f8 <__aeabi_dmul>
 8007294:	2222      	movs	r2, #34	; 0x22
 8007296:	b003      	add	sp, #12
 8007298:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800729c:	f7ff bfe2 	b.w	8007264 <with_errno>

080072a0 <__math_uflow>:
 80072a0:	b508      	push	{r3, lr}
 80072a2:	2200      	movs	r2, #0
 80072a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80072a8:	f7ff ffe6 	bl	8007278 <xflow>
 80072ac:	ec41 0b10 	vmov	d0, r0, r1
 80072b0:	bd08      	pop	{r3, pc}

080072b2 <__math_oflow>:
 80072b2:	b508      	push	{r3, lr}
 80072b4:	2200      	movs	r2, #0
 80072b6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80072ba:	f7ff ffdd 	bl	8007278 <xflow>
 80072be:	ec41 0b10 	vmov	d0, r0, r1
 80072c2:	bd08      	pop	{r3, pc}

080072c4 <__ieee754_sqrt>:
 80072c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c8:	ec55 4b10 	vmov	r4, r5, d0
 80072cc:	4e67      	ldr	r6, [pc, #412]	; (800746c <__ieee754_sqrt+0x1a8>)
 80072ce:	43ae      	bics	r6, r5
 80072d0:	ee10 0a10 	vmov	r0, s0
 80072d4:	ee10 2a10 	vmov	r2, s0
 80072d8:	4629      	mov	r1, r5
 80072da:	462b      	mov	r3, r5
 80072dc:	d10d      	bne.n	80072fa <__ieee754_sqrt+0x36>
 80072de:	f7f9 f98b 	bl	80005f8 <__aeabi_dmul>
 80072e2:	4602      	mov	r2, r0
 80072e4:	460b      	mov	r3, r1
 80072e6:	4620      	mov	r0, r4
 80072e8:	4629      	mov	r1, r5
 80072ea:	f7f8 ffcf 	bl	800028c <__adddf3>
 80072ee:	4604      	mov	r4, r0
 80072f0:	460d      	mov	r5, r1
 80072f2:	ec45 4b10 	vmov	d0, r4, r5
 80072f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072fa:	2d00      	cmp	r5, #0
 80072fc:	dc0b      	bgt.n	8007316 <__ieee754_sqrt+0x52>
 80072fe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007302:	4326      	orrs	r6, r4
 8007304:	d0f5      	beq.n	80072f2 <__ieee754_sqrt+0x2e>
 8007306:	b135      	cbz	r5, 8007316 <__ieee754_sqrt+0x52>
 8007308:	f7f8 ffbe 	bl	8000288 <__aeabi_dsub>
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	f7f9 fa9c 	bl	800084c <__aeabi_ddiv>
 8007314:	e7eb      	b.n	80072ee <__ieee754_sqrt+0x2a>
 8007316:	1509      	asrs	r1, r1, #20
 8007318:	f000 808d 	beq.w	8007436 <__ieee754_sqrt+0x172>
 800731c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007320:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8007324:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007328:	07c9      	lsls	r1, r1, #31
 800732a:	bf5c      	itt	pl
 800732c:	005b      	lslpl	r3, r3, #1
 800732e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8007332:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007336:	bf58      	it	pl
 8007338:	0052      	lslpl	r2, r2, #1
 800733a:	2500      	movs	r5, #0
 800733c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007340:	1076      	asrs	r6, r6, #1
 8007342:	0052      	lsls	r2, r2, #1
 8007344:	f04f 0e16 	mov.w	lr, #22
 8007348:	46ac      	mov	ip, r5
 800734a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800734e:	eb0c 0001 	add.w	r0, ip, r1
 8007352:	4298      	cmp	r0, r3
 8007354:	bfde      	ittt	le
 8007356:	1a1b      	suble	r3, r3, r0
 8007358:	eb00 0c01 	addle.w	ip, r0, r1
 800735c:	186d      	addle	r5, r5, r1
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	f1be 0e01 	subs.w	lr, lr, #1
 8007364:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007368:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800736c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007370:	d1ed      	bne.n	800734e <__ieee754_sqrt+0x8a>
 8007372:	4674      	mov	r4, lr
 8007374:	2720      	movs	r7, #32
 8007376:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800737a:	4563      	cmp	r3, ip
 800737c:	eb01 000e 	add.w	r0, r1, lr
 8007380:	dc02      	bgt.n	8007388 <__ieee754_sqrt+0xc4>
 8007382:	d113      	bne.n	80073ac <__ieee754_sqrt+0xe8>
 8007384:	4290      	cmp	r0, r2
 8007386:	d811      	bhi.n	80073ac <__ieee754_sqrt+0xe8>
 8007388:	2800      	cmp	r0, #0
 800738a:	eb00 0e01 	add.w	lr, r0, r1
 800738e:	da57      	bge.n	8007440 <__ieee754_sqrt+0x17c>
 8007390:	f1be 0f00 	cmp.w	lr, #0
 8007394:	db54      	blt.n	8007440 <__ieee754_sqrt+0x17c>
 8007396:	f10c 0801 	add.w	r8, ip, #1
 800739a:	eba3 030c 	sub.w	r3, r3, ip
 800739e:	4290      	cmp	r0, r2
 80073a0:	bf88      	it	hi
 80073a2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80073a6:	1a12      	subs	r2, r2, r0
 80073a8:	440c      	add	r4, r1
 80073aa:	46c4      	mov	ip, r8
 80073ac:	005b      	lsls	r3, r3, #1
 80073ae:	3f01      	subs	r7, #1
 80073b0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80073b4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80073b8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80073bc:	d1dd      	bne.n	800737a <__ieee754_sqrt+0xb6>
 80073be:	4313      	orrs	r3, r2
 80073c0:	d01b      	beq.n	80073fa <__ieee754_sqrt+0x136>
 80073c2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007470 <__ieee754_sqrt+0x1ac>
 80073c6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007474 <__ieee754_sqrt+0x1b0>
 80073ca:	e9da 0100 	ldrd	r0, r1, [sl]
 80073ce:	e9db 2300 	ldrd	r2, r3, [fp]
 80073d2:	f7f8 ff59 	bl	8000288 <__aeabi_dsub>
 80073d6:	e9da 8900 	ldrd	r8, r9, [sl]
 80073da:	4602      	mov	r2, r0
 80073dc:	460b      	mov	r3, r1
 80073de:	4640      	mov	r0, r8
 80073e0:	4649      	mov	r1, r9
 80073e2:	f7f9 fb85 	bl	8000af0 <__aeabi_dcmple>
 80073e6:	b140      	cbz	r0, 80073fa <__ieee754_sqrt+0x136>
 80073e8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80073ec:	e9da 0100 	ldrd	r0, r1, [sl]
 80073f0:	e9db 2300 	ldrd	r2, r3, [fp]
 80073f4:	d126      	bne.n	8007444 <__ieee754_sqrt+0x180>
 80073f6:	3501      	adds	r5, #1
 80073f8:	463c      	mov	r4, r7
 80073fa:	106a      	asrs	r2, r5, #1
 80073fc:	0863      	lsrs	r3, r4, #1
 80073fe:	07e9      	lsls	r1, r5, #31
 8007400:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007404:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007408:	bf48      	it	mi
 800740a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800740e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8007412:	461c      	mov	r4, r3
 8007414:	e76d      	b.n	80072f2 <__ieee754_sqrt+0x2e>
 8007416:	0ad3      	lsrs	r3, r2, #11
 8007418:	3815      	subs	r0, #21
 800741a:	0552      	lsls	r2, r2, #21
 800741c:	2b00      	cmp	r3, #0
 800741e:	d0fa      	beq.n	8007416 <__ieee754_sqrt+0x152>
 8007420:	02dc      	lsls	r4, r3, #11
 8007422:	d50a      	bpl.n	800743a <__ieee754_sqrt+0x176>
 8007424:	f1c1 0420 	rsb	r4, r1, #32
 8007428:	fa22 f404 	lsr.w	r4, r2, r4
 800742c:	1e4d      	subs	r5, r1, #1
 800742e:	408a      	lsls	r2, r1
 8007430:	4323      	orrs	r3, r4
 8007432:	1b41      	subs	r1, r0, r5
 8007434:	e772      	b.n	800731c <__ieee754_sqrt+0x58>
 8007436:	4608      	mov	r0, r1
 8007438:	e7f0      	b.n	800741c <__ieee754_sqrt+0x158>
 800743a:	005b      	lsls	r3, r3, #1
 800743c:	3101      	adds	r1, #1
 800743e:	e7ef      	b.n	8007420 <__ieee754_sqrt+0x15c>
 8007440:	46e0      	mov	r8, ip
 8007442:	e7aa      	b.n	800739a <__ieee754_sqrt+0xd6>
 8007444:	f7f8 ff22 	bl	800028c <__adddf3>
 8007448:	e9da 8900 	ldrd	r8, r9, [sl]
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	4640      	mov	r0, r8
 8007452:	4649      	mov	r1, r9
 8007454:	f7f9 fb42 	bl	8000adc <__aeabi_dcmplt>
 8007458:	b120      	cbz	r0, 8007464 <__ieee754_sqrt+0x1a0>
 800745a:	1ca0      	adds	r0, r4, #2
 800745c:	bf08      	it	eq
 800745e:	3501      	addeq	r5, #1
 8007460:	3402      	adds	r4, #2
 8007462:	e7ca      	b.n	80073fa <__ieee754_sqrt+0x136>
 8007464:	3401      	adds	r4, #1
 8007466:	f024 0401 	bic.w	r4, r4, #1
 800746a:	e7c6      	b.n	80073fa <__ieee754_sqrt+0x136>
 800746c:	7ff00000 	.word	0x7ff00000
 8007470:	20000250 	.word	0x20000250
 8007474:	20000258 	.word	0x20000258

08007478 <_init>:
 8007478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747a:	bf00      	nop
 800747c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800747e:	bc08      	pop	{r3}
 8007480:	469e      	mov	lr, r3
 8007482:	4770      	bx	lr

08007484 <_fini>:
 8007484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007486:	bf00      	nop
 8007488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748a:	bc08      	pop	{r3}
 800748c:	469e      	mov	lr, r3
 800748e:	4770      	bx	lr
