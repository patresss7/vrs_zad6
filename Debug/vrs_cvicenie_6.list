
vrs_cvicenie_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08007348  08007348  00017348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007798  08007798  00020260  2**0
                  CONTENTS
  4 .ARM          00000000  08007798  08007798  00020260  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007798  08007798  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007798  08007798  00017798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800779c  0800779c  0001779c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  080077a0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020260  2**0
                  CONTENTS
 10 .bss          00000260  20000260  20000260  00020260  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004c0  200004c0  00020260  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 14 .debug_info   00006e78  00000000  00000000  000202d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001daf  00000000  00000000  0002714b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000918  00000000  00000000  00028f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000692  00000000  00000000  00029818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001dc7e  00000000  00000000  00029eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a04d  00000000  00000000  00047b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a2f07  00000000  00000000  00051b75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000387c  00000000  00000000  000f4a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  000f82f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000260 	.word	0x20000260
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007330 	.word	0x08007330

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000264 	.word	0x20000264
 80001cc:	08007330 	.word	0x08007330

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <hts221_read_bytes>:
{
	write_multi_byte(data, len, HTS221_I2C_ADDRESS, register_address);

}
void hts221_read_bytes(uint8_t register_address, uint8_t *data, uint8_t len)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	4613      	mov	r3, r2
 8000c56:	71bb      	strb	r3, [r7, #6]
	read_multi_byte(data, len, HTS221_I2C_ADDRESS, register_address);
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	79b9      	ldrb	r1, [r7, #6]
 8000c5c:	22be      	movs	r2, #190	; 0xbe
 8000c5e:	6838      	ldr	r0, [r7, #0]
 8000c60:	f000 fda2 	bl	80017a8 <read_multi_byte>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <hts221_init>:

uint8_t hts221_init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
	uint8_t ID;
	hts221_read_bytes(HTS221_REG_WHO_AM_I, &ID, 1);
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	2201      	movs	r2, #1
 8000c76:	4619      	mov	r1, r3
 8000c78:	200f      	movs	r0, #15
 8000c7a:	f7ff ffe5 	bl	8000c48 <hts221_read_bytes>
	if(ID != HTS221_WHO_AM_I_VALUE)
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2bbc      	cmp	r3, #188	; 0xbc
 8000c82:	d001      	beq.n	8000c88 <hts221_init+0x1c>
	{
		return 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	e088      	b.n	8000d9a <hts221_init+0x12e>
	}

	uint8_t data[2];
	hts221_read_bytes(HTS221_REG_H0_rH_x2, &data, 1);
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	2030      	movs	r0, #48	; 0x30
 8000c90:	f7ff ffda 	bl	8000c48 <hts221_read_bytes>
	hy0 = data[0]/2;
 8000c94:	793b      	ldrb	r3, [r7, #4]
 8000c96:	085b      	lsrs	r3, r3, #1
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	ee07 3a90 	vmov	s15, r3
 8000c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ca2:	4b40      	ldr	r3, [pc, #256]	; (8000da4 <hts221_init+0x138>)
 8000ca4:	edc3 7a00 	vstr	s15, [r3]
	hts221_read_bytes(HTS221_REG_H1_rH_x2, &data, 1);
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	2201      	movs	r2, #1
 8000cac:	4619      	mov	r1, r3
 8000cae:	2031      	movs	r0, #49	; 0x31
 8000cb0:	f7ff ffca 	bl	8000c48 <hts221_read_bytes>
	hy1 = data[0]/2;
 8000cb4:	793b      	ldrb	r3, [r7, #4]
 8000cb6:	085b      	lsrs	r3, r3, #1
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	ee07 3a90 	vmov	s15, r3
 8000cbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc2:	4b39      	ldr	r3, [pc, #228]	; (8000da8 <hts221_init+0x13c>)
 8000cc4:	edc3 7a00 	vstr	s15, [r3]

	hts221_read_bytes(HTS221_REG_H0_T0_OUT_L, &data, 2);
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2202      	movs	r2, #2
 8000ccc:	4619      	mov	r1, r3
 8000cce:	2036      	movs	r0, #54	; 0x36
 8000cd0:	f7ff ffba 	bl	8000c48 <hts221_read_bytes>
	hx0 = data[0] | data[1] << 8;
 8000cd4:	793b      	ldrb	r3, [r7, #4]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	797b      	ldrb	r3, [r7, #5]
 8000cda:	021b      	lsls	r3, r3, #8
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	ee07 3a90 	vmov	s15, r3
 8000ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ce6:	4b31      	ldr	r3, [pc, #196]	; (8000dac <hts221_init+0x140>)
 8000ce8:	edc3 7a00 	vstr	s15, [r3]
	hts221_read_bytes(HTS221_REG_H1_T0_OUT_L, &data, 2);
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2202      	movs	r2, #2
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	203a      	movs	r0, #58	; 0x3a
 8000cf4:	f7ff ffa8 	bl	8000c48 <hts221_read_bytes>
	hx1 = data[0] | data[1] << 8;
 8000cf8:	793b      	ldrb	r3, [r7, #4]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	797b      	ldrb	r3, [r7, #5]
 8000cfe:	021b      	lsls	r3, r3, #8
 8000d00:	4313      	orrs	r3, r2
 8000d02:	ee07 3a90 	vmov	s15, r3
 8000d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d0a:	4b29      	ldr	r3, [pc, #164]	; (8000db0 <hts221_init+0x144>)
 8000d0c:	edc3 7a00 	vstr	s15, [r3]

	hts221_read_bytes(HTS221_REG_T0_degC_x8, &data, 1);
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2201      	movs	r2, #1
 8000d14:	4619      	mov	r1, r3
 8000d16:	2032      	movs	r0, #50	; 0x32
 8000d18:	f7ff ff96 	bl	8000c48 <hts221_read_bytes>
	ty0 = data[0]/8;
 8000d1c:	793b      	ldrb	r3, [r7, #4]
 8000d1e:	08db      	lsrs	r3, r3, #3
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	ee07 3a90 	vmov	s15, r3
 8000d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d2a:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <hts221_init+0x148>)
 8000d2c:	edc3 7a00 	vstr	s15, [r3]
	hts221_read_bytes(HTS221_REG_T1_degC_x8, &data, 1);
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	2201      	movs	r2, #1
 8000d34:	4619      	mov	r1, r3
 8000d36:	2033      	movs	r0, #51	; 0x33
 8000d38:	f7ff ff86 	bl	8000c48 <hts221_read_bytes>
	ty1 = data[0]/8;
 8000d3c:	793b      	ldrb	r3, [r7, #4]
 8000d3e:	08db      	lsrs	r3, r3, #3
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	ee07 3a90 	vmov	s15, r3
 8000d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d4a:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <hts221_init+0x14c>)
 8000d4c:	edc3 7a00 	vstr	s15, [r3]

	hts221_read_bytes(HTS221_REG_T0_OUT_L, &data, 2);
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2202      	movs	r2, #2
 8000d54:	4619      	mov	r1, r3
 8000d56:	203c      	movs	r0, #60	; 0x3c
 8000d58:	f7ff ff76 	bl	8000c48 <hts221_read_bytes>
	tx0 = data[0] | data[1] << 8;
 8000d5c:	793b      	ldrb	r3, [r7, #4]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	797b      	ldrb	r3, [r7, #5]
 8000d62:	021b      	lsls	r3, r3, #8
 8000d64:	4313      	orrs	r3, r2
 8000d66:	ee07 3a90 	vmov	s15, r3
 8000d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d6e:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <hts221_init+0x150>)
 8000d70:	edc3 7a00 	vstr	s15, [r3]
	hts221_read_bytes(HTS221_REG_T1_OUT_L, &data, 2);
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2202      	movs	r2, #2
 8000d78:	4619      	mov	r1, r3
 8000d7a:	203e      	movs	r0, #62	; 0x3e
 8000d7c:	f7ff ff64 	bl	8000c48 <hts221_read_bytes>
	tx1 = data[0] | data[1] << 8;
 8000d80:	793b      	ldrb	r3, [r7, #4]
 8000d82:	461a      	mov	r2, r3
 8000d84:	797b      	ldrb	r3, [r7, #5]
 8000d86:	021b      	lsls	r3, r3, #8
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	ee07 3a90 	vmov	s15, r3
 8000d8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <hts221_init+0x154>)
 8000d94:	edc3 7a00 	vstr	s15, [r3]


	return 1;
 8000d98:	2301      	movs	r3, #1

}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000294 	.word	0x20000294
 8000da8:	20000298 	.word	0x20000298
 8000dac:	2000028c 	.word	0x2000028c
 8000db0:	20000290 	.word	0x20000290
 8000db4:	20000284 	.word	0x20000284
 8000db8:	20000288 	.word	0x20000288
 8000dbc:	2000027c 	.word	0x2000027c
 8000dc0:	20000280 	.word	0x20000280

08000dc4 <hts221_read_temp>:

float hts221_read_temp(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
	float temp;
	uint8_t data[2];
	uint16_t x;
	hts221_read_bytes(HTS221_REG_TEMP_OUT_L, &data, 2);
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	2202      	movs	r2, #2
 8000dce:	4619      	mov	r1, r3
 8000dd0:	202a      	movs	r0, #42	; 0x2a
 8000dd2:	f7ff ff39 	bl	8000c48 <hts221_read_bytes>
	x = data[1] | data[0] << 8;
 8000dd6:	797b      	ldrb	r3, [r7, #5]
 8000dd8:	b21a      	sxth	r2, r3
 8000dda:	793b      	ldrb	r3, [r7, #4]
 8000ddc:	021b      	lsls	r3, r3, #8
 8000dde:	b21b      	sxth	r3, r3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	b21b      	sxth	r3, r3
 8000de4:	80fb      	strh	r3, [r7, #6]
	return linear_interpolation(x, tx0, tx1, ty0, ty1);
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <hts221_read_temp+0x60>)
 8000de8:	edd3 7a00 	vldr	s15, [r3]
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <hts221_read_temp+0x64>)
 8000dee:	ed93 7a00 	vldr	s14, [r3]
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <hts221_read_temp+0x68>)
 8000df4:	edd3 6a00 	vldr	s13, [r3]
 8000df8:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <hts221_read_temp+0x6c>)
 8000dfa:	ed93 6a00 	vldr	s12, [r3]
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	eef0 1a46 	vmov.f32	s3, s12
 8000e04:	eeb0 1a66 	vmov.f32	s2, s13
 8000e08:	eef0 0a47 	vmov.f32	s1, s14
 8000e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 f847 	bl	8000ea4 <linear_interpolation>
 8000e16:	eef0 7a40 	vmov.f32	s15, s0
}
 8000e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	2000027c 	.word	0x2000027c
 8000e28:	20000280 	.word	0x20000280
 8000e2c:	20000284 	.word	0x20000284
 8000e30:	20000288 	.word	0x20000288

08000e34 <hts221_read_humid>:
float hts221_read_humid(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
	float temp;
	uint8_t data[2];
	uint16_t x;
	hts221_read_bytes(HTS221_REG_HUMIDITY_OUT_L, &data, 2);
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2202      	movs	r2, #2
 8000e3e:	4619      	mov	r1, r3
 8000e40:	2028      	movs	r0, #40	; 0x28
 8000e42:	f7ff ff01 	bl	8000c48 <hts221_read_bytes>
	x = data[1] | data[0] << 8;
 8000e46:	797b      	ldrb	r3, [r7, #5]
 8000e48:	b21a      	sxth	r2, r3
 8000e4a:	793b      	ldrb	r3, [r7, #4]
 8000e4c:	021b      	lsls	r3, r3, #8
 8000e4e:	b21b      	sxth	r3, r3
 8000e50:	4313      	orrs	r3, r2
 8000e52:	b21b      	sxth	r3, r3
 8000e54:	80fb      	strh	r3, [r7, #6]
	return linear_interpolation(x, hx0, hx1, hy0, hy1);
 8000e56:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <hts221_read_humid+0x60>)
 8000e58:	edd3 7a00 	vldr	s15, [r3]
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <hts221_read_humid+0x64>)
 8000e5e:	ed93 7a00 	vldr	s14, [r3]
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <hts221_read_humid+0x68>)
 8000e64:	edd3 6a00 	vldr	s13, [r3]
 8000e68:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <hts221_read_humid+0x6c>)
 8000e6a:	ed93 6a00 	vldr	s12, [r3]
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	eef0 1a46 	vmov.f32	s3, s12
 8000e74:	eeb0 1a66 	vmov.f32	s2, s13
 8000e78:	eef0 0a47 	vmov.f32	s1, s14
 8000e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 f80f 	bl	8000ea4 <linear_interpolation>
 8000e86:	eef0 7a40 	vmov.f32	s15, s0
}
 8000e8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	2000028c 	.word	0x2000028c
 8000e98:	20000290 	.word	0x20000290
 8000e9c:	20000294 	.word	0x20000294
 8000ea0:	20000298 	.word	0x20000298

08000ea4 <linear_interpolation>:

float linear_interpolation(uint16_t x,float xo,float x1,float y0,float y1)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	; 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	ed87 0a04 	vstr	s0, [r7, #16]
 8000eb0:	edc7 0a03 	vstr	s1, [r7, #12]
 8000eb4:	ed87 1a02 	vstr	s2, [r7, #8]
 8000eb8:	edc7 1a01 	vstr	s3, [r7, #4]
 8000ebc:	82fb      	strh	r3, [r7, #22]
	if (x < xo || x > x1) {
 8000ebe:	8afb      	ldrh	r3, [r7, #22]
 8000ec0:	ee07 3a90 	vmov	s15, r3
 8000ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ec8:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ecc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed4:	dc0b      	bgt.n	8000eee <linear_interpolation+0x4a>
 8000ed6:	8afb      	ldrh	r3, [r7, #22]
 8000ed8:	ee07 3a90 	vmov	s15, r3
 8000edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ee0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ee4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eec:	d502      	bpl.n	8000ef4 <linear_interpolation+0x50>
	        // Handle the out-of-range case as needed (e.g., return an error code).
	        // You may choose to return a specific value or handle it differently.
	        // For simplicity, let's return 0 in this example.
	        return 0.0;
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	e023      	b.n	8000f3c <linear_interpolation+0x98>
	    }

	    // Perform linear interpolation
	    // Calculate the interpolation factor
	    float factor = ((float)x - xo) / (x1 - xo);
 8000ef4:	8afb      	ldrh	r3, [r7, #22]
 8000ef6:	ee07 3a90 	vmov	s15, r3
 8000efa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000efe:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f02:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000f06:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f16:	edc7 7a07 	vstr	s15, [r7, #28]

	    // Calculate the interpolated value
	    float interpolatedValue = y0 + factor * (y1 - y0);
 8000f1a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f26:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f2e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f36:	edc7 7a06 	vstr	s15, [r7, #24]

	    return interpolatedValue;
 8000f3a:	69bb      	ldr	r3, [r7, #24]
}
 8000f3c:	ee07 3a90 	vmov	s15, r3
 8000f40:	eeb0 0a67 	vmov.f32	s0, s15
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <lps25hb_write_bytes>:


uint8_t actual_address = LPS25HB_I2C_ADDRESS_0;

void lps25hb_write_bytes(uint8_t register_address, uint8_t *data, uint8_t len, uint8_t i2c_address)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	4611      	mov	r1, r2
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	71bb      	strb	r3, [r7, #6]
 8000f62:	4613      	mov	r3, r2
 8000f64:	717b      	strb	r3, [r7, #5]
	write_multi_byte(data, len, i2c_address, register_address);
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	797a      	ldrb	r2, [r7, #5]
 8000f6a:	79b9      	ldrb	r1, [r7, #6]
 8000f6c:	6838      	ldr	r0, [r7, #0]
 8000f6e:	f000 fc81 	bl	8001874 <write_multi_byte>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <lps25hb_read_bytes>:
void lps25hb_read_bytes(uint8_t register_address, uint8_t *data, uint8_t len, uint8_t i2c_address)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	4611      	mov	r1, r2
 8000f84:	461a      	mov	r2, r3
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	71bb      	strb	r3, [r7, #6]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	717b      	strb	r3, [r7, #5]
	read_multi_byte(data, len, i2c_address, register_address);
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	797a      	ldrb	r2, [r7, #5]
 8000f96:	79b9      	ldrb	r1, [r7, #6]
 8000f98:	6838      	ldr	r0, [r7, #0]
 8000f9a:	f000 fc05 	bl	80017a8 <read_multi_byte>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <lps25hb_init>:

uint8_t lps25hb_init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
	uint8_t ID;
	lps25hb_read_bytes(LPS25HB_REG_WHO_AM_I_ADDR, &ID, 1, actual_address);
 8000fae:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <lps25hb_init+0x50>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	1df9      	adds	r1, r7, #7
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	200f      	movs	r0, #15
 8000fb8:	f7ff ffdf 	bl	8000f7a <lps25hb_read_bytes>
	if(ID != LPS25HB_WHO_AM_I_VALUE)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	2bb1      	cmp	r3, #177	; 0xb1
 8000fc0:	d00e      	beq.n	8000fe0 <lps25hb_init+0x38>
	{
		actual_address = LPS25HB_I2C_ADDRESS_1;
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <lps25hb_init+0x50>)
 8000fc4:	22b8      	movs	r2, #184	; 0xb8
 8000fc6:	701a      	strb	r2, [r3, #0]
		lps25hb_read_bytes(LPS25HB_REG_WHO_AM_I_ADDR, &ID, 1, actual_address);
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <lps25hb_init+0x50>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	1df9      	adds	r1, r7, #7
 8000fce:	2201      	movs	r2, #1
 8000fd0:	200f      	movs	r0, #15
 8000fd2:	f7ff ffd2 	bl	8000f7a <lps25hb_read_bytes>
		if(ID != LPS25HB_WHO_AM_I_VALUE)
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	2bb1      	cmp	r3, #177	; 0xb1
 8000fda:	d001      	beq.n	8000fe0 <lps25hb_init+0x38>
		{
			return 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	e007      	b.n	8000ff0 <lps25hb_init+0x48>
		}
	}
	lps25hb_write_bytes(LPS25HB_REG_CTRL_REG1, 0b00110000, 1, actual_address);
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <lps25hb_init+0x50>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2130      	movs	r1, #48	; 0x30
 8000fe8:	2010      	movs	r0, #16
 8000fea:	f7ff ffb0 	bl	8000f4e <lps25hb_write_bytes>
	return 1;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000000 	.word	0x20000000

08000ffc <lps25hb_read_pressure>:

float lps25hb_read_pressure(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
	float result = 0;
 8001002:	f04f 0300 	mov.w	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
	uint8_t data[3];
	lps25hb_read_bytes(LPS25HB_REG_PRESS_OUT_XL, &data, 3, actual_address);
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <lps25hb_read_pressure+0x54>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	1d39      	adds	r1, r7, #4
 800100e:	2203      	movs	r2, #3
 8001010:	2028      	movs	r0, #40	; 0x28
 8001012:	f7ff ffb2 	bl	8000f7a <lps25hb_read_bytes>
	int32_t pressure_raw = (int32_t)((data[2] << 16) | (data[1] << 8) | data[0]);
 8001016:	79bb      	ldrb	r3, [r7, #6]
 8001018:	041a      	lsls	r2, r3, #16
 800101a:	797b      	ldrb	r3, [r7, #5]
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	4313      	orrs	r3, r2
 8001020:	793a      	ldrb	r2, [r7, #4]
 8001022:	4313      	orrs	r3, r2
 8001024:	60bb      	str	r3, [r7, #8]
	result = pressure_raw / 4096;
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	2b00      	cmp	r3, #0
 800102a:	da01      	bge.n	8001030 <lps25hb_read_pressure+0x34>
 800102c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001030:	131b      	asrs	r3, r3, #12
 8001032:	ee07 3a90 	vmov	s15, r3
 8001036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800103a:	edc7 7a03 	vstr	s15, [r7, #12]
	return result;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	ee07 3a90 	vmov	s15, r3

}
 8001044:	eeb0 0a67 	vmov.f32	s0, s15
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000000 	.word	0x20000000
 8001054:	00000000 	.word	0x00000000

08001058 <lps25hb_read_altitude>:

float lps25hb_read_altitude(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0

	const float SEA_LEVEL_PRESSURE_HPA = 1013.25; // Standard sea-level pressure in hPa
 800105e:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <lps25hb_read_altitude+0x90>)
 8001060:	60fb      	str	r3, [r7, #12]

	float altitude = 0;
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
	float pressure = lps25hb_read_pressure();
 8001068:	f7ff ffc8 	bl	8000ffc <lps25hb_read_pressure>
 800106c:	ed87 0a01 	vstr	s0, [r7, #4]

	 altitude = 44330.0 * (1.0 - pow((pressure / SEA_LEVEL_PRESSURE_HPA), 0.1903));
 8001070:	ed97 7a01 	vldr	s14, [r7, #4]
 8001074:	edd7 7a03 	vldr	s15, [r7, #12]
 8001078:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800107c:	ee16 0a90 	vmov	r0, s13
 8001080:	f7ff fa62 	bl	8000548 <__aeabi_f2d>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	ed9f 1b13 	vldr	d1, [pc, #76]	; 80010d8 <lps25hb_read_altitude+0x80>
 800108c:	ec43 2b10 	vmov	d0, r2, r3
 8001090:	f005 fa16 	bl	80064c0 <pow>
 8001094:	ec53 2b10 	vmov	r2, r3, d0
 8001098:	f04f 0000 	mov.w	r0, #0
 800109c:	4913      	ldr	r1, [pc, #76]	; (80010ec <lps25hb_read_altitude+0x94>)
 800109e:	f7ff f8f3 	bl	8000288 <__aeabi_dsub>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4610      	mov	r0, r2
 80010a8:	4619      	mov	r1, r3
 80010aa:	a30d      	add	r3, pc, #52	; (adr r3, 80010e0 <lps25hb_read_altitude+0x88>)
 80010ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b0:	f7ff faa2 	bl	80005f8 <__aeabi_dmul>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f7ff fd74 	bl	8000ba8 <__aeabi_d2f>
 80010c0:	4603      	mov	r3, r0
 80010c2:	60bb      	str	r3, [r7, #8]

	 return altitude;
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	ee07 3a90 	vmov	s15, r3

}
 80010ca:	eeb0 0a67 	vmov.f32	s0, s15
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	f3af 8000 	nop.w
 80010d8:	1a36e2eb 	.word	0x1a36e2eb
 80010dc:	3fc85bc0 	.word	0x3fc85bc0
 80010e0:	00000000 	.word	0x00000000
 80010e4:	40e5a540 	.word	0x40e5a540
 80010e8:	447d5000 	.word	0x447d5000
 80010ec:	3ff00000 	.word	0x3ff00000

080010f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	db0b      	blt.n	800111a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f003 021f 	and.w	r2, r3, #31
 8001108:	4907      	ldr	r1, [pc, #28]	; (8001128 <__NVIC_EnableIRQ+0x38>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	095b      	lsrs	r3, r3, #5
 8001110:	2001      	movs	r0, #1
 8001112:	fa00 f202 	lsl.w	r2, r0, r2
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000e100 	.word	0xe000e100

0800112c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	2b00      	cmp	r3, #0
 800113e:	db0a      	blt.n	8001156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	490c      	ldr	r1, [pc, #48]	; (8001178 <__NVIC_SetPriority+0x4c>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	0112      	lsls	r2, r2, #4
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	440b      	add	r3, r1
 8001150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001154:	e00a      	b.n	800116c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4908      	ldr	r1, [pc, #32]	; (800117c <__NVIC_SetPriority+0x50>)
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	3b04      	subs	r3, #4
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	440b      	add	r3, r1
 800116a:	761a      	strb	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000e100 	.word	0xe000e100
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800118a:	695a      	ldr	r2, [r3, #20]
 800118c:	4907      	ldr	r1, [pc, #28]	; (80011ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4313      	orrs	r3, r2
 8001192:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001196:	695a      	ldr	r2, [r3, #20]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4013      	ands	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800119e:	68fb      	ldr	r3, [r7, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	40021000 	.word	0x40021000

080011b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80011b4:	2001      	movs	r0, #1
 80011b6:	f7ff ffe3 	bl	8001180 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, 0);
 80011ba:	2100      	movs	r1, #0
 80011bc:	2010      	movs	r0, #16
 80011be:	f7ff ffb5 	bl	800112c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80011c2:	2010      	movs	r0, #16
 80011c4:	f7ff ff94 	bl	80010f0 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, 0);
 80011c8:	2100      	movs	r1, #0
 80011ca:	2011      	movs	r0, #17
 80011cc:	f7ff ffae 	bl	800112c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80011d0:	2011      	movs	r0, #17
 80011d2:	f7ff ff8d 	bl	80010f0 <__NVIC_EnableIRQ>

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <LL_AHB1_GRP1_EnableClock>:
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011e6:	695a      	ldr	r2, [r3, #20]
 80011e8:	4907      	ldr	r1, [pc, #28]	; (8001208 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011f2:	695a      	ldr	r2, [r3, #20]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4013      	ands	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011fa:	68fb      	ldr	r3, [r7, #12]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	40021000 	.word	0x40021000

0800120c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa93 f3a3 	rbit	r3, r3
 8001226:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	fab3 f383 	clz	r3, r3
 800122e:	b2db      	uxtb	r3, r3
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2103      	movs	r1, #3
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	401a      	ands	r2, r3
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	fa93 f3a3 	rbit	r3, r3
 8001246:	61bb      	str	r3, [r7, #24]
  return result;
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	fab3 f383 	clz	r3, r3
 800124e:	b2db      	uxtb	r3, r3
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	fa01 f303 	lsl.w	r3, r1, r3
 8001258:	431a      	orrs	r2, r3
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	601a      	str	r2, [r3, #0]
}
 800125e:	bf00      	nop
 8001260:	3724      	adds	r7, #36	; 0x24
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	619a      	str	r2, [r3, #24]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */

  /* LED pin configuration */
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_3, LL_GPIO_MODE_OUTPUT);
 80012aa:	2201      	movs	r2, #1
 80012ac:	2108      	movs	r1, #8
 80012ae:	4817      	ldr	r0, [pc, #92]	; (800130c <MX_GPIO_Init+0x68>)
 80012b0:	f7ff ffac 	bl	800120c <LL_GPIO_SetPinMode>
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_3);
 80012b4:	2108      	movs	r1, #8
 80012b6:	4815      	ldr	r0, [pc, #84]	; (800130c <MX_GPIO_Init+0x68>)
 80012b8:	f7ff ffd7 	bl	800126a <LL_GPIO_SetOutputPin>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	463b      	mov	r3, r7
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]
 80012ca:	615a      	str	r2, [r3, #20]

    /* GPIO Ports Clock Enable */
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80012cc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80012d0:	f7ff ff84 	bl	80011dc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80012d4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80012d8:	f7ff ff80 	bl	80011dc <LL_AHB1_GRP1_EnableClock>

	/**/
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 80012dc:	2108      	movs	r1, #8
 80012de:	480b      	ldr	r0, [pc, #44]	; (800130c <MX_GPIO_Init+0x68>)
 80012e0:	f7ff ffd1 	bl	8001286 <LL_GPIO_ResetOutputPin>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80012e4:	2308      	movs	r3, #8
 80012e6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012e8:	2301      	movs	r3, #1
 80012ea:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f8:	463b      	mov	r3, r7
 80012fa:	4619      	mov	r1, r3
 80012fc:	4803      	ldr	r0, [pc, #12]	; (800130c <MX_GPIO_Init+0x68>)
 80012fe:	f001 fe47 	bl	8002f90 <LL_GPIO_Init>

}
 8001302:	bf00      	nop
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	48000400 	.word	0x48000400

08001310 <__NVIC_GetPriorityGrouping>:
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001314:	4b04      	ldr	r3, [pc, #16]	; (8001328 <__NVIC_GetPriorityGrouping+0x18>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	0a1b      	lsrs	r3, r3, #8
 800131a:	f003 0307 	and.w	r3, r3, #7
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_EnableIRQ>:
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	2b00      	cmp	r3, #0
 800133c:	db0b      	blt.n	8001356 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	f003 021f 	and.w	r2, r3, #31
 8001344:	4907      	ldr	r1, [pc, #28]	; (8001364 <__NVIC_EnableIRQ+0x38>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	2001      	movs	r0, #1
 800134e:	fa00 f202 	lsl.w	r2, r0, r2
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000e100 	.word	0xe000e100

08001368 <__NVIC_SetPriority>:
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	2b00      	cmp	r3, #0
 800137a:	db0a      	blt.n	8001392 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	490c      	ldr	r1, [pc, #48]	; (80013b4 <__NVIC_SetPriority+0x4c>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	0112      	lsls	r2, r2, #4
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	440b      	add	r3, r1
 800138c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001390:	e00a      	b.n	80013a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4908      	ldr	r1, [pc, #32]	; (80013b8 <__NVIC_SetPriority+0x50>)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	3b04      	subs	r3, #4
 80013a0:	0112      	lsls	r2, r2, #4
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	440b      	add	r3, r1
 80013a6:	761a      	strb	r2, [r3, #24]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000e100 	.word	0xe000e100
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b089      	sub	sp, #36	; 0x24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f1c3 0307 	rsb	r3, r3, #7
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	bf28      	it	cs
 80013da:	2304      	movcs	r3, #4
 80013dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3304      	adds	r3, #4
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	d902      	bls.n	80013ec <NVIC_EncodePriority+0x30>
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3b03      	subs	r3, #3
 80013ea:	e000      	b.n	80013ee <NVIC_EncodePriority+0x32>
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	f04f 32ff 	mov.w	r2, #4294967295
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	401a      	ands	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001404:	f04f 31ff 	mov.w	r1, #4294967295
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa01 f303 	lsl.w	r3, r1, r3
 800140e:	43d9      	mvns	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	4313      	orrs	r3, r2
         );
}
 8001416:	4618      	mov	r0, r3
 8001418:	3724      	adds	r7, #36	; 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f043 0201 	orr.w	r2, r3, #1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	601a      	str	r2, [r3, #0]
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	601a      	str	r2, [r3, #0]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	601a      	str	r2, [r3, #0]
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8001482:	b480      	push	{r7}
 8001484:	b085      	sub	sp, #20
 8001486:	af00      	add	r7, sp, #0
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001496:	f023 0306 	bic.w	r3, r3, #6
 800149a:	68b9      	ldr	r1, [r7, #8]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	430a      	orrs	r2, r1
 80014a0:	431a      	orrs	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	60da      	str	r2, [r3, #12]
}
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	60da      	str	r2, [r3, #12]
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f043 0204 	orr.w	r2, r3, #4
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	601a      	str	r2, [r3, #0]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f023 0204 	bic.w	r2, r3, #4
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	601a      	str	r2, [r3, #0]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(const I2C_TypeDef *I2Cx)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b02      	cmp	r3, #2
 8001524:	d101      	bne.n	800152a <LL_I2C_IsActiveFlag_TXIS+0x18>
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <LL_I2C_IsActiveFlag_TXIS+0x1a>
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b04      	cmp	r3, #4
 800154a:	d101      	bne.n	8001550 <LL_I2C_IsActiveFlag_RXNE+0x18>
 800154c:	2301      	movs	r3, #1
 800154e:	e000      	b.n	8001552 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(const I2C_TypeDef *I2Cx)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	f003 0320 	and.w	r3, r3, #32
 800156e:	2b20      	cmp	r3, #32
 8001570:	d101      	bne.n	8001576 <LL_I2C_IsActiveFlag_STOP+0x18>
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <LL_I2C_ClearFlag_NACK>:
  * @rmtoll ICR          NACKCF        LL_I2C_ClearFlag_NACK
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_NACK(I2C_TypeDef *I2Cx)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	f043 0210 	orr.w	r2, r3, #16
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	61da      	str	r2, [r3, #28]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	f043 0220 	orr.w	r2, r3, #32
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	61da      	str	r2, [r3, #28]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	605a      	str	r2, [r3, #4]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	0d5b      	lsrs	r3, r3, #21
 80015fa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <LL_I2C_HandleTransfer+0x48>)
 8001600:	430b      	orrs	r3, r1
 8001602:	43db      	mvns	r3, r3
 8001604:	401a      	ands	r2, r3
 8001606:	68b9      	ldr	r1, [r7, #8]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4319      	orrs	r1, r3
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	041b      	lsls	r3, r3, #16
 8001610:	4319      	orrs	r1, r3
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	4319      	orrs	r1, r3
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	430b      	orrs	r3, r1
 800161a:	431a      	orrs	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	03ff7bff 	.word	0x03ff7bff

08001630 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	b2db      	uxtb	r3, r3
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	460b      	mov	r3, r1
 8001654:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001656:	78fa      	ldrb	r2, [r7, #3]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_AHB1_GRP1_EnableClock>:
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001672:	695a      	ldr	r2, [r3, #20]
 8001674:	4907      	ldr	r1, [pc, #28]	; (8001694 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4313      	orrs	r3, r2
 800167a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800167e:	695a      	ldr	r2, [r3, #20]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4013      	ands	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001686:	68fb      	ldr	r3, [r7, #12]
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	40021000 	.word	0x40021000

08001698 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80016a2:	69da      	ldr	r2, [r3, #28]
 80016a4:	4907      	ldr	r1, [pc, #28]	; (80016c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80016ae:	69da      	ldr	r2, [r3, #28]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4013      	ands	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016b6:	68fb      	ldr	r3, [r7, #12]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	40021000 	.word	0x40021000

080016c8 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08e      	sub	sp, #56	; 0x38
 80016cc:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80016ce:	f107 031c 	add.w	r3, r7, #28
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
 80016dc:	611a      	str	r2, [r3, #16]
 80016de:	615a      	str	r2, [r3, #20]
 80016e0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
 80016f0:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80016f2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80016f6:	f7ff ffb7 	bl	8001668 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80016fa:	23c0      	movs	r3, #192	; 0xc0
 80016fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80016fe:	2302      	movs	r3, #2
 8001700:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001702:	2303      	movs	r3, #3
 8001704:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001706:	2301      	movs	r3, #1
 8001708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800170a:	2301      	movs	r3, #1
 800170c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800170e:	2304      	movs	r3, #4
 8001710:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	4619      	mov	r1, r3
 8001716:	4821      	ldr	r0, [pc, #132]	; (800179c <MX_I2C1_Init+0xd4>)
 8001718:	f001 fc3a 	bl	8002f90 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800171c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001720:	f7ff ffba 	bl	8001698 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001724:	f7ff fdf4 	bl	8001310 <__NVIC_GetPriorityGrouping>
 8001728:	4603      	mov	r3, r0
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fe44 	bl	80013bc <NVIC_EncodePriority>
 8001734:	4603      	mov	r3, r0
 8001736:	4619      	mov	r1, r3
 8001738:	201f      	movs	r0, #31
 800173a:	f7ff fe15 	bl	8001368 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800173e:	201f      	movs	r0, #31
 8001740:	f7ff fdf4 	bl	800132c <__NVIC_EnableIRQ>

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001744:	4816      	ldr	r0, [pc, #88]	; (80017a0 <MX_I2C1_Init+0xd8>)
 8001746:	f7ff ff3d 	bl	80015c4 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 800174a:	4815      	ldr	r0, [pc, #84]	; (80017a0 <MX_I2C1_Init+0xd8>)
 800174c:	f7ff feb1 	bl	80014b2 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001750:	4813      	ldr	r0, [pc, #76]	; (80017a0 <MX_I2C1_Init+0xd8>)
 8001752:	f7ff fe86 	bl	8001462 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001756:	4812      	ldr	r0, [pc, #72]	; (80017a0 <MX_I2C1_Init+0xd8>)
 8001758:	f7ff fe73 	bl	8001442 <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8001760:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <MX_I2C1_Init+0xdc>)
 8001762:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 800176c:	2302      	movs	r3, #2
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001770:	2300      	movs	r3, #0
 8001772:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001774:	2300      	movs	r3, #0
 8001776:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001778:	f107 031c 	add.w	r3, r7, #28
 800177c:	4619      	mov	r1, r3
 800177e:	4808      	ldr	r0, [pc, #32]	; (80017a0 <MX_I2C1_Init+0xd8>)
 8001780:	f001 fd19 	bl	80031b6 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001784:	2200      	movs	r2, #0
 8001786:	2100      	movs	r1, #0
 8001788:	4805      	ldr	r0, [pc, #20]	; (80017a0 <MX_I2C1_Init+0xd8>)
 800178a:	f7ff fe7a 	bl	8001482 <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 800178e:	4804      	ldr	r0, [pc, #16]	; (80017a0 <MX_I2C1_Init+0xd8>)
 8001790:	f7ff fe47 	bl	8001422 <LL_I2C_Enable>
}
 8001794:	bf00      	nop
 8001796:	3738      	adds	r7, #56	; 0x38
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	48000400 	.word	0x48000400
 80017a0:	40005400 	.word	0x40005400
 80017a4:	2000090e 	.word	0x2000090e

080017a8 <read_multi_byte>:
//		i2c_rx_data = LL_I2C_ReceiveData8(I2C1);
//	}
//}

void read_multi_byte(uint8_t *data, uint8_t len, uint8_t slave_address, uint8_t register_address)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	4608      	mov	r0, r1
 80017b2:	4611      	mov	r1, r2
 80017b4:	461a      	mov	r2, r3
 80017b6:	4603      	mov	r3, r0
 80017b8:	70fb      	strb	r3, [r7, #3]
 80017ba:	460b      	mov	r3, r1
 80017bc:	70bb      	strb	r3, [r7, #2]
 80017be:	4613      	mov	r3, r2
 80017c0:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = data;
 80017c2:	4a27      	ldr	r2, [pc, #156]	; (8001860 <read_multi_byte+0xb8>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6013      	str	r3, [r2, #0]

	LL_I2C_EnableIT_RX(I2C1);
 80017c8:	4826      	ldr	r0, [pc, #152]	; (8001864 <read_multi_byte+0xbc>)
 80017ca:	f7ff fe82 	bl	80014d2 <LL_I2C_EnableIT_RX>
		// Initialize communication
	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80017ce:	78b9      	ldrb	r1, [r7, #2]
 80017d0:	4b25      	ldr	r3, [pc, #148]	; (8001868 <read_multi_byte+0xc0>)
 80017d2:	9301      	str	r3, [sp, #4]
 80017d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2301      	movs	r3, #1
 80017dc:	2200      	movs	r2, #0
 80017de:	4821      	ldr	r0, [pc, #132]	; (8001864 <read_multi_byte+0xbc>)
 80017e0:	f7ff ff00 	bl	80015e4 <LL_I2C_HandleTransfer>
	// Send register address
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80017e4:	e00a      	b.n	80017fc <read_multi_byte+0x54>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 80017e6:	481f      	ldr	r0, [pc, #124]	; (8001864 <read_multi_byte+0xbc>)
 80017e8:	f7ff fe93 	bl	8001512 <LL_I2C_IsActiveFlag_TXIS>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d004      	beq.n	80017fc <read_multi_byte+0x54>
		{
			LL_I2C_TransmitData8(I2C1, register_address);
 80017f2:	787b      	ldrb	r3, [r7, #1]
 80017f4:	4619      	mov	r1, r3
 80017f6:	481b      	ldr	r0, [pc, #108]	; (8001864 <read_multi_byte+0xbc>)
 80017f8:	f7ff ff27 	bl	800164a <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80017fc:	4819      	ldr	r0, [pc, #100]	; (8001864 <read_multi_byte+0xbc>)
 80017fe:	f7ff feae 	bl	800155e <LL_I2C_IsActiveFlag_STOP>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0ee      	beq.n	80017e6 <read_multi_byte+0x3e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001808:	4816      	ldr	r0, [pc, #88]	; (8001864 <read_multi_byte+0xbc>)
 800180a:	f7ff fecb 	bl	80015a4 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){};
 800180e:	bf00      	nop
 8001810:	4814      	ldr	r0, [pc, #80]	; (8001864 <read_multi_byte+0xbc>)
 8001812:	f7ff fea4 	bl	800155e <LL_I2C_IsActiveFlag_STOP>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1f9      	bne.n	8001810 <read_multi_byte+0x68>

	// Receive data from slave device
	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 800181c:	78b9      	ldrb	r1, [r7, #2]
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <read_multi_byte+0xc4>)
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	2301      	movs	r3, #1
 800182a:	2200      	movs	r2, #0
 800182c:	480d      	ldr	r0, [pc, #52]	; (8001864 <read_multi_byte+0xbc>)
 800182e:	f7ff fed9 	bl	80015e4 <LL_I2C_HandleTransfer>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8001832:	bf00      	nop
 8001834:	480b      	ldr	r0, [pc, #44]	; (8001864 <read_multi_byte+0xbc>)
 8001836:	f7ff fe92 	bl	800155e <LL_I2C_IsActiveFlag_STOP>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f9      	beq.n	8001834 <read_multi_byte+0x8c>

	//End of transfer
	LL_I2C_DisableIT_RX(I2C1);
 8001840:	4808      	ldr	r0, [pc, #32]	; (8001864 <read_multi_byte+0xbc>)
 8001842:	f7ff fe56 	bl	80014f2 <LL_I2C_DisableIT_RX>
	LL_I2C_ClearFlag_STOP(I2C1);
 8001846:	4807      	ldr	r0, [pc, #28]	; (8001864 <read_multi_byte+0xbc>)
 8001848:	f7ff feac 	bl	80015a4 <LL_I2C_ClearFlag_STOP>
	LL_I2C_ClearFlag_NACK(I2C1);
 800184c:	4805      	ldr	r0, [pc, #20]	; (8001864 <read_multi_byte+0xbc>)
 800184e:	f7ff fe99 	bl	8001584 <LL_I2C_ClearFlag_NACK>
	ubReceiveIndex = 0;
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <read_multi_byte+0xc8>)
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]


}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	2000029c 	.word	0x2000029c
 8001864:	40005400 	.word	0x40005400
 8001868:	80002000 	.word	0x80002000
 800186c:	80002400 	.word	0x80002400
 8001870:	200002a0 	.word	0x200002a0

08001874 <write_multi_byte>:
void write_multi_byte(uint8_t *data, uint8_t len, uint8_t slave_address, uint8_t register_address)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af02      	add	r7, sp, #8
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	4608      	mov	r0, r1
 800187e:	4611      	mov	r1, r2
 8001880:	461a      	mov	r2, r3
 8001882:	4603      	mov	r3, r0
 8001884:	70fb      	strb	r3, [r7, #3]
 8001886:	460b      	mov	r3, r1
 8001888:	70bb      	strb	r3, [r7, #2]
 800188a:	4613      	mov	r3, r2
 800188c:	707b      	strb	r3, [r7, #1]
	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 800188e:	78b9      	ldrb	r1, [r7, #2]
 8001890:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <write_multi_byte+0x88>)
 8001892:	9301      	str	r3, [sp, #4]
 8001894:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	2302      	movs	r3, #2
 800189c:	2200      	movs	r2, #0
 800189e:	4818      	ldr	r0, [pc, #96]	; (8001900 <write_multi_byte+0x8c>)
 80018a0:	f7ff fea0 	bl	80015e4 <LL_I2C_HandleTransfer>

		LL_I2C_TransmitData8(I2C1, register_address);
 80018a4:	787b      	ldrb	r3, [r7, #1]
 80018a6:	4619      	mov	r1, r3
 80018a8:	4815      	ldr	r0, [pc, #84]	; (8001900 <write_multi_byte+0x8c>)
 80018aa:	f7ff fece 	bl	800164a <LL_I2C_TransmitData8>

		while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80018ae:	e017      	b.n	80018e0 <write_multi_byte+0x6c>
		{
			for (size_t i = 0; i < len;i++) {
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	e010      	b.n	80018d8 <write_multi_byte+0x64>
				if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 80018b6:	4812      	ldr	r0, [pc, #72]	; (8001900 <write_multi_byte+0x8c>)
 80018b8:	f7ff fe2b 	bl	8001512 <LL_I2C_IsActiveFlag_TXIS>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d007      	beq.n	80018d2 <write_multi_byte+0x5e>
				{
					LL_I2C_TransmitData8(I2C1, data[i]);
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	4619      	mov	r1, r3
 80018cc:	480c      	ldr	r0, [pc, #48]	; (8001900 <write_multi_byte+0x8c>)
 80018ce:	f7ff febc 	bl	800164a <LL_I2C_TransmitData8>
			for (size_t i = 0; i < len;i++) {
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	3301      	adds	r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d3ea      	bcc.n	80018b6 <write_multi_byte+0x42>
		while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80018e0:	4807      	ldr	r0, [pc, #28]	; (8001900 <write_multi_byte+0x8c>)
 80018e2:	f7ff fe3c 	bl	800155e <LL_I2C_IsActiveFlag_STOP>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0e1      	beq.n	80018b0 <write_multi_byte+0x3c>
				}
			}
		}
		LL_I2C_ClearFlag_STOP(I2C1);
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <write_multi_byte+0x8c>)
 80018ee:	f7ff fe59 	bl	80015a4 <LL_I2C_ClearFlag_STOP>
}
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	80002000 	.word	0x80002000
 8001900:	40005400 	.word	0x40005400

08001904 <I2C_IRQHandler>:

void I2C_IRQHandler(void)
{
 8001904:	b598      	push	{r3, r4, r7, lr}
 8001906:	af00      	add	r7, sp, #0
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8001908:	4810      	ldr	r0, [pc, #64]	; (800194c <I2C_IRQHandler+0x48>)
 800190a:	f7ff fe15 	bl	8001538 <LL_I2C_IsActiveFlag_RXNE>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d019      	beq.n	8001948 <I2C_IRQHandler+0x44>
	{
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <I2C_IRQHandler+0x4c>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <I2C_IRQHandler+0x50>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	1c59      	adds	r1, r3, #1
 8001920:	b2c8      	uxtb	r0, r1
 8001922:	490c      	ldr	r1, [pc, #48]	; (8001954 <I2C_IRQHandler+0x50>)
 8001924:	7008      	strb	r0, [r1, #0]
 8001926:	18d4      	adds	r4, r2, r3
 8001928:	4808      	ldr	r0, [pc, #32]	; (800194c <I2C_IRQHandler+0x48>)
 800192a:	f7ff fe81 	bl	8001630 <LL_I2C_ReceiveData8>
 800192e:	4603      	mov	r3, r0
 8001930:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex>19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <I2C_IRQHandler+0x50>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b13      	cmp	r3, #19
 800193a:	d903      	bls.n	8001944 <I2C_IRQHandler+0x40>
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <I2C_IRQHandler+0x50>)
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
	}
}
 8001942:	e001      	b.n	8001948 <I2C_IRQHandler+0x44>
		(ubReceiveIndex>19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <I2C_IRQHandler+0x50>)
 8001946:	781b      	ldrb	r3, [r3, #0]
}
 8001948:	bf00      	nop
 800194a:	bd98      	pop	{r3, r4, r7, pc}
 800194c:	40005400 	.word	0x40005400
 8001950:	2000029c 	.word	0x2000029c
 8001954:	200002a0 	.word	0x200002a0

08001958 <__NVIC_SetPriorityGrouping>:
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001974:	4013      	ands	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198a:	4a04      	ldr	r2, [pc, #16]	; (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	60d3      	str	r3, [r2, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <LL_RCC_HSI_Enable+0x1c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a04      	ldr	r2, [pc, #16]	; (80019bc <LL_RCC_HSI_Enable+0x1c>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	6013      	str	r3, [r2, #0]
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000

080019c0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <LL_RCC_HSI_IsReady+0x20>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	bf0c      	ite	eq
 80019d0:	2301      	moveq	r3, #1
 80019d2:	2300      	movne	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	40021000 	.word	0x40021000

080019e4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4904      	ldr	r1, [pc, #16]	; (8001a0c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	600b      	str	r3, [r1, #0]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000

08001a10 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <LL_RCC_SetSysClkSource+0x24>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f023 0203 	bic.w	r2, r3, #3
 8001a20:	4904      	ldr	r1, [pc, #16]	; (8001a34 <LL_RCC_SetSysClkSource+0x24>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	40021000 	.word	0x40021000

08001a38 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <LL_RCC_GetSysClkSource+0x18>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 030c 	and.w	r3, r3, #12
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40021000 	.word	0x40021000

08001a54 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <LL_RCC_SetAHBPrescaler+0x24>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a64:	4904      	ldr	r1, [pc, #16]	; (8001a78 <LL_RCC_SetAHBPrescaler+0x24>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	40021000 	.word	0x40021000

08001a7c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a8c:	4904      	ldr	r1, [pc, #16]	; (8001aa0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ab4:	4904      	ldr	r1, [pc, #16]	; (8001ac8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	604b      	str	r3, [r1, #4]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	40021000 	.word	0x40021000

08001acc <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <LL_RCC_SetI2CClockSource+0x2c>)
 8001ad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	0e1b      	lsrs	r3, r3, #24
 8001adc:	43db      	mvns	r3, r3
 8001ade:	401a      	ands	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001ae6:	4904      	ldr	r1, [pc, #16]	; (8001af8 <LL_RCC_SetI2CClockSource+0x2c>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	40021000 	.word	0x40021000

08001afc <LL_APB1_GRP1_EnableClock>:
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b06:	69da      	ldr	r2, [r3, #28]
 8001b08:	4907      	ldr	r1, [pc, #28]	; (8001b28 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b12:	69da      	ldr	r2, [r3, #28]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4013      	ands	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	40021000 	.word	0x40021000

08001b2c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b36:	699a      	ldr	r2, [r3, #24]
 8001b38:	4907      	ldr	r1, [pc, #28]	; (8001b58 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b42:	699a      	ldr	r2, [r3, #24]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4013      	ands	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	40021000 	.word	0x40021000

08001b5c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <LL_FLASH_SetLatency+0x24>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f023 0207 	bic.w	r2, r3, #7
 8001b6c:	4904      	ldr	r1, [pc, #16]	; (8001b80 <LL_FLASH_SetLatency+0x24>)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	40022000 	.word	0x40022000

08001b84 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001b88:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <LL_FLASH_GetLatency+0x18>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40022000 	.word	0x40022000

08001ba0 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d106      	bne.n	8001bbc <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <LL_SYSTICK_SetClkSource+0x34>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a08      	ldr	r2, [pc, #32]	; (8001bd4 <LL_SYSTICK_SetClkSource+0x34>)
 8001bb4:	f043 0304 	orr.w	r3, r3, #4
 8001bb8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8001bba:	e005      	b.n	8001bc8 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <LL_SYSTICK_SetClkSource+0x34>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <LL_SYSTICK_SetClkSource+0x34>)
 8001bc2:	f023 0304 	bic.w	r3, r3, #4
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000e010 	.word	0xe000e010

08001bd8 <main>:
char statusMessage[128];
float temp,humid,pressure,altitude;


int main(void)
{
 8001bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bdc:	b088      	sub	sp, #32
 8001bde:	af06      	add	r7, sp, #24
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001be0:	2001      	movs	r0, #1
 8001be2:	f7ff ffa3 	bl	8001b2c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001be6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001bea:	f7ff ff87 	bl	8001afc <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bee:	2003      	movs	r0, #3
 8001bf0:	f7ff feb2 	bl	8001958 <__NVIC_SetPriorityGrouping>

  SystemClock_Config();
 8001bf4:	f000 f89c 	bl	8001d30 <SystemClock_Config>

  MX_GPIO_Init();
 8001bf8:	f7ff fb54 	bl	80012a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001bfc:	f7ff fd64 	bl	80016c8 <MX_I2C1_Init>
  MX_DMA_Init();
 8001c00:	f7ff fad6 	bl	80011b0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001c04:	f000 ff32 	bl	8002a6c <MX_USART2_UART_Init>

  USART2_RegisterCallback(proccesDmaData);
 8001c08:	483e      	ldr	r0, [pc, #248]	; (8001d04 <main+0x12c>)
 8001c0a:	f000 ff1d 	bl	8002a48 <USART2_RegisterCallback>
  USART2_PutBuffer("start", strlen("start"));
 8001c0e:	2105      	movs	r1, #5
 8001c10:	483d      	ldr	r0, [pc, #244]	; (8001d08 <main+0x130>)
 8001c12:	f001 f80d 	bl	8002c30 <USART2_PutBuffer>
  uint8_t hts_good = hts221_init();
 8001c16:	f7ff f829 	bl	8000c6c <hts221_init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  uint8_t lp_good = lps25hb_init();
 8001c1e:	f7ff f9c3 	bl	8000fa8 <lps25hb_init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	71bb      	strb	r3, [r7, #6]

  uint8_t *buffer;
  uint8_t len = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	717b      	strb	r3, [r7, #5]

  if(hts_good)
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d004      	beq.n	8001c3a <main+0x62>
  {
	  USART2_PutBuffer("HTS good", strlen("HTS good"));
 8001c30:	2108      	movs	r1, #8
 8001c32:	4836      	ldr	r0, [pc, #216]	; (8001d0c <main+0x134>)
 8001c34:	f000 fffc 	bl	8002c30 <USART2_PutBuffer>
 8001c38:	e003      	b.n	8001c42 <main+0x6a>
  }
  else
  {
	  USART2_PutBuffer("HTS bad", strlen("HTS bad"));
 8001c3a:	2107      	movs	r1, #7
 8001c3c:	4834      	ldr	r0, [pc, #208]	; (8001d10 <main+0x138>)
 8001c3e:	f000 fff7 	bl	8002c30 <USART2_PutBuffer>
  }

  if(lp_good)
 8001c42:	79bb      	ldrb	r3, [r7, #6]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d004      	beq.n	8001c52 <main+0x7a>
  {
	  USART2_PutBuffer("LP good", strlen("LP good"));
 8001c48:	2107      	movs	r1, #7
 8001c4a:	4832      	ldr	r0, [pc, #200]	; (8001d14 <main+0x13c>)
 8001c4c:	f000 fff0 	bl	8002c30 <USART2_PutBuffer>
 8001c50:	e003      	b.n	8001c5a <main+0x82>

  }
  else
  {
	  USART2_PutBuffer("LP bad", strlen("LP bad"));
 8001c52:	2106      	movs	r1, #6
 8001c54:	4830      	ldr	r0, [pc, #192]	; (8001d18 <main+0x140>)
 8001c56:	f000 ffeb 	bl	8002c30 <USART2_PutBuffer>
//	  {
//		  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_3);
//	  }


	  temp = hts221_read_temp();
 8001c5a:	f7ff f8b3 	bl	8000dc4 <hts221_read_temp>
 8001c5e:	eef0 7a40 	vmov.f32	s15, s0
 8001c62:	4b2e      	ldr	r3, [pc, #184]	; (8001d1c <main+0x144>)
 8001c64:	edc3 7a00 	vstr	s15, [r3]
	  humid = hts221_read_humid();
 8001c68:	f7ff f8e4 	bl	8000e34 <hts221_read_humid>
 8001c6c:	eef0 7a40 	vmov.f32	s15, s0
 8001c70:	4b2b      	ldr	r3, [pc, #172]	; (8001d20 <main+0x148>)
 8001c72:	edc3 7a00 	vstr	s15, [r3]
	  pressure = lps25hb_read_pressure();
 8001c76:	f7ff f9c1 	bl	8000ffc <lps25hb_read_pressure>
 8001c7a:	eef0 7a40 	vmov.f32	s15, s0
 8001c7e:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <main+0x14c>)
 8001c80:	edc3 7a00 	vstr	s15, [r3]
	  altitude = lps25hb_read_altitude();
 8001c84:	f7ff f9e8 	bl	8001058 <lps25hb_read_altitude>
 8001c88:	eef0 7a40 	vmov.f32	s15, s0
 8001c8c:	4b26      	ldr	r3, [pc, #152]	; (8001d28 <main+0x150>)
 8001c8e:	edc3 7a00 	vstr	s15, [r3]


	  buffer = malloc(32*sizeof(uint8_t));
 8001c92:	2020      	movs	r0, #32
 8001c94:	f001 fd86 	bl	80037a4 <malloc>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	603b      	str	r3, [r7, #0]
	  len = sprintf(buffer, "%05.1f,%02.0f,%07.2f,%06.2f\n", temp, humid, pressure, altitude);
 8001c9c:	4b1f      	ldr	r3, [pc, #124]	; (8001d1c <main+0x144>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fc51 	bl	8000548 <__aeabi_f2d>
 8001ca6:	4682      	mov	sl, r0
 8001ca8:	468b      	mov	fp, r1
 8001caa:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <main+0x148>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fc4a 	bl	8000548 <__aeabi_f2d>
 8001cb4:	4604      	mov	r4, r0
 8001cb6:	460d      	mov	r5, r1
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <main+0x14c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fc43 	bl	8000548 <__aeabi_f2d>
 8001cc2:	4680      	mov	r8, r0
 8001cc4:	4689      	mov	r9, r1
 8001cc6:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <main+0x150>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fc3c 	bl	8000548 <__aeabi_f2d>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001cd8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001cdc:	e9cd 4500 	strd	r4, r5, [sp]
 8001ce0:	4652      	mov	r2, sl
 8001ce2:	465b      	mov	r3, fp
 8001ce4:	4911      	ldr	r1, [pc, #68]	; (8001d2c <main+0x154>)
 8001ce6:	6838      	ldr	r0, [r7, #0]
 8001ce8:	f002 fb40 	bl	800436c <siprintf>
 8001cec:	4603      	mov	r3, r0
 8001cee:	717b      	strb	r3, [r7, #5]
	  USART2_PutBuffer(buffer,len);
 8001cf0:	797b      	ldrb	r3, [r7, #5]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	6838      	ldr	r0, [r7, #0]
 8001cf6:	f000 ff9b 	bl	8002c30 <USART2_PutBuffer>
	  free(buffer);
 8001cfa:	6838      	ldr	r0, [r7, #0]
 8001cfc:	f001 fd5a 	bl	80037b4 <free>
  {
 8001d00:	e7ab      	b.n	8001c5a <main+0x82>
 8001d02:	bf00      	nop
 8001d04:	08001da5 	.word	0x08001da5
 8001d08:	08007348 	.word	0x08007348
 8001d0c:	08007350 	.word	0x08007350
 8001d10:	0800735c 	.word	0x0800735c
 8001d14:	08007364 	.word	0x08007364
 8001d18:	0800736c 	.word	0x0800736c
 8001d1c:	200002d8 	.word	0x200002d8
 8001d20:	200002dc 	.word	0x200002dc
 8001d24:	200002e0 	.word	0x200002e0
 8001d28:	200002e4 	.word	0x200002e4
 8001d2c:	08007374 	.word	0x08007374

08001d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001d34:	2000      	movs	r0, #0
 8001d36:	f7ff ff11 	bl	8001b5c <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8001d3a:	f7ff ff23 	bl	8001b84 <LL_FLASH_GetLatency>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <SystemClock_Config+0x18>
  {
  Error_Handler();
 8001d44:	f000 f8cc 	bl	8001ee0 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8001d48:	f7ff fe2a 	bl	80019a0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001d4c:	bf00      	nop
 8001d4e:	f7ff fe37 	bl	80019c0 <LL_RCC_HSI_IsReady>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d1fa      	bne.n	8001d4e <SystemClock_Config+0x1e>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001d58:	2010      	movs	r0, #16
 8001d5a:	f7ff fe43 	bl	80019e4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f7ff fe78 	bl	8001a54 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001d64:	2000      	movs	r0, #0
 8001d66:	f7ff fe89 	bl	8001a7c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f7ff fe9a 	bl	8001aa4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001d70:	2000      	movs	r0, #0
 8001d72:	f7ff fe4d 	bl	8001a10 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001d76:	bf00      	nop
 8001d78:	f7ff fe5e 	bl	8001a38 <LL_RCC_GetSysClkSource>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1fa      	bne.n	8001d78 <SystemClock_Config+0x48>
  {

  }
  LL_Init1msTick(8000000);
 8001d82:	4807      	ldr	r0, [pc, #28]	; (8001da0 <SystemClock_Config+0x70>)
 8001d84:	f001 fcf0 	bl	8003768 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8001d88:	2004      	movs	r0, #4
 8001d8a:	f7ff ff09 	bl	8001ba0 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8001d8e:	4804      	ldr	r0, [pc, #16]	; (8001da0 <SystemClock_Config+0x70>)
 8001d90:	f001 fcf8 	bl	8003784 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001d94:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001d98:	f7ff fe98 	bl	8001acc <LL_RCC_SetI2CClockSource>
}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	007a1200 	.word	0x007a1200

08001da4 <proccesDmaData>:

void proccesDmaData(uint8_t sign)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af02      	add	r7, sp, #8
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
	if(transimissionEnabled)
 8001dae:	4b45      	ldr	r3, [pc, #276]	; (8001ec4 <proccesDmaData+0x120>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d064      	beq.n	8001e80 <proccesDmaData+0xdc>
		{
			if(sign >= 'a' && sign <= 'z')
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	2b60      	cmp	r3, #96	; 0x60
 8001dba:	d916      	bls.n	8001dea <proccesDmaData+0x46>
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	2b7a      	cmp	r3, #122	; 0x7a
 8001dc0:	d813      	bhi.n	8001dea <proccesDmaData+0x46>
			{
				thisLetterCount.small_letter++;
 8001dc2:	4b41      	ldr	r3, [pc, #260]	; (8001ec8 <proccesDmaData+0x124>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4b3f      	ldr	r3, [pc, #252]	; (8001ec8 <proccesDmaData+0x124>)
 8001dcc:	701a      	strb	r2, [r3, #0]
				processedSignsCount++;
 8001dce:	4b3f      	ldr	r3, [pc, #252]	; (8001ecc <proccesDmaData+0x128>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	4a3d      	ldr	r2, [pc, #244]	; (8001ecc <proccesDmaData+0x128>)
 8001dd6:	6013      	str	r3, [r2, #0]
				messageBuffer[messageBufferIndex++] = sign;
 8001dd8:	4b3d      	ldr	r3, [pc, #244]	; (8001ed0 <proccesDmaData+0x12c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	1c5a      	adds	r2, r3, #1
 8001dde:	493c      	ldr	r1, [pc, #240]	; (8001ed0 <proccesDmaData+0x12c>)
 8001de0:	600a      	str	r2, [r1, #0]
 8001de2:	493c      	ldr	r1, [pc, #240]	; (8001ed4 <proccesDmaData+0x130>)
 8001de4:	79fa      	ldrb	r2, [r7, #7]
 8001de6:	54ca      	strb	r2, [r1, r3]
 8001de8:	e04a      	b.n	8001e80 <proccesDmaData+0xdc>
			}
			else if(sign >= 'A' && sign <= 'Z')
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	2b40      	cmp	r3, #64	; 0x40
 8001dee:	d916      	bls.n	8001e1e <proccesDmaData+0x7a>
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	2b5a      	cmp	r3, #90	; 0x5a
 8001df4:	d813      	bhi.n	8001e1e <proccesDmaData+0x7a>
			{
				thisLetterCount.capital_letter++;
 8001df6:	4b34      	ldr	r3, [pc, #208]	; (8001ec8 <proccesDmaData+0x124>)
 8001df8:	785b      	ldrb	r3, [r3, #1]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <proccesDmaData+0x124>)
 8001e00:	705a      	strb	r2, [r3, #1]
				processedSignsCount++;
 8001e02:	4b32      	ldr	r3, [pc, #200]	; (8001ecc <proccesDmaData+0x128>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	3301      	adds	r3, #1
 8001e08:	4a30      	ldr	r2, [pc, #192]	; (8001ecc <proccesDmaData+0x128>)
 8001e0a:	6013      	str	r3, [r2, #0]
				messageBuffer[messageBufferIndex++] = sign;
 8001e0c:	4b30      	ldr	r3, [pc, #192]	; (8001ed0 <proccesDmaData+0x12c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	492f      	ldr	r1, [pc, #188]	; (8001ed0 <proccesDmaData+0x12c>)
 8001e14:	600a      	str	r2, [r1, #0]
 8001e16:	492f      	ldr	r1, [pc, #188]	; (8001ed4 <proccesDmaData+0x130>)
 8001e18:	79fa      	ldrb	r2, [r7, #7]
 8001e1a:	54ca      	strb	r2, [r1, r3]
 8001e1c:	e030      	b.n	8001e80 <proccesDmaData+0xdc>
			}
			else if(sign == END_SIGN)
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	2b24      	cmp	r3, #36	; 0x24
 8001e22:	d120      	bne.n	8001e66 <proccesDmaData+0xc2>
			{
				transimissionEnabled = 0;
 8001e24:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <proccesDmaData+0x120>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
				processedSignsCount = 0;
 8001e2a:	4b28      	ldr	r3, [pc, #160]	; (8001ecc <proccesDmaData+0x128>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
				sprintf(messageToBeSent,"Valid string: %s, lower-case: %d, upper-case: %d \r\n",messageBuffer,thisLetterCount.small_letter,thisLetterCount.capital_letter);
 8001e30:	4b25      	ldr	r3, [pc, #148]	; (8001ec8 <proccesDmaData+0x124>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <proccesDmaData+0x124>)
 8001e38:	785b      	ldrb	r3, [r3, #1]
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	4a25      	ldr	r2, [pc, #148]	; (8001ed4 <proccesDmaData+0x130>)
 8001e40:	4925      	ldr	r1, [pc, #148]	; (8001ed8 <proccesDmaData+0x134>)
 8001e42:	4826      	ldr	r0, [pc, #152]	; (8001edc <proccesDmaData+0x138>)
 8001e44:	f002 fa92 	bl	800436c <siprintf>
				thisLetterCount.small_letter = 0;
 8001e48:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <proccesDmaData+0x124>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]
				thisLetterCount.capital_letter = 0;
 8001e4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ec8 <proccesDmaData+0x124>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	705a      	strb	r2, [r3, #1]
				memset(messageBuffer, 0, MAX_MSG_LEN);
 8001e54:	2223      	movs	r2, #35	; 0x23
 8001e56:	2100      	movs	r1, #0
 8001e58:	481e      	ldr	r0, [pc, #120]	; (8001ed4 <proccesDmaData+0x130>)
 8001e5a:	f002 faea 	bl	8004432 <memset>
				messageBufferIndex = 0;
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <proccesDmaData+0x12c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	e00c      	b.n	8001e80 <proccesDmaData+0xdc>
			}
			else
			{
				processedSignsCount++;
 8001e66:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <proccesDmaData+0x128>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	4a17      	ldr	r2, [pc, #92]	; (8001ecc <proccesDmaData+0x128>)
 8001e6e:	6013      	str	r3, [r2, #0]
				messageBuffer[messageBufferIndex++] = sign;
 8001e70:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <proccesDmaData+0x12c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	1c5a      	adds	r2, r3, #1
 8001e76:	4916      	ldr	r1, [pc, #88]	; (8001ed0 <proccesDmaData+0x12c>)
 8001e78:	600a      	str	r2, [r1, #0]
 8001e7a:	4916      	ldr	r1, [pc, #88]	; (8001ed4 <proccesDmaData+0x130>)
 8001e7c:	79fa      	ldrb	r2, [r7, #7]
 8001e7e:	54ca      	strb	r2, [r1, r3]
			}
		}
		if(processedSignsCount > MAX_MSG_LEN)
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <proccesDmaData+0x128>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b23      	cmp	r3, #35	; 0x23
 8001e86:	dd13      	ble.n	8001eb0 <proccesDmaData+0x10c>
		{
			transimissionEnabled = 0;
 8001e88:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <proccesDmaData+0x120>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
			processedSignsCount = 0;
 8001e8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <proccesDmaData+0x128>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
			thisLetterCount.small_letter = 0;
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <proccesDmaData+0x124>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
			thisLetterCount.capital_letter = 0;
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <proccesDmaData+0x124>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	705a      	strb	r2, [r3, #1]
			memset(messageBuffer, 0, MAX_MSG_LEN);
 8001ea0:	2223      	movs	r2, #35	; 0x23
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	480b      	ldr	r0, [pc, #44]	; (8001ed4 <proccesDmaData+0x130>)
 8001ea6:	f002 fac4 	bl	8004432 <memset>
			messageBufferIndex = 0;
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <proccesDmaData+0x12c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
		}
		if(sign == START_SIGN)
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	2b23      	cmp	r3, #35	; 0x23
 8001eb4:	d102      	bne.n	8001ebc <proccesDmaData+0x118>
		{
			transimissionEnabled = 1;
 8001eb6:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <proccesDmaData+0x120>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	701a      	strb	r2, [r3, #0]
		}
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	200002a8 	.word	0x200002a8
 8001ec8:	200002d4 	.word	0x200002d4
 8001ecc:	200002a4 	.word	0x200002a4
 8001ed0:	200002d0 	.word	0x200002d0
 8001ed4:	200002ac 	.word	0x200002ac
 8001ed8:	08007394 	.word	0x08007394
 8001edc:	20000004 	.word	0x20000004

08001ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <LL_DMA_DisableChannel+0x3c>)
 8001f00:	5cd3      	ldrb	r3, [r2, r3]
 8001f02:	461a      	mov	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4413      	add	r3, r2
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	3a01      	subs	r2, #1
 8001f0e:	4907      	ldr	r1, [pc, #28]	; (8001f2c <LL_DMA_DisableChannel+0x3c>)
 8001f10:	5c8a      	ldrb	r2, [r1, r2]
 8001f12:	4611      	mov	r1, r2
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	440a      	add	r2, r1
 8001f18:	f023 0301 	bic.w	r3, r3, #1
 8001f1c:	6013      	str	r3, [r2, #0]
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	080073c8 	.word	0x080073c8

08001f30 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f44:	bf0c      	ite	eq
 8001f46:	2301      	moveq	r3, #1
 8001f48:	2300      	movne	r3, #0
 8001f4a:	b2db      	uxtb	r3, r3
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f6c:	bf0c      	ite	eq
 8001f6e:	2301      	moveq	r3, #1
 8001f70:	2300      	movne	r3, #0
 8001f72:	b2db      	uxtb	r3, r3
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f94:	bf0c      	ite	eq
 8001f96:	2301      	moveq	r3, #1
 8001f98:	2300      	movne	r3, #0
 8001f9a:	b2db      	uxtb	r3, r3
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001fb6:	605a      	str	r2, [r3, #4]
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fd2:	605a      	str	r2, [r3, #4]
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001fee:	605a      	str	r2, [r3, #4]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	2b10      	cmp	r3, #16
 800200e:	d101      	bne.n	8002014 <LL_USART_IsActiveFlag_IDLE+0x18>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <LL_USART_IsActiveFlag_IDLE+0x1a>
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002032:	2b40      	cmp	r3, #64	; 0x40
 8002034:	d101      	bne.n	800203a <LL_USART_IsActiveFlag_TC+0x18>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <LL_USART_IsActiveFlag_TC+0x1a>
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2210      	movs	r2, #16
 8002054:	621a      	str	r2, [r3, #32]
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002074:	e7fe      	b.n	8002074 <HardFault_Handler+0x4>

08002076 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800207a:	e7fe      	b.n	800207a <MemManage_Handler+0x4>

0800207c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002080:	e7fe      	b.n	8002080 <BusFault_Handler+0x4>

08002082 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002086:	e7fe      	b.n	8002086 <UsageFault_Handler+0x4>

08002088 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
	I2C_IRQHandler();
 80020c4:	f7ff fc1e 	bl	8001904 <I2C_IRQHandler>
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}

080020cc <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 80020d0:	480c      	ldr	r0, [pc, #48]	; (8002104 <DMA1_Channel6_IRQHandler+0x38>)
 80020d2:	f7ff ff2d 	bl	8001f30 <LL_DMA_IsActiveFlag_TC6>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d105      	bne.n	80020e8 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 80020dc:	f000 fdc8 	bl	8002c70 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 80020e0:	4808      	ldr	r0, [pc, #32]	; (8002104 <DMA1_Channel6_IRQHandler+0x38>)
 80020e2:	f7ff ff61 	bl	8001fa8 <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 80020e6:	e00a      	b.n	80020fe <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 80020e8:	4806      	ldr	r0, [pc, #24]	; (8002104 <DMA1_Channel6_IRQHandler+0x38>)
 80020ea:	f7ff ff49 	bl	8001f80 <LL_DMA_IsActiveFlag_HT6>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d104      	bne.n	80020fe <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 80020f4:	f000 fdbc 	bl	8002c70 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 80020f8:	4802      	ldr	r0, [pc, #8]	; (8002104 <DMA1_Channel6_IRQHandler+0x38>)
 80020fa:	f7ff ff71 	bl	8001fe0 <LL_DMA_ClearFlag_HT6>
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40020000 	.word	0x40020000

08002108 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 800210c:	480a      	ldr	r0, [pc, #40]	; (8002138 <DMA1_Channel7_IRQHandler+0x30>)
 800210e:	f7ff ff23 	bl	8001f58 <LL_DMA_IsActiveFlag_TC7>
 8002112:	4603      	mov	r3, r0
 8002114:	2b01      	cmp	r3, #1
 8002116:	d10d      	bne.n	8002134 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8002118:	4807      	ldr	r0, [pc, #28]	; (8002138 <DMA1_Channel7_IRQHandler+0x30>)
 800211a:	f7ff ff53 	bl	8001fc4 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 800211e:	bf00      	nop
 8002120:	4806      	ldr	r0, [pc, #24]	; (800213c <DMA1_Channel7_IRQHandler+0x34>)
 8002122:	f7ff ff7e 	bl	8002022 <LL_USART_IsActiveFlag_TC>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f9      	beq.n	8002120 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 800212c:	2107      	movs	r1, #7
 800212e:	4802      	ldr	r0, [pc, #8]	; (8002138 <DMA1_Channel7_IRQHandler+0x30>)
 8002130:	f7ff fede 	bl	8001ef0 <LL_DMA_DisableChannel>
	}
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40020000 	.word	0x40020000
 800213c:	40004400 	.word	0x40004400

08002140 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8002144:	4806      	ldr	r0, [pc, #24]	; (8002160 <USART2_IRQHandler+0x20>)
 8002146:	f7ff ff59 	bl	8001ffc <LL_USART_IsActiveFlag_IDLE>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d004      	beq.n	800215a <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8002150:	f000 fd8e 	bl	8002c70 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8002154:	4802      	ldr	r0, [pc, #8]	; (8002160 <USART2_IRQHandler+0x20>)
 8002156:	f7ff ff77 	bl	8002048 <LL_USART_ClearFlag_IDLE>
	}
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40004400 	.word	0x40004400

08002164 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return 1;
 8002168:	2301      	movs	r3, #1
}
 800216a:	4618      	mov	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <_kill>:

int _kill(int pid, int sig)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800217e:	f002 f9bb 	bl	80044f8 <__errno>
 8002182:	4603      	mov	r3, r0
 8002184:	2216      	movs	r2, #22
 8002186:	601a      	str	r2, [r3, #0]
  return -1;
 8002188:	f04f 33ff 	mov.w	r3, #4294967295
}
 800218c:	4618      	mov	r0, r3
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <_exit>:

void _exit (int status)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800219c:	f04f 31ff 	mov.w	r1, #4294967295
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff ffe7 	bl	8002174 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021a6:	e7fe      	b.n	80021a6 <_exit+0x12>

080021a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	e00a      	b.n	80021d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021ba:	f3af 8000 	nop.w
 80021be:	4601      	mov	r1, r0
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	60ba      	str	r2, [r7, #8]
 80021c6:	b2ca      	uxtb	r2, r1
 80021c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	3301      	adds	r3, #1
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	dbf0      	blt.n	80021ba <_read+0x12>
  }

  return len;
 80021d8:	687b      	ldr	r3, [r7, #4]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b086      	sub	sp, #24
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	e009      	b.n	8002208 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	60ba      	str	r2, [r7, #8]
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	3301      	adds	r3, #1
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	429a      	cmp	r2, r3
 800220e:	dbf1      	blt.n	80021f4 <_write+0x12>
  }
  return len;
 8002210:	687b      	ldr	r3, [r7, #4]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <_close>:

int _close(int file)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002222:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002242:	605a      	str	r2, [r3, #4]
  return 0;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <_isatty>:

int _isatty(int file)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800225a:	2301      	movs	r3, #1
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
	...

08002284 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800228c:	4a14      	ldr	r2, [pc, #80]	; (80022e0 <_sbrk+0x5c>)
 800228e:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <_sbrk+0x60>)
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002298:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <_sbrk+0x64>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d102      	bne.n	80022a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022a0:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <_sbrk+0x64>)
 80022a2:	4a12      	ldr	r2, [pc, #72]	; (80022ec <_sbrk+0x68>)
 80022a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <_sbrk+0x64>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d207      	bcs.n	80022c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022b4:	f002 f920 	bl	80044f8 <__errno>
 80022b8:	4603      	mov	r3, r0
 80022ba:	220c      	movs	r2, #12
 80022bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022be:	f04f 33ff 	mov.w	r3, #4294967295
 80022c2:	e009      	b.n	80022d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022c4:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <_sbrk+0x64>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ca:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <_sbrk+0x64>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4413      	add	r3, r2
 80022d2:	4a05      	ldr	r2, [pc, #20]	; (80022e8 <_sbrk+0x64>)
 80022d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022d6:	68fb      	ldr	r3, [r7, #12]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20003000 	.word	0x20003000
 80022e4:	00000400 	.word	0x00000400
 80022e8:	200002e8 	.word	0x200002e8
 80022ec:	200004c0 	.word	0x200004c0

080022f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <SystemInit+0x20>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fa:	4a05      	ldr	r2, [pc, #20]	; (8002310 <SystemInit+0x20>)
 80022fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002300:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <__NVIC_EnableIRQ>:
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	2b00      	cmp	r3, #0
 8002324:	db0b      	blt.n	800233e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	f003 021f 	and.w	r2, r3, #31
 800232c:	4907      	ldr	r1, [pc, #28]	; (800234c <__NVIC_EnableIRQ+0x38>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	2001      	movs	r0, #1
 8002336:	fa00 f202 	lsl.w	r2, r0, r2
 800233a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	e000e100 	.word	0xe000e100

08002350 <__NVIC_SetPriority>:
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	6039      	str	r1, [r7, #0]
 800235a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002360:	2b00      	cmp	r3, #0
 8002362:	db0a      	blt.n	800237a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	b2da      	uxtb	r2, r3
 8002368:	490c      	ldr	r1, [pc, #48]	; (800239c <__NVIC_SetPriority+0x4c>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	0112      	lsls	r2, r2, #4
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	440b      	add	r3, r1
 8002374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002378:	e00a      	b.n	8002390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4908      	ldr	r1, [pc, #32]	; (80023a0 <__NVIC_SetPriority+0x50>)
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	3b04      	subs	r3, #4
 8002388:	0112      	lsls	r2, r2, #4
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	440b      	add	r3, r1
 800238e:	761a      	strb	r2, [r3, #24]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000e100 	.word	0xe000e100
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <LL_AHB1_GRP1_EnableClock>:
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80023ae:	695a      	ldr	r2, [r3, #20]
 80023b0:	4907      	ldr	r1, [pc, #28]	; (80023d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4013      	ands	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023c2:	68fb      	ldr	r3, [r7, #12]
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	40021000 	.word	0x40021000

080023d4 <LL_APB1_GRP1_EnableClock>:
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80023dc:	4b08      	ldr	r3, [pc, #32]	; (8002400 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023de:	69da      	ldr	r2, [r3, #28]
 80023e0:	4907      	ldr	r1, [pc, #28]	; (8002400 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80023e8:	4b05      	ldr	r3, [pc, #20]	; (8002400 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023ea:	69da      	ldr	r2, [r3, #28]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4013      	ands	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023f2:	68fb      	ldr	r3, [r7, #12]
}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	40021000 	.word	0x40021000

08002404 <LL_DMA_EnableChannel>:
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	3b01      	subs	r3, #1
 8002412:	4a0b      	ldr	r2, [pc, #44]	; (8002440 <LL_DMA_EnableChannel+0x3c>)
 8002414:	5cd3      	ldrb	r3, [r2, r3]
 8002416:	461a      	mov	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4413      	add	r3, r2
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	3a01      	subs	r2, #1
 8002422:	4907      	ldr	r1, [pc, #28]	; (8002440 <LL_DMA_EnableChannel+0x3c>)
 8002424:	5c8a      	ldrb	r2, [r1, r2]
 8002426:	4611      	mov	r1, r2
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	440a      	add	r2, r1
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6013      	str	r3, [r2, #0]
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	080073e8 	.word	0x080073e8

08002444 <LL_DMA_DisableChannel>:
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	3b01      	subs	r3, #1
 8002452:	4a0b      	ldr	r2, [pc, #44]	; (8002480 <LL_DMA_DisableChannel+0x3c>)
 8002454:	5cd3      	ldrb	r3, [r2, r3]
 8002456:	461a      	mov	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4413      	add	r3, r2
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	3a01      	subs	r2, #1
 8002462:	4907      	ldr	r1, [pc, #28]	; (8002480 <LL_DMA_DisableChannel+0x3c>)
 8002464:	5c8a      	ldrb	r2, [r1, r2]
 8002466:	4611      	mov	r1, r2
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	440a      	add	r2, r1
 800246c:	f023 0301 	bic.w	r3, r3, #1
 8002470:	6013      	str	r3, [r2, #0]
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	080073e8 	.word	0x080073e8

08002484 <LL_DMA_SetDataTransferDirection>:
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	3b01      	subs	r3, #1
 8002494:	4a0d      	ldr	r2, [pc, #52]	; (80024cc <LL_DMA_SetDataTransferDirection+0x48>)
 8002496:	5cd3      	ldrb	r3, [r2, r3]
 8002498:	461a      	mov	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4413      	add	r3, r2
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024a4:	f023 0310 	bic.w	r3, r3, #16
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	3a01      	subs	r2, #1
 80024ac:	4907      	ldr	r1, [pc, #28]	; (80024cc <LL_DMA_SetDataTransferDirection+0x48>)
 80024ae:	5c8a      	ldrb	r2, [r1, r2]
 80024b0:	4611      	mov	r1, r2
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	440a      	add	r2, r1
 80024b6:	4611      	mov	r1, r2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]
}
 80024be:	bf00      	nop
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	080073e8 	.word	0x080073e8

080024d0 <LL_DMA_GetDataTransferDirection>:
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	3b01      	subs	r3, #1
 80024de:	4a07      	ldr	r2, [pc, #28]	; (80024fc <LL_DMA_GetDataTransferDirection+0x2c>)
 80024e0:	5cd3      	ldrb	r3, [r2, r3]
 80024e2:	461a      	mov	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4413      	add	r3, r2
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	f244 0310 	movw	r3, #16400	; 0x4010
 80024ee:	4013      	ands	r3, r2
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	080073e8 	.word	0x080073e8

08002500 <LL_DMA_SetMode>:
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	3b01      	subs	r3, #1
 8002510:	4a0c      	ldr	r2, [pc, #48]	; (8002544 <LL_DMA_SetMode+0x44>)
 8002512:	5cd3      	ldrb	r3, [r2, r3]
 8002514:	461a      	mov	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4413      	add	r3, r2
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f023 0220 	bic.w	r2, r3, #32
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	3b01      	subs	r3, #1
 8002524:	4907      	ldr	r1, [pc, #28]	; (8002544 <LL_DMA_SetMode+0x44>)
 8002526:	5ccb      	ldrb	r3, [r1, r3]
 8002528:	4619      	mov	r1, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	440b      	add	r3, r1
 800252e:	4619      	mov	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4313      	orrs	r3, r2
 8002534:	600b      	str	r3, [r1, #0]
}
 8002536:	bf00      	nop
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	080073e8 	.word	0x080073e8

08002548 <LL_DMA_SetPeriphIncMode>:
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	3b01      	subs	r3, #1
 8002558:	4a0c      	ldr	r2, [pc, #48]	; (800258c <LL_DMA_SetPeriphIncMode+0x44>)
 800255a:	5cd3      	ldrb	r3, [r2, r3]
 800255c:	461a      	mov	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4413      	add	r3, r2
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	3b01      	subs	r3, #1
 800256c:	4907      	ldr	r1, [pc, #28]	; (800258c <LL_DMA_SetPeriphIncMode+0x44>)
 800256e:	5ccb      	ldrb	r3, [r1, r3]
 8002570:	4619      	mov	r1, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	440b      	add	r3, r1
 8002576:	4619      	mov	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]
}
 800257e:	bf00      	nop
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	080073e8 	.word	0x080073e8

08002590 <LL_DMA_SetMemoryIncMode>:
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	3b01      	subs	r3, #1
 80025a0:	4a0c      	ldr	r2, [pc, #48]	; (80025d4 <LL_DMA_SetMemoryIncMode+0x44>)
 80025a2:	5cd3      	ldrb	r3, [r2, r3]
 80025a4:	461a      	mov	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4413      	add	r3, r2
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	4907      	ldr	r1, [pc, #28]	; (80025d4 <LL_DMA_SetMemoryIncMode+0x44>)
 80025b6:	5ccb      	ldrb	r3, [r1, r3]
 80025b8:	4619      	mov	r1, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	440b      	add	r3, r1
 80025be:	4619      	mov	r1, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]
}
 80025c6:	bf00      	nop
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	080073e8 	.word	0x080073e8

080025d8 <LL_DMA_SetPeriphSize>:
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	4a0c      	ldr	r2, [pc, #48]	; (800261c <LL_DMA_SetPeriphSize+0x44>)
 80025ea:	5cd3      	ldrb	r3, [r2, r3]
 80025ec:	461a      	mov	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4413      	add	r3, r2
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	4907      	ldr	r1, [pc, #28]	; (800261c <LL_DMA_SetPeriphSize+0x44>)
 80025fe:	5ccb      	ldrb	r3, [r1, r3]
 8002600:	4619      	mov	r1, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	440b      	add	r3, r1
 8002606:	4619      	mov	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4313      	orrs	r3, r2
 800260c:	600b      	str	r3, [r1, #0]
}
 800260e:	bf00      	nop
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	080073e8 	.word	0x080073e8

08002620 <LL_DMA_SetMemorySize>:
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	3b01      	subs	r3, #1
 8002630:	4a0c      	ldr	r2, [pc, #48]	; (8002664 <LL_DMA_SetMemorySize+0x44>)
 8002632:	5cd3      	ldrb	r3, [r2, r3]
 8002634:	461a      	mov	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4413      	add	r3, r2
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	3b01      	subs	r3, #1
 8002644:	4907      	ldr	r1, [pc, #28]	; (8002664 <LL_DMA_SetMemorySize+0x44>)
 8002646:	5ccb      	ldrb	r3, [r1, r3]
 8002648:	4619      	mov	r1, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	440b      	add	r3, r1
 800264e:	4619      	mov	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4313      	orrs	r3, r2
 8002654:	600b      	str	r3, [r1, #0]
}
 8002656:	bf00      	nop
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	080073e8 	.word	0x080073e8

08002668 <LL_DMA_SetChannelPriorityLevel>:
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	3b01      	subs	r3, #1
 8002678:	4a0c      	ldr	r2, [pc, #48]	; (80026ac <LL_DMA_SetChannelPriorityLevel+0x44>)
 800267a:	5cd3      	ldrb	r3, [r2, r3]
 800267c:	461a      	mov	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4413      	add	r3, r2
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	3b01      	subs	r3, #1
 800268c:	4907      	ldr	r1, [pc, #28]	; (80026ac <LL_DMA_SetChannelPriorityLevel+0x44>)
 800268e:	5ccb      	ldrb	r3, [r1, r3]
 8002690:	4619      	mov	r1, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	440b      	add	r3, r1
 8002696:	4619      	mov	r1, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4313      	orrs	r3, r2
 800269c:	600b      	str	r3, [r1, #0]
}
 800269e:	bf00      	nop
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	080073e8 	.word	0x080073e8

080026b0 <LL_DMA_SetDataLength>:
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	3b01      	subs	r3, #1
 80026c0:	4a0c      	ldr	r2, [pc, #48]	; (80026f4 <LL_DMA_SetDataLength+0x44>)
 80026c2:	5cd3      	ldrb	r3, [r2, r3]
 80026c4:	461a      	mov	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4413      	add	r3, r2
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	0c1b      	lsrs	r3, r3, #16
 80026ce:	041b      	lsls	r3, r3, #16
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	3a01      	subs	r2, #1
 80026d4:	4907      	ldr	r1, [pc, #28]	; (80026f4 <LL_DMA_SetDataLength+0x44>)
 80026d6:	5c8a      	ldrb	r2, [r1, r2]
 80026d8:	4611      	mov	r1, r2
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	440a      	add	r2, r1
 80026de:	4611      	mov	r1, r2
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	604b      	str	r3, [r1, #4]
}
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	080073e8 	.word	0x080073e8

080026f8 <LL_DMA_GetDataLength>:
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	3b01      	subs	r3, #1
 8002706:	4a06      	ldr	r2, [pc, #24]	; (8002720 <LL_DMA_GetDataLength+0x28>)
 8002708:	5cd3      	ldrb	r3, [r2, r3]
 800270a:	461a      	mov	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4413      	add	r3, r2
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	b29b      	uxth	r3, r3
}
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	080073e8 	.word	0x080073e8

08002724 <LL_DMA_ConfigAddresses>:
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	2b10      	cmp	r3, #16
 8002736:	d114      	bne.n	8002762 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	3b01      	subs	r3, #1
 800273c:	4a16      	ldr	r2, [pc, #88]	; (8002798 <LL_DMA_ConfigAddresses+0x74>)
 800273e:	5cd3      	ldrb	r3, [r2, r3]
 8002740:	461a      	mov	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4413      	add	r3, r2
 8002746:	461a      	mov	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	3b01      	subs	r3, #1
 8002750:	4a11      	ldr	r2, [pc, #68]	; (8002798 <LL_DMA_ConfigAddresses+0x74>)
 8002752:	5cd3      	ldrb	r3, [r2, r3]
 8002754:	461a      	mov	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4413      	add	r3, r2
 800275a:	461a      	mov	r2, r3
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	6093      	str	r3, [r2, #8]
}
 8002760:	e013      	b.n	800278a <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	3b01      	subs	r3, #1
 8002766:	4a0c      	ldr	r2, [pc, #48]	; (8002798 <LL_DMA_ConfigAddresses+0x74>)
 8002768:	5cd3      	ldrb	r3, [r2, r3]
 800276a:	461a      	mov	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4413      	add	r3, r2
 8002770:	461a      	mov	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	3b01      	subs	r3, #1
 800277a:	4a07      	ldr	r2, [pc, #28]	; (8002798 <LL_DMA_ConfigAddresses+0x74>)
 800277c:	5cd3      	ldrb	r3, [r2, r3]
 800277e:	461a      	mov	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4413      	add	r3, r2
 8002784:	461a      	mov	r2, r3
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	60d3      	str	r3, [r2, #12]
}
 800278a:	bf00      	nop
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	080073e8 	.word	0x080073e8

0800279c <LL_DMA_SetMemoryAddress>:
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	4a06      	ldr	r2, [pc, #24]	; (80027c8 <LL_DMA_SetMemoryAddress+0x2c>)
 80027ae:	5cd3      	ldrb	r3, [r2, r3]
 80027b0:	461a      	mov	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4413      	add	r3, r2
 80027b6:	461a      	mov	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	60d3      	str	r3, [r2, #12]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	080073e8 	.word	0x080073e8

080027cc <LL_DMA_SetPeriphAddress>:
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	3b01      	subs	r3, #1
 80027dc:	4a06      	ldr	r2, [pc, #24]	; (80027f8 <LL_DMA_SetPeriphAddress+0x2c>)
 80027de:	5cd3      	ldrb	r3, [r2, r3]
 80027e0:	461a      	mov	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4413      	add	r3, r2
 80027e6:	461a      	mov	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6093      	str	r3, [r2, #8]
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	080073e8 	.word	0x080073e8

080027fc <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	3b01      	subs	r3, #1
 800280a:	4a0b      	ldr	r2, [pc, #44]	; (8002838 <LL_DMA_EnableIT_TC+0x3c>)
 800280c:	5cd3      	ldrb	r3, [r2, r3]
 800280e:	461a      	mov	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4413      	add	r3, r2
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	3a01      	subs	r2, #1
 800281a:	4907      	ldr	r1, [pc, #28]	; (8002838 <LL_DMA_EnableIT_TC+0x3c>)
 800281c:	5c8a      	ldrb	r2, [r1, r2]
 800281e:	4611      	mov	r1, r2
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	440a      	add	r2, r1
 8002824:	f043 0302 	orr.w	r3, r3, #2
 8002828:	6013      	str	r3, [r2, #0]
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	080073e8 	.word	0x080073e8

0800283c <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	3b01      	subs	r3, #1
 800284a:	4a0b      	ldr	r2, [pc, #44]	; (8002878 <LL_DMA_EnableIT_HT+0x3c>)
 800284c:	5cd3      	ldrb	r3, [r2, r3]
 800284e:	461a      	mov	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4413      	add	r3, r2
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	3a01      	subs	r2, #1
 800285a:	4907      	ldr	r1, [pc, #28]	; (8002878 <LL_DMA_EnableIT_HT+0x3c>)
 800285c:	5c8a      	ldrb	r2, [r1, r2]
 800285e:	4611      	mov	r1, r2
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	440a      	add	r2, r1
 8002864:	f043 0304 	orr.w	r3, r3, #4
 8002868:	6013      	str	r3, [r2, #0]
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	080073e8 	.word	0x080073e8

0800287c <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	3b01      	subs	r3, #1
 800288a:	4a0b      	ldr	r2, [pc, #44]	; (80028b8 <LL_DMA_EnableIT_TE+0x3c>)
 800288c:	5cd3      	ldrb	r3, [r2, r3]
 800288e:	461a      	mov	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4413      	add	r3, r2
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	3a01      	subs	r2, #1
 800289a:	4907      	ldr	r1, [pc, #28]	; (80028b8 <LL_DMA_EnableIT_TE+0x3c>)
 800289c:	5c8a      	ldrb	r2, [r1, r2]
 800289e:	4611      	mov	r1, r2
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	440a      	add	r2, r1
 80028a4:	f043 0308 	orr.w	r3, r3, #8
 80028a8:	6013      	str	r3, [r2, #0]
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	080073e8 	.word	0x080073e8

080028bc <LL_USART_Enable>:
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f043 0201 	orr.w	r2, r3, #1
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	601a      	str	r2, [r3, #0]
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <LL_USART_ConfigAsyncMode>:
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	609a      	str	r2, [r3, #8]
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8002908:	b480      	push	{r7}
 800290a:	b089      	sub	sp, #36	; 0x24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	e853 3f00 	ldrex	r3, [r3]
 800291a:	60bb      	str	r3, [r7, #8]
   return(result);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f043 0310 	orr.w	r3, r3, #16
 8002922:	61fb      	str	r3, [r7, #28]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	61ba      	str	r2, [r7, #24]
 800292a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292c:	6979      	ldr	r1, [r7, #20]
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	e841 2300 	strex	r3, r2, [r1]
 8002934:	613b      	str	r3, [r7, #16]
   return(result);
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1e9      	bne.n	8002910 <LL_USART_EnableIT_IDLE+0x8>
}
 800293c:	bf00      	nop
 800293e:	bf00      	nop
 8002940:	3724      	adds	r7, #36	; 0x24
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 800294a:	b480      	push	{r7}
 800294c:	b089      	sub	sp, #36	; 0x24
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3308      	adds	r3, #8
 8002956:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	e853 3f00 	ldrex	r3, [r3]
 800295e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002966:	61fb      	str	r3, [r7, #28]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3308      	adds	r3, #8
 800296c:	69fa      	ldr	r2, [r7, #28]
 800296e:	61ba      	str	r2, [r7, #24]
 8002970:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002972:	6979      	ldr	r1, [r7, #20]
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	e841 2300 	strex	r3, r2, [r1]
 800297a:	613b      	str	r3, [r7, #16]
   return(result);
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1e7      	bne.n	8002952 <LL_USART_DisableIT_CTS+0x8>
}
 8002982:	bf00      	nop
 8002984:	bf00      	nop
 8002986:	3724      	adds	r7, #36	; 0x24
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8002990:	b480      	push	{r7}
 8002992:	b089      	sub	sp, #36	; 0x24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3308      	adds	r3, #8
 800299c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	e853 3f00 	ldrex	r3, [r3]
 80029a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029ac:	61fb      	str	r3, [r7, #28]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3308      	adds	r3, #8
 80029b2:	69fa      	ldr	r2, [r7, #28]
 80029b4:	61ba      	str	r2, [r7, #24]
 80029b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b8:	6979      	ldr	r1, [r7, #20]
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	e841 2300 	strex	r3, r2, [r1]
 80029c0:	613b      	str	r3, [r7, #16]
   return(result);
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1e7      	bne.n	8002998 <LL_USART_EnableDMAReq_RX+0x8>
}
 80029c8:	bf00      	nop
 80029ca:	bf00      	nop
 80029cc:	3724      	adds	r7, #36	; 0x24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b089      	sub	sp, #36	; 0x24
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3308      	adds	r3, #8
 80029e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	e853 3f00 	ldrex	r3, [r3]
 80029ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029f2:	61fb      	str	r3, [r7, #28]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3308      	adds	r3, #8
 80029f8:	69fa      	ldr	r2, [r7, #28]
 80029fa:	61ba      	str	r2, [r7, #24]
 80029fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029fe:	6979      	ldr	r1, [r7, #20]
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	e841 2300 	strex	r3, r2, [r1]
 8002a06:	613b      	str	r3, [r7, #16]
   return(result);
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1e7      	bne.n	80029de <LL_USART_EnableDMAReq_TX+0x8>
}
 8002a0e:	bf00      	nop
 8002a10:	bf00      	nop
 8002a12:	3724      	adds	r7, #36	; 0x24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d103      	bne.n	8002a34 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3328      	adds	r3, #40	; 0x28
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	e002      	b.n	8002a3a <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3324      	adds	r3, #36	; 0x24
 8002a38:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <USART2_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(uint8_t data) = 0;

/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a03      	ldr	r2, [pc, #12]	; (8002a68 <USART2_RegisterCallback+0x20>)
 8002a5a:	6013      	str	r3, [r2, #0]
	}
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	2000036c 	.word	0x2000036c

08002a6c <MX_USART2_UART_Init>:
	// type global variables here


/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8002a6c:	b5b0      	push	{r4, r5, r7, lr}
 8002a6e:	b090      	sub	sp, #64	; 0x40
 8002a70:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002a72:	f107 031c 	add.w	r3, r7, #28
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	605a      	str	r2, [r3, #4]
 8002a7c:	609a      	str	r2, [r3, #8]
 8002a7e:	60da      	str	r2, [r3, #12]
 8002a80:	611a      	str	r2, [r3, #16]
 8002a82:	615a      	str	r2, [r3, #20]
 8002a84:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a86:	1d3b      	adds	r3, r7, #4
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	611a      	str	r2, [r3, #16]
 8002a94:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002a96:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002a9a:	f7ff fc9b 	bl	80023d4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002a9e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002aa2:	f7ff fc7f 	bl	80023a4 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8002aa6:	f248 0304 	movw	r3, #32772	; 0x8004
 8002aaa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002aac:	2302      	movs	r3, #2
 8002aae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002abc:	2307      	movs	r3, #7
 8002abe:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac0:	1d3b      	adds	r3, r7, #4
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ac8:	f000 fa62 	bl	8002f90 <LL_GPIO_Init>
   * Rx memory buffer will be handled in normal mode, not circular!
   * You can use configuration from example program and modify it.
   * For more information about DMA registers, refer to reference manual.
   */

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002acc:	2200      	movs	r2, #0
 8002ace:	2106      	movs	r1, #6
 8002ad0:	4854      	ldr	r0, [pc, #336]	; (8002c24 <MX_USART2_UART_Init+0x1b8>)
 8002ad2:	f7ff fcd7 	bl	8002484 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8002ad6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ada:	2106      	movs	r1, #6
 8002adc:	4851      	ldr	r0, [pc, #324]	; (8002c24 <MX_USART2_UART_Init+0x1b8>)
 8002ade:	f7ff fdc3 	bl	8002668 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2106      	movs	r1, #6
 8002ae6:	484f      	ldr	r0, [pc, #316]	; (8002c24 <MX_USART2_UART_Init+0x1b8>)
 8002ae8:	f7ff fd0a 	bl	8002500 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8002aec:	2200      	movs	r2, #0
 8002aee:	2106      	movs	r1, #6
 8002af0:	484c      	ldr	r0, [pc, #304]	; (8002c24 <MX_USART2_UART_Init+0x1b8>)
 8002af2:	f7ff fd29 	bl	8002548 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8002af6:	2280      	movs	r2, #128	; 0x80
 8002af8:	2106      	movs	r1, #6
 8002afa:	484a      	ldr	r0, [pc, #296]	; (8002c24 <MX_USART2_UART_Init+0x1b8>)
 8002afc:	f7ff fd48 	bl	8002590 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8002b00:	2200      	movs	r2, #0
 8002b02:	2106      	movs	r1, #6
 8002b04:	4847      	ldr	r0, [pc, #284]	; (8002c24 <MX_USART2_UART_Init+0x1b8>)
 8002b06:	f7ff fd67 	bl	80025d8 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2106      	movs	r1, #6
 8002b0e:	4845      	ldr	r0, [pc, #276]	; (8002c24 <MX_USART2_UART_Init+0x1b8>)
 8002b10:	f7ff fd86 	bl	8002620 <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8002b14:	2101      	movs	r1, #1
 8002b16:	4844      	ldr	r0, [pc, #272]	; (8002c28 <MX_USART2_UART_Init+0x1bc>)
 8002b18:	f7ff ff80 	bl	8002a1c <LL_USART_DMA_GetRegAddr>
 8002b1c:	4604      	mov	r4, r0
 8002b1e:	4d43      	ldr	r5, [pc, #268]	; (8002c2c <MX_USART2_UART_Init+0x1c0>)
 8002b20:	2106      	movs	r1, #6
 8002b22:	4840      	ldr	r0, [pc, #256]	; (8002c24 <MX_USART2_UART_Init+0x1b8>)
 8002b24:	f7ff fcd4 	bl	80024d0 <LL_DMA_GetDataTransferDirection>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	462b      	mov	r3, r5
 8002b2e:	4622      	mov	r2, r4
 8002b30:	2106      	movs	r1, #6
 8002b32:	483c      	ldr	r0, [pc, #240]	; (8002c24 <MX_USART2_UART_Init+0x1b8>)
 8002b34:	f7ff fdf6 	bl	8002724 <LL_DMA_ConfigAddresses>
						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
							(uint32_t)bufferUSART2dma,
							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8002b38:	2280      	movs	r2, #128	; 0x80
 8002b3a:	2106      	movs	r1, #6
 8002b3c:	4839      	ldr	r0, [pc, #228]	; (8002c24 <MX_USART2_UART_Init+0x1b8>)
 8002b3e:	f7ff fdb7 	bl	80026b0 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002b42:	2106      	movs	r1, #6
 8002b44:	4837      	ldr	r0, [pc, #220]	; (8002c24 <MX_USART2_UART_Init+0x1b8>)
 8002b46:	f7ff fc5d 	bl	8002404 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 8002b4a:	4837      	ldr	r0, [pc, #220]	; (8002c28 <MX_USART2_UART_Init+0x1bc>)
 8002b4c:	f7ff ff20 	bl	8002990 <LL_USART_EnableDMAReq_RX>

  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 8002b50:	2106      	movs	r1, #6
 8002b52:	4834      	ldr	r0, [pc, #208]	; (8002c24 <MX_USART2_UART_Init+0x1b8>)
 8002b54:	f7ff fe52 	bl	80027fc <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 8002b58:	2106      	movs	r1, #6
 8002b5a:	4832      	ldr	r0, [pc, #200]	; (8002c24 <MX_USART2_UART_Init+0x1b8>)
 8002b5c:	f7ff fe6e 	bl	800283c <LL_DMA_EnableIT_HT>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002b60:	2210      	movs	r2, #16
 8002b62:	2107      	movs	r1, #7
 8002b64:	482f      	ldr	r0, [pc, #188]	; (8002c24 <MX_USART2_UART_Init+0x1b8>)
 8002b66:	f7ff fc8d 	bl	8002484 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8002b6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b6e:	2107      	movs	r1, #7
 8002b70:	482c      	ldr	r0, [pc, #176]	; (8002c24 <MX_USART2_UART_Init+0x1b8>)
 8002b72:	f7ff fd79 	bl	8002668 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2107      	movs	r1, #7
 8002b7a:	482a      	ldr	r0, [pc, #168]	; (8002c24 <MX_USART2_UART_Init+0x1b8>)
 8002b7c:	f7ff fcc0 	bl	8002500 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8002b80:	2200      	movs	r2, #0
 8002b82:	2107      	movs	r1, #7
 8002b84:	4827      	ldr	r0, [pc, #156]	; (8002c24 <MX_USART2_UART_Init+0x1b8>)
 8002b86:	f7ff fcdf 	bl	8002548 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8002b8a:	2280      	movs	r2, #128	; 0x80
 8002b8c:	2107      	movs	r1, #7
 8002b8e:	4825      	ldr	r0, [pc, #148]	; (8002c24 <MX_USART2_UART_Init+0x1b8>)
 8002b90:	f7ff fcfe 	bl	8002590 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8002b94:	2200      	movs	r2, #0
 8002b96:	2107      	movs	r1, #7
 8002b98:	4822      	ldr	r0, [pc, #136]	; (8002c24 <MX_USART2_UART_Init+0x1b8>)
 8002b9a:	f7ff fd1d 	bl	80025d8 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2107      	movs	r1, #7
 8002ba2:	4820      	ldr	r0, [pc, #128]	; (8002c24 <MX_USART2_UART_Init+0x1b8>)
 8002ba4:	f7ff fd3c 	bl	8002620 <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8002ba8:	2100      	movs	r1, #0
 8002baa:	481f      	ldr	r0, [pc, #124]	; (8002c28 <MX_USART2_UART_Init+0x1bc>)
 8002bac:	f7ff ff36 	bl	8002a1c <LL_USART_DMA_GetRegAddr>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	2107      	movs	r1, #7
 8002bb6:	481b      	ldr	r0, [pc, #108]	; (8002c24 <MX_USART2_UART_Init+0x1b8>)
 8002bb8:	f7ff fe08 	bl	80027cc <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 8002bbc:	481a      	ldr	r0, [pc, #104]	; (8002c28 <MX_USART2_UART_Init+0x1bc>)
 8002bbe:	f7ff ff0a 	bl	80029d6 <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8002bc2:	2107      	movs	r1, #7
 8002bc4:	4817      	ldr	r0, [pc, #92]	; (8002c24 <MX_USART2_UART_Init+0x1b8>)
 8002bc6:	f7ff fe59 	bl	800287c <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8002bca:	2100      	movs	r1, #0
 8002bcc:	2026      	movs	r0, #38	; 0x26
 8002bce:	f7ff fbbf 	bl	8002350 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002bd2:	2026      	movs	r0, #38	; 0x26
 8002bd4:	f7ff fb9e 	bl	8002314 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8002bd8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002bdc:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002bde:	2300      	movs	r3, #0
 8002be0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002be2:	2300      	movs	r3, #0
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002bea:	230c      	movs	r3, #12
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002bf6:	f107 031c 	add.w	r3, r7, #28
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	480a      	ldr	r0, [pc, #40]	; (8002c28 <MX_USART2_UART_Init+0x1bc>)
 8002bfe:	f000 fd2d 	bl	800365c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002c02:	4809      	ldr	r0, [pc, #36]	; (8002c28 <MX_USART2_UART_Init+0x1bc>)
 8002c04:	f7ff fe6a 	bl	80028dc <LL_USART_ConfigAsyncMode>
  LL_USART_DisableIT_CTS(USART2);
 8002c08:	4807      	ldr	r0, [pc, #28]	; (8002c28 <MX_USART2_UART_Init+0x1bc>)
 8002c0a:	f7ff fe9e 	bl	800294a <LL_USART_DisableIT_CTS>

  /* Enable USART2 peripheral and interrupts*/
  LL_USART_EnableIT_IDLE(USART2);
 8002c0e:	4806      	ldr	r0, [pc, #24]	; (8002c28 <MX_USART2_UART_Init+0x1bc>)
 8002c10:	f7ff fe7a 	bl	8002908 <LL_USART_EnableIT_IDLE>
  LL_USART_Enable(USART2);
 8002c14:	4804      	ldr	r0, [pc, #16]	; (8002c28 <MX_USART2_UART_Init+0x1bc>)
 8002c16:	f7ff fe51 	bl	80028bc <LL_USART_Enable>
  	  //type your code here:
}
 8002c1a:	bf00      	nop
 8002c1c:	3738      	adds	r7, #56	; 0x38
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bdb0      	pop	{r4, r5, r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40020000 	.word	0x40020000
 8002c28:	40004400 	.word	0x40004400
 8002c2c:	200002ec 	.word	0x200002ec

08002c30 <USART2_PutBuffer>:

// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	2107      	movs	r1, #7
 8002c42:	480a      	ldr	r0, [pc, #40]	; (8002c6c <USART2_PutBuffer+0x3c>)
 8002c44:	f7ff fdaa 	bl	800279c <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	2107      	movs	r1, #7
 8002c4e:	4807      	ldr	r0, [pc, #28]	; (8002c6c <USART2_PutBuffer+0x3c>)
 8002c50:	f7ff fd2e 	bl	80026b0 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8002c54:	2107      	movs	r1, #7
 8002c56:	4805      	ldr	r0, [pc, #20]	; (8002c6c <USART2_PutBuffer+0x3c>)
 8002c58:	f7ff fdd0 	bl	80027fc <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8002c5c:	2107      	movs	r1, #7
 8002c5e:	4803      	ldr	r0, [pc, #12]	; (8002c6c <USART2_PutBuffer+0x3c>)
 8002c60:	f7ff fbd0 	bl	8002404 <LL_DMA_EnableChannel>
}
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40020000 	.word	0x40020000

08002c70 <USART2_CheckDmaReception>:
 */

uint16_t buf_read_pos = 0;

void USART2_CheckDmaReception(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 8002c76:	2106      	movs	r1, #6
 8002c78:	482a      	ldr	r0, [pc, #168]	; (8002d24 <USART2_CheckDmaReception+0xb4>)
 8002c7a:	f7ff fd3d 	bl	80026f8 <LL_DMA_GetDataLength>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002c86:	80fb      	strh	r3, [r7, #6]

	if (pos >= DMA_USART2_BUFFER_SIZE)
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	2b7f      	cmp	r3, #127	; 0x7f
 8002c8c:	d941      	bls.n	8002d12 <USART2_CheckDmaReception+0xa2>
	{
		// set the DMA address pointer back to the beginning of the buffer
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002c8e:	2106      	movs	r1, #6
 8002c90:	4824      	ldr	r0, [pc, #144]	; (8002d24 <USART2_CheckDmaReception+0xb4>)
 8002c92:	f7ff fbd7 	bl	8002444 <LL_DMA_DisableChannel>
		LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_6, (uint32_t)bufferUSART2dma);
 8002c96:	4b24      	ldr	r3, [pc, #144]	; (8002d28 <USART2_CheckDmaReception+0xb8>)
 8002c98:	461a      	mov	r2, r3
 8002c9a:	2106      	movs	r1, #6
 8002c9c:	4821      	ldr	r0, [pc, #132]	; (8002d24 <USART2_CheckDmaReception+0xb4>)
 8002c9e:	f7ff fd7d 	bl	800279c <LL_DMA_SetMemoryAddress>
		LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8002ca2:	2280      	movs	r2, #128	; 0x80
 8002ca4:	2106      	movs	r1, #6
 8002ca6:	481f      	ldr	r0, [pc, #124]	; (8002d24 <USART2_CheckDmaReception+0xb4>)
 8002ca8:	f7ff fd02 	bl	80026b0 <LL_DMA_SetDataLength>
		LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002cac:	2106      	movs	r1, #6
 8002cae:	481d      	ldr	r0, [pc, #116]	; (8002d24 <USART2_CheckDmaReception+0xb4>)
 8002cb0:	f7ff fba8 	bl	8002404 <LL_DMA_EnableChannel>

		// process all data until the end of the buffer
		while(buf_read_pos < DMA_USART2_BUFFER_SIZE)
 8002cb4:	e012      	b.n	8002cdc <USART2_CheckDmaReception+0x6c>
		{
			if(USART2_ProcessData != 0)
 8002cb6:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <USART2_CheckDmaReception+0xbc>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d008      	beq.n	8002cd0 <USART2_CheckDmaReception+0x60>
			{
				USART2_ProcessData(bufferUSART2dma[buf_read_pos]);
 8002cbe:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <USART2_CheckDmaReception+0xbc>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a1b      	ldr	r2, [pc, #108]	; (8002d30 <USART2_CheckDmaReception+0xc0>)
 8002cc4:	8812      	ldrh	r2, [r2, #0]
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4a17      	ldr	r2, [pc, #92]	; (8002d28 <USART2_CheckDmaReception+0xb8>)
 8002cca:	5c52      	ldrb	r2, [r2, r1]
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4798      	blx	r3
			}
			buf_read_pos++;
 8002cd0:	4b17      	ldr	r3, [pc, #92]	; (8002d30 <USART2_CheckDmaReception+0xc0>)
 8002cd2:	881b      	ldrh	r3, [r3, #0]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	4b15      	ldr	r3, [pc, #84]	; (8002d30 <USART2_CheckDmaReception+0xc0>)
 8002cda:	801a      	strh	r2, [r3, #0]
		while(buf_read_pos < DMA_USART2_BUFFER_SIZE)
 8002cdc:	4b14      	ldr	r3, [pc, #80]	; (8002d30 <USART2_CheckDmaReception+0xc0>)
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	2b7f      	cmp	r3, #127	; 0x7f
 8002ce2:	d9e8      	bls.n	8002cb6 <USART2_CheckDmaReception+0x46>
		}

		buf_read_pos = 0;
 8002ce4:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <USART2_CheckDmaReception+0xc0>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	801a      	strh	r2, [r3, #0]
				USART2_ProcessData(bufferUSART2dma[buf_read_pos]);
			}
			buf_read_pos++;
		}
	}
}
 8002cea:	e017      	b.n	8002d1c <USART2_CheckDmaReception+0xac>
			if(USART2_ProcessData != 0)
 8002cec:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <USART2_CheckDmaReception+0xbc>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <USART2_CheckDmaReception+0x96>
				USART2_ProcessData(bufferUSART2dma[buf_read_pos]);
 8002cf4:	4b0d      	ldr	r3, [pc, #52]	; (8002d2c <USART2_CheckDmaReception+0xbc>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a0d      	ldr	r2, [pc, #52]	; (8002d30 <USART2_CheckDmaReception+0xc0>)
 8002cfa:	8812      	ldrh	r2, [r2, #0]
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	4a0a      	ldr	r2, [pc, #40]	; (8002d28 <USART2_CheckDmaReception+0xb8>)
 8002d00:	5c52      	ldrb	r2, [r2, r1]
 8002d02:	4610      	mov	r0, r2
 8002d04:	4798      	blx	r3
			buf_read_pos++;
 8002d06:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <USART2_CheckDmaReception+0xc0>)
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <USART2_CheckDmaReception+0xc0>)
 8002d10:	801a      	strh	r2, [r3, #0]
		while(buf_read_pos < pos)
 8002d12:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <USART2_CheckDmaReception+0xc0>)
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	88fa      	ldrh	r2, [r7, #6]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d8e7      	bhi.n	8002cec <USART2_CheckDmaReception+0x7c>
}
 8002d1c:	bf00      	nop
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40020000 	.word	0x40020000
 8002d28:	200002ec 	.word	0x200002ec
 8002d2c:	2000036c 	.word	0x2000036c
 8002d30:	20000370 	.word	0x20000370

08002d34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d6c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d38:	f7ff fada 	bl	80022f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d3c:	480c      	ldr	r0, [pc, #48]	; (8002d70 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d3e:	490d      	ldr	r1, [pc, #52]	; (8002d74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d40:	4a0d      	ldr	r2, [pc, #52]	; (8002d78 <LoopForever+0xe>)
  movs r3, #0
 8002d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d44:	e002      	b.n	8002d4c <LoopCopyDataInit>

08002d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d4a:	3304      	adds	r3, #4

08002d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d50:	d3f9      	bcc.n	8002d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d52:	4a0a      	ldr	r2, [pc, #40]	; (8002d7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d54:	4c0a      	ldr	r4, [pc, #40]	; (8002d80 <LoopForever+0x16>)
  movs r3, #0
 8002d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d58:	e001      	b.n	8002d5e <LoopFillZerobss>

08002d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d5c:	3204      	adds	r2, #4

08002d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d60:	d3fb      	bcc.n	8002d5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d62:	f001 fbcf 	bl	8004504 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d66:	f7fe ff37 	bl	8001bd8 <main>

08002d6a <LoopForever>:

LoopForever:
    b LoopForever
 8002d6a:	e7fe      	b.n	8002d6a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d6c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d74:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 8002d78:	080077a0 	.word	0x080077a0
  ldr r2, =_sbss
 8002d7c:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 8002d80:	200004c0 	.word	0x200004c0

08002d84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d84:	e7fe      	b.n	8002d84 <ADC1_2_IRQHandler>

08002d86 <LL_GPIO_SetPinMode>:
{
 8002d86:	b480      	push	{r7}
 8002d88:	b089      	sub	sp, #36	; 0x24
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	fa93 f3a3 	rbit	r3, r3
 8002da0:	613b      	str	r3, [r7, #16]
  return result;
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	fab3 f383 	clz	r3, r3
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	2103      	movs	r1, #3
 8002dae:	fa01 f303 	lsl.w	r3, r1, r3
 8002db2:	43db      	mvns	r3, r3
 8002db4:	401a      	ands	r2, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	fa93 f3a3 	rbit	r3, r3
 8002dc0:	61bb      	str	r3, [r7, #24]
  return result;
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	fab3 f383 	clz	r3, r3
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	601a      	str	r2, [r3, #0]
}
 8002dd8:	bf00      	nop
 8002dda:	3724      	adds	r7, #36	; 0x24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <LL_GPIO_SetPinOutputType>:
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	401a      	ands	r2, r3
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	431a      	orrs	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	605a      	str	r2, [r3, #4]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <LL_GPIO_SetPinSpeed>:
{
 8002e14:	b480      	push	{r7}
 8002e16:	b089      	sub	sp, #36	; 0x24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	613b      	str	r3, [r7, #16]
  return result;
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	fab3 f383 	clz	r3, r3
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	2103      	movs	r1, #3
 8002e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	401a      	ands	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	fa93 f3a3 	rbit	r3, r3
 8002e4e:	61bb      	str	r3, [r7, #24]
  return result;
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e60:	431a      	orrs	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	609a      	str	r2, [r3, #8]
}
 8002e66:	bf00      	nop
 8002e68:	3724      	adds	r7, #36	; 0x24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <LL_GPIO_SetPinPull>:
{
 8002e72:	b480      	push	{r7}
 8002e74:	b089      	sub	sp, #36	; 0x24
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	fa93 f3a3 	rbit	r3, r3
 8002e8c:	613b      	str	r3, [r7, #16]
  return result;
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	fab3 f383 	clz	r3, r3
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	2103      	movs	r1, #3
 8002e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	401a      	ands	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	fa93 f3a3 	rbit	r3, r3
 8002eac:	61bb      	str	r3, [r7, #24]
  return result;
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	fab3 f383 	clz	r3, r3
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	60da      	str	r2, [r3, #12]
}
 8002ec4:	bf00      	nop
 8002ec6:	3724      	adds	r7, #36	; 0x24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_GPIO_SetAFPin_0_7>:
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b089      	sub	sp, #36	; 0x24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a1a      	ldr	r2, [r3, #32]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	fa93 f3a3 	rbit	r3, r3
 8002eea:	613b      	str	r3, [r7, #16]
  return result;
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	fab3 f383 	clz	r3, r3
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	210f      	movs	r1, #15
 8002ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	401a      	ands	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	fa93 f3a3 	rbit	r3, r3
 8002f0a:	61bb      	str	r3, [r7, #24]
  return result;
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	fab3 f383 	clz	r3, r3
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	621a      	str	r2, [r3, #32]
}
 8002f22:	bf00      	nop
 8002f24:	3724      	adds	r7, #36	; 0x24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <LL_GPIO_SetAFPin_8_15>:
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b089      	sub	sp, #36	; 0x24
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	60f8      	str	r0, [r7, #12]
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	0a1b      	lsrs	r3, r3, #8
 8002f42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	fa93 f3a3 	rbit	r3, r3
 8002f4a:	613b      	str	r3, [r7, #16]
  return result;
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	fab3 f383 	clz	r3, r3
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	210f      	movs	r1, #15
 8002f58:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	401a      	ands	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	0a1b      	lsrs	r3, r3, #8
 8002f64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	fa93 f3a3 	rbit	r3, r3
 8002f6c:	61bb      	str	r3, [r7, #24]
  return result;
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	fab3 f383 	clz	r3, r3
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002f84:	bf00      	nop
 8002f86:	3724      	adds	r7, #36	; 0x24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	fa93 f3a3 	rbit	r3, r3
 8002fa6:	613b      	str	r3, [r7, #16]
  return result;
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	fab3 f383 	clz	r3, r3
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002fb2:	e051      	b.n	8003058 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	2101      	movs	r1, #1
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d043      	beq.n	8003052 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d003      	beq.n	8002fda <LL_GPIO_Init+0x4a>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d10e      	bne.n	8002ff8 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	69b9      	ldr	r1, [r7, #24]
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff ff16 	bl	8002e14 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	6819      	ldr	r1, [r3, #0]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7ff fef6 	bl	8002de4 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	69b9      	ldr	r1, [r7, #24]
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7ff ff36 	bl	8002e72 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d11a      	bne.n	8003044 <LL_GPIO_Init+0xb4>
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	fa93 f3a3 	rbit	r3, r3
 8003018:	60bb      	str	r3, [r7, #8]
  return result;
 800301a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800301c:	fab3 f383 	clz	r3, r3
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b07      	cmp	r3, #7
 8003024:	d807      	bhi.n	8003036 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	461a      	mov	r2, r3
 800302c:	69b9      	ldr	r1, [r7, #24]
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff ff4e 	bl	8002ed0 <LL_GPIO_SetAFPin_0_7>
 8003034:	e006      	b.n	8003044 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	461a      	mov	r2, r3
 800303c:	69b9      	ldr	r1, [r7, #24]
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff ff75 	bl	8002f2e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	461a      	mov	r2, r3
 800304a:	69b9      	ldr	r1, [r7, #24]
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff fe9a 	bl	8002d86 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	3301      	adds	r3, #1
 8003056:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	fa22 f303 	lsr.w	r3, r2, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1a6      	bne.n	8002fb4 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3720      	adds	r7, #32
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <LL_I2C_Enable>:
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f043 0201 	orr.w	r2, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	601a      	str	r2, [r3, #0]
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <LL_I2C_Disable>:
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f023 0201 	bic.w	r2, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	601a      	str	r2, [r3, #0]
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <LL_I2C_ConfigFilters>:
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	0219      	lsls	r1, r3, #8
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	430b      	orrs	r3, r1
 80030cc:	431a      	orrs	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	601a      	str	r2, [r3, #0]
}
 80030d2:	bf00      	nop
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <LL_I2C_SetOwnAddress1>:
{
 80030de:	b480      	push	{r7}
 80030e0:	b085      	sub	sp, #20
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80030f2:	f023 0307 	bic.w	r3, r3, #7
 80030f6:	68b9      	ldr	r1, [r7, #8]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	431a      	orrs	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	609a      	str	r2, [r3, #8]
}
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <LL_I2C_EnableOwnAddress1>:
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	609a      	str	r2, [r3, #8]
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <LL_I2C_DisableOwnAddress1>:
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	609a      	str	r2, [r3, #8]
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <LL_I2C_SetTiming>:
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
 8003156:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	611a      	str	r2, [r3, #16]
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <LL_I2C_SetMode>:
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
 8003172:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	601a      	str	r2, [r3, #0]
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <LL_I2C_AcknowledgeNextData>:
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	605a      	str	r2, [r3, #4]
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b082      	sub	sp, #8
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff ff65 	bl	8003090 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	6899      	ldr	r1, [r3, #8]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	461a      	mov	r2, r3
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7ff ff6d 	bl	80030b0 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	4619      	mov	r1, r3
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff ffb6 	bl	800314e <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff ff44 	bl	8003070 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7ff ffa0 	bl	800312e <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	6919      	ldr	r1, [r3, #16]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	461a      	mov	r2, r3
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff ff70 	bl	80030de <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d002      	beq.n	800320c <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff ff81 	bl	800310e <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4619      	mov	r1, r3
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7ff ffa9 	bl	800316a <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	4619      	mov	r1, r3
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7ff ffb6 	bl	8003190 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <LL_RCC_HSI_IsReady>:
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8003234:	4b06      	ldr	r3, [pc, #24]	; (8003250 <LL_RCC_HSI_IsReady+0x20>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b02      	cmp	r3, #2
 800323e:	bf0c      	ite	eq
 8003240:	2301      	moveq	r3, #1
 8003242:	2300      	movne	r3, #0
 8003244:	b2db      	uxtb	r3, r3
}
 8003246:	4618      	mov	r0, r3
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	40021000 	.word	0x40021000

08003254 <LL_RCC_LSE_IsReady>:
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8003258:	4b06      	ldr	r3, [pc, #24]	; (8003274 <LL_RCC_LSE_IsReady+0x20>)
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b02      	cmp	r3, #2
 8003262:	bf0c      	ite	eq
 8003264:	2301      	moveq	r3, #1
 8003266:	2300      	movne	r3, #0
 8003268:	b2db      	uxtb	r3, r3
}
 800326a:	4618      	mov	r0, r3
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	40021000 	.word	0x40021000

08003278 <LL_RCC_GetSysClkSource>:
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800327c:	4b04      	ldr	r3, [pc, #16]	; (8003290 <LL_RCC_GetSysClkSource+0x18>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 030c 	and.w	r3, r3, #12
}
 8003284:	4618      	mov	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40021000 	.word	0x40021000

08003294 <LL_RCC_GetAHBPrescaler>:
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003298:	4b04      	ldr	r3, [pc, #16]	; (80032ac <LL_RCC_GetAHBPrescaler+0x18>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40021000 	.word	0x40021000

080032b0 <LL_RCC_GetAPB1Prescaler>:
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80032b4:	4b04      	ldr	r3, [pc, #16]	; (80032c8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80032bc:	4618      	mov	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40021000 	.word	0x40021000

080032cc <LL_RCC_GetAPB2Prescaler>:
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80032d0:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <LL_RCC_GetAPB2Prescaler+0x18>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80032d8:	4618      	mov	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40021000 	.word	0x40021000

080032e8 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80032f0:	4b07      	ldr	r3, [pc, #28]	; (8003310 <LL_RCC_GetUSARTClockSource+0x28>)
 80032f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032f4:	2103      	movs	r1, #3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	fa01 f303 	lsl.w	r3, r1, r3
 80032fc:	401a      	ands	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	061b      	lsls	r3, r3, #24
 8003302:	4313      	orrs	r3, r2
}
 8003304:	4618      	mov	r0, r3
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	40021000 	.word	0x40021000

08003314 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8003318:	4b04      	ldr	r3, [pc, #16]	; (800332c <LL_RCC_PLL_GetMainSource+0x18>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40021000 	.word	0x40021000

08003330 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8003334:	4b04      	ldr	r3, [pc, #16]	; (8003348 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 800333c:	4618      	mov	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000

0800334c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8003350:	4b04      	ldr	r3, [pc, #16]	; (8003364 <LL_RCC_PLL_GetPrediv+0x18>)
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	f003 030f 	and.w	r3, r3, #15
}
 8003358:	4618      	mov	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000

08003368 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003370:	f000 f862 	bl	8003438 <RCC_GetSystemClockFreq>
 8003374:	4602      	mov	r2, r0
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f000 f880 	bl	8003484 <RCC_GetHCLKClockFreq>
 8003384:	4602      	mov	r2, r0
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	4618      	mov	r0, r3
 8003390:	f000 f88e 	bl	80034b0 <RCC_GetPCLK1ClockFreq>
 8003394:	4602      	mov	r2, r0
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 f89a 	bl	80034d8 <RCC_GetPCLK2ClockFreq>
 80033a4:	4602      	mov	r2, r0
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	60da      	str	r2, [r3, #12]
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d130      	bne.n	8003428 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7ff ff8e 	bl	80032e8 <LL_RCC_GetUSARTClockSource>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d00a      	beq.n	80033e8 <LL_RCC_GetUSARTClockFreq+0x34>
 80033d2:	2b03      	cmp	r3, #3
 80033d4:	d819      	bhi.n	800340a <LL_RCC_GetUSARTClockFreq+0x56>
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d002      	beq.n	80033e0 <LL_RCC_GetUSARTClockFreq+0x2c>
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d00c      	beq.n	80033f8 <LL_RCC_GetUSARTClockFreq+0x44>
 80033de:	e014      	b.n	800340a <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80033e0:	f000 f82a 	bl	8003438 <RCC_GetSystemClockFreq>
 80033e4:	60f8      	str	r0, [r7, #12]
        break;
 80033e6:	e01f      	b.n	8003428 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80033e8:	f7ff ff22 	bl	8003230 <LL_RCC_HSI_IsReady>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d017      	beq.n	8003422 <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 80033f2:	4b10      	ldr	r3, [pc, #64]	; (8003434 <LL_RCC_GetUSARTClockFreq+0x80>)
 80033f4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80033f6:	e014      	b.n	8003422 <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80033f8:	f7ff ff2c 	bl	8003254 <LL_RCC_LSE_IsReady>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d011      	beq.n	8003426 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 8003402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003406:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003408:	e00d      	b.n	8003426 <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800340a:	f000 f815 	bl	8003438 <RCC_GetSystemClockFreq>
 800340e:	4603      	mov	r3, r0
 8003410:	4618      	mov	r0, r3
 8003412:	f000 f837 	bl	8003484 <RCC_GetHCLKClockFreq>
 8003416:	4603      	mov	r3, r0
 8003418:	4618      	mov	r0, r3
 800341a:	f000 f849 	bl	80034b0 <RCC_GetPCLK1ClockFreq>
 800341e:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8003420:	e002      	b.n	8003428 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8003422:	bf00      	nop
 8003424:	e000      	b.n	8003428 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8003426:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8003428:	68fb      	ldr	r3, [r7, #12]
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	007a1200 	.word	0x007a1200

08003438 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003442:	f7ff ff19 	bl	8003278 <LL_RCC_GetSysClkSource>
 8003446:	4603      	mov	r3, r0
 8003448:	2b08      	cmp	r3, #8
 800344a:	d00c      	beq.n	8003466 <RCC_GetSystemClockFreq+0x2e>
 800344c:	2b08      	cmp	r3, #8
 800344e:	d80e      	bhi.n	800346e <RCC_GetSystemClockFreq+0x36>
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <RCC_GetSystemClockFreq+0x22>
 8003454:	2b04      	cmp	r3, #4
 8003456:	d003      	beq.n	8003460 <RCC_GetSystemClockFreq+0x28>
 8003458:	e009      	b.n	800346e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800345a:	4b09      	ldr	r3, [pc, #36]	; (8003480 <RCC_GetSystemClockFreq+0x48>)
 800345c:	607b      	str	r3, [r7, #4]
      break;
 800345e:	e009      	b.n	8003474 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003460:	4b07      	ldr	r3, [pc, #28]	; (8003480 <RCC_GetSystemClockFreq+0x48>)
 8003462:	607b      	str	r3, [r7, #4]
      break;
 8003464:	e006      	b.n	8003474 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003466:	f000 f84b 	bl	8003500 <RCC_PLL_GetFreqDomain_SYS>
 800346a:	6078      	str	r0, [r7, #4]
      break;
 800346c:	e002      	b.n	8003474 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800346e:	4b04      	ldr	r3, [pc, #16]	; (8003480 <RCC_GetSystemClockFreq+0x48>)
 8003470:	607b      	str	r3, [r7, #4]
      break;
 8003472:	bf00      	nop
  }

  return frequency;
 8003474:	687b      	ldr	r3, [r7, #4]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	007a1200 	.word	0x007a1200

08003484 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800348c:	f7ff ff02 	bl	8003294 <LL_RCC_GetAHBPrescaler>
 8003490:	4603      	mov	r3, r0
 8003492:	091b      	lsrs	r3, r3, #4
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	4a04      	ldr	r2, [pc, #16]	; (80034ac <RCC_GetHCLKClockFreq+0x28>)
 800349a:	5cd3      	ldrb	r3, [r2, r3]
 800349c:	461a      	mov	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	40d3      	lsrs	r3, r2
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	080073d0 	.word	0x080073d0

080034b0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80034b8:	f7ff fefa 	bl	80032b0 <LL_RCC_GetAPB1Prescaler>
 80034bc:	4603      	mov	r3, r0
 80034be:	0a1b      	lsrs	r3, r3, #8
 80034c0:	4a04      	ldr	r2, [pc, #16]	; (80034d4 <RCC_GetPCLK1ClockFreq+0x24>)
 80034c2:	5cd3      	ldrb	r3, [r2, r3]
 80034c4:	461a      	mov	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	40d3      	lsrs	r3, r2
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	080073e0 	.word	0x080073e0

080034d8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80034e0:	f7ff fef4 	bl	80032cc <LL_RCC_GetAPB2Prescaler>
 80034e4:	4603      	mov	r3, r0
 80034e6:	0adb      	lsrs	r3, r3, #11
 80034e8:	4a04      	ldr	r2, [pc, #16]	; (80034fc <RCC_GetPCLK2ClockFreq+0x24>)
 80034ea:	5cd3      	ldrb	r3, [r2, r3]
 80034ec:	461a      	mov	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	40d3      	lsrs	r3, r2
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	080073e0 	.word	0x080073e0

08003500 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003500:	b590      	push	{r4, r7, lr}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	2300      	movs	r3, #0
 800350c:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800350e:	f7ff ff01 	bl	8003314 <LL_RCC_PLL_GetMainSource>
 8003512:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d004      	beq.n	8003524 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003520:	d003      	beq.n	800352a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003522:	e005      	b.n	8003530 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8003524:	4b13      	ldr	r3, [pc, #76]	; (8003574 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003526:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8003528:	e005      	b.n	8003536 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800352a:	4b13      	ldr	r3, [pc, #76]	; (8003578 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800352c:	60fb      	str	r3, [r7, #12]
      break;
 800352e:	e002      	b.n	8003536 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8003530:	4b10      	ldr	r3, [pc, #64]	; (8003574 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003532:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8003534:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8003536:	f7ff ff09 	bl	800334c <LL_RCC_PLL_GetPrediv>
 800353a:	4603      	mov	r3, r0
 800353c:	3301      	adds	r3, #1
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	fbb2 f4f3 	udiv	r4, r2, r3
 8003544:	f7ff fef4 	bl	8003330 <LL_RCC_PLL_GetMultiplicator>
 8003548:	4603      	mov	r3, r0
 800354a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800354e:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003552:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	fa92 f2a2 	rbit	r2, r2
 800355a:	603a      	str	r2, [r7, #0]
  return result;
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	fab2 f282 	clz	r2, r2
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	40d3      	lsrs	r3, r2
 8003566:	3302      	adds	r3, #2
 8003568:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 800356c:	4618      	mov	r0, r3
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	bd90      	pop	{r4, r7, pc}
 8003574:	003d0900 	.word	0x003d0900
 8003578:	007a1200 	.word	0x007a1200

0800357c <LL_USART_IsEnabled>:
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <LL_USART_IsEnabled+0x18>
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <LL_USART_IsEnabled+0x1a>
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <LL_USART_SetStopBitsLength>:
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	605a      	str	r2, [r3, #4]
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <LL_USART_SetHWFlowCtrl>:
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	609a      	str	r2, [r3, #8]
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <LL_USART_SetBaudRate>:
{
 80035ee:	b480      	push	{r7}
 80035f0:	b087      	sub	sp, #28
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
 80035fa:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003602:	d11a      	bne.n	800363a <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	005a      	lsls	r2, r3, #1
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	085b      	lsrs	r3, r3, #1
 800360c:	441a      	add	r2, r3
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	fbb2 f3f3 	udiv	r3, r2, r3
 8003614:	b29b      	uxth	r3, r3
 8003616:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800361e:	4013      	ands	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	085b      	lsrs	r3, r3, #1
 8003626:	b29b      	uxth	r3, r3
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	60da      	str	r2, [r3, #12]
}
 8003638:	e00a      	b.n	8003650 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	085a      	lsrs	r2, r3, #1
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	441a      	add	r2, r3
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	fbb2 f3f3 	udiv	r3, r2, r3
 8003648:	b29b      	uxth	r3, r3
 800364a:	461a      	mov	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	60da      	str	r2, [r3, #12]
}
 8003650:	bf00      	nop
 8003652:	371c      	adds	r7, #28
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800366a:	2300      	movs	r3, #0
 800366c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff ff84 	bl	800357c <LL_USART_IsEnabled>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d14e      	bne.n	8003718 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	4b29      	ldr	r3, [pc, #164]	; (8003724 <LL_USART_Init+0xc8>)
 8003680:	4013      	ands	r3, r2
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	6851      	ldr	r1, [r2, #4]
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	68d2      	ldr	r2, [r2, #12]
 800368a:	4311      	orrs	r1, r2
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	6912      	ldr	r2, [r2, #16]
 8003690:	4311      	orrs	r1, r2
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	6992      	ldr	r2, [r2, #24]
 8003696:	430a      	orrs	r2, r1
 8003698:	431a      	orrs	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	4619      	mov	r1, r3
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff ff7c 	bl	80035a2 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	4619      	mov	r1, r3
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ff89 	bl	80035c8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a1b      	ldr	r2, [pc, #108]	; (8003728 <LL_USART_Init+0xcc>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d104      	bne.n	80036c8 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80036be:	2000      	movs	r0, #0
 80036c0:	f7ff fe78 	bl	80033b4 <LL_RCC_GetUSARTClockFreq>
 80036c4:	61b8      	str	r0, [r7, #24]
 80036c6:	e016      	b.n	80036f6 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a18      	ldr	r2, [pc, #96]	; (800372c <LL_USART_Init+0xd0>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d107      	bne.n	80036e0 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80036d0:	f107 0308 	add.w	r3, r7, #8
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff fe47 	bl	8003368 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	61bb      	str	r3, [r7, #24]
 80036de:	e00a      	b.n	80036f6 <LL_USART_Init+0x9a>
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a13      	ldr	r2, [pc, #76]	; (8003730 <LL_USART_Init+0xd4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d106      	bne.n	80036f6 <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80036e8:	f107 0308 	add.w	r3, r7, #8
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff fe3b 	bl	8003368 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00d      	beq.n	8003718 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d009      	beq.n	8003718 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8003704:	2300      	movs	r3, #0
 8003706:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003710:	69b9      	ldr	r1, [r7, #24]
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff ff6b 	bl	80035ee <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003718:	7ffb      	ldrb	r3, [r7, #31]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	efff69f3 	.word	0xefff69f3
 8003728:	40013800 	.word	0x40013800
 800372c:	40004400 	.word	0x40004400
 8003730:	40004800 	.word	0x40004800

08003734 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	fbb2 f3f3 	udiv	r3, r2, r3
 8003746:	4a07      	ldr	r2, [pc, #28]	; (8003764 <LL_InitTick+0x30>)
 8003748:	3b01      	subs	r3, #1
 800374a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800374c:	4b05      	ldr	r3, [pc, #20]	; (8003764 <LL_InitTick+0x30>)
 800374e:	2200      	movs	r2, #0
 8003750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003752:	4b04      	ldr	r3, [pc, #16]	; (8003764 <LL_InitTick+0x30>)
 8003754:	2205      	movs	r2, #5
 8003756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	e000e010 	.word	0xe000e010

08003768 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003770:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff ffdd 	bl	8003734 <LL_InitTick>
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800378c:	4a04      	ldr	r2, [pc, #16]	; (80037a0 <LL_SetSystemCoreClock+0x1c>)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6013      	str	r3, [r2, #0]
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20000084 	.word	0x20000084

080037a4 <malloc>:
 80037a4:	4b02      	ldr	r3, [pc, #8]	; (80037b0 <malloc+0xc>)
 80037a6:	4601      	mov	r1, r0
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	f000 b82b 	b.w	8003804 <_malloc_r>
 80037ae:	bf00      	nop
 80037b0:	200000e0 	.word	0x200000e0

080037b4 <free>:
 80037b4:	4b02      	ldr	r3, [pc, #8]	; (80037c0 <free+0xc>)
 80037b6:	4601      	mov	r1, r0
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	f001 bd47 	b.w	800524c <_free_r>
 80037be:	bf00      	nop
 80037c0:	200000e0 	.word	0x200000e0

080037c4 <sbrk_aligned>:
 80037c4:	b570      	push	{r4, r5, r6, lr}
 80037c6:	4e0e      	ldr	r6, [pc, #56]	; (8003800 <sbrk_aligned+0x3c>)
 80037c8:	460c      	mov	r4, r1
 80037ca:	6831      	ldr	r1, [r6, #0]
 80037cc:	4605      	mov	r5, r0
 80037ce:	b911      	cbnz	r1, 80037d6 <sbrk_aligned+0x12>
 80037d0:	f000 fe70 	bl	80044b4 <_sbrk_r>
 80037d4:	6030      	str	r0, [r6, #0]
 80037d6:	4621      	mov	r1, r4
 80037d8:	4628      	mov	r0, r5
 80037da:	f000 fe6b 	bl	80044b4 <_sbrk_r>
 80037de:	1c43      	adds	r3, r0, #1
 80037e0:	d00a      	beq.n	80037f8 <sbrk_aligned+0x34>
 80037e2:	1cc4      	adds	r4, r0, #3
 80037e4:	f024 0403 	bic.w	r4, r4, #3
 80037e8:	42a0      	cmp	r0, r4
 80037ea:	d007      	beq.n	80037fc <sbrk_aligned+0x38>
 80037ec:	1a21      	subs	r1, r4, r0
 80037ee:	4628      	mov	r0, r5
 80037f0:	f000 fe60 	bl	80044b4 <_sbrk_r>
 80037f4:	3001      	adds	r0, #1
 80037f6:	d101      	bne.n	80037fc <sbrk_aligned+0x38>
 80037f8:	f04f 34ff 	mov.w	r4, #4294967295
 80037fc:	4620      	mov	r0, r4
 80037fe:	bd70      	pop	{r4, r5, r6, pc}
 8003800:	20000378 	.word	0x20000378

08003804 <_malloc_r>:
 8003804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003808:	1ccd      	adds	r5, r1, #3
 800380a:	f025 0503 	bic.w	r5, r5, #3
 800380e:	3508      	adds	r5, #8
 8003810:	2d0c      	cmp	r5, #12
 8003812:	bf38      	it	cc
 8003814:	250c      	movcc	r5, #12
 8003816:	2d00      	cmp	r5, #0
 8003818:	4607      	mov	r7, r0
 800381a:	db01      	blt.n	8003820 <_malloc_r+0x1c>
 800381c:	42a9      	cmp	r1, r5
 800381e:	d905      	bls.n	800382c <_malloc_r+0x28>
 8003820:	230c      	movs	r3, #12
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	2600      	movs	r6, #0
 8003826:	4630      	mov	r0, r6
 8003828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800382c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003900 <_malloc_r+0xfc>
 8003830:	f000 f868 	bl	8003904 <__malloc_lock>
 8003834:	f8d8 3000 	ldr.w	r3, [r8]
 8003838:	461c      	mov	r4, r3
 800383a:	bb5c      	cbnz	r4, 8003894 <_malloc_r+0x90>
 800383c:	4629      	mov	r1, r5
 800383e:	4638      	mov	r0, r7
 8003840:	f7ff ffc0 	bl	80037c4 <sbrk_aligned>
 8003844:	1c43      	adds	r3, r0, #1
 8003846:	4604      	mov	r4, r0
 8003848:	d155      	bne.n	80038f6 <_malloc_r+0xf2>
 800384a:	f8d8 4000 	ldr.w	r4, [r8]
 800384e:	4626      	mov	r6, r4
 8003850:	2e00      	cmp	r6, #0
 8003852:	d145      	bne.n	80038e0 <_malloc_r+0xdc>
 8003854:	2c00      	cmp	r4, #0
 8003856:	d048      	beq.n	80038ea <_malloc_r+0xe6>
 8003858:	6823      	ldr	r3, [r4, #0]
 800385a:	4631      	mov	r1, r6
 800385c:	4638      	mov	r0, r7
 800385e:	eb04 0903 	add.w	r9, r4, r3
 8003862:	f000 fe27 	bl	80044b4 <_sbrk_r>
 8003866:	4581      	cmp	r9, r0
 8003868:	d13f      	bne.n	80038ea <_malloc_r+0xe6>
 800386a:	6821      	ldr	r1, [r4, #0]
 800386c:	1a6d      	subs	r5, r5, r1
 800386e:	4629      	mov	r1, r5
 8003870:	4638      	mov	r0, r7
 8003872:	f7ff ffa7 	bl	80037c4 <sbrk_aligned>
 8003876:	3001      	adds	r0, #1
 8003878:	d037      	beq.n	80038ea <_malloc_r+0xe6>
 800387a:	6823      	ldr	r3, [r4, #0]
 800387c:	442b      	add	r3, r5
 800387e:	6023      	str	r3, [r4, #0]
 8003880:	f8d8 3000 	ldr.w	r3, [r8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d038      	beq.n	80038fa <_malloc_r+0xf6>
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	42a2      	cmp	r2, r4
 800388c:	d12b      	bne.n	80038e6 <_malloc_r+0xe2>
 800388e:	2200      	movs	r2, #0
 8003890:	605a      	str	r2, [r3, #4]
 8003892:	e00f      	b.n	80038b4 <_malloc_r+0xb0>
 8003894:	6822      	ldr	r2, [r4, #0]
 8003896:	1b52      	subs	r2, r2, r5
 8003898:	d41f      	bmi.n	80038da <_malloc_r+0xd6>
 800389a:	2a0b      	cmp	r2, #11
 800389c:	d917      	bls.n	80038ce <_malloc_r+0xca>
 800389e:	1961      	adds	r1, r4, r5
 80038a0:	42a3      	cmp	r3, r4
 80038a2:	6025      	str	r5, [r4, #0]
 80038a4:	bf18      	it	ne
 80038a6:	6059      	strne	r1, [r3, #4]
 80038a8:	6863      	ldr	r3, [r4, #4]
 80038aa:	bf08      	it	eq
 80038ac:	f8c8 1000 	streq.w	r1, [r8]
 80038b0:	5162      	str	r2, [r4, r5]
 80038b2:	604b      	str	r3, [r1, #4]
 80038b4:	4638      	mov	r0, r7
 80038b6:	f104 060b 	add.w	r6, r4, #11
 80038ba:	f000 f829 	bl	8003910 <__malloc_unlock>
 80038be:	f026 0607 	bic.w	r6, r6, #7
 80038c2:	1d23      	adds	r3, r4, #4
 80038c4:	1af2      	subs	r2, r6, r3
 80038c6:	d0ae      	beq.n	8003826 <_malloc_r+0x22>
 80038c8:	1b9b      	subs	r3, r3, r6
 80038ca:	50a3      	str	r3, [r4, r2]
 80038cc:	e7ab      	b.n	8003826 <_malloc_r+0x22>
 80038ce:	42a3      	cmp	r3, r4
 80038d0:	6862      	ldr	r2, [r4, #4]
 80038d2:	d1dd      	bne.n	8003890 <_malloc_r+0x8c>
 80038d4:	f8c8 2000 	str.w	r2, [r8]
 80038d8:	e7ec      	b.n	80038b4 <_malloc_r+0xb0>
 80038da:	4623      	mov	r3, r4
 80038dc:	6864      	ldr	r4, [r4, #4]
 80038de:	e7ac      	b.n	800383a <_malloc_r+0x36>
 80038e0:	4634      	mov	r4, r6
 80038e2:	6876      	ldr	r6, [r6, #4]
 80038e4:	e7b4      	b.n	8003850 <_malloc_r+0x4c>
 80038e6:	4613      	mov	r3, r2
 80038e8:	e7cc      	b.n	8003884 <_malloc_r+0x80>
 80038ea:	230c      	movs	r3, #12
 80038ec:	603b      	str	r3, [r7, #0]
 80038ee:	4638      	mov	r0, r7
 80038f0:	f000 f80e 	bl	8003910 <__malloc_unlock>
 80038f4:	e797      	b.n	8003826 <_malloc_r+0x22>
 80038f6:	6025      	str	r5, [r4, #0]
 80038f8:	e7dc      	b.n	80038b4 <_malloc_r+0xb0>
 80038fa:	605b      	str	r3, [r3, #4]
 80038fc:	deff      	udf	#255	; 0xff
 80038fe:	bf00      	nop
 8003900:	20000374 	.word	0x20000374

08003904 <__malloc_lock>:
 8003904:	4801      	ldr	r0, [pc, #4]	; (800390c <__malloc_lock+0x8>)
 8003906:	f000 be22 	b.w	800454e <__retarget_lock_acquire_recursive>
 800390a:	bf00      	nop
 800390c:	200004bc 	.word	0x200004bc

08003910 <__malloc_unlock>:
 8003910:	4801      	ldr	r0, [pc, #4]	; (8003918 <__malloc_unlock+0x8>)
 8003912:	f000 be1d 	b.w	8004550 <__retarget_lock_release_recursive>
 8003916:	bf00      	nop
 8003918:	200004bc 	.word	0x200004bc

0800391c <__cvt>:
 800391c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003920:	ec55 4b10 	vmov	r4, r5, d0
 8003924:	2d00      	cmp	r5, #0
 8003926:	460e      	mov	r6, r1
 8003928:	4619      	mov	r1, r3
 800392a:	462b      	mov	r3, r5
 800392c:	bfbb      	ittet	lt
 800392e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003932:	461d      	movlt	r5, r3
 8003934:	2300      	movge	r3, #0
 8003936:	232d      	movlt	r3, #45	; 0x2d
 8003938:	700b      	strb	r3, [r1, #0]
 800393a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800393c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003940:	4691      	mov	r9, r2
 8003942:	f023 0820 	bic.w	r8, r3, #32
 8003946:	bfbc      	itt	lt
 8003948:	4622      	movlt	r2, r4
 800394a:	4614      	movlt	r4, r2
 800394c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003950:	d005      	beq.n	800395e <__cvt+0x42>
 8003952:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003956:	d100      	bne.n	800395a <__cvt+0x3e>
 8003958:	3601      	adds	r6, #1
 800395a:	2102      	movs	r1, #2
 800395c:	e000      	b.n	8003960 <__cvt+0x44>
 800395e:	2103      	movs	r1, #3
 8003960:	ab03      	add	r3, sp, #12
 8003962:	9301      	str	r3, [sp, #4]
 8003964:	ab02      	add	r3, sp, #8
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	ec45 4b10 	vmov	d0, r4, r5
 800396c:	4653      	mov	r3, sl
 800396e:	4632      	mov	r2, r6
 8003970:	f000 fe7a 	bl	8004668 <_dtoa_r>
 8003974:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003978:	4607      	mov	r7, r0
 800397a:	d102      	bne.n	8003982 <__cvt+0x66>
 800397c:	f019 0f01 	tst.w	r9, #1
 8003980:	d022      	beq.n	80039c8 <__cvt+0xac>
 8003982:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003986:	eb07 0906 	add.w	r9, r7, r6
 800398a:	d110      	bne.n	80039ae <__cvt+0x92>
 800398c:	783b      	ldrb	r3, [r7, #0]
 800398e:	2b30      	cmp	r3, #48	; 0x30
 8003990:	d10a      	bne.n	80039a8 <__cvt+0x8c>
 8003992:	2200      	movs	r2, #0
 8003994:	2300      	movs	r3, #0
 8003996:	4620      	mov	r0, r4
 8003998:	4629      	mov	r1, r5
 800399a:	f7fd f895 	bl	8000ac8 <__aeabi_dcmpeq>
 800399e:	b918      	cbnz	r0, 80039a8 <__cvt+0x8c>
 80039a0:	f1c6 0601 	rsb	r6, r6, #1
 80039a4:	f8ca 6000 	str.w	r6, [sl]
 80039a8:	f8da 3000 	ldr.w	r3, [sl]
 80039ac:	4499      	add	r9, r3
 80039ae:	2200      	movs	r2, #0
 80039b0:	2300      	movs	r3, #0
 80039b2:	4620      	mov	r0, r4
 80039b4:	4629      	mov	r1, r5
 80039b6:	f7fd f887 	bl	8000ac8 <__aeabi_dcmpeq>
 80039ba:	b108      	cbz	r0, 80039c0 <__cvt+0xa4>
 80039bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80039c0:	2230      	movs	r2, #48	; 0x30
 80039c2:	9b03      	ldr	r3, [sp, #12]
 80039c4:	454b      	cmp	r3, r9
 80039c6:	d307      	bcc.n	80039d8 <__cvt+0xbc>
 80039c8:	9b03      	ldr	r3, [sp, #12]
 80039ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80039cc:	1bdb      	subs	r3, r3, r7
 80039ce:	4638      	mov	r0, r7
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	b004      	add	sp, #16
 80039d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039d8:	1c59      	adds	r1, r3, #1
 80039da:	9103      	str	r1, [sp, #12]
 80039dc:	701a      	strb	r2, [r3, #0]
 80039de:	e7f0      	b.n	80039c2 <__cvt+0xa6>

080039e0 <__exponent>:
 80039e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039e2:	4603      	mov	r3, r0
 80039e4:	2900      	cmp	r1, #0
 80039e6:	bfb8      	it	lt
 80039e8:	4249      	neglt	r1, r1
 80039ea:	f803 2b02 	strb.w	r2, [r3], #2
 80039ee:	bfb4      	ite	lt
 80039f0:	222d      	movlt	r2, #45	; 0x2d
 80039f2:	222b      	movge	r2, #43	; 0x2b
 80039f4:	2909      	cmp	r1, #9
 80039f6:	7042      	strb	r2, [r0, #1]
 80039f8:	dd2a      	ble.n	8003a50 <__exponent+0x70>
 80039fa:	f10d 0207 	add.w	r2, sp, #7
 80039fe:	4617      	mov	r7, r2
 8003a00:	260a      	movs	r6, #10
 8003a02:	4694      	mov	ip, r2
 8003a04:	fb91 f5f6 	sdiv	r5, r1, r6
 8003a08:	fb06 1415 	mls	r4, r6, r5, r1
 8003a0c:	3430      	adds	r4, #48	; 0x30
 8003a0e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003a12:	460c      	mov	r4, r1
 8003a14:	2c63      	cmp	r4, #99	; 0x63
 8003a16:	f102 32ff 	add.w	r2, r2, #4294967295
 8003a1a:	4629      	mov	r1, r5
 8003a1c:	dcf1      	bgt.n	8003a02 <__exponent+0x22>
 8003a1e:	3130      	adds	r1, #48	; 0x30
 8003a20:	f1ac 0402 	sub.w	r4, ip, #2
 8003a24:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003a28:	1c41      	adds	r1, r0, #1
 8003a2a:	4622      	mov	r2, r4
 8003a2c:	42ba      	cmp	r2, r7
 8003a2e:	d30a      	bcc.n	8003a46 <__exponent+0x66>
 8003a30:	f10d 0209 	add.w	r2, sp, #9
 8003a34:	eba2 020c 	sub.w	r2, r2, ip
 8003a38:	42bc      	cmp	r4, r7
 8003a3a:	bf88      	it	hi
 8003a3c:	2200      	movhi	r2, #0
 8003a3e:	4413      	add	r3, r2
 8003a40:	1a18      	subs	r0, r3, r0
 8003a42:	b003      	add	sp, #12
 8003a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a46:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003a4a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003a4e:	e7ed      	b.n	8003a2c <__exponent+0x4c>
 8003a50:	2330      	movs	r3, #48	; 0x30
 8003a52:	3130      	adds	r1, #48	; 0x30
 8003a54:	7083      	strb	r3, [r0, #2]
 8003a56:	70c1      	strb	r1, [r0, #3]
 8003a58:	1d03      	adds	r3, r0, #4
 8003a5a:	e7f1      	b.n	8003a40 <__exponent+0x60>

08003a5c <_printf_float>:
 8003a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a60:	ed2d 8b02 	vpush	{d8}
 8003a64:	b08d      	sub	sp, #52	; 0x34
 8003a66:	460c      	mov	r4, r1
 8003a68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003a6c:	4616      	mov	r6, r2
 8003a6e:	461f      	mov	r7, r3
 8003a70:	4605      	mov	r5, r0
 8003a72:	f000 fce7 	bl	8004444 <_localeconv_r>
 8003a76:	f8d0 a000 	ldr.w	sl, [r0]
 8003a7a:	4650      	mov	r0, sl
 8003a7c:	f7fc fbf8 	bl	8000270 <strlen>
 8003a80:	2300      	movs	r3, #0
 8003a82:	930a      	str	r3, [sp, #40]	; 0x28
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	9305      	str	r3, [sp, #20]
 8003a88:	f8d8 3000 	ldr.w	r3, [r8]
 8003a8c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003a90:	3307      	adds	r3, #7
 8003a92:	f023 0307 	bic.w	r3, r3, #7
 8003a96:	f103 0208 	add.w	r2, r3, #8
 8003a9a:	f8c8 2000 	str.w	r2, [r8]
 8003a9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003aa2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003aa6:	9307      	str	r3, [sp, #28]
 8003aa8:	f8cd 8018 	str.w	r8, [sp, #24]
 8003aac:	ee08 0a10 	vmov	s16, r0
 8003ab0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003ab4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ab8:	4b9e      	ldr	r3, [pc, #632]	; (8003d34 <_printf_float+0x2d8>)
 8003aba:	f04f 32ff 	mov.w	r2, #4294967295
 8003abe:	f7fd f835 	bl	8000b2c <__aeabi_dcmpun>
 8003ac2:	bb88      	cbnz	r0, 8003b28 <_printf_float+0xcc>
 8003ac4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ac8:	4b9a      	ldr	r3, [pc, #616]	; (8003d34 <_printf_float+0x2d8>)
 8003aca:	f04f 32ff 	mov.w	r2, #4294967295
 8003ace:	f7fd f80f 	bl	8000af0 <__aeabi_dcmple>
 8003ad2:	bb48      	cbnz	r0, 8003b28 <_printf_float+0xcc>
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	4640      	mov	r0, r8
 8003ada:	4649      	mov	r1, r9
 8003adc:	f7fc fffe 	bl	8000adc <__aeabi_dcmplt>
 8003ae0:	b110      	cbz	r0, 8003ae8 <_printf_float+0x8c>
 8003ae2:	232d      	movs	r3, #45	; 0x2d
 8003ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ae8:	4a93      	ldr	r2, [pc, #588]	; (8003d38 <_printf_float+0x2dc>)
 8003aea:	4b94      	ldr	r3, [pc, #592]	; (8003d3c <_printf_float+0x2e0>)
 8003aec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003af0:	bf94      	ite	ls
 8003af2:	4690      	movls	r8, r2
 8003af4:	4698      	movhi	r8, r3
 8003af6:	2303      	movs	r3, #3
 8003af8:	6123      	str	r3, [r4, #16]
 8003afa:	9b05      	ldr	r3, [sp, #20]
 8003afc:	f023 0304 	bic.w	r3, r3, #4
 8003b00:	6023      	str	r3, [r4, #0]
 8003b02:	f04f 0900 	mov.w	r9, #0
 8003b06:	9700      	str	r7, [sp, #0]
 8003b08:	4633      	mov	r3, r6
 8003b0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8003b0c:	4621      	mov	r1, r4
 8003b0e:	4628      	mov	r0, r5
 8003b10:	f000 f9da 	bl	8003ec8 <_printf_common>
 8003b14:	3001      	adds	r0, #1
 8003b16:	f040 8090 	bne.w	8003c3a <_printf_float+0x1de>
 8003b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b1e:	b00d      	add	sp, #52	; 0x34
 8003b20:	ecbd 8b02 	vpop	{d8}
 8003b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b28:	4642      	mov	r2, r8
 8003b2a:	464b      	mov	r3, r9
 8003b2c:	4640      	mov	r0, r8
 8003b2e:	4649      	mov	r1, r9
 8003b30:	f7fc fffc 	bl	8000b2c <__aeabi_dcmpun>
 8003b34:	b140      	cbz	r0, 8003b48 <_printf_float+0xec>
 8003b36:	464b      	mov	r3, r9
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	bfbc      	itt	lt
 8003b3c:	232d      	movlt	r3, #45	; 0x2d
 8003b3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003b42:	4a7f      	ldr	r2, [pc, #508]	; (8003d40 <_printf_float+0x2e4>)
 8003b44:	4b7f      	ldr	r3, [pc, #508]	; (8003d44 <_printf_float+0x2e8>)
 8003b46:	e7d1      	b.n	8003aec <_printf_float+0x90>
 8003b48:	6863      	ldr	r3, [r4, #4]
 8003b4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003b4e:	9206      	str	r2, [sp, #24]
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	d13f      	bne.n	8003bd4 <_printf_float+0x178>
 8003b54:	2306      	movs	r3, #6
 8003b56:	6063      	str	r3, [r4, #4]
 8003b58:	9b05      	ldr	r3, [sp, #20]
 8003b5a:	6861      	ldr	r1, [r4, #4]
 8003b5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003b60:	2300      	movs	r3, #0
 8003b62:	9303      	str	r3, [sp, #12]
 8003b64:	ab0a      	add	r3, sp, #40	; 0x28
 8003b66:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003b6a:	ab09      	add	r3, sp, #36	; 0x24
 8003b6c:	ec49 8b10 	vmov	d0, r8, r9
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	6022      	str	r2, [r4, #0]
 8003b74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003b78:	4628      	mov	r0, r5
 8003b7a:	f7ff fecf 	bl	800391c <__cvt>
 8003b7e:	9b06      	ldr	r3, [sp, #24]
 8003b80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003b82:	2b47      	cmp	r3, #71	; 0x47
 8003b84:	4680      	mov	r8, r0
 8003b86:	d108      	bne.n	8003b9a <_printf_float+0x13e>
 8003b88:	1cc8      	adds	r0, r1, #3
 8003b8a:	db02      	blt.n	8003b92 <_printf_float+0x136>
 8003b8c:	6863      	ldr	r3, [r4, #4]
 8003b8e:	4299      	cmp	r1, r3
 8003b90:	dd41      	ble.n	8003c16 <_printf_float+0x1ba>
 8003b92:	f1ab 0302 	sub.w	r3, fp, #2
 8003b96:	fa5f fb83 	uxtb.w	fp, r3
 8003b9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003b9e:	d820      	bhi.n	8003be2 <_printf_float+0x186>
 8003ba0:	3901      	subs	r1, #1
 8003ba2:	465a      	mov	r2, fp
 8003ba4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003ba8:	9109      	str	r1, [sp, #36]	; 0x24
 8003baa:	f7ff ff19 	bl	80039e0 <__exponent>
 8003bae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003bb0:	1813      	adds	r3, r2, r0
 8003bb2:	2a01      	cmp	r2, #1
 8003bb4:	4681      	mov	r9, r0
 8003bb6:	6123      	str	r3, [r4, #16]
 8003bb8:	dc02      	bgt.n	8003bc0 <_printf_float+0x164>
 8003bba:	6822      	ldr	r2, [r4, #0]
 8003bbc:	07d2      	lsls	r2, r2, #31
 8003bbe:	d501      	bpl.n	8003bc4 <_printf_float+0x168>
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	6123      	str	r3, [r4, #16]
 8003bc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d09c      	beq.n	8003b06 <_printf_float+0xaa>
 8003bcc:	232d      	movs	r3, #45	; 0x2d
 8003bce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bd2:	e798      	b.n	8003b06 <_printf_float+0xaa>
 8003bd4:	9a06      	ldr	r2, [sp, #24]
 8003bd6:	2a47      	cmp	r2, #71	; 0x47
 8003bd8:	d1be      	bne.n	8003b58 <_printf_float+0xfc>
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1bc      	bne.n	8003b58 <_printf_float+0xfc>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e7b9      	b.n	8003b56 <_printf_float+0xfa>
 8003be2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003be6:	d118      	bne.n	8003c1a <_printf_float+0x1be>
 8003be8:	2900      	cmp	r1, #0
 8003bea:	6863      	ldr	r3, [r4, #4]
 8003bec:	dd0b      	ble.n	8003c06 <_printf_float+0x1aa>
 8003bee:	6121      	str	r1, [r4, #16]
 8003bf0:	b913      	cbnz	r3, 8003bf8 <_printf_float+0x19c>
 8003bf2:	6822      	ldr	r2, [r4, #0]
 8003bf4:	07d0      	lsls	r0, r2, #31
 8003bf6:	d502      	bpl.n	8003bfe <_printf_float+0x1a2>
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	440b      	add	r3, r1
 8003bfc:	6123      	str	r3, [r4, #16]
 8003bfe:	65a1      	str	r1, [r4, #88]	; 0x58
 8003c00:	f04f 0900 	mov.w	r9, #0
 8003c04:	e7de      	b.n	8003bc4 <_printf_float+0x168>
 8003c06:	b913      	cbnz	r3, 8003c0e <_printf_float+0x1b2>
 8003c08:	6822      	ldr	r2, [r4, #0]
 8003c0a:	07d2      	lsls	r2, r2, #31
 8003c0c:	d501      	bpl.n	8003c12 <_printf_float+0x1b6>
 8003c0e:	3302      	adds	r3, #2
 8003c10:	e7f4      	b.n	8003bfc <_printf_float+0x1a0>
 8003c12:	2301      	movs	r3, #1
 8003c14:	e7f2      	b.n	8003bfc <_printf_float+0x1a0>
 8003c16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c1c:	4299      	cmp	r1, r3
 8003c1e:	db05      	blt.n	8003c2c <_printf_float+0x1d0>
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	6121      	str	r1, [r4, #16]
 8003c24:	07d8      	lsls	r0, r3, #31
 8003c26:	d5ea      	bpl.n	8003bfe <_printf_float+0x1a2>
 8003c28:	1c4b      	adds	r3, r1, #1
 8003c2a:	e7e7      	b.n	8003bfc <_printf_float+0x1a0>
 8003c2c:	2900      	cmp	r1, #0
 8003c2e:	bfd4      	ite	le
 8003c30:	f1c1 0202 	rsble	r2, r1, #2
 8003c34:	2201      	movgt	r2, #1
 8003c36:	4413      	add	r3, r2
 8003c38:	e7e0      	b.n	8003bfc <_printf_float+0x1a0>
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	055a      	lsls	r2, r3, #21
 8003c3e:	d407      	bmi.n	8003c50 <_printf_float+0x1f4>
 8003c40:	6923      	ldr	r3, [r4, #16]
 8003c42:	4642      	mov	r2, r8
 8003c44:	4631      	mov	r1, r6
 8003c46:	4628      	mov	r0, r5
 8003c48:	47b8      	blx	r7
 8003c4a:	3001      	adds	r0, #1
 8003c4c:	d12c      	bne.n	8003ca8 <_printf_float+0x24c>
 8003c4e:	e764      	b.n	8003b1a <_printf_float+0xbe>
 8003c50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003c54:	f240 80e0 	bls.w	8003e18 <_printf_float+0x3bc>
 8003c58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f7fc ff32 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c64:	2800      	cmp	r0, #0
 8003c66:	d034      	beq.n	8003cd2 <_printf_float+0x276>
 8003c68:	4a37      	ldr	r2, [pc, #220]	; (8003d48 <_printf_float+0x2ec>)
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	4631      	mov	r1, r6
 8003c6e:	4628      	mov	r0, r5
 8003c70:	47b8      	blx	r7
 8003c72:	3001      	adds	r0, #1
 8003c74:	f43f af51 	beq.w	8003b1a <_printf_float+0xbe>
 8003c78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	db02      	blt.n	8003c86 <_printf_float+0x22a>
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	07d8      	lsls	r0, r3, #31
 8003c84:	d510      	bpl.n	8003ca8 <_printf_float+0x24c>
 8003c86:	ee18 3a10 	vmov	r3, s16
 8003c8a:	4652      	mov	r2, sl
 8003c8c:	4631      	mov	r1, r6
 8003c8e:	4628      	mov	r0, r5
 8003c90:	47b8      	blx	r7
 8003c92:	3001      	adds	r0, #1
 8003c94:	f43f af41 	beq.w	8003b1a <_printf_float+0xbe>
 8003c98:	f04f 0800 	mov.w	r8, #0
 8003c9c:	f104 091a 	add.w	r9, r4, #26
 8003ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	4543      	cmp	r3, r8
 8003ca6:	dc09      	bgt.n	8003cbc <_printf_float+0x260>
 8003ca8:	6823      	ldr	r3, [r4, #0]
 8003caa:	079b      	lsls	r3, r3, #30
 8003cac:	f100 8107 	bmi.w	8003ebe <_printf_float+0x462>
 8003cb0:	68e0      	ldr	r0, [r4, #12]
 8003cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003cb4:	4298      	cmp	r0, r3
 8003cb6:	bfb8      	it	lt
 8003cb8:	4618      	movlt	r0, r3
 8003cba:	e730      	b.n	8003b1e <_printf_float+0xc2>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	464a      	mov	r2, r9
 8003cc0:	4631      	mov	r1, r6
 8003cc2:	4628      	mov	r0, r5
 8003cc4:	47b8      	blx	r7
 8003cc6:	3001      	adds	r0, #1
 8003cc8:	f43f af27 	beq.w	8003b1a <_printf_float+0xbe>
 8003ccc:	f108 0801 	add.w	r8, r8, #1
 8003cd0:	e7e6      	b.n	8003ca0 <_printf_float+0x244>
 8003cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	dc39      	bgt.n	8003d4c <_printf_float+0x2f0>
 8003cd8:	4a1b      	ldr	r2, [pc, #108]	; (8003d48 <_printf_float+0x2ec>)
 8003cda:	2301      	movs	r3, #1
 8003cdc:	4631      	mov	r1, r6
 8003cde:	4628      	mov	r0, r5
 8003ce0:	47b8      	blx	r7
 8003ce2:	3001      	adds	r0, #1
 8003ce4:	f43f af19 	beq.w	8003b1a <_printf_float+0xbe>
 8003ce8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003cec:	4313      	orrs	r3, r2
 8003cee:	d102      	bne.n	8003cf6 <_printf_float+0x29a>
 8003cf0:	6823      	ldr	r3, [r4, #0]
 8003cf2:	07d9      	lsls	r1, r3, #31
 8003cf4:	d5d8      	bpl.n	8003ca8 <_printf_float+0x24c>
 8003cf6:	ee18 3a10 	vmov	r3, s16
 8003cfa:	4652      	mov	r2, sl
 8003cfc:	4631      	mov	r1, r6
 8003cfe:	4628      	mov	r0, r5
 8003d00:	47b8      	blx	r7
 8003d02:	3001      	adds	r0, #1
 8003d04:	f43f af09 	beq.w	8003b1a <_printf_float+0xbe>
 8003d08:	f04f 0900 	mov.w	r9, #0
 8003d0c:	f104 0a1a 	add.w	sl, r4, #26
 8003d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d12:	425b      	negs	r3, r3
 8003d14:	454b      	cmp	r3, r9
 8003d16:	dc01      	bgt.n	8003d1c <_printf_float+0x2c0>
 8003d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d1a:	e792      	b.n	8003c42 <_printf_float+0x1e6>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	4652      	mov	r2, sl
 8003d20:	4631      	mov	r1, r6
 8003d22:	4628      	mov	r0, r5
 8003d24:	47b8      	blx	r7
 8003d26:	3001      	adds	r0, #1
 8003d28:	f43f aef7 	beq.w	8003b1a <_printf_float+0xbe>
 8003d2c:	f109 0901 	add.w	r9, r9, #1
 8003d30:	e7ee      	b.n	8003d10 <_printf_float+0x2b4>
 8003d32:	bf00      	nop
 8003d34:	7fefffff 	.word	0x7fefffff
 8003d38:	080073ef 	.word	0x080073ef
 8003d3c:	080073f3 	.word	0x080073f3
 8003d40:	080073f7 	.word	0x080073f7
 8003d44:	080073fb 	.word	0x080073fb
 8003d48:	080073ff 	.word	0x080073ff
 8003d4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d50:	429a      	cmp	r2, r3
 8003d52:	bfa8      	it	ge
 8003d54:	461a      	movge	r2, r3
 8003d56:	2a00      	cmp	r2, #0
 8003d58:	4691      	mov	r9, r2
 8003d5a:	dc37      	bgt.n	8003dcc <_printf_float+0x370>
 8003d5c:	f04f 0b00 	mov.w	fp, #0
 8003d60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d64:	f104 021a 	add.w	r2, r4, #26
 8003d68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d6a:	9305      	str	r3, [sp, #20]
 8003d6c:	eba3 0309 	sub.w	r3, r3, r9
 8003d70:	455b      	cmp	r3, fp
 8003d72:	dc33      	bgt.n	8003ddc <_printf_float+0x380>
 8003d74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	db3b      	blt.n	8003df4 <_printf_float+0x398>
 8003d7c:	6823      	ldr	r3, [r4, #0]
 8003d7e:	07da      	lsls	r2, r3, #31
 8003d80:	d438      	bmi.n	8003df4 <_printf_float+0x398>
 8003d82:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003d86:	eba2 0903 	sub.w	r9, r2, r3
 8003d8a:	9b05      	ldr	r3, [sp, #20]
 8003d8c:	1ad2      	subs	r2, r2, r3
 8003d8e:	4591      	cmp	r9, r2
 8003d90:	bfa8      	it	ge
 8003d92:	4691      	movge	r9, r2
 8003d94:	f1b9 0f00 	cmp.w	r9, #0
 8003d98:	dc35      	bgt.n	8003e06 <_printf_float+0x3aa>
 8003d9a:	f04f 0800 	mov.w	r8, #0
 8003d9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003da2:	f104 0a1a 	add.w	sl, r4, #26
 8003da6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003daa:	1a9b      	subs	r3, r3, r2
 8003dac:	eba3 0309 	sub.w	r3, r3, r9
 8003db0:	4543      	cmp	r3, r8
 8003db2:	f77f af79 	ble.w	8003ca8 <_printf_float+0x24c>
 8003db6:	2301      	movs	r3, #1
 8003db8:	4652      	mov	r2, sl
 8003dba:	4631      	mov	r1, r6
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	47b8      	blx	r7
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	f43f aeaa 	beq.w	8003b1a <_printf_float+0xbe>
 8003dc6:	f108 0801 	add.w	r8, r8, #1
 8003dca:	e7ec      	b.n	8003da6 <_printf_float+0x34a>
 8003dcc:	4613      	mov	r3, r2
 8003dce:	4631      	mov	r1, r6
 8003dd0:	4642      	mov	r2, r8
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	47b8      	blx	r7
 8003dd6:	3001      	adds	r0, #1
 8003dd8:	d1c0      	bne.n	8003d5c <_printf_float+0x300>
 8003dda:	e69e      	b.n	8003b1a <_printf_float+0xbe>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	4631      	mov	r1, r6
 8003de0:	4628      	mov	r0, r5
 8003de2:	9205      	str	r2, [sp, #20]
 8003de4:	47b8      	blx	r7
 8003de6:	3001      	adds	r0, #1
 8003de8:	f43f ae97 	beq.w	8003b1a <_printf_float+0xbe>
 8003dec:	9a05      	ldr	r2, [sp, #20]
 8003dee:	f10b 0b01 	add.w	fp, fp, #1
 8003df2:	e7b9      	b.n	8003d68 <_printf_float+0x30c>
 8003df4:	ee18 3a10 	vmov	r3, s16
 8003df8:	4652      	mov	r2, sl
 8003dfa:	4631      	mov	r1, r6
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	47b8      	blx	r7
 8003e00:	3001      	adds	r0, #1
 8003e02:	d1be      	bne.n	8003d82 <_printf_float+0x326>
 8003e04:	e689      	b.n	8003b1a <_printf_float+0xbe>
 8003e06:	9a05      	ldr	r2, [sp, #20]
 8003e08:	464b      	mov	r3, r9
 8003e0a:	4442      	add	r2, r8
 8003e0c:	4631      	mov	r1, r6
 8003e0e:	4628      	mov	r0, r5
 8003e10:	47b8      	blx	r7
 8003e12:	3001      	adds	r0, #1
 8003e14:	d1c1      	bne.n	8003d9a <_printf_float+0x33e>
 8003e16:	e680      	b.n	8003b1a <_printf_float+0xbe>
 8003e18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e1a:	2a01      	cmp	r2, #1
 8003e1c:	dc01      	bgt.n	8003e22 <_printf_float+0x3c6>
 8003e1e:	07db      	lsls	r3, r3, #31
 8003e20:	d53a      	bpl.n	8003e98 <_printf_float+0x43c>
 8003e22:	2301      	movs	r3, #1
 8003e24:	4642      	mov	r2, r8
 8003e26:	4631      	mov	r1, r6
 8003e28:	4628      	mov	r0, r5
 8003e2a:	47b8      	blx	r7
 8003e2c:	3001      	adds	r0, #1
 8003e2e:	f43f ae74 	beq.w	8003b1a <_printf_float+0xbe>
 8003e32:	ee18 3a10 	vmov	r3, s16
 8003e36:	4652      	mov	r2, sl
 8003e38:	4631      	mov	r1, r6
 8003e3a:	4628      	mov	r0, r5
 8003e3c:	47b8      	blx	r7
 8003e3e:	3001      	adds	r0, #1
 8003e40:	f43f ae6b 	beq.w	8003b1a <_printf_float+0xbe>
 8003e44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e48:	2200      	movs	r2, #0
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003e50:	f7fc fe3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e54:	b9d8      	cbnz	r0, 8003e8e <_printf_float+0x432>
 8003e56:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003e5a:	f108 0201 	add.w	r2, r8, #1
 8003e5e:	4631      	mov	r1, r6
 8003e60:	4628      	mov	r0, r5
 8003e62:	47b8      	blx	r7
 8003e64:	3001      	adds	r0, #1
 8003e66:	d10e      	bne.n	8003e86 <_printf_float+0x42a>
 8003e68:	e657      	b.n	8003b1a <_printf_float+0xbe>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	4652      	mov	r2, sl
 8003e6e:	4631      	mov	r1, r6
 8003e70:	4628      	mov	r0, r5
 8003e72:	47b8      	blx	r7
 8003e74:	3001      	adds	r0, #1
 8003e76:	f43f ae50 	beq.w	8003b1a <_printf_float+0xbe>
 8003e7a:	f108 0801 	add.w	r8, r8, #1
 8003e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e80:	3b01      	subs	r3, #1
 8003e82:	4543      	cmp	r3, r8
 8003e84:	dcf1      	bgt.n	8003e6a <_printf_float+0x40e>
 8003e86:	464b      	mov	r3, r9
 8003e88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003e8c:	e6da      	b.n	8003c44 <_printf_float+0x1e8>
 8003e8e:	f04f 0800 	mov.w	r8, #0
 8003e92:	f104 0a1a 	add.w	sl, r4, #26
 8003e96:	e7f2      	b.n	8003e7e <_printf_float+0x422>
 8003e98:	2301      	movs	r3, #1
 8003e9a:	4642      	mov	r2, r8
 8003e9c:	e7df      	b.n	8003e5e <_printf_float+0x402>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	464a      	mov	r2, r9
 8003ea2:	4631      	mov	r1, r6
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	47b8      	blx	r7
 8003ea8:	3001      	adds	r0, #1
 8003eaa:	f43f ae36 	beq.w	8003b1a <_printf_float+0xbe>
 8003eae:	f108 0801 	add.w	r8, r8, #1
 8003eb2:	68e3      	ldr	r3, [r4, #12]
 8003eb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003eb6:	1a5b      	subs	r3, r3, r1
 8003eb8:	4543      	cmp	r3, r8
 8003eba:	dcf0      	bgt.n	8003e9e <_printf_float+0x442>
 8003ebc:	e6f8      	b.n	8003cb0 <_printf_float+0x254>
 8003ebe:	f04f 0800 	mov.w	r8, #0
 8003ec2:	f104 0919 	add.w	r9, r4, #25
 8003ec6:	e7f4      	b.n	8003eb2 <_printf_float+0x456>

08003ec8 <_printf_common>:
 8003ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ecc:	4616      	mov	r6, r2
 8003ece:	4699      	mov	r9, r3
 8003ed0:	688a      	ldr	r2, [r1, #8]
 8003ed2:	690b      	ldr	r3, [r1, #16]
 8003ed4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	bfb8      	it	lt
 8003edc:	4613      	movlt	r3, r2
 8003ede:	6033      	str	r3, [r6, #0]
 8003ee0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ee4:	4607      	mov	r7, r0
 8003ee6:	460c      	mov	r4, r1
 8003ee8:	b10a      	cbz	r2, 8003eee <_printf_common+0x26>
 8003eea:	3301      	adds	r3, #1
 8003eec:	6033      	str	r3, [r6, #0]
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	0699      	lsls	r1, r3, #26
 8003ef2:	bf42      	ittt	mi
 8003ef4:	6833      	ldrmi	r3, [r6, #0]
 8003ef6:	3302      	addmi	r3, #2
 8003ef8:	6033      	strmi	r3, [r6, #0]
 8003efa:	6825      	ldr	r5, [r4, #0]
 8003efc:	f015 0506 	ands.w	r5, r5, #6
 8003f00:	d106      	bne.n	8003f10 <_printf_common+0x48>
 8003f02:	f104 0a19 	add.w	sl, r4, #25
 8003f06:	68e3      	ldr	r3, [r4, #12]
 8003f08:	6832      	ldr	r2, [r6, #0]
 8003f0a:	1a9b      	subs	r3, r3, r2
 8003f0c:	42ab      	cmp	r3, r5
 8003f0e:	dc26      	bgt.n	8003f5e <_printf_common+0x96>
 8003f10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f14:	1e13      	subs	r3, r2, #0
 8003f16:	6822      	ldr	r2, [r4, #0]
 8003f18:	bf18      	it	ne
 8003f1a:	2301      	movne	r3, #1
 8003f1c:	0692      	lsls	r2, r2, #26
 8003f1e:	d42b      	bmi.n	8003f78 <_printf_common+0xb0>
 8003f20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f24:	4649      	mov	r1, r9
 8003f26:	4638      	mov	r0, r7
 8003f28:	47c0      	blx	r8
 8003f2a:	3001      	adds	r0, #1
 8003f2c:	d01e      	beq.n	8003f6c <_printf_common+0xa4>
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	6922      	ldr	r2, [r4, #16]
 8003f32:	f003 0306 	and.w	r3, r3, #6
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	bf02      	ittt	eq
 8003f3a:	68e5      	ldreq	r5, [r4, #12]
 8003f3c:	6833      	ldreq	r3, [r6, #0]
 8003f3e:	1aed      	subeq	r5, r5, r3
 8003f40:	68a3      	ldr	r3, [r4, #8]
 8003f42:	bf0c      	ite	eq
 8003f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f48:	2500      	movne	r5, #0
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	bfc4      	itt	gt
 8003f4e:	1a9b      	subgt	r3, r3, r2
 8003f50:	18ed      	addgt	r5, r5, r3
 8003f52:	2600      	movs	r6, #0
 8003f54:	341a      	adds	r4, #26
 8003f56:	42b5      	cmp	r5, r6
 8003f58:	d11a      	bne.n	8003f90 <_printf_common+0xc8>
 8003f5a:	2000      	movs	r0, #0
 8003f5c:	e008      	b.n	8003f70 <_printf_common+0xa8>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	4652      	mov	r2, sl
 8003f62:	4649      	mov	r1, r9
 8003f64:	4638      	mov	r0, r7
 8003f66:	47c0      	blx	r8
 8003f68:	3001      	adds	r0, #1
 8003f6a:	d103      	bne.n	8003f74 <_printf_common+0xac>
 8003f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f74:	3501      	adds	r5, #1
 8003f76:	e7c6      	b.n	8003f06 <_printf_common+0x3e>
 8003f78:	18e1      	adds	r1, r4, r3
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	2030      	movs	r0, #48	; 0x30
 8003f7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f82:	4422      	add	r2, r4
 8003f84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f8c:	3302      	adds	r3, #2
 8003f8e:	e7c7      	b.n	8003f20 <_printf_common+0x58>
 8003f90:	2301      	movs	r3, #1
 8003f92:	4622      	mov	r2, r4
 8003f94:	4649      	mov	r1, r9
 8003f96:	4638      	mov	r0, r7
 8003f98:	47c0      	blx	r8
 8003f9a:	3001      	adds	r0, #1
 8003f9c:	d0e6      	beq.n	8003f6c <_printf_common+0xa4>
 8003f9e:	3601      	adds	r6, #1
 8003fa0:	e7d9      	b.n	8003f56 <_printf_common+0x8e>
	...

08003fa4 <_printf_i>:
 8003fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa8:	7e0f      	ldrb	r7, [r1, #24]
 8003faa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fac:	2f78      	cmp	r7, #120	; 0x78
 8003fae:	4691      	mov	r9, r2
 8003fb0:	4680      	mov	r8, r0
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	469a      	mov	sl, r3
 8003fb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003fba:	d807      	bhi.n	8003fcc <_printf_i+0x28>
 8003fbc:	2f62      	cmp	r7, #98	; 0x62
 8003fbe:	d80a      	bhi.n	8003fd6 <_printf_i+0x32>
 8003fc0:	2f00      	cmp	r7, #0
 8003fc2:	f000 80d4 	beq.w	800416e <_printf_i+0x1ca>
 8003fc6:	2f58      	cmp	r7, #88	; 0x58
 8003fc8:	f000 80c0 	beq.w	800414c <_printf_i+0x1a8>
 8003fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fd4:	e03a      	b.n	800404c <_printf_i+0xa8>
 8003fd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fda:	2b15      	cmp	r3, #21
 8003fdc:	d8f6      	bhi.n	8003fcc <_printf_i+0x28>
 8003fde:	a101      	add	r1, pc, #4	; (adr r1, 8003fe4 <_printf_i+0x40>)
 8003fe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fe4:	0800403d 	.word	0x0800403d
 8003fe8:	08004051 	.word	0x08004051
 8003fec:	08003fcd 	.word	0x08003fcd
 8003ff0:	08003fcd 	.word	0x08003fcd
 8003ff4:	08003fcd 	.word	0x08003fcd
 8003ff8:	08003fcd 	.word	0x08003fcd
 8003ffc:	08004051 	.word	0x08004051
 8004000:	08003fcd 	.word	0x08003fcd
 8004004:	08003fcd 	.word	0x08003fcd
 8004008:	08003fcd 	.word	0x08003fcd
 800400c:	08003fcd 	.word	0x08003fcd
 8004010:	08004155 	.word	0x08004155
 8004014:	0800407d 	.word	0x0800407d
 8004018:	0800410f 	.word	0x0800410f
 800401c:	08003fcd 	.word	0x08003fcd
 8004020:	08003fcd 	.word	0x08003fcd
 8004024:	08004177 	.word	0x08004177
 8004028:	08003fcd 	.word	0x08003fcd
 800402c:	0800407d 	.word	0x0800407d
 8004030:	08003fcd 	.word	0x08003fcd
 8004034:	08003fcd 	.word	0x08003fcd
 8004038:	08004117 	.word	0x08004117
 800403c:	682b      	ldr	r3, [r5, #0]
 800403e:	1d1a      	adds	r2, r3, #4
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	602a      	str	r2, [r5, #0]
 8004044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800404c:	2301      	movs	r3, #1
 800404e:	e09f      	b.n	8004190 <_printf_i+0x1ec>
 8004050:	6820      	ldr	r0, [r4, #0]
 8004052:	682b      	ldr	r3, [r5, #0]
 8004054:	0607      	lsls	r7, r0, #24
 8004056:	f103 0104 	add.w	r1, r3, #4
 800405a:	6029      	str	r1, [r5, #0]
 800405c:	d501      	bpl.n	8004062 <_printf_i+0xbe>
 800405e:	681e      	ldr	r6, [r3, #0]
 8004060:	e003      	b.n	800406a <_printf_i+0xc6>
 8004062:	0646      	lsls	r6, r0, #25
 8004064:	d5fb      	bpl.n	800405e <_printf_i+0xba>
 8004066:	f9b3 6000 	ldrsh.w	r6, [r3]
 800406a:	2e00      	cmp	r6, #0
 800406c:	da03      	bge.n	8004076 <_printf_i+0xd2>
 800406e:	232d      	movs	r3, #45	; 0x2d
 8004070:	4276      	negs	r6, r6
 8004072:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004076:	485a      	ldr	r0, [pc, #360]	; (80041e0 <_printf_i+0x23c>)
 8004078:	230a      	movs	r3, #10
 800407a:	e012      	b.n	80040a2 <_printf_i+0xfe>
 800407c:	682b      	ldr	r3, [r5, #0]
 800407e:	6820      	ldr	r0, [r4, #0]
 8004080:	1d19      	adds	r1, r3, #4
 8004082:	6029      	str	r1, [r5, #0]
 8004084:	0605      	lsls	r5, r0, #24
 8004086:	d501      	bpl.n	800408c <_printf_i+0xe8>
 8004088:	681e      	ldr	r6, [r3, #0]
 800408a:	e002      	b.n	8004092 <_printf_i+0xee>
 800408c:	0641      	lsls	r1, r0, #25
 800408e:	d5fb      	bpl.n	8004088 <_printf_i+0xe4>
 8004090:	881e      	ldrh	r6, [r3, #0]
 8004092:	4853      	ldr	r0, [pc, #332]	; (80041e0 <_printf_i+0x23c>)
 8004094:	2f6f      	cmp	r7, #111	; 0x6f
 8004096:	bf0c      	ite	eq
 8004098:	2308      	moveq	r3, #8
 800409a:	230a      	movne	r3, #10
 800409c:	2100      	movs	r1, #0
 800409e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040a2:	6865      	ldr	r5, [r4, #4]
 80040a4:	60a5      	str	r5, [r4, #8]
 80040a6:	2d00      	cmp	r5, #0
 80040a8:	bfa2      	ittt	ge
 80040aa:	6821      	ldrge	r1, [r4, #0]
 80040ac:	f021 0104 	bicge.w	r1, r1, #4
 80040b0:	6021      	strge	r1, [r4, #0]
 80040b2:	b90e      	cbnz	r6, 80040b8 <_printf_i+0x114>
 80040b4:	2d00      	cmp	r5, #0
 80040b6:	d04b      	beq.n	8004150 <_printf_i+0x1ac>
 80040b8:	4615      	mov	r5, r2
 80040ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80040be:	fb03 6711 	mls	r7, r3, r1, r6
 80040c2:	5dc7      	ldrb	r7, [r0, r7]
 80040c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040c8:	4637      	mov	r7, r6
 80040ca:	42bb      	cmp	r3, r7
 80040cc:	460e      	mov	r6, r1
 80040ce:	d9f4      	bls.n	80040ba <_printf_i+0x116>
 80040d0:	2b08      	cmp	r3, #8
 80040d2:	d10b      	bne.n	80040ec <_printf_i+0x148>
 80040d4:	6823      	ldr	r3, [r4, #0]
 80040d6:	07de      	lsls	r6, r3, #31
 80040d8:	d508      	bpl.n	80040ec <_printf_i+0x148>
 80040da:	6923      	ldr	r3, [r4, #16]
 80040dc:	6861      	ldr	r1, [r4, #4]
 80040de:	4299      	cmp	r1, r3
 80040e0:	bfde      	ittt	le
 80040e2:	2330      	movle	r3, #48	; 0x30
 80040e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80040ec:	1b52      	subs	r2, r2, r5
 80040ee:	6122      	str	r2, [r4, #16]
 80040f0:	f8cd a000 	str.w	sl, [sp]
 80040f4:	464b      	mov	r3, r9
 80040f6:	aa03      	add	r2, sp, #12
 80040f8:	4621      	mov	r1, r4
 80040fa:	4640      	mov	r0, r8
 80040fc:	f7ff fee4 	bl	8003ec8 <_printf_common>
 8004100:	3001      	adds	r0, #1
 8004102:	d14a      	bne.n	800419a <_printf_i+0x1f6>
 8004104:	f04f 30ff 	mov.w	r0, #4294967295
 8004108:	b004      	add	sp, #16
 800410a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	f043 0320 	orr.w	r3, r3, #32
 8004114:	6023      	str	r3, [r4, #0]
 8004116:	4833      	ldr	r0, [pc, #204]	; (80041e4 <_printf_i+0x240>)
 8004118:	2778      	movs	r7, #120	; 0x78
 800411a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	6829      	ldr	r1, [r5, #0]
 8004122:	061f      	lsls	r7, r3, #24
 8004124:	f851 6b04 	ldr.w	r6, [r1], #4
 8004128:	d402      	bmi.n	8004130 <_printf_i+0x18c>
 800412a:	065f      	lsls	r7, r3, #25
 800412c:	bf48      	it	mi
 800412e:	b2b6      	uxthmi	r6, r6
 8004130:	07df      	lsls	r7, r3, #31
 8004132:	bf48      	it	mi
 8004134:	f043 0320 	orrmi.w	r3, r3, #32
 8004138:	6029      	str	r1, [r5, #0]
 800413a:	bf48      	it	mi
 800413c:	6023      	strmi	r3, [r4, #0]
 800413e:	b91e      	cbnz	r6, 8004148 <_printf_i+0x1a4>
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	f023 0320 	bic.w	r3, r3, #32
 8004146:	6023      	str	r3, [r4, #0]
 8004148:	2310      	movs	r3, #16
 800414a:	e7a7      	b.n	800409c <_printf_i+0xf8>
 800414c:	4824      	ldr	r0, [pc, #144]	; (80041e0 <_printf_i+0x23c>)
 800414e:	e7e4      	b.n	800411a <_printf_i+0x176>
 8004150:	4615      	mov	r5, r2
 8004152:	e7bd      	b.n	80040d0 <_printf_i+0x12c>
 8004154:	682b      	ldr	r3, [r5, #0]
 8004156:	6826      	ldr	r6, [r4, #0]
 8004158:	6961      	ldr	r1, [r4, #20]
 800415a:	1d18      	adds	r0, r3, #4
 800415c:	6028      	str	r0, [r5, #0]
 800415e:	0635      	lsls	r5, r6, #24
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	d501      	bpl.n	8004168 <_printf_i+0x1c4>
 8004164:	6019      	str	r1, [r3, #0]
 8004166:	e002      	b.n	800416e <_printf_i+0x1ca>
 8004168:	0670      	lsls	r0, r6, #25
 800416a:	d5fb      	bpl.n	8004164 <_printf_i+0x1c0>
 800416c:	8019      	strh	r1, [r3, #0]
 800416e:	2300      	movs	r3, #0
 8004170:	6123      	str	r3, [r4, #16]
 8004172:	4615      	mov	r5, r2
 8004174:	e7bc      	b.n	80040f0 <_printf_i+0x14c>
 8004176:	682b      	ldr	r3, [r5, #0]
 8004178:	1d1a      	adds	r2, r3, #4
 800417a:	602a      	str	r2, [r5, #0]
 800417c:	681d      	ldr	r5, [r3, #0]
 800417e:	6862      	ldr	r2, [r4, #4]
 8004180:	2100      	movs	r1, #0
 8004182:	4628      	mov	r0, r5
 8004184:	f7fc f824 	bl	80001d0 <memchr>
 8004188:	b108      	cbz	r0, 800418e <_printf_i+0x1ea>
 800418a:	1b40      	subs	r0, r0, r5
 800418c:	6060      	str	r0, [r4, #4]
 800418e:	6863      	ldr	r3, [r4, #4]
 8004190:	6123      	str	r3, [r4, #16]
 8004192:	2300      	movs	r3, #0
 8004194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004198:	e7aa      	b.n	80040f0 <_printf_i+0x14c>
 800419a:	6923      	ldr	r3, [r4, #16]
 800419c:	462a      	mov	r2, r5
 800419e:	4649      	mov	r1, r9
 80041a0:	4640      	mov	r0, r8
 80041a2:	47d0      	blx	sl
 80041a4:	3001      	adds	r0, #1
 80041a6:	d0ad      	beq.n	8004104 <_printf_i+0x160>
 80041a8:	6823      	ldr	r3, [r4, #0]
 80041aa:	079b      	lsls	r3, r3, #30
 80041ac:	d413      	bmi.n	80041d6 <_printf_i+0x232>
 80041ae:	68e0      	ldr	r0, [r4, #12]
 80041b0:	9b03      	ldr	r3, [sp, #12]
 80041b2:	4298      	cmp	r0, r3
 80041b4:	bfb8      	it	lt
 80041b6:	4618      	movlt	r0, r3
 80041b8:	e7a6      	b.n	8004108 <_printf_i+0x164>
 80041ba:	2301      	movs	r3, #1
 80041bc:	4632      	mov	r2, r6
 80041be:	4649      	mov	r1, r9
 80041c0:	4640      	mov	r0, r8
 80041c2:	47d0      	blx	sl
 80041c4:	3001      	adds	r0, #1
 80041c6:	d09d      	beq.n	8004104 <_printf_i+0x160>
 80041c8:	3501      	adds	r5, #1
 80041ca:	68e3      	ldr	r3, [r4, #12]
 80041cc:	9903      	ldr	r1, [sp, #12]
 80041ce:	1a5b      	subs	r3, r3, r1
 80041d0:	42ab      	cmp	r3, r5
 80041d2:	dcf2      	bgt.n	80041ba <_printf_i+0x216>
 80041d4:	e7eb      	b.n	80041ae <_printf_i+0x20a>
 80041d6:	2500      	movs	r5, #0
 80041d8:	f104 0619 	add.w	r6, r4, #25
 80041dc:	e7f5      	b.n	80041ca <_printf_i+0x226>
 80041de:	bf00      	nop
 80041e0:	08007401 	.word	0x08007401
 80041e4:	08007412 	.word	0x08007412

080041e8 <std>:
 80041e8:	2300      	movs	r3, #0
 80041ea:	b510      	push	{r4, lr}
 80041ec:	4604      	mov	r4, r0
 80041ee:	e9c0 3300 	strd	r3, r3, [r0]
 80041f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041f6:	6083      	str	r3, [r0, #8]
 80041f8:	8181      	strh	r1, [r0, #12]
 80041fa:	6643      	str	r3, [r0, #100]	; 0x64
 80041fc:	81c2      	strh	r2, [r0, #14]
 80041fe:	6183      	str	r3, [r0, #24]
 8004200:	4619      	mov	r1, r3
 8004202:	2208      	movs	r2, #8
 8004204:	305c      	adds	r0, #92	; 0x5c
 8004206:	f000 f914 	bl	8004432 <memset>
 800420a:	4b0d      	ldr	r3, [pc, #52]	; (8004240 <std+0x58>)
 800420c:	6263      	str	r3, [r4, #36]	; 0x24
 800420e:	4b0d      	ldr	r3, [pc, #52]	; (8004244 <std+0x5c>)
 8004210:	62a3      	str	r3, [r4, #40]	; 0x28
 8004212:	4b0d      	ldr	r3, [pc, #52]	; (8004248 <std+0x60>)
 8004214:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004216:	4b0d      	ldr	r3, [pc, #52]	; (800424c <std+0x64>)
 8004218:	6323      	str	r3, [r4, #48]	; 0x30
 800421a:	4b0d      	ldr	r3, [pc, #52]	; (8004250 <std+0x68>)
 800421c:	6224      	str	r4, [r4, #32]
 800421e:	429c      	cmp	r4, r3
 8004220:	d006      	beq.n	8004230 <std+0x48>
 8004222:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004226:	4294      	cmp	r4, r2
 8004228:	d002      	beq.n	8004230 <std+0x48>
 800422a:	33d0      	adds	r3, #208	; 0xd0
 800422c:	429c      	cmp	r4, r3
 800422e:	d105      	bne.n	800423c <std+0x54>
 8004230:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004238:	f000 b988 	b.w	800454c <__retarget_lock_init_recursive>
 800423c:	bd10      	pop	{r4, pc}
 800423e:	bf00      	nop
 8004240:	080043ad 	.word	0x080043ad
 8004244:	080043cf 	.word	0x080043cf
 8004248:	08004407 	.word	0x08004407
 800424c:	0800442b 	.word	0x0800442b
 8004250:	2000037c 	.word	0x2000037c

08004254 <stdio_exit_handler>:
 8004254:	4a02      	ldr	r2, [pc, #8]	; (8004260 <stdio_exit_handler+0xc>)
 8004256:	4903      	ldr	r1, [pc, #12]	; (8004264 <stdio_exit_handler+0x10>)
 8004258:	4803      	ldr	r0, [pc, #12]	; (8004268 <stdio_exit_handler+0x14>)
 800425a:	f000 b869 	b.w	8004330 <_fwalk_sglue>
 800425e:	bf00      	nop
 8004260:	20000088 	.word	0x20000088
 8004264:	08005d99 	.word	0x08005d99
 8004268:	20000094 	.word	0x20000094

0800426c <cleanup_stdio>:
 800426c:	6841      	ldr	r1, [r0, #4]
 800426e:	4b0c      	ldr	r3, [pc, #48]	; (80042a0 <cleanup_stdio+0x34>)
 8004270:	4299      	cmp	r1, r3
 8004272:	b510      	push	{r4, lr}
 8004274:	4604      	mov	r4, r0
 8004276:	d001      	beq.n	800427c <cleanup_stdio+0x10>
 8004278:	f001 fd8e 	bl	8005d98 <_fflush_r>
 800427c:	68a1      	ldr	r1, [r4, #8]
 800427e:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <cleanup_stdio+0x38>)
 8004280:	4299      	cmp	r1, r3
 8004282:	d002      	beq.n	800428a <cleanup_stdio+0x1e>
 8004284:	4620      	mov	r0, r4
 8004286:	f001 fd87 	bl	8005d98 <_fflush_r>
 800428a:	68e1      	ldr	r1, [r4, #12]
 800428c:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <cleanup_stdio+0x3c>)
 800428e:	4299      	cmp	r1, r3
 8004290:	d004      	beq.n	800429c <cleanup_stdio+0x30>
 8004292:	4620      	mov	r0, r4
 8004294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004298:	f001 bd7e 	b.w	8005d98 <_fflush_r>
 800429c:	bd10      	pop	{r4, pc}
 800429e:	bf00      	nop
 80042a0:	2000037c 	.word	0x2000037c
 80042a4:	200003e4 	.word	0x200003e4
 80042a8:	2000044c 	.word	0x2000044c

080042ac <global_stdio_init.part.0>:
 80042ac:	b510      	push	{r4, lr}
 80042ae:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <global_stdio_init.part.0+0x30>)
 80042b0:	4c0b      	ldr	r4, [pc, #44]	; (80042e0 <global_stdio_init.part.0+0x34>)
 80042b2:	4a0c      	ldr	r2, [pc, #48]	; (80042e4 <global_stdio_init.part.0+0x38>)
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	4620      	mov	r0, r4
 80042b8:	2200      	movs	r2, #0
 80042ba:	2104      	movs	r1, #4
 80042bc:	f7ff ff94 	bl	80041e8 <std>
 80042c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80042c4:	2201      	movs	r2, #1
 80042c6:	2109      	movs	r1, #9
 80042c8:	f7ff ff8e 	bl	80041e8 <std>
 80042cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80042d0:	2202      	movs	r2, #2
 80042d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042d6:	2112      	movs	r1, #18
 80042d8:	f7ff bf86 	b.w	80041e8 <std>
 80042dc:	200004b4 	.word	0x200004b4
 80042e0:	2000037c 	.word	0x2000037c
 80042e4:	08004255 	.word	0x08004255

080042e8 <__sfp_lock_acquire>:
 80042e8:	4801      	ldr	r0, [pc, #4]	; (80042f0 <__sfp_lock_acquire+0x8>)
 80042ea:	f000 b930 	b.w	800454e <__retarget_lock_acquire_recursive>
 80042ee:	bf00      	nop
 80042f0:	200004bd 	.word	0x200004bd

080042f4 <__sfp_lock_release>:
 80042f4:	4801      	ldr	r0, [pc, #4]	; (80042fc <__sfp_lock_release+0x8>)
 80042f6:	f000 b92b 	b.w	8004550 <__retarget_lock_release_recursive>
 80042fa:	bf00      	nop
 80042fc:	200004bd 	.word	0x200004bd

08004300 <__sinit>:
 8004300:	b510      	push	{r4, lr}
 8004302:	4604      	mov	r4, r0
 8004304:	f7ff fff0 	bl	80042e8 <__sfp_lock_acquire>
 8004308:	6a23      	ldr	r3, [r4, #32]
 800430a:	b11b      	cbz	r3, 8004314 <__sinit+0x14>
 800430c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004310:	f7ff bff0 	b.w	80042f4 <__sfp_lock_release>
 8004314:	4b04      	ldr	r3, [pc, #16]	; (8004328 <__sinit+0x28>)
 8004316:	6223      	str	r3, [r4, #32]
 8004318:	4b04      	ldr	r3, [pc, #16]	; (800432c <__sinit+0x2c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1f5      	bne.n	800430c <__sinit+0xc>
 8004320:	f7ff ffc4 	bl	80042ac <global_stdio_init.part.0>
 8004324:	e7f2      	b.n	800430c <__sinit+0xc>
 8004326:	bf00      	nop
 8004328:	0800426d 	.word	0x0800426d
 800432c:	200004b4 	.word	0x200004b4

08004330 <_fwalk_sglue>:
 8004330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004334:	4607      	mov	r7, r0
 8004336:	4688      	mov	r8, r1
 8004338:	4614      	mov	r4, r2
 800433a:	2600      	movs	r6, #0
 800433c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004340:	f1b9 0901 	subs.w	r9, r9, #1
 8004344:	d505      	bpl.n	8004352 <_fwalk_sglue+0x22>
 8004346:	6824      	ldr	r4, [r4, #0]
 8004348:	2c00      	cmp	r4, #0
 800434a:	d1f7      	bne.n	800433c <_fwalk_sglue+0xc>
 800434c:	4630      	mov	r0, r6
 800434e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004352:	89ab      	ldrh	r3, [r5, #12]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d907      	bls.n	8004368 <_fwalk_sglue+0x38>
 8004358:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800435c:	3301      	adds	r3, #1
 800435e:	d003      	beq.n	8004368 <_fwalk_sglue+0x38>
 8004360:	4629      	mov	r1, r5
 8004362:	4638      	mov	r0, r7
 8004364:	47c0      	blx	r8
 8004366:	4306      	orrs	r6, r0
 8004368:	3568      	adds	r5, #104	; 0x68
 800436a:	e7e9      	b.n	8004340 <_fwalk_sglue+0x10>

0800436c <siprintf>:
 800436c:	b40e      	push	{r1, r2, r3}
 800436e:	b500      	push	{lr}
 8004370:	b09c      	sub	sp, #112	; 0x70
 8004372:	ab1d      	add	r3, sp, #116	; 0x74
 8004374:	9002      	str	r0, [sp, #8]
 8004376:	9006      	str	r0, [sp, #24]
 8004378:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800437c:	4809      	ldr	r0, [pc, #36]	; (80043a4 <siprintf+0x38>)
 800437e:	9107      	str	r1, [sp, #28]
 8004380:	9104      	str	r1, [sp, #16]
 8004382:	4909      	ldr	r1, [pc, #36]	; (80043a8 <siprintf+0x3c>)
 8004384:	f853 2b04 	ldr.w	r2, [r3], #4
 8004388:	9105      	str	r1, [sp, #20]
 800438a:	6800      	ldr	r0, [r0, #0]
 800438c:	9301      	str	r3, [sp, #4]
 800438e:	a902      	add	r1, sp, #8
 8004390:	f001 fb7e 	bl	8005a90 <_svfiprintf_r>
 8004394:	9b02      	ldr	r3, [sp, #8]
 8004396:	2200      	movs	r2, #0
 8004398:	701a      	strb	r2, [r3, #0]
 800439a:	b01c      	add	sp, #112	; 0x70
 800439c:	f85d eb04 	ldr.w	lr, [sp], #4
 80043a0:	b003      	add	sp, #12
 80043a2:	4770      	bx	lr
 80043a4:	200000e0 	.word	0x200000e0
 80043a8:	ffff0208 	.word	0xffff0208

080043ac <__sread>:
 80043ac:	b510      	push	{r4, lr}
 80043ae:	460c      	mov	r4, r1
 80043b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043b4:	f000 f86c 	bl	8004490 <_read_r>
 80043b8:	2800      	cmp	r0, #0
 80043ba:	bfab      	itete	ge
 80043bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80043be:	89a3      	ldrhlt	r3, [r4, #12]
 80043c0:	181b      	addge	r3, r3, r0
 80043c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80043c6:	bfac      	ite	ge
 80043c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80043ca:	81a3      	strhlt	r3, [r4, #12]
 80043cc:	bd10      	pop	{r4, pc}

080043ce <__swrite>:
 80043ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043d2:	461f      	mov	r7, r3
 80043d4:	898b      	ldrh	r3, [r1, #12]
 80043d6:	05db      	lsls	r3, r3, #23
 80043d8:	4605      	mov	r5, r0
 80043da:	460c      	mov	r4, r1
 80043dc:	4616      	mov	r6, r2
 80043de:	d505      	bpl.n	80043ec <__swrite+0x1e>
 80043e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043e4:	2302      	movs	r3, #2
 80043e6:	2200      	movs	r2, #0
 80043e8:	f000 f840 	bl	800446c <_lseek_r>
 80043ec:	89a3      	ldrh	r3, [r4, #12]
 80043ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043f6:	81a3      	strh	r3, [r4, #12]
 80043f8:	4632      	mov	r2, r6
 80043fa:	463b      	mov	r3, r7
 80043fc:	4628      	mov	r0, r5
 80043fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004402:	f000 b867 	b.w	80044d4 <_write_r>

08004406 <__sseek>:
 8004406:	b510      	push	{r4, lr}
 8004408:	460c      	mov	r4, r1
 800440a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800440e:	f000 f82d 	bl	800446c <_lseek_r>
 8004412:	1c43      	adds	r3, r0, #1
 8004414:	89a3      	ldrh	r3, [r4, #12]
 8004416:	bf15      	itete	ne
 8004418:	6560      	strne	r0, [r4, #84]	; 0x54
 800441a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800441e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004422:	81a3      	strheq	r3, [r4, #12]
 8004424:	bf18      	it	ne
 8004426:	81a3      	strhne	r3, [r4, #12]
 8004428:	bd10      	pop	{r4, pc}

0800442a <__sclose>:
 800442a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800442e:	f000 b80d 	b.w	800444c <_close_r>

08004432 <memset>:
 8004432:	4402      	add	r2, r0
 8004434:	4603      	mov	r3, r0
 8004436:	4293      	cmp	r3, r2
 8004438:	d100      	bne.n	800443c <memset+0xa>
 800443a:	4770      	bx	lr
 800443c:	f803 1b01 	strb.w	r1, [r3], #1
 8004440:	e7f9      	b.n	8004436 <memset+0x4>
	...

08004444 <_localeconv_r>:
 8004444:	4800      	ldr	r0, [pc, #0]	; (8004448 <_localeconv_r+0x4>)
 8004446:	4770      	bx	lr
 8004448:	200001d4 	.word	0x200001d4

0800444c <_close_r>:
 800444c:	b538      	push	{r3, r4, r5, lr}
 800444e:	4d06      	ldr	r5, [pc, #24]	; (8004468 <_close_r+0x1c>)
 8004450:	2300      	movs	r3, #0
 8004452:	4604      	mov	r4, r0
 8004454:	4608      	mov	r0, r1
 8004456:	602b      	str	r3, [r5, #0]
 8004458:	f7fd fedf 	bl	800221a <_close>
 800445c:	1c43      	adds	r3, r0, #1
 800445e:	d102      	bne.n	8004466 <_close_r+0x1a>
 8004460:	682b      	ldr	r3, [r5, #0]
 8004462:	b103      	cbz	r3, 8004466 <_close_r+0x1a>
 8004464:	6023      	str	r3, [r4, #0]
 8004466:	bd38      	pop	{r3, r4, r5, pc}
 8004468:	200004b8 	.word	0x200004b8

0800446c <_lseek_r>:
 800446c:	b538      	push	{r3, r4, r5, lr}
 800446e:	4d07      	ldr	r5, [pc, #28]	; (800448c <_lseek_r+0x20>)
 8004470:	4604      	mov	r4, r0
 8004472:	4608      	mov	r0, r1
 8004474:	4611      	mov	r1, r2
 8004476:	2200      	movs	r2, #0
 8004478:	602a      	str	r2, [r5, #0]
 800447a:	461a      	mov	r2, r3
 800447c:	f7fd fef4 	bl	8002268 <_lseek>
 8004480:	1c43      	adds	r3, r0, #1
 8004482:	d102      	bne.n	800448a <_lseek_r+0x1e>
 8004484:	682b      	ldr	r3, [r5, #0]
 8004486:	b103      	cbz	r3, 800448a <_lseek_r+0x1e>
 8004488:	6023      	str	r3, [r4, #0]
 800448a:	bd38      	pop	{r3, r4, r5, pc}
 800448c:	200004b8 	.word	0x200004b8

08004490 <_read_r>:
 8004490:	b538      	push	{r3, r4, r5, lr}
 8004492:	4d07      	ldr	r5, [pc, #28]	; (80044b0 <_read_r+0x20>)
 8004494:	4604      	mov	r4, r0
 8004496:	4608      	mov	r0, r1
 8004498:	4611      	mov	r1, r2
 800449a:	2200      	movs	r2, #0
 800449c:	602a      	str	r2, [r5, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	f7fd fe82 	bl	80021a8 <_read>
 80044a4:	1c43      	adds	r3, r0, #1
 80044a6:	d102      	bne.n	80044ae <_read_r+0x1e>
 80044a8:	682b      	ldr	r3, [r5, #0]
 80044aa:	b103      	cbz	r3, 80044ae <_read_r+0x1e>
 80044ac:	6023      	str	r3, [r4, #0]
 80044ae:	bd38      	pop	{r3, r4, r5, pc}
 80044b0:	200004b8 	.word	0x200004b8

080044b4 <_sbrk_r>:
 80044b4:	b538      	push	{r3, r4, r5, lr}
 80044b6:	4d06      	ldr	r5, [pc, #24]	; (80044d0 <_sbrk_r+0x1c>)
 80044b8:	2300      	movs	r3, #0
 80044ba:	4604      	mov	r4, r0
 80044bc:	4608      	mov	r0, r1
 80044be:	602b      	str	r3, [r5, #0]
 80044c0:	f7fd fee0 	bl	8002284 <_sbrk>
 80044c4:	1c43      	adds	r3, r0, #1
 80044c6:	d102      	bne.n	80044ce <_sbrk_r+0x1a>
 80044c8:	682b      	ldr	r3, [r5, #0]
 80044ca:	b103      	cbz	r3, 80044ce <_sbrk_r+0x1a>
 80044cc:	6023      	str	r3, [r4, #0]
 80044ce:	bd38      	pop	{r3, r4, r5, pc}
 80044d0:	200004b8 	.word	0x200004b8

080044d4 <_write_r>:
 80044d4:	b538      	push	{r3, r4, r5, lr}
 80044d6:	4d07      	ldr	r5, [pc, #28]	; (80044f4 <_write_r+0x20>)
 80044d8:	4604      	mov	r4, r0
 80044da:	4608      	mov	r0, r1
 80044dc:	4611      	mov	r1, r2
 80044de:	2200      	movs	r2, #0
 80044e0:	602a      	str	r2, [r5, #0]
 80044e2:	461a      	mov	r2, r3
 80044e4:	f7fd fe7d 	bl	80021e2 <_write>
 80044e8:	1c43      	adds	r3, r0, #1
 80044ea:	d102      	bne.n	80044f2 <_write_r+0x1e>
 80044ec:	682b      	ldr	r3, [r5, #0]
 80044ee:	b103      	cbz	r3, 80044f2 <_write_r+0x1e>
 80044f0:	6023      	str	r3, [r4, #0]
 80044f2:	bd38      	pop	{r3, r4, r5, pc}
 80044f4:	200004b8 	.word	0x200004b8

080044f8 <__errno>:
 80044f8:	4b01      	ldr	r3, [pc, #4]	; (8004500 <__errno+0x8>)
 80044fa:	6818      	ldr	r0, [r3, #0]
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	200000e0 	.word	0x200000e0

08004504 <__libc_init_array>:
 8004504:	b570      	push	{r4, r5, r6, lr}
 8004506:	4d0d      	ldr	r5, [pc, #52]	; (800453c <__libc_init_array+0x38>)
 8004508:	4c0d      	ldr	r4, [pc, #52]	; (8004540 <__libc_init_array+0x3c>)
 800450a:	1b64      	subs	r4, r4, r5
 800450c:	10a4      	asrs	r4, r4, #2
 800450e:	2600      	movs	r6, #0
 8004510:	42a6      	cmp	r6, r4
 8004512:	d109      	bne.n	8004528 <__libc_init_array+0x24>
 8004514:	4d0b      	ldr	r5, [pc, #44]	; (8004544 <__libc_init_array+0x40>)
 8004516:	4c0c      	ldr	r4, [pc, #48]	; (8004548 <__libc_init_array+0x44>)
 8004518:	f002 ff0a 	bl	8007330 <_init>
 800451c:	1b64      	subs	r4, r4, r5
 800451e:	10a4      	asrs	r4, r4, #2
 8004520:	2600      	movs	r6, #0
 8004522:	42a6      	cmp	r6, r4
 8004524:	d105      	bne.n	8004532 <__libc_init_array+0x2e>
 8004526:	bd70      	pop	{r4, r5, r6, pc}
 8004528:	f855 3b04 	ldr.w	r3, [r5], #4
 800452c:	4798      	blx	r3
 800452e:	3601      	adds	r6, #1
 8004530:	e7ee      	b.n	8004510 <__libc_init_array+0xc>
 8004532:	f855 3b04 	ldr.w	r3, [r5], #4
 8004536:	4798      	blx	r3
 8004538:	3601      	adds	r6, #1
 800453a:	e7f2      	b.n	8004522 <__libc_init_array+0x1e>
 800453c:	08007798 	.word	0x08007798
 8004540:	08007798 	.word	0x08007798
 8004544:	08007798 	.word	0x08007798
 8004548:	0800779c 	.word	0x0800779c

0800454c <__retarget_lock_init_recursive>:
 800454c:	4770      	bx	lr

0800454e <__retarget_lock_acquire_recursive>:
 800454e:	4770      	bx	lr

08004550 <__retarget_lock_release_recursive>:
 8004550:	4770      	bx	lr

08004552 <quorem>:
 8004552:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004556:	6903      	ldr	r3, [r0, #16]
 8004558:	690c      	ldr	r4, [r1, #16]
 800455a:	42a3      	cmp	r3, r4
 800455c:	4607      	mov	r7, r0
 800455e:	db7e      	blt.n	800465e <quorem+0x10c>
 8004560:	3c01      	subs	r4, #1
 8004562:	f101 0814 	add.w	r8, r1, #20
 8004566:	f100 0514 	add.w	r5, r0, #20
 800456a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800456e:	9301      	str	r3, [sp, #4]
 8004570:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004574:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004578:	3301      	adds	r3, #1
 800457a:	429a      	cmp	r2, r3
 800457c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004580:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004584:	fbb2 f6f3 	udiv	r6, r2, r3
 8004588:	d331      	bcc.n	80045ee <quorem+0x9c>
 800458a:	f04f 0e00 	mov.w	lr, #0
 800458e:	4640      	mov	r0, r8
 8004590:	46ac      	mov	ip, r5
 8004592:	46f2      	mov	sl, lr
 8004594:	f850 2b04 	ldr.w	r2, [r0], #4
 8004598:	b293      	uxth	r3, r2
 800459a:	fb06 e303 	mla	r3, r6, r3, lr
 800459e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80045a2:	0c1a      	lsrs	r2, r3, #16
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	ebaa 0303 	sub.w	r3, sl, r3
 80045aa:	f8dc a000 	ldr.w	sl, [ip]
 80045ae:	fa13 f38a 	uxtah	r3, r3, sl
 80045b2:	fb06 220e 	mla	r2, r6, lr, r2
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	9b00      	ldr	r3, [sp, #0]
 80045ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80045be:	b292      	uxth	r2, r2
 80045c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80045c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80045c8:	f8bd 3000 	ldrh.w	r3, [sp]
 80045cc:	4581      	cmp	r9, r0
 80045ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80045d2:	f84c 3b04 	str.w	r3, [ip], #4
 80045d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80045da:	d2db      	bcs.n	8004594 <quorem+0x42>
 80045dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80045e0:	b92b      	cbnz	r3, 80045ee <quorem+0x9c>
 80045e2:	9b01      	ldr	r3, [sp, #4]
 80045e4:	3b04      	subs	r3, #4
 80045e6:	429d      	cmp	r5, r3
 80045e8:	461a      	mov	r2, r3
 80045ea:	d32c      	bcc.n	8004646 <quorem+0xf4>
 80045ec:	613c      	str	r4, [r7, #16]
 80045ee:	4638      	mov	r0, r7
 80045f0:	f001 f8f4 	bl	80057dc <__mcmp>
 80045f4:	2800      	cmp	r0, #0
 80045f6:	db22      	blt.n	800463e <quorem+0xec>
 80045f8:	3601      	adds	r6, #1
 80045fa:	4629      	mov	r1, r5
 80045fc:	2000      	movs	r0, #0
 80045fe:	f858 2b04 	ldr.w	r2, [r8], #4
 8004602:	f8d1 c000 	ldr.w	ip, [r1]
 8004606:	b293      	uxth	r3, r2
 8004608:	1ac3      	subs	r3, r0, r3
 800460a:	0c12      	lsrs	r2, r2, #16
 800460c:	fa13 f38c 	uxtah	r3, r3, ip
 8004610:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004614:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004618:	b29b      	uxth	r3, r3
 800461a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800461e:	45c1      	cmp	r9, r8
 8004620:	f841 3b04 	str.w	r3, [r1], #4
 8004624:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004628:	d2e9      	bcs.n	80045fe <quorem+0xac>
 800462a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800462e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004632:	b922      	cbnz	r2, 800463e <quorem+0xec>
 8004634:	3b04      	subs	r3, #4
 8004636:	429d      	cmp	r5, r3
 8004638:	461a      	mov	r2, r3
 800463a:	d30a      	bcc.n	8004652 <quorem+0x100>
 800463c:	613c      	str	r4, [r7, #16]
 800463e:	4630      	mov	r0, r6
 8004640:	b003      	add	sp, #12
 8004642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004646:	6812      	ldr	r2, [r2, #0]
 8004648:	3b04      	subs	r3, #4
 800464a:	2a00      	cmp	r2, #0
 800464c:	d1ce      	bne.n	80045ec <quorem+0x9a>
 800464e:	3c01      	subs	r4, #1
 8004650:	e7c9      	b.n	80045e6 <quorem+0x94>
 8004652:	6812      	ldr	r2, [r2, #0]
 8004654:	3b04      	subs	r3, #4
 8004656:	2a00      	cmp	r2, #0
 8004658:	d1f0      	bne.n	800463c <quorem+0xea>
 800465a:	3c01      	subs	r4, #1
 800465c:	e7eb      	b.n	8004636 <quorem+0xe4>
 800465e:	2000      	movs	r0, #0
 8004660:	e7ee      	b.n	8004640 <quorem+0xee>
 8004662:	0000      	movs	r0, r0
 8004664:	0000      	movs	r0, r0
	...

08004668 <_dtoa_r>:
 8004668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466c:	ed2d 8b04 	vpush	{d8-d9}
 8004670:	69c5      	ldr	r5, [r0, #28]
 8004672:	b093      	sub	sp, #76	; 0x4c
 8004674:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004678:	ec57 6b10 	vmov	r6, r7, d0
 800467c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004680:	9107      	str	r1, [sp, #28]
 8004682:	4604      	mov	r4, r0
 8004684:	920a      	str	r2, [sp, #40]	; 0x28
 8004686:	930d      	str	r3, [sp, #52]	; 0x34
 8004688:	b975      	cbnz	r5, 80046a8 <_dtoa_r+0x40>
 800468a:	2010      	movs	r0, #16
 800468c:	f7ff f88a 	bl	80037a4 <malloc>
 8004690:	4602      	mov	r2, r0
 8004692:	61e0      	str	r0, [r4, #28]
 8004694:	b920      	cbnz	r0, 80046a0 <_dtoa_r+0x38>
 8004696:	4bae      	ldr	r3, [pc, #696]	; (8004950 <_dtoa_r+0x2e8>)
 8004698:	21ef      	movs	r1, #239	; 0xef
 800469a:	48ae      	ldr	r0, [pc, #696]	; (8004954 <_dtoa_r+0x2ec>)
 800469c:	f001 fbcc 	bl	8005e38 <__assert_func>
 80046a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80046a4:	6005      	str	r5, [r0, #0]
 80046a6:	60c5      	str	r5, [r0, #12]
 80046a8:	69e3      	ldr	r3, [r4, #28]
 80046aa:	6819      	ldr	r1, [r3, #0]
 80046ac:	b151      	cbz	r1, 80046c4 <_dtoa_r+0x5c>
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	604a      	str	r2, [r1, #4]
 80046b2:	2301      	movs	r3, #1
 80046b4:	4093      	lsls	r3, r2
 80046b6:	608b      	str	r3, [r1, #8]
 80046b8:	4620      	mov	r0, r4
 80046ba:	f000 fe53 	bl	8005364 <_Bfree>
 80046be:	69e3      	ldr	r3, [r4, #28]
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	1e3b      	subs	r3, r7, #0
 80046c6:	bfbb      	ittet	lt
 80046c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80046cc:	9303      	strlt	r3, [sp, #12]
 80046ce:	2300      	movge	r3, #0
 80046d0:	2201      	movlt	r2, #1
 80046d2:	bfac      	ite	ge
 80046d4:	f8c8 3000 	strge.w	r3, [r8]
 80046d8:	f8c8 2000 	strlt.w	r2, [r8]
 80046dc:	4b9e      	ldr	r3, [pc, #632]	; (8004958 <_dtoa_r+0x2f0>)
 80046de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80046e2:	ea33 0308 	bics.w	r3, r3, r8
 80046e6:	d11b      	bne.n	8004720 <_dtoa_r+0xb8>
 80046e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80046ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80046f4:	4333      	orrs	r3, r6
 80046f6:	f000 8593 	beq.w	8005220 <_dtoa_r+0xbb8>
 80046fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80046fc:	b963      	cbnz	r3, 8004718 <_dtoa_r+0xb0>
 80046fe:	4b97      	ldr	r3, [pc, #604]	; (800495c <_dtoa_r+0x2f4>)
 8004700:	e027      	b.n	8004752 <_dtoa_r+0xea>
 8004702:	4b97      	ldr	r3, [pc, #604]	; (8004960 <_dtoa_r+0x2f8>)
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	3308      	adds	r3, #8
 8004708:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800470a:	6013      	str	r3, [r2, #0]
 800470c:	9800      	ldr	r0, [sp, #0]
 800470e:	b013      	add	sp, #76	; 0x4c
 8004710:	ecbd 8b04 	vpop	{d8-d9}
 8004714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004718:	4b90      	ldr	r3, [pc, #576]	; (800495c <_dtoa_r+0x2f4>)
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	3303      	adds	r3, #3
 800471e:	e7f3      	b.n	8004708 <_dtoa_r+0xa0>
 8004720:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004724:	2200      	movs	r2, #0
 8004726:	ec51 0b17 	vmov	r0, r1, d7
 800472a:	eeb0 8a47 	vmov.f32	s16, s14
 800472e:	eef0 8a67 	vmov.f32	s17, s15
 8004732:	2300      	movs	r3, #0
 8004734:	f7fc f9c8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004738:	4681      	mov	r9, r0
 800473a:	b160      	cbz	r0, 8004756 <_dtoa_r+0xee>
 800473c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800473e:	2301      	movs	r3, #1
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 8568 	beq.w	800521a <_dtoa_r+0xbb2>
 800474a:	4b86      	ldr	r3, [pc, #536]	; (8004964 <_dtoa_r+0x2fc>)
 800474c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800474e:	6013      	str	r3, [r2, #0]
 8004750:	3b01      	subs	r3, #1
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	e7da      	b.n	800470c <_dtoa_r+0xa4>
 8004756:	aa10      	add	r2, sp, #64	; 0x40
 8004758:	a911      	add	r1, sp, #68	; 0x44
 800475a:	4620      	mov	r0, r4
 800475c:	eeb0 0a48 	vmov.f32	s0, s16
 8004760:	eef0 0a68 	vmov.f32	s1, s17
 8004764:	f001 f8e0 	bl	8005928 <__d2b>
 8004768:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800476c:	4682      	mov	sl, r0
 800476e:	2d00      	cmp	r5, #0
 8004770:	d07f      	beq.n	8004872 <_dtoa_r+0x20a>
 8004772:	ee18 3a90 	vmov	r3, s17
 8004776:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800477a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800477e:	ec51 0b18 	vmov	r0, r1, d8
 8004782:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004786:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800478a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800478e:	4619      	mov	r1, r3
 8004790:	2200      	movs	r2, #0
 8004792:	4b75      	ldr	r3, [pc, #468]	; (8004968 <_dtoa_r+0x300>)
 8004794:	f7fb fd78 	bl	8000288 <__aeabi_dsub>
 8004798:	a367      	add	r3, pc, #412	; (adr r3, 8004938 <_dtoa_r+0x2d0>)
 800479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479e:	f7fb ff2b 	bl	80005f8 <__aeabi_dmul>
 80047a2:	a367      	add	r3, pc, #412	; (adr r3, 8004940 <_dtoa_r+0x2d8>)
 80047a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a8:	f7fb fd70 	bl	800028c <__adddf3>
 80047ac:	4606      	mov	r6, r0
 80047ae:	4628      	mov	r0, r5
 80047b0:	460f      	mov	r7, r1
 80047b2:	f7fb feb7 	bl	8000524 <__aeabi_i2d>
 80047b6:	a364      	add	r3, pc, #400	; (adr r3, 8004948 <_dtoa_r+0x2e0>)
 80047b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047bc:	f7fb ff1c 	bl	80005f8 <__aeabi_dmul>
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4630      	mov	r0, r6
 80047c6:	4639      	mov	r1, r7
 80047c8:	f7fb fd60 	bl	800028c <__adddf3>
 80047cc:	4606      	mov	r6, r0
 80047ce:	460f      	mov	r7, r1
 80047d0:	f7fc f9c2 	bl	8000b58 <__aeabi_d2iz>
 80047d4:	2200      	movs	r2, #0
 80047d6:	4683      	mov	fp, r0
 80047d8:	2300      	movs	r3, #0
 80047da:	4630      	mov	r0, r6
 80047dc:	4639      	mov	r1, r7
 80047de:	f7fc f97d 	bl	8000adc <__aeabi_dcmplt>
 80047e2:	b148      	cbz	r0, 80047f8 <_dtoa_r+0x190>
 80047e4:	4658      	mov	r0, fp
 80047e6:	f7fb fe9d 	bl	8000524 <__aeabi_i2d>
 80047ea:	4632      	mov	r2, r6
 80047ec:	463b      	mov	r3, r7
 80047ee:	f7fc f96b 	bl	8000ac8 <__aeabi_dcmpeq>
 80047f2:	b908      	cbnz	r0, 80047f8 <_dtoa_r+0x190>
 80047f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80047f8:	f1bb 0f16 	cmp.w	fp, #22
 80047fc:	d857      	bhi.n	80048ae <_dtoa_r+0x246>
 80047fe:	4b5b      	ldr	r3, [pc, #364]	; (800496c <_dtoa_r+0x304>)
 8004800:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004808:	ec51 0b18 	vmov	r0, r1, d8
 800480c:	f7fc f966 	bl	8000adc <__aeabi_dcmplt>
 8004810:	2800      	cmp	r0, #0
 8004812:	d04e      	beq.n	80048b2 <_dtoa_r+0x24a>
 8004814:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004818:	2300      	movs	r3, #0
 800481a:	930c      	str	r3, [sp, #48]	; 0x30
 800481c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800481e:	1b5b      	subs	r3, r3, r5
 8004820:	1e5a      	subs	r2, r3, #1
 8004822:	bf45      	ittet	mi
 8004824:	f1c3 0301 	rsbmi	r3, r3, #1
 8004828:	9305      	strmi	r3, [sp, #20]
 800482a:	2300      	movpl	r3, #0
 800482c:	2300      	movmi	r3, #0
 800482e:	9206      	str	r2, [sp, #24]
 8004830:	bf54      	ite	pl
 8004832:	9305      	strpl	r3, [sp, #20]
 8004834:	9306      	strmi	r3, [sp, #24]
 8004836:	f1bb 0f00 	cmp.w	fp, #0
 800483a:	db3c      	blt.n	80048b6 <_dtoa_r+0x24e>
 800483c:	9b06      	ldr	r3, [sp, #24]
 800483e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004842:	445b      	add	r3, fp
 8004844:	9306      	str	r3, [sp, #24]
 8004846:	2300      	movs	r3, #0
 8004848:	9308      	str	r3, [sp, #32]
 800484a:	9b07      	ldr	r3, [sp, #28]
 800484c:	2b09      	cmp	r3, #9
 800484e:	d868      	bhi.n	8004922 <_dtoa_r+0x2ba>
 8004850:	2b05      	cmp	r3, #5
 8004852:	bfc4      	itt	gt
 8004854:	3b04      	subgt	r3, #4
 8004856:	9307      	strgt	r3, [sp, #28]
 8004858:	9b07      	ldr	r3, [sp, #28]
 800485a:	f1a3 0302 	sub.w	r3, r3, #2
 800485e:	bfcc      	ite	gt
 8004860:	2500      	movgt	r5, #0
 8004862:	2501      	movle	r5, #1
 8004864:	2b03      	cmp	r3, #3
 8004866:	f200 8085 	bhi.w	8004974 <_dtoa_r+0x30c>
 800486a:	e8df f003 	tbb	[pc, r3]
 800486e:	3b2e      	.short	0x3b2e
 8004870:	5839      	.short	0x5839
 8004872:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004876:	441d      	add	r5, r3
 8004878:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800487c:	2b20      	cmp	r3, #32
 800487e:	bfc1      	itttt	gt
 8004880:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004884:	fa08 f803 	lslgt.w	r8, r8, r3
 8004888:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800488c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004890:	bfd6      	itet	le
 8004892:	f1c3 0320 	rsble	r3, r3, #32
 8004896:	ea48 0003 	orrgt.w	r0, r8, r3
 800489a:	fa06 f003 	lslle.w	r0, r6, r3
 800489e:	f7fb fe31 	bl	8000504 <__aeabi_ui2d>
 80048a2:	2201      	movs	r2, #1
 80048a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80048a8:	3d01      	subs	r5, #1
 80048aa:	920e      	str	r2, [sp, #56]	; 0x38
 80048ac:	e76f      	b.n	800478e <_dtoa_r+0x126>
 80048ae:	2301      	movs	r3, #1
 80048b0:	e7b3      	b.n	800481a <_dtoa_r+0x1b2>
 80048b2:	900c      	str	r0, [sp, #48]	; 0x30
 80048b4:	e7b2      	b.n	800481c <_dtoa_r+0x1b4>
 80048b6:	9b05      	ldr	r3, [sp, #20]
 80048b8:	eba3 030b 	sub.w	r3, r3, fp
 80048bc:	9305      	str	r3, [sp, #20]
 80048be:	f1cb 0300 	rsb	r3, fp, #0
 80048c2:	9308      	str	r3, [sp, #32]
 80048c4:	2300      	movs	r3, #0
 80048c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80048c8:	e7bf      	b.n	800484a <_dtoa_r+0x1e2>
 80048ca:	2300      	movs	r3, #0
 80048cc:	9309      	str	r3, [sp, #36]	; 0x24
 80048ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	dc52      	bgt.n	800497a <_dtoa_r+0x312>
 80048d4:	2301      	movs	r3, #1
 80048d6:	9301      	str	r3, [sp, #4]
 80048d8:	9304      	str	r3, [sp, #16]
 80048da:	461a      	mov	r2, r3
 80048dc:	920a      	str	r2, [sp, #40]	; 0x28
 80048de:	e00b      	b.n	80048f8 <_dtoa_r+0x290>
 80048e0:	2301      	movs	r3, #1
 80048e2:	e7f3      	b.n	80048cc <_dtoa_r+0x264>
 80048e4:	2300      	movs	r3, #0
 80048e6:	9309      	str	r3, [sp, #36]	; 0x24
 80048e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048ea:	445b      	add	r3, fp
 80048ec:	9301      	str	r3, [sp, #4]
 80048ee:	3301      	adds	r3, #1
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	9304      	str	r3, [sp, #16]
 80048f4:	bfb8      	it	lt
 80048f6:	2301      	movlt	r3, #1
 80048f8:	69e0      	ldr	r0, [r4, #28]
 80048fa:	2100      	movs	r1, #0
 80048fc:	2204      	movs	r2, #4
 80048fe:	f102 0614 	add.w	r6, r2, #20
 8004902:	429e      	cmp	r6, r3
 8004904:	d93d      	bls.n	8004982 <_dtoa_r+0x31a>
 8004906:	6041      	str	r1, [r0, #4]
 8004908:	4620      	mov	r0, r4
 800490a:	f000 fceb 	bl	80052e4 <_Balloc>
 800490e:	9000      	str	r0, [sp, #0]
 8004910:	2800      	cmp	r0, #0
 8004912:	d139      	bne.n	8004988 <_dtoa_r+0x320>
 8004914:	4b16      	ldr	r3, [pc, #88]	; (8004970 <_dtoa_r+0x308>)
 8004916:	4602      	mov	r2, r0
 8004918:	f240 11af 	movw	r1, #431	; 0x1af
 800491c:	e6bd      	b.n	800469a <_dtoa_r+0x32>
 800491e:	2301      	movs	r3, #1
 8004920:	e7e1      	b.n	80048e6 <_dtoa_r+0x27e>
 8004922:	2501      	movs	r5, #1
 8004924:	2300      	movs	r3, #0
 8004926:	9307      	str	r3, [sp, #28]
 8004928:	9509      	str	r5, [sp, #36]	; 0x24
 800492a:	f04f 33ff 	mov.w	r3, #4294967295
 800492e:	9301      	str	r3, [sp, #4]
 8004930:	9304      	str	r3, [sp, #16]
 8004932:	2200      	movs	r2, #0
 8004934:	2312      	movs	r3, #18
 8004936:	e7d1      	b.n	80048dc <_dtoa_r+0x274>
 8004938:	636f4361 	.word	0x636f4361
 800493c:	3fd287a7 	.word	0x3fd287a7
 8004940:	8b60c8b3 	.word	0x8b60c8b3
 8004944:	3fc68a28 	.word	0x3fc68a28
 8004948:	509f79fb 	.word	0x509f79fb
 800494c:	3fd34413 	.word	0x3fd34413
 8004950:	08007430 	.word	0x08007430
 8004954:	08007447 	.word	0x08007447
 8004958:	7ff00000 	.word	0x7ff00000
 800495c:	0800742c 	.word	0x0800742c
 8004960:	08007423 	.word	0x08007423
 8004964:	08007400 	.word	0x08007400
 8004968:	3ff80000 	.word	0x3ff80000
 800496c:	08007538 	.word	0x08007538
 8004970:	0800749f 	.word	0x0800749f
 8004974:	2301      	movs	r3, #1
 8004976:	9309      	str	r3, [sp, #36]	; 0x24
 8004978:	e7d7      	b.n	800492a <_dtoa_r+0x2c2>
 800497a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800497c:	9301      	str	r3, [sp, #4]
 800497e:	9304      	str	r3, [sp, #16]
 8004980:	e7ba      	b.n	80048f8 <_dtoa_r+0x290>
 8004982:	3101      	adds	r1, #1
 8004984:	0052      	lsls	r2, r2, #1
 8004986:	e7ba      	b.n	80048fe <_dtoa_r+0x296>
 8004988:	69e3      	ldr	r3, [r4, #28]
 800498a:	9a00      	ldr	r2, [sp, #0]
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	9b04      	ldr	r3, [sp, #16]
 8004990:	2b0e      	cmp	r3, #14
 8004992:	f200 80a8 	bhi.w	8004ae6 <_dtoa_r+0x47e>
 8004996:	2d00      	cmp	r5, #0
 8004998:	f000 80a5 	beq.w	8004ae6 <_dtoa_r+0x47e>
 800499c:	f1bb 0f00 	cmp.w	fp, #0
 80049a0:	dd38      	ble.n	8004a14 <_dtoa_r+0x3ac>
 80049a2:	4bc0      	ldr	r3, [pc, #768]	; (8004ca4 <_dtoa_r+0x63c>)
 80049a4:	f00b 020f 	and.w	r2, fp, #15
 80049a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80049ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80049b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80049b4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80049b8:	d019      	beq.n	80049ee <_dtoa_r+0x386>
 80049ba:	4bbb      	ldr	r3, [pc, #748]	; (8004ca8 <_dtoa_r+0x640>)
 80049bc:	ec51 0b18 	vmov	r0, r1, d8
 80049c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80049c4:	f7fb ff42 	bl	800084c <__aeabi_ddiv>
 80049c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049cc:	f008 080f 	and.w	r8, r8, #15
 80049d0:	2503      	movs	r5, #3
 80049d2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8004ca8 <_dtoa_r+0x640>
 80049d6:	f1b8 0f00 	cmp.w	r8, #0
 80049da:	d10a      	bne.n	80049f2 <_dtoa_r+0x38a>
 80049dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049e0:	4632      	mov	r2, r6
 80049e2:	463b      	mov	r3, r7
 80049e4:	f7fb ff32 	bl	800084c <__aeabi_ddiv>
 80049e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049ec:	e02b      	b.n	8004a46 <_dtoa_r+0x3de>
 80049ee:	2502      	movs	r5, #2
 80049f0:	e7ef      	b.n	80049d2 <_dtoa_r+0x36a>
 80049f2:	f018 0f01 	tst.w	r8, #1
 80049f6:	d008      	beq.n	8004a0a <_dtoa_r+0x3a2>
 80049f8:	4630      	mov	r0, r6
 80049fa:	4639      	mov	r1, r7
 80049fc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004a00:	f7fb fdfa 	bl	80005f8 <__aeabi_dmul>
 8004a04:	3501      	adds	r5, #1
 8004a06:	4606      	mov	r6, r0
 8004a08:	460f      	mov	r7, r1
 8004a0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004a0e:	f109 0908 	add.w	r9, r9, #8
 8004a12:	e7e0      	b.n	80049d6 <_dtoa_r+0x36e>
 8004a14:	f000 809f 	beq.w	8004b56 <_dtoa_r+0x4ee>
 8004a18:	f1cb 0600 	rsb	r6, fp, #0
 8004a1c:	4ba1      	ldr	r3, [pc, #644]	; (8004ca4 <_dtoa_r+0x63c>)
 8004a1e:	4fa2      	ldr	r7, [pc, #648]	; (8004ca8 <_dtoa_r+0x640>)
 8004a20:	f006 020f 	and.w	r2, r6, #15
 8004a24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2c:	ec51 0b18 	vmov	r0, r1, d8
 8004a30:	f7fb fde2 	bl	80005f8 <__aeabi_dmul>
 8004a34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a38:	1136      	asrs	r6, r6, #4
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2502      	movs	r5, #2
 8004a3e:	2e00      	cmp	r6, #0
 8004a40:	d17e      	bne.n	8004b40 <_dtoa_r+0x4d8>
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1d0      	bne.n	80049e8 <_dtoa_r+0x380>
 8004a46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a48:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 8084 	beq.w	8004b5a <_dtoa_r+0x4f2>
 8004a52:	4b96      	ldr	r3, [pc, #600]	; (8004cac <_dtoa_r+0x644>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	4640      	mov	r0, r8
 8004a58:	4649      	mov	r1, r9
 8004a5a:	f7fc f83f 	bl	8000adc <__aeabi_dcmplt>
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	d07b      	beq.n	8004b5a <_dtoa_r+0x4f2>
 8004a62:	9b04      	ldr	r3, [sp, #16]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d078      	beq.n	8004b5a <_dtoa_r+0x4f2>
 8004a68:	9b01      	ldr	r3, [sp, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	dd39      	ble.n	8004ae2 <_dtoa_r+0x47a>
 8004a6e:	4b90      	ldr	r3, [pc, #576]	; (8004cb0 <_dtoa_r+0x648>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	4640      	mov	r0, r8
 8004a74:	4649      	mov	r1, r9
 8004a76:	f7fb fdbf 	bl	80005f8 <__aeabi_dmul>
 8004a7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a7e:	9e01      	ldr	r6, [sp, #4]
 8004a80:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004a84:	3501      	adds	r5, #1
 8004a86:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	f7fb fd4a 	bl	8000524 <__aeabi_i2d>
 8004a90:	4642      	mov	r2, r8
 8004a92:	464b      	mov	r3, r9
 8004a94:	f7fb fdb0 	bl	80005f8 <__aeabi_dmul>
 8004a98:	4b86      	ldr	r3, [pc, #536]	; (8004cb4 <_dtoa_r+0x64c>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f7fb fbf6 	bl	800028c <__adddf3>
 8004aa0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004aa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004aa8:	9303      	str	r3, [sp, #12]
 8004aaa:	2e00      	cmp	r6, #0
 8004aac:	d158      	bne.n	8004b60 <_dtoa_r+0x4f8>
 8004aae:	4b82      	ldr	r3, [pc, #520]	; (8004cb8 <_dtoa_r+0x650>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	4640      	mov	r0, r8
 8004ab4:	4649      	mov	r1, r9
 8004ab6:	f7fb fbe7 	bl	8000288 <__aeabi_dsub>
 8004aba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004abe:	4680      	mov	r8, r0
 8004ac0:	4689      	mov	r9, r1
 8004ac2:	f7fc f829 	bl	8000b18 <__aeabi_dcmpgt>
 8004ac6:	2800      	cmp	r0, #0
 8004ac8:	f040 8296 	bne.w	8004ff8 <_dtoa_r+0x990>
 8004acc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004ad0:	4640      	mov	r0, r8
 8004ad2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ad6:	4649      	mov	r1, r9
 8004ad8:	f7fc f800 	bl	8000adc <__aeabi_dcmplt>
 8004adc:	2800      	cmp	r0, #0
 8004ade:	f040 8289 	bne.w	8004ff4 <_dtoa_r+0x98c>
 8004ae2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004ae6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f2c0 814e 	blt.w	8004d8a <_dtoa_r+0x722>
 8004aee:	f1bb 0f0e 	cmp.w	fp, #14
 8004af2:	f300 814a 	bgt.w	8004d8a <_dtoa_r+0x722>
 8004af6:	4b6b      	ldr	r3, [pc, #428]	; (8004ca4 <_dtoa_r+0x63c>)
 8004af8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004afc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f280 80dc 	bge.w	8004cc0 <_dtoa_r+0x658>
 8004b08:	9b04      	ldr	r3, [sp, #16]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f300 80d8 	bgt.w	8004cc0 <_dtoa_r+0x658>
 8004b10:	f040 826f 	bne.w	8004ff2 <_dtoa_r+0x98a>
 8004b14:	4b68      	ldr	r3, [pc, #416]	; (8004cb8 <_dtoa_r+0x650>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	4640      	mov	r0, r8
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	f7fb fd6c 	bl	80005f8 <__aeabi_dmul>
 8004b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b24:	f7fb ffee 	bl	8000b04 <__aeabi_dcmpge>
 8004b28:	9e04      	ldr	r6, [sp, #16]
 8004b2a:	4637      	mov	r7, r6
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	f040 8245 	bne.w	8004fbc <_dtoa_r+0x954>
 8004b32:	9d00      	ldr	r5, [sp, #0]
 8004b34:	2331      	movs	r3, #49	; 0x31
 8004b36:	f805 3b01 	strb.w	r3, [r5], #1
 8004b3a:	f10b 0b01 	add.w	fp, fp, #1
 8004b3e:	e241      	b.n	8004fc4 <_dtoa_r+0x95c>
 8004b40:	07f2      	lsls	r2, r6, #31
 8004b42:	d505      	bpl.n	8004b50 <_dtoa_r+0x4e8>
 8004b44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b48:	f7fb fd56 	bl	80005f8 <__aeabi_dmul>
 8004b4c:	3501      	adds	r5, #1
 8004b4e:	2301      	movs	r3, #1
 8004b50:	1076      	asrs	r6, r6, #1
 8004b52:	3708      	adds	r7, #8
 8004b54:	e773      	b.n	8004a3e <_dtoa_r+0x3d6>
 8004b56:	2502      	movs	r5, #2
 8004b58:	e775      	b.n	8004a46 <_dtoa_r+0x3de>
 8004b5a:	9e04      	ldr	r6, [sp, #16]
 8004b5c:	465f      	mov	r7, fp
 8004b5e:	e792      	b.n	8004a86 <_dtoa_r+0x41e>
 8004b60:	9900      	ldr	r1, [sp, #0]
 8004b62:	4b50      	ldr	r3, [pc, #320]	; (8004ca4 <_dtoa_r+0x63c>)
 8004b64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004b68:	4431      	add	r1, r6
 8004b6a:	9102      	str	r1, [sp, #8]
 8004b6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b6e:	eeb0 9a47 	vmov.f32	s18, s14
 8004b72:	eef0 9a67 	vmov.f32	s19, s15
 8004b76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004b7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004b7e:	2900      	cmp	r1, #0
 8004b80:	d044      	beq.n	8004c0c <_dtoa_r+0x5a4>
 8004b82:	494e      	ldr	r1, [pc, #312]	; (8004cbc <_dtoa_r+0x654>)
 8004b84:	2000      	movs	r0, #0
 8004b86:	f7fb fe61 	bl	800084c <__aeabi_ddiv>
 8004b8a:	ec53 2b19 	vmov	r2, r3, d9
 8004b8e:	f7fb fb7b 	bl	8000288 <__aeabi_dsub>
 8004b92:	9d00      	ldr	r5, [sp, #0]
 8004b94:	ec41 0b19 	vmov	d9, r0, r1
 8004b98:	4649      	mov	r1, r9
 8004b9a:	4640      	mov	r0, r8
 8004b9c:	f7fb ffdc 	bl	8000b58 <__aeabi_d2iz>
 8004ba0:	4606      	mov	r6, r0
 8004ba2:	f7fb fcbf 	bl	8000524 <__aeabi_i2d>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4640      	mov	r0, r8
 8004bac:	4649      	mov	r1, r9
 8004bae:	f7fb fb6b 	bl	8000288 <__aeabi_dsub>
 8004bb2:	3630      	adds	r6, #48	; 0x30
 8004bb4:	f805 6b01 	strb.w	r6, [r5], #1
 8004bb8:	ec53 2b19 	vmov	r2, r3, d9
 8004bbc:	4680      	mov	r8, r0
 8004bbe:	4689      	mov	r9, r1
 8004bc0:	f7fb ff8c 	bl	8000adc <__aeabi_dcmplt>
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	d164      	bne.n	8004c92 <_dtoa_r+0x62a>
 8004bc8:	4642      	mov	r2, r8
 8004bca:	464b      	mov	r3, r9
 8004bcc:	4937      	ldr	r1, [pc, #220]	; (8004cac <_dtoa_r+0x644>)
 8004bce:	2000      	movs	r0, #0
 8004bd0:	f7fb fb5a 	bl	8000288 <__aeabi_dsub>
 8004bd4:	ec53 2b19 	vmov	r2, r3, d9
 8004bd8:	f7fb ff80 	bl	8000adc <__aeabi_dcmplt>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	f040 80b6 	bne.w	8004d4e <_dtoa_r+0x6e6>
 8004be2:	9b02      	ldr	r3, [sp, #8]
 8004be4:	429d      	cmp	r5, r3
 8004be6:	f43f af7c 	beq.w	8004ae2 <_dtoa_r+0x47a>
 8004bea:	4b31      	ldr	r3, [pc, #196]	; (8004cb0 <_dtoa_r+0x648>)
 8004bec:	ec51 0b19 	vmov	r0, r1, d9
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f7fb fd01 	bl	80005f8 <__aeabi_dmul>
 8004bf6:	4b2e      	ldr	r3, [pc, #184]	; (8004cb0 <_dtoa_r+0x648>)
 8004bf8:	ec41 0b19 	vmov	d9, r0, r1
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	4640      	mov	r0, r8
 8004c00:	4649      	mov	r1, r9
 8004c02:	f7fb fcf9 	bl	80005f8 <__aeabi_dmul>
 8004c06:	4680      	mov	r8, r0
 8004c08:	4689      	mov	r9, r1
 8004c0a:	e7c5      	b.n	8004b98 <_dtoa_r+0x530>
 8004c0c:	ec51 0b17 	vmov	r0, r1, d7
 8004c10:	f7fb fcf2 	bl	80005f8 <__aeabi_dmul>
 8004c14:	9b02      	ldr	r3, [sp, #8]
 8004c16:	9d00      	ldr	r5, [sp, #0]
 8004c18:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c1a:	ec41 0b19 	vmov	d9, r0, r1
 8004c1e:	4649      	mov	r1, r9
 8004c20:	4640      	mov	r0, r8
 8004c22:	f7fb ff99 	bl	8000b58 <__aeabi_d2iz>
 8004c26:	4606      	mov	r6, r0
 8004c28:	f7fb fc7c 	bl	8000524 <__aeabi_i2d>
 8004c2c:	3630      	adds	r6, #48	; 0x30
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	4640      	mov	r0, r8
 8004c34:	4649      	mov	r1, r9
 8004c36:	f7fb fb27 	bl	8000288 <__aeabi_dsub>
 8004c3a:	f805 6b01 	strb.w	r6, [r5], #1
 8004c3e:	9b02      	ldr	r3, [sp, #8]
 8004c40:	429d      	cmp	r5, r3
 8004c42:	4680      	mov	r8, r0
 8004c44:	4689      	mov	r9, r1
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	d124      	bne.n	8004c96 <_dtoa_r+0x62e>
 8004c4c:	4b1b      	ldr	r3, [pc, #108]	; (8004cbc <_dtoa_r+0x654>)
 8004c4e:	ec51 0b19 	vmov	r0, r1, d9
 8004c52:	f7fb fb1b 	bl	800028c <__adddf3>
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4640      	mov	r0, r8
 8004c5c:	4649      	mov	r1, r9
 8004c5e:	f7fb ff5b 	bl	8000b18 <__aeabi_dcmpgt>
 8004c62:	2800      	cmp	r0, #0
 8004c64:	d173      	bne.n	8004d4e <_dtoa_r+0x6e6>
 8004c66:	ec53 2b19 	vmov	r2, r3, d9
 8004c6a:	4914      	ldr	r1, [pc, #80]	; (8004cbc <_dtoa_r+0x654>)
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	f7fb fb0b 	bl	8000288 <__aeabi_dsub>
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	4640      	mov	r0, r8
 8004c78:	4649      	mov	r1, r9
 8004c7a:	f7fb ff2f 	bl	8000adc <__aeabi_dcmplt>
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	f43f af2f 	beq.w	8004ae2 <_dtoa_r+0x47a>
 8004c84:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004c86:	1e6b      	subs	r3, r5, #1
 8004c88:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004c8e:	2b30      	cmp	r3, #48	; 0x30
 8004c90:	d0f8      	beq.n	8004c84 <_dtoa_r+0x61c>
 8004c92:	46bb      	mov	fp, r7
 8004c94:	e04a      	b.n	8004d2c <_dtoa_r+0x6c4>
 8004c96:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <_dtoa_r+0x648>)
 8004c98:	f7fb fcae 	bl	80005f8 <__aeabi_dmul>
 8004c9c:	4680      	mov	r8, r0
 8004c9e:	4689      	mov	r9, r1
 8004ca0:	e7bd      	b.n	8004c1e <_dtoa_r+0x5b6>
 8004ca2:	bf00      	nop
 8004ca4:	08007538 	.word	0x08007538
 8004ca8:	08007510 	.word	0x08007510
 8004cac:	3ff00000 	.word	0x3ff00000
 8004cb0:	40240000 	.word	0x40240000
 8004cb4:	401c0000 	.word	0x401c0000
 8004cb8:	40140000 	.word	0x40140000
 8004cbc:	3fe00000 	.word	0x3fe00000
 8004cc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004cc4:	9d00      	ldr	r5, [sp, #0]
 8004cc6:	4642      	mov	r2, r8
 8004cc8:	464b      	mov	r3, r9
 8004cca:	4630      	mov	r0, r6
 8004ccc:	4639      	mov	r1, r7
 8004cce:	f7fb fdbd 	bl	800084c <__aeabi_ddiv>
 8004cd2:	f7fb ff41 	bl	8000b58 <__aeabi_d2iz>
 8004cd6:	9001      	str	r0, [sp, #4]
 8004cd8:	f7fb fc24 	bl	8000524 <__aeabi_i2d>
 8004cdc:	4642      	mov	r2, r8
 8004cde:	464b      	mov	r3, r9
 8004ce0:	f7fb fc8a 	bl	80005f8 <__aeabi_dmul>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4630      	mov	r0, r6
 8004cea:	4639      	mov	r1, r7
 8004cec:	f7fb facc 	bl	8000288 <__aeabi_dsub>
 8004cf0:	9e01      	ldr	r6, [sp, #4]
 8004cf2:	9f04      	ldr	r7, [sp, #16]
 8004cf4:	3630      	adds	r6, #48	; 0x30
 8004cf6:	f805 6b01 	strb.w	r6, [r5], #1
 8004cfa:	9e00      	ldr	r6, [sp, #0]
 8004cfc:	1bae      	subs	r6, r5, r6
 8004cfe:	42b7      	cmp	r7, r6
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	d134      	bne.n	8004d70 <_dtoa_r+0x708>
 8004d06:	f7fb fac1 	bl	800028c <__adddf3>
 8004d0a:	4642      	mov	r2, r8
 8004d0c:	464b      	mov	r3, r9
 8004d0e:	4606      	mov	r6, r0
 8004d10:	460f      	mov	r7, r1
 8004d12:	f7fb ff01 	bl	8000b18 <__aeabi_dcmpgt>
 8004d16:	b9c8      	cbnz	r0, 8004d4c <_dtoa_r+0x6e4>
 8004d18:	4642      	mov	r2, r8
 8004d1a:	464b      	mov	r3, r9
 8004d1c:	4630      	mov	r0, r6
 8004d1e:	4639      	mov	r1, r7
 8004d20:	f7fb fed2 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d24:	b110      	cbz	r0, 8004d2c <_dtoa_r+0x6c4>
 8004d26:	9b01      	ldr	r3, [sp, #4]
 8004d28:	07db      	lsls	r3, r3, #31
 8004d2a:	d40f      	bmi.n	8004d4c <_dtoa_r+0x6e4>
 8004d2c:	4651      	mov	r1, sl
 8004d2e:	4620      	mov	r0, r4
 8004d30:	f000 fb18 	bl	8005364 <_Bfree>
 8004d34:	2300      	movs	r3, #0
 8004d36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004d38:	702b      	strb	r3, [r5, #0]
 8004d3a:	f10b 0301 	add.w	r3, fp, #1
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f43f ace2 	beq.w	800470c <_dtoa_r+0xa4>
 8004d48:	601d      	str	r5, [r3, #0]
 8004d4a:	e4df      	b.n	800470c <_dtoa_r+0xa4>
 8004d4c:	465f      	mov	r7, fp
 8004d4e:	462b      	mov	r3, r5
 8004d50:	461d      	mov	r5, r3
 8004d52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d56:	2a39      	cmp	r2, #57	; 0x39
 8004d58:	d106      	bne.n	8004d68 <_dtoa_r+0x700>
 8004d5a:	9a00      	ldr	r2, [sp, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d1f7      	bne.n	8004d50 <_dtoa_r+0x6e8>
 8004d60:	9900      	ldr	r1, [sp, #0]
 8004d62:	2230      	movs	r2, #48	; 0x30
 8004d64:	3701      	adds	r7, #1
 8004d66:	700a      	strb	r2, [r1, #0]
 8004d68:	781a      	ldrb	r2, [r3, #0]
 8004d6a:	3201      	adds	r2, #1
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	e790      	b.n	8004c92 <_dtoa_r+0x62a>
 8004d70:	4ba3      	ldr	r3, [pc, #652]	; (8005000 <_dtoa_r+0x998>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	f7fb fc40 	bl	80005f8 <__aeabi_dmul>
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	4606      	mov	r6, r0
 8004d7e:	460f      	mov	r7, r1
 8004d80:	f7fb fea2 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d84:	2800      	cmp	r0, #0
 8004d86:	d09e      	beq.n	8004cc6 <_dtoa_r+0x65e>
 8004d88:	e7d0      	b.n	8004d2c <_dtoa_r+0x6c4>
 8004d8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d8c:	2a00      	cmp	r2, #0
 8004d8e:	f000 80ca 	beq.w	8004f26 <_dtoa_r+0x8be>
 8004d92:	9a07      	ldr	r2, [sp, #28]
 8004d94:	2a01      	cmp	r2, #1
 8004d96:	f300 80ad 	bgt.w	8004ef4 <_dtoa_r+0x88c>
 8004d9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d9c:	2a00      	cmp	r2, #0
 8004d9e:	f000 80a5 	beq.w	8004eec <_dtoa_r+0x884>
 8004da2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004da6:	9e08      	ldr	r6, [sp, #32]
 8004da8:	9d05      	ldr	r5, [sp, #20]
 8004daa:	9a05      	ldr	r2, [sp, #20]
 8004dac:	441a      	add	r2, r3
 8004dae:	9205      	str	r2, [sp, #20]
 8004db0:	9a06      	ldr	r2, [sp, #24]
 8004db2:	2101      	movs	r1, #1
 8004db4:	441a      	add	r2, r3
 8004db6:	4620      	mov	r0, r4
 8004db8:	9206      	str	r2, [sp, #24]
 8004dba:	f000 fb89 	bl	80054d0 <__i2b>
 8004dbe:	4607      	mov	r7, r0
 8004dc0:	b165      	cbz	r5, 8004ddc <_dtoa_r+0x774>
 8004dc2:	9b06      	ldr	r3, [sp, #24]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	dd09      	ble.n	8004ddc <_dtoa_r+0x774>
 8004dc8:	42ab      	cmp	r3, r5
 8004dca:	9a05      	ldr	r2, [sp, #20]
 8004dcc:	bfa8      	it	ge
 8004dce:	462b      	movge	r3, r5
 8004dd0:	1ad2      	subs	r2, r2, r3
 8004dd2:	9205      	str	r2, [sp, #20]
 8004dd4:	9a06      	ldr	r2, [sp, #24]
 8004dd6:	1aed      	subs	r5, r5, r3
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	9306      	str	r3, [sp, #24]
 8004ddc:	9b08      	ldr	r3, [sp, #32]
 8004dde:	b1f3      	cbz	r3, 8004e1e <_dtoa_r+0x7b6>
 8004de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 80a3 	beq.w	8004f2e <_dtoa_r+0x8c6>
 8004de8:	2e00      	cmp	r6, #0
 8004dea:	dd10      	ble.n	8004e0e <_dtoa_r+0x7a6>
 8004dec:	4639      	mov	r1, r7
 8004dee:	4632      	mov	r2, r6
 8004df0:	4620      	mov	r0, r4
 8004df2:	f000 fc2d 	bl	8005650 <__pow5mult>
 8004df6:	4652      	mov	r2, sl
 8004df8:	4601      	mov	r1, r0
 8004dfa:	4607      	mov	r7, r0
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	f000 fb7d 	bl	80054fc <__multiply>
 8004e02:	4651      	mov	r1, sl
 8004e04:	4680      	mov	r8, r0
 8004e06:	4620      	mov	r0, r4
 8004e08:	f000 faac 	bl	8005364 <_Bfree>
 8004e0c:	46c2      	mov	sl, r8
 8004e0e:	9b08      	ldr	r3, [sp, #32]
 8004e10:	1b9a      	subs	r2, r3, r6
 8004e12:	d004      	beq.n	8004e1e <_dtoa_r+0x7b6>
 8004e14:	4651      	mov	r1, sl
 8004e16:	4620      	mov	r0, r4
 8004e18:	f000 fc1a 	bl	8005650 <__pow5mult>
 8004e1c:	4682      	mov	sl, r0
 8004e1e:	2101      	movs	r1, #1
 8004e20:	4620      	mov	r0, r4
 8004e22:	f000 fb55 	bl	80054d0 <__i2b>
 8004e26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	4606      	mov	r6, r0
 8004e2c:	f340 8081 	ble.w	8004f32 <_dtoa_r+0x8ca>
 8004e30:	461a      	mov	r2, r3
 8004e32:	4601      	mov	r1, r0
 8004e34:	4620      	mov	r0, r4
 8004e36:	f000 fc0b 	bl	8005650 <__pow5mult>
 8004e3a:	9b07      	ldr	r3, [sp, #28]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	4606      	mov	r6, r0
 8004e40:	dd7a      	ble.n	8004f38 <_dtoa_r+0x8d0>
 8004e42:	f04f 0800 	mov.w	r8, #0
 8004e46:	6933      	ldr	r3, [r6, #16]
 8004e48:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004e4c:	6918      	ldr	r0, [r3, #16]
 8004e4e:	f000 faf1 	bl	8005434 <__hi0bits>
 8004e52:	f1c0 0020 	rsb	r0, r0, #32
 8004e56:	9b06      	ldr	r3, [sp, #24]
 8004e58:	4418      	add	r0, r3
 8004e5a:	f010 001f 	ands.w	r0, r0, #31
 8004e5e:	f000 8094 	beq.w	8004f8a <_dtoa_r+0x922>
 8004e62:	f1c0 0320 	rsb	r3, r0, #32
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	f340 8085 	ble.w	8004f76 <_dtoa_r+0x90e>
 8004e6c:	9b05      	ldr	r3, [sp, #20]
 8004e6e:	f1c0 001c 	rsb	r0, r0, #28
 8004e72:	4403      	add	r3, r0
 8004e74:	9305      	str	r3, [sp, #20]
 8004e76:	9b06      	ldr	r3, [sp, #24]
 8004e78:	4403      	add	r3, r0
 8004e7a:	4405      	add	r5, r0
 8004e7c:	9306      	str	r3, [sp, #24]
 8004e7e:	9b05      	ldr	r3, [sp, #20]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	dd05      	ble.n	8004e90 <_dtoa_r+0x828>
 8004e84:	4651      	mov	r1, sl
 8004e86:	461a      	mov	r2, r3
 8004e88:	4620      	mov	r0, r4
 8004e8a:	f000 fc3b 	bl	8005704 <__lshift>
 8004e8e:	4682      	mov	sl, r0
 8004e90:	9b06      	ldr	r3, [sp, #24]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	dd05      	ble.n	8004ea2 <_dtoa_r+0x83a>
 8004e96:	4631      	mov	r1, r6
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	f000 fc32 	bl	8005704 <__lshift>
 8004ea0:	4606      	mov	r6, r0
 8004ea2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d072      	beq.n	8004f8e <_dtoa_r+0x926>
 8004ea8:	4631      	mov	r1, r6
 8004eaa:	4650      	mov	r0, sl
 8004eac:	f000 fc96 	bl	80057dc <__mcmp>
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	da6c      	bge.n	8004f8e <_dtoa_r+0x926>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	4651      	mov	r1, sl
 8004eb8:	220a      	movs	r2, #10
 8004eba:	4620      	mov	r0, r4
 8004ebc:	f000 fa74 	bl	80053a8 <__multadd>
 8004ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ec2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004ec6:	4682      	mov	sl, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 81b0 	beq.w	800522e <_dtoa_r+0xbc6>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	4639      	mov	r1, r7
 8004ed2:	220a      	movs	r2, #10
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	f000 fa67 	bl	80053a8 <__multadd>
 8004eda:	9b01      	ldr	r3, [sp, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	4607      	mov	r7, r0
 8004ee0:	f300 8096 	bgt.w	8005010 <_dtoa_r+0x9a8>
 8004ee4:	9b07      	ldr	r3, [sp, #28]
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	dc59      	bgt.n	8004f9e <_dtoa_r+0x936>
 8004eea:	e091      	b.n	8005010 <_dtoa_r+0x9a8>
 8004eec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004eee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004ef2:	e758      	b.n	8004da6 <_dtoa_r+0x73e>
 8004ef4:	9b04      	ldr	r3, [sp, #16]
 8004ef6:	1e5e      	subs	r6, r3, #1
 8004ef8:	9b08      	ldr	r3, [sp, #32]
 8004efa:	42b3      	cmp	r3, r6
 8004efc:	bfbf      	itttt	lt
 8004efe:	9b08      	ldrlt	r3, [sp, #32]
 8004f00:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8004f02:	9608      	strlt	r6, [sp, #32]
 8004f04:	1af3      	sublt	r3, r6, r3
 8004f06:	bfb4      	ite	lt
 8004f08:	18d2      	addlt	r2, r2, r3
 8004f0a:	1b9e      	subge	r6, r3, r6
 8004f0c:	9b04      	ldr	r3, [sp, #16]
 8004f0e:	bfbc      	itt	lt
 8004f10:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8004f12:	2600      	movlt	r6, #0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	bfb7      	itett	lt
 8004f18:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8004f1c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8004f20:	1a9d      	sublt	r5, r3, r2
 8004f22:	2300      	movlt	r3, #0
 8004f24:	e741      	b.n	8004daa <_dtoa_r+0x742>
 8004f26:	9e08      	ldr	r6, [sp, #32]
 8004f28:	9d05      	ldr	r5, [sp, #20]
 8004f2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004f2c:	e748      	b.n	8004dc0 <_dtoa_r+0x758>
 8004f2e:	9a08      	ldr	r2, [sp, #32]
 8004f30:	e770      	b.n	8004e14 <_dtoa_r+0x7ac>
 8004f32:	9b07      	ldr	r3, [sp, #28]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	dc19      	bgt.n	8004f6c <_dtoa_r+0x904>
 8004f38:	9b02      	ldr	r3, [sp, #8]
 8004f3a:	b9bb      	cbnz	r3, 8004f6c <_dtoa_r+0x904>
 8004f3c:	9b03      	ldr	r3, [sp, #12]
 8004f3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f42:	b99b      	cbnz	r3, 8004f6c <_dtoa_r+0x904>
 8004f44:	9b03      	ldr	r3, [sp, #12]
 8004f46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f4a:	0d1b      	lsrs	r3, r3, #20
 8004f4c:	051b      	lsls	r3, r3, #20
 8004f4e:	b183      	cbz	r3, 8004f72 <_dtoa_r+0x90a>
 8004f50:	9b05      	ldr	r3, [sp, #20]
 8004f52:	3301      	adds	r3, #1
 8004f54:	9305      	str	r3, [sp, #20]
 8004f56:	9b06      	ldr	r3, [sp, #24]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	9306      	str	r3, [sp, #24]
 8004f5c:	f04f 0801 	mov.w	r8, #1
 8004f60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f47f af6f 	bne.w	8004e46 <_dtoa_r+0x7de>
 8004f68:	2001      	movs	r0, #1
 8004f6a:	e774      	b.n	8004e56 <_dtoa_r+0x7ee>
 8004f6c:	f04f 0800 	mov.w	r8, #0
 8004f70:	e7f6      	b.n	8004f60 <_dtoa_r+0x8f8>
 8004f72:	4698      	mov	r8, r3
 8004f74:	e7f4      	b.n	8004f60 <_dtoa_r+0x8f8>
 8004f76:	d082      	beq.n	8004e7e <_dtoa_r+0x816>
 8004f78:	9a05      	ldr	r2, [sp, #20]
 8004f7a:	331c      	adds	r3, #28
 8004f7c:	441a      	add	r2, r3
 8004f7e:	9205      	str	r2, [sp, #20]
 8004f80:	9a06      	ldr	r2, [sp, #24]
 8004f82:	441a      	add	r2, r3
 8004f84:	441d      	add	r5, r3
 8004f86:	9206      	str	r2, [sp, #24]
 8004f88:	e779      	b.n	8004e7e <_dtoa_r+0x816>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	e7f4      	b.n	8004f78 <_dtoa_r+0x910>
 8004f8e:	9b04      	ldr	r3, [sp, #16]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	dc37      	bgt.n	8005004 <_dtoa_r+0x99c>
 8004f94:	9b07      	ldr	r3, [sp, #28]
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	dd34      	ble.n	8005004 <_dtoa_r+0x99c>
 8004f9a:	9b04      	ldr	r3, [sp, #16]
 8004f9c:	9301      	str	r3, [sp, #4]
 8004f9e:	9b01      	ldr	r3, [sp, #4]
 8004fa0:	b963      	cbnz	r3, 8004fbc <_dtoa_r+0x954>
 8004fa2:	4631      	mov	r1, r6
 8004fa4:	2205      	movs	r2, #5
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	f000 f9fe 	bl	80053a8 <__multadd>
 8004fac:	4601      	mov	r1, r0
 8004fae:	4606      	mov	r6, r0
 8004fb0:	4650      	mov	r0, sl
 8004fb2:	f000 fc13 	bl	80057dc <__mcmp>
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	f73f adbb 	bgt.w	8004b32 <_dtoa_r+0x4ca>
 8004fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fbe:	9d00      	ldr	r5, [sp, #0]
 8004fc0:	ea6f 0b03 	mvn.w	fp, r3
 8004fc4:	f04f 0800 	mov.w	r8, #0
 8004fc8:	4631      	mov	r1, r6
 8004fca:	4620      	mov	r0, r4
 8004fcc:	f000 f9ca 	bl	8005364 <_Bfree>
 8004fd0:	2f00      	cmp	r7, #0
 8004fd2:	f43f aeab 	beq.w	8004d2c <_dtoa_r+0x6c4>
 8004fd6:	f1b8 0f00 	cmp.w	r8, #0
 8004fda:	d005      	beq.n	8004fe8 <_dtoa_r+0x980>
 8004fdc:	45b8      	cmp	r8, r7
 8004fde:	d003      	beq.n	8004fe8 <_dtoa_r+0x980>
 8004fe0:	4641      	mov	r1, r8
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	f000 f9be 	bl	8005364 <_Bfree>
 8004fe8:	4639      	mov	r1, r7
 8004fea:	4620      	mov	r0, r4
 8004fec:	f000 f9ba 	bl	8005364 <_Bfree>
 8004ff0:	e69c      	b.n	8004d2c <_dtoa_r+0x6c4>
 8004ff2:	2600      	movs	r6, #0
 8004ff4:	4637      	mov	r7, r6
 8004ff6:	e7e1      	b.n	8004fbc <_dtoa_r+0x954>
 8004ff8:	46bb      	mov	fp, r7
 8004ffa:	4637      	mov	r7, r6
 8004ffc:	e599      	b.n	8004b32 <_dtoa_r+0x4ca>
 8004ffe:	bf00      	nop
 8005000:	40240000 	.word	0x40240000
 8005004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 80c8 	beq.w	800519c <_dtoa_r+0xb34>
 800500c:	9b04      	ldr	r3, [sp, #16]
 800500e:	9301      	str	r3, [sp, #4]
 8005010:	2d00      	cmp	r5, #0
 8005012:	dd05      	ble.n	8005020 <_dtoa_r+0x9b8>
 8005014:	4639      	mov	r1, r7
 8005016:	462a      	mov	r2, r5
 8005018:	4620      	mov	r0, r4
 800501a:	f000 fb73 	bl	8005704 <__lshift>
 800501e:	4607      	mov	r7, r0
 8005020:	f1b8 0f00 	cmp.w	r8, #0
 8005024:	d05b      	beq.n	80050de <_dtoa_r+0xa76>
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	4620      	mov	r0, r4
 800502a:	f000 f95b 	bl	80052e4 <_Balloc>
 800502e:	4605      	mov	r5, r0
 8005030:	b928      	cbnz	r0, 800503e <_dtoa_r+0x9d6>
 8005032:	4b83      	ldr	r3, [pc, #524]	; (8005240 <_dtoa_r+0xbd8>)
 8005034:	4602      	mov	r2, r0
 8005036:	f240 21ef 	movw	r1, #751	; 0x2ef
 800503a:	f7ff bb2e 	b.w	800469a <_dtoa_r+0x32>
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	3202      	adds	r2, #2
 8005042:	0092      	lsls	r2, r2, #2
 8005044:	f107 010c 	add.w	r1, r7, #12
 8005048:	300c      	adds	r0, #12
 800504a:	f000 fee7 	bl	8005e1c <memcpy>
 800504e:	2201      	movs	r2, #1
 8005050:	4629      	mov	r1, r5
 8005052:	4620      	mov	r0, r4
 8005054:	f000 fb56 	bl	8005704 <__lshift>
 8005058:	9b00      	ldr	r3, [sp, #0]
 800505a:	3301      	adds	r3, #1
 800505c:	9304      	str	r3, [sp, #16]
 800505e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005062:	4413      	add	r3, r2
 8005064:	9308      	str	r3, [sp, #32]
 8005066:	9b02      	ldr	r3, [sp, #8]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	46b8      	mov	r8, r7
 800506e:	9306      	str	r3, [sp, #24]
 8005070:	4607      	mov	r7, r0
 8005072:	9b04      	ldr	r3, [sp, #16]
 8005074:	4631      	mov	r1, r6
 8005076:	3b01      	subs	r3, #1
 8005078:	4650      	mov	r0, sl
 800507a:	9301      	str	r3, [sp, #4]
 800507c:	f7ff fa69 	bl	8004552 <quorem>
 8005080:	4641      	mov	r1, r8
 8005082:	9002      	str	r0, [sp, #8]
 8005084:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005088:	4650      	mov	r0, sl
 800508a:	f000 fba7 	bl	80057dc <__mcmp>
 800508e:	463a      	mov	r2, r7
 8005090:	9005      	str	r0, [sp, #20]
 8005092:	4631      	mov	r1, r6
 8005094:	4620      	mov	r0, r4
 8005096:	f000 fbbd 	bl	8005814 <__mdiff>
 800509a:	68c2      	ldr	r2, [r0, #12]
 800509c:	4605      	mov	r5, r0
 800509e:	bb02      	cbnz	r2, 80050e2 <_dtoa_r+0xa7a>
 80050a0:	4601      	mov	r1, r0
 80050a2:	4650      	mov	r0, sl
 80050a4:	f000 fb9a 	bl	80057dc <__mcmp>
 80050a8:	4602      	mov	r2, r0
 80050aa:	4629      	mov	r1, r5
 80050ac:	4620      	mov	r0, r4
 80050ae:	9209      	str	r2, [sp, #36]	; 0x24
 80050b0:	f000 f958 	bl	8005364 <_Bfree>
 80050b4:	9b07      	ldr	r3, [sp, #28]
 80050b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050b8:	9d04      	ldr	r5, [sp, #16]
 80050ba:	ea43 0102 	orr.w	r1, r3, r2
 80050be:	9b06      	ldr	r3, [sp, #24]
 80050c0:	4319      	orrs	r1, r3
 80050c2:	d110      	bne.n	80050e6 <_dtoa_r+0xa7e>
 80050c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80050c8:	d029      	beq.n	800511e <_dtoa_r+0xab6>
 80050ca:	9b05      	ldr	r3, [sp, #20]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	dd02      	ble.n	80050d6 <_dtoa_r+0xa6e>
 80050d0:	9b02      	ldr	r3, [sp, #8]
 80050d2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80050d6:	9b01      	ldr	r3, [sp, #4]
 80050d8:	f883 9000 	strb.w	r9, [r3]
 80050dc:	e774      	b.n	8004fc8 <_dtoa_r+0x960>
 80050de:	4638      	mov	r0, r7
 80050e0:	e7ba      	b.n	8005058 <_dtoa_r+0x9f0>
 80050e2:	2201      	movs	r2, #1
 80050e4:	e7e1      	b.n	80050aa <_dtoa_r+0xa42>
 80050e6:	9b05      	ldr	r3, [sp, #20]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	db04      	blt.n	80050f6 <_dtoa_r+0xa8e>
 80050ec:	9907      	ldr	r1, [sp, #28]
 80050ee:	430b      	orrs	r3, r1
 80050f0:	9906      	ldr	r1, [sp, #24]
 80050f2:	430b      	orrs	r3, r1
 80050f4:	d120      	bne.n	8005138 <_dtoa_r+0xad0>
 80050f6:	2a00      	cmp	r2, #0
 80050f8:	dded      	ble.n	80050d6 <_dtoa_r+0xa6e>
 80050fa:	4651      	mov	r1, sl
 80050fc:	2201      	movs	r2, #1
 80050fe:	4620      	mov	r0, r4
 8005100:	f000 fb00 	bl	8005704 <__lshift>
 8005104:	4631      	mov	r1, r6
 8005106:	4682      	mov	sl, r0
 8005108:	f000 fb68 	bl	80057dc <__mcmp>
 800510c:	2800      	cmp	r0, #0
 800510e:	dc03      	bgt.n	8005118 <_dtoa_r+0xab0>
 8005110:	d1e1      	bne.n	80050d6 <_dtoa_r+0xa6e>
 8005112:	f019 0f01 	tst.w	r9, #1
 8005116:	d0de      	beq.n	80050d6 <_dtoa_r+0xa6e>
 8005118:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800511c:	d1d8      	bne.n	80050d0 <_dtoa_r+0xa68>
 800511e:	9a01      	ldr	r2, [sp, #4]
 8005120:	2339      	movs	r3, #57	; 0x39
 8005122:	7013      	strb	r3, [r2, #0]
 8005124:	462b      	mov	r3, r5
 8005126:	461d      	mov	r5, r3
 8005128:	3b01      	subs	r3, #1
 800512a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800512e:	2a39      	cmp	r2, #57	; 0x39
 8005130:	d06c      	beq.n	800520c <_dtoa_r+0xba4>
 8005132:	3201      	adds	r2, #1
 8005134:	701a      	strb	r2, [r3, #0]
 8005136:	e747      	b.n	8004fc8 <_dtoa_r+0x960>
 8005138:	2a00      	cmp	r2, #0
 800513a:	dd07      	ble.n	800514c <_dtoa_r+0xae4>
 800513c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005140:	d0ed      	beq.n	800511e <_dtoa_r+0xab6>
 8005142:	9a01      	ldr	r2, [sp, #4]
 8005144:	f109 0301 	add.w	r3, r9, #1
 8005148:	7013      	strb	r3, [r2, #0]
 800514a:	e73d      	b.n	8004fc8 <_dtoa_r+0x960>
 800514c:	9b04      	ldr	r3, [sp, #16]
 800514e:	9a08      	ldr	r2, [sp, #32]
 8005150:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005154:	4293      	cmp	r3, r2
 8005156:	d043      	beq.n	80051e0 <_dtoa_r+0xb78>
 8005158:	4651      	mov	r1, sl
 800515a:	2300      	movs	r3, #0
 800515c:	220a      	movs	r2, #10
 800515e:	4620      	mov	r0, r4
 8005160:	f000 f922 	bl	80053a8 <__multadd>
 8005164:	45b8      	cmp	r8, r7
 8005166:	4682      	mov	sl, r0
 8005168:	f04f 0300 	mov.w	r3, #0
 800516c:	f04f 020a 	mov.w	r2, #10
 8005170:	4641      	mov	r1, r8
 8005172:	4620      	mov	r0, r4
 8005174:	d107      	bne.n	8005186 <_dtoa_r+0xb1e>
 8005176:	f000 f917 	bl	80053a8 <__multadd>
 800517a:	4680      	mov	r8, r0
 800517c:	4607      	mov	r7, r0
 800517e:	9b04      	ldr	r3, [sp, #16]
 8005180:	3301      	adds	r3, #1
 8005182:	9304      	str	r3, [sp, #16]
 8005184:	e775      	b.n	8005072 <_dtoa_r+0xa0a>
 8005186:	f000 f90f 	bl	80053a8 <__multadd>
 800518a:	4639      	mov	r1, r7
 800518c:	4680      	mov	r8, r0
 800518e:	2300      	movs	r3, #0
 8005190:	220a      	movs	r2, #10
 8005192:	4620      	mov	r0, r4
 8005194:	f000 f908 	bl	80053a8 <__multadd>
 8005198:	4607      	mov	r7, r0
 800519a:	e7f0      	b.n	800517e <_dtoa_r+0xb16>
 800519c:	9b04      	ldr	r3, [sp, #16]
 800519e:	9301      	str	r3, [sp, #4]
 80051a0:	9d00      	ldr	r5, [sp, #0]
 80051a2:	4631      	mov	r1, r6
 80051a4:	4650      	mov	r0, sl
 80051a6:	f7ff f9d4 	bl	8004552 <quorem>
 80051aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80051ae:	9b00      	ldr	r3, [sp, #0]
 80051b0:	f805 9b01 	strb.w	r9, [r5], #1
 80051b4:	1aea      	subs	r2, r5, r3
 80051b6:	9b01      	ldr	r3, [sp, #4]
 80051b8:	4293      	cmp	r3, r2
 80051ba:	dd07      	ble.n	80051cc <_dtoa_r+0xb64>
 80051bc:	4651      	mov	r1, sl
 80051be:	2300      	movs	r3, #0
 80051c0:	220a      	movs	r2, #10
 80051c2:	4620      	mov	r0, r4
 80051c4:	f000 f8f0 	bl	80053a8 <__multadd>
 80051c8:	4682      	mov	sl, r0
 80051ca:	e7ea      	b.n	80051a2 <_dtoa_r+0xb3a>
 80051cc:	9b01      	ldr	r3, [sp, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	bfc8      	it	gt
 80051d2:	461d      	movgt	r5, r3
 80051d4:	9b00      	ldr	r3, [sp, #0]
 80051d6:	bfd8      	it	le
 80051d8:	2501      	movle	r5, #1
 80051da:	441d      	add	r5, r3
 80051dc:	f04f 0800 	mov.w	r8, #0
 80051e0:	4651      	mov	r1, sl
 80051e2:	2201      	movs	r2, #1
 80051e4:	4620      	mov	r0, r4
 80051e6:	f000 fa8d 	bl	8005704 <__lshift>
 80051ea:	4631      	mov	r1, r6
 80051ec:	4682      	mov	sl, r0
 80051ee:	f000 faf5 	bl	80057dc <__mcmp>
 80051f2:	2800      	cmp	r0, #0
 80051f4:	dc96      	bgt.n	8005124 <_dtoa_r+0xabc>
 80051f6:	d102      	bne.n	80051fe <_dtoa_r+0xb96>
 80051f8:	f019 0f01 	tst.w	r9, #1
 80051fc:	d192      	bne.n	8005124 <_dtoa_r+0xabc>
 80051fe:	462b      	mov	r3, r5
 8005200:	461d      	mov	r5, r3
 8005202:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005206:	2a30      	cmp	r2, #48	; 0x30
 8005208:	d0fa      	beq.n	8005200 <_dtoa_r+0xb98>
 800520a:	e6dd      	b.n	8004fc8 <_dtoa_r+0x960>
 800520c:	9a00      	ldr	r2, [sp, #0]
 800520e:	429a      	cmp	r2, r3
 8005210:	d189      	bne.n	8005126 <_dtoa_r+0xabe>
 8005212:	f10b 0b01 	add.w	fp, fp, #1
 8005216:	2331      	movs	r3, #49	; 0x31
 8005218:	e796      	b.n	8005148 <_dtoa_r+0xae0>
 800521a:	4b0a      	ldr	r3, [pc, #40]	; (8005244 <_dtoa_r+0xbdc>)
 800521c:	f7ff ba99 	b.w	8004752 <_dtoa_r+0xea>
 8005220:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005222:	2b00      	cmp	r3, #0
 8005224:	f47f aa6d 	bne.w	8004702 <_dtoa_r+0x9a>
 8005228:	4b07      	ldr	r3, [pc, #28]	; (8005248 <_dtoa_r+0xbe0>)
 800522a:	f7ff ba92 	b.w	8004752 <_dtoa_r+0xea>
 800522e:	9b01      	ldr	r3, [sp, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	dcb5      	bgt.n	80051a0 <_dtoa_r+0xb38>
 8005234:	9b07      	ldr	r3, [sp, #28]
 8005236:	2b02      	cmp	r3, #2
 8005238:	f73f aeb1 	bgt.w	8004f9e <_dtoa_r+0x936>
 800523c:	e7b0      	b.n	80051a0 <_dtoa_r+0xb38>
 800523e:	bf00      	nop
 8005240:	0800749f 	.word	0x0800749f
 8005244:	080073ff 	.word	0x080073ff
 8005248:	08007423 	.word	0x08007423

0800524c <_free_r>:
 800524c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800524e:	2900      	cmp	r1, #0
 8005250:	d044      	beq.n	80052dc <_free_r+0x90>
 8005252:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005256:	9001      	str	r0, [sp, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	f1a1 0404 	sub.w	r4, r1, #4
 800525e:	bfb8      	it	lt
 8005260:	18e4      	addlt	r4, r4, r3
 8005262:	f7fe fb4f 	bl	8003904 <__malloc_lock>
 8005266:	4a1e      	ldr	r2, [pc, #120]	; (80052e0 <_free_r+0x94>)
 8005268:	9801      	ldr	r0, [sp, #4]
 800526a:	6813      	ldr	r3, [r2, #0]
 800526c:	b933      	cbnz	r3, 800527c <_free_r+0x30>
 800526e:	6063      	str	r3, [r4, #4]
 8005270:	6014      	str	r4, [r2, #0]
 8005272:	b003      	add	sp, #12
 8005274:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005278:	f7fe bb4a 	b.w	8003910 <__malloc_unlock>
 800527c:	42a3      	cmp	r3, r4
 800527e:	d908      	bls.n	8005292 <_free_r+0x46>
 8005280:	6825      	ldr	r5, [r4, #0]
 8005282:	1961      	adds	r1, r4, r5
 8005284:	428b      	cmp	r3, r1
 8005286:	bf01      	itttt	eq
 8005288:	6819      	ldreq	r1, [r3, #0]
 800528a:	685b      	ldreq	r3, [r3, #4]
 800528c:	1949      	addeq	r1, r1, r5
 800528e:	6021      	streq	r1, [r4, #0]
 8005290:	e7ed      	b.n	800526e <_free_r+0x22>
 8005292:	461a      	mov	r2, r3
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	b10b      	cbz	r3, 800529c <_free_r+0x50>
 8005298:	42a3      	cmp	r3, r4
 800529a:	d9fa      	bls.n	8005292 <_free_r+0x46>
 800529c:	6811      	ldr	r1, [r2, #0]
 800529e:	1855      	adds	r5, r2, r1
 80052a0:	42a5      	cmp	r5, r4
 80052a2:	d10b      	bne.n	80052bc <_free_r+0x70>
 80052a4:	6824      	ldr	r4, [r4, #0]
 80052a6:	4421      	add	r1, r4
 80052a8:	1854      	adds	r4, r2, r1
 80052aa:	42a3      	cmp	r3, r4
 80052ac:	6011      	str	r1, [r2, #0]
 80052ae:	d1e0      	bne.n	8005272 <_free_r+0x26>
 80052b0:	681c      	ldr	r4, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	6053      	str	r3, [r2, #4]
 80052b6:	440c      	add	r4, r1
 80052b8:	6014      	str	r4, [r2, #0]
 80052ba:	e7da      	b.n	8005272 <_free_r+0x26>
 80052bc:	d902      	bls.n	80052c4 <_free_r+0x78>
 80052be:	230c      	movs	r3, #12
 80052c0:	6003      	str	r3, [r0, #0]
 80052c2:	e7d6      	b.n	8005272 <_free_r+0x26>
 80052c4:	6825      	ldr	r5, [r4, #0]
 80052c6:	1961      	adds	r1, r4, r5
 80052c8:	428b      	cmp	r3, r1
 80052ca:	bf04      	itt	eq
 80052cc:	6819      	ldreq	r1, [r3, #0]
 80052ce:	685b      	ldreq	r3, [r3, #4]
 80052d0:	6063      	str	r3, [r4, #4]
 80052d2:	bf04      	itt	eq
 80052d4:	1949      	addeq	r1, r1, r5
 80052d6:	6021      	streq	r1, [r4, #0]
 80052d8:	6054      	str	r4, [r2, #4]
 80052da:	e7ca      	b.n	8005272 <_free_r+0x26>
 80052dc:	b003      	add	sp, #12
 80052de:	bd30      	pop	{r4, r5, pc}
 80052e0:	20000374 	.word	0x20000374

080052e4 <_Balloc>:
 80052e4:	b570      	push	{r4, r5, r6, lr}
 80052e6:	69c6      	ldr	r6, [r0, #28]
 80052e8:	4604      	mov	r4, r0
 80052ea:	460d      	mov	r5, r1
 80052ec:	b976      	cbnz	r6, 800530c <_Balloc+0x28>
 80052ee:	2010      	movs	r0, #16
 80052f0:	f7fe fa58 	bl	80037a4 <malloc>
 80052f4:	4602      	mov	r2, r0
 80052f6:	61e0      	str	r0, [r4, #28]
 80052f8:	b920      	cbnz	r0, 8005304 <_Balloc+0x20>
 80052fa:	4b18      	ldr	r3, [pc, #96]	; (800535c <_Balloc+0x78>)
 80052fc:	4818      	ldr	r0, [pc, #96]	; (8005360 <_Balloc+0x7c>)
 80052fe:	216b      	movs	r1, #107	; 0x6b
 8005300:	f000 fd9a 	bl	8005e38 <__assert_func>
 8005304:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005308:	6006      	str	r6, [r0, #0]
 800530a:	60c6      	str	r6, [r0, #12]
 800530c:	69e6      	ldr	r6, [r4, #28]
 800530e:	68f3      	ldr	r3, [r6, #12]
 8005310:	b183      	cbz	r3, 8005334 <_Balloc+0x50>
 8005312:	69e3      	ldr	r3, [r4, #28]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800531a:	b9b8      	cbnz	r0, 800534c <_Balloc+0x68>
 800531c:	2101      	movs	r1, #1
 800531e:	fa01 f605 	lsl.w	r6, r1, r5
 8005322:	1d72      	adds	r2, r6, #5
 8005324:	0092      	lsls	r2, r2, #2
 8005326:	4620      	mov	r0, r4
 8005328:	f000 fda4 	bl	8005e74 <_calloc_r>
 800532c:	b160      	cbz	r0, 8005348 <_Balloc+0x64>
 800532e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005332:	e00e      	b.n	8005352 <_Balloc+0x6e>
 8005334:	2221      	movs	r2, #33	; 0x21
 8005336:	2104      	movs	r1, #4
 8005338:	4620      	mov	r0, r4
 800533a:	f000 fd9b 	bl	8005e74 <_calloc_r>
 800533e:	69e3      	ldr	r3, [r4, #28]
 8005340:	60f0      	str	r0, [r6, #12]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1e4      	bne.n	8005312 <_Balloc+0x2e>
 8005348:	2000      	movs	r0, #0
 800534a:	bd70      	pop	{r4, r5, r6, pc}
 800534c:	6802      	ldr	r2, [r0, #0]
 800534e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005352:	2300      	movs	r3, #0
 8005354:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005358:	e7f7      	b.n	800534a <_Balloc+0x66>
 800535a:	bf00      	nop
 800535c:	08007430 	.word	0x08007430
 8005360:	080074b0 	.word	0x080074b0

08005364 <_Bfree>:
 8005364:	b570      	push	{r4, r5, r6, lr}
 8005366:	69c6      	ldr	r6, [r0, #28]
 8005368:	4605      	mov	r5, r0
 800536a:	460c      	mov	r4, r1
 800536c:	b976      	cbnz	r6, 800538c <_Bfree+0x28>
 800536e:	2010      	movs	r0, #16
 8005370:	f7fe fa18 	bl	80037a4 <malloc>
 8005374:	4602      	mov	r2, r0
 8005376:	61e8      	str	r0, [r5, #28]
 8005378:	b920      	cbnz	r0, 8005384 <_Bfree+0x20>
 800537a:	4b09      	ldr	r3, [pc, #36]	; (80053a0 <_Bfree+0x3c>)
 800537c:	4809      	ldr	r0, [pc, #36]	; (80053a4 <_Bfree+0x40>)
 800537e:	218f      	movs	r1, #143	; 0x8f
 8005380:	f000 fd5a 	bl	8005e38 <__assert_func>
 8005384:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005388:	6006      	str	r6, [r0, #0]
 800538a:	60c6      	str	r6, [r0, #12]
 800538c:	b13c      	cbz	r4, 800539e <_Bfree+0x3a>
 800538e:	69eb      	ldr	r3, [r5, #28]
 8005390:	6862      	ldr	r2, [r4, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005398:	6021      	str	r1, [r4, #0]
 800539a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800539e:	bd70      	pop	{r4, r5, r6, pc}
 80053a0:	08007430 	.word	0x08007430
 80053a4:	080074b0 	.word	0x080074b0

080053a8 <__multadd>:
 80053a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053ac:	690d      	ldr	r5, [r1, #16]
 80053ae:	4607      	mov	r7, r0
 80053b0:	460c      	mov	r4, r1
 80053b2:	461e      	mov	r6, r3
 80053b4:	f101 0c14 	add.w	ip, r1, #20
 80053b8:	2000      	movs	r0, #0
 80053ba:	f8dc 3000 	ldr.w	r3, [ip]
 80053be:	b299      	uxth	r1, r3
 80053c0:	fb02 6101 	mla	r1, r2, r1, r6
 80053c4:	0c1e      	lsrs	r6, r3, #16
 80053c6:	0c0b      	lsrs	r3, r1, #16
 80053c8:	fb02 3306 	mla	r3, r2, r6, r3
 80053cc:	b289      	uxth	r1, r1
 80053ce:	3001      	adds	r0, #1
 80053d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80053d4:	4285      	cmp	r5, r0
 80053d6:	f84c 1b04 	str.w	r1, [ip], #4
 80053da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80053de:	dcec      	bgt.n	80053ba <__multadd+0x12>
 80053e0:	b30e      	cbz	r6, 8005426 <__multadd+0x7e>
 80053e2:	68a3      	ldr	r3, [r4, #8]
 80053e4:	42ab      	cmp	r3, r5
 80053e6:	dc19      	bgt.n	800541c <__multadd+0x74>
 80053e8:	6861      	ldr	r1, [r4, #4]
 80053ea:	4638      	mov	r0, r7
 80053ec:	3101      	adds	r1, #1
 80053ee:	f7ff ff79 	bl	80052e4 <_Balloc>
 80053f2:	4680      	mov	r8, r0
 80053f4:	b928      	cbnz	r0, 8005402 <__multadd+0x5a>
 80053f6:	4602      	mov	r2, r0
 80053f8:	4b0c      	ldr	r3, [pc, #48]	; (800542c <__multadd+0x84>)
 80053fa:	480d      	ldr	r0, [pc, #52]	; (8005430 <__multadd+0x88>)
 80053fc:	21ba      	movs	r1, #186	; 0xba
 80053fe:	f000 fd1b 	bl	8005e38 <__assert_func>
 8005402:	6922      	ldr	r2, [r4, #16]
 8005404:	3202      	adds	r2, #2
 8005406:	f104 010c 	add.w	r1, r4, #12
 800540a:	0092      	lsls	r2, r2, #2
 800540c:	300c      	adds	r0, #12
 800540e:	f000 fd05 	bl	8005e1c <memcpy>
 8005412:	4621      	mov	r1, r4
 8005414:	4638      	mov	r0, r7
 8005416:	f7ff ffa5 	bl	8005364 <_Bfree>
 800541a:	4644      	mov	r4, r8
 800541c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005420:	3501      	adds	r5, #1
 8005422:	615e      	str	r6, [r3, #20]
 8005424:	6125      	str	r5, [r4, #16]
 8005426:	4620      	mov	r0, r4
 8005428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800542c:	0800749f 	.word	0x0800749f
 8005430:	080074b0 	.word	0x080074b0

08005434 <__hi0bits>:
 8005434:	0c03      	lsrs	r3, r0, #16
 8005436:	041b      	lsls	r3, r3, #16
 8005438:	b9d3      	cbnz	r3, 8005470 <__hi0bits+0x3c>
 800543a:	0400      	lsls	r0, r0, #16
 800543c:	2310      	movs	r3, #16
 800543e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005442:	bf04      	itt	eq
 8005444:	0200      	lsleq	r0, r0, #8
 8005446:	3308      	addeq	r3, #8
 8005448:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800544c:	bf04      	itt	eq
 800544e:	0100      	lsleq	r0, r0, #4
 8005450:	3304      	addeq	r3, #4
 8005452:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005456:	bf04      	itt	eq
 8005458:	0080      	lsleq	r0, r0, #2
 800545a:	3302      	addeq	r3, #2
 800545c:	2800      	cmp	r0, #0
 800545e:	db05      	blt.n	800546c <__hi0bits+0x38>
 8005460:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005464:	f103 0301 	add.w	r3, r3, #1
 8005468:	bf08      	it	eq
 800546a:	2320      	moveq	r3, #32
 800546c:	4618      	mov	r0, r3
 800546e:	4770      	bx	lr
 8005470:	2300      	movs	r3, #0
 8005472:	e7e4      	b.n	800543e <__hi0bits+0xa>

08005474 <__lo0bits>:
 8005474:	6803      	ldr	r3, [r0, #0]
 8005476:	f013 0207 	ands.w	r2, r3, #7
 800547a:	d00c      	beq.n	8005496 <__lo0bits+0x22>
 800547c:	07d9      	lsls	r1, r3, #31
 800547e:	d422      	bmi.n	80054c6 <__lo0bits+0x52>
 8005480:	079a      	lsls	r2, r3, #30
 8005482:	bf49      	itett	mi
 8005484:	085b      	lsrmi	r3, r3, #1
 8005486:	089b      	lsrpl	r3, r3, #2
 8005488:	6003      	strmi	r3, [r0, #0]
 800548a:	2201      	movmi	r2, #1
 800548c:	bf5c      	itt	pl
 800548e:	6003      	strpl	r3, [r0, #0]
 8005490:	2202      	movpl	r2, #2
 8005492:	4610      	mov	r0, r2
 8005494:	4770      	bx	lr
 8005496:	b299      	uxth	r1, r3
 8005498:	b909      	cbnz	r1, 800549e <__lo0bits+0x2a>
 800549a:	0c1b      	lsrs	r3, r3, #16
 800549c:	2210      	movs	r2, #16
 800549e:	b2d9      	uxtb	r1, r3
 80054a0:	b909      	cbnz	r1, 80054a6 <__lo0bits+0x32>
 80054a2:	3208      	adds	r2, #8
 80054a4:	0a1b      	lsrs	r3, r3, #8
 80054a6:	0719      	lsls	r1, r3, #28
 80054a8:	bf04      	itt	eq
 80054aa:	091b      	lsreq	r3, r3, #4
 80054ac:	3204      	addeq	r2, #4
 80054ae:	0799      	lsls	r1, r3, #30
 80054b0:	bf04      	itt	eq
 80054b2:	089b      	lsreq	r3, r3, #2
 80054b4:	3202      	addeq	r2, #2
 80054b6:	07d9      	lsls	r1, r3, #31
 80054b8:	d403      	bmi.n	80054c2 <__lo0bits+0x4e>
 80054ba:	085b      	lsrs	r3, r3, #1
 80054bc:	f102 0201 	add.w	r2, r2, #1
 80054c0:	d003      	beq.n	80054ca <__lo0bits+0x56>
 80054c2:	6003      	str	r3, [r0, #0]
 80054c4:	e7e5      	b.n	8005492 <__lo0bits+0x1e>
 80054c6:	2200      	movs	r2, #0
 80054c8:	e7e3      	b.n	8005492 <__lo0bits+0x1e>
 80054ca:	2220      	movs	r2, #32
 80054cc:	e7e1      	b.n	8005492 <__lo0bits+0x1e>
	...

080054d0 <__i2b>:
 80054d0:	b510      	push	{r4, lr}
 80054d2:	460c      	mov	r4, r1
 80054d4:	2101      	movs	r1, #1
 80054d6:	f7ff ff05 	bl	80052e4 <_Balloc>
 80054da:	4602      	mov	r2, r0
 80054dc:	b928      	cbnz	r0, 80054ea <__i2b+0x1a>
 80054de:	4b05      	ldr	r3, [pc, #20]	; (80054f4 <__i2b+0x24>)
 80054e0:	4805      	ldr	r0, [pc, #20]	; (80054f8 <__i2b+0x28>)
 80054e2:	f240 1145 	movw	r1, #325	; 0x145
 80054e6:	f000 fca7 	bl	8005e38 <__assert_func>
 80054ea:	2301      	movs	r3, #1
 80054ec:	6144      	str	r4, [r0, #20]
 80054ee:	6103      	str	r3, [r0, #16]
 80054f0:	bd10      	pop	{r4, pc}
 80054f2:	bf00      	nop
 80054f4:	0800749f 	.word	0x0800749f
 80054f8:	080074b0 	.word	0x080074b0

080054fc <__multiply>:
 80054fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005500:	4691      	mov	r9, r2
 8005502:	690a      	ldr	r2, [r1, #16]
 8005504:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005508:	429a      	cmp	r2, r3
 800550a:	bfb8      	it	lt
 800550c:	460b      	movlt	r3, r1
 800550e:	460c      	mov	r4, r1
 8005510:	bfbc      	itt	lt
 8005512:	464c      	movlt	r4, r9
 8005514:	4699      	movlt	r9, r3
 8005516:	6927      	ldr	r7, [r4, #16]
 8005518:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800551c:	68a3      	ldr	r3, [r4, #8]
 800551e:	6861      	ldr	r1, [r4, #4]
 8005520:	eb07 060a 	add.w	r6, r7, sl
 8005524:	42b3      	cmp	r3, r6
 8005526:	b085      	sub	sp, #20
 8005528:	bfb8      	it	lt
 800552a:	3101      	addlt	r1, #1
 800552c:	f7ff feda 	bl	80052e4 <_Balloc>
 8005530:	b930      	cbnz	r0, 8005540 <__multiply+0x44>
 8005532:	4602      	mov	r2, r0
 8005534:	4b44      	ldr	r3, [pc, #272]	; (8005648 <__multiply+0x14c>)
 8005536:	4845      	ldr	r0, [pc, #276]	; (800564c <__multiply+0x150>)
 8005538:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800553c:	f000 fc7c 	bl	8005e38 <__assert_func>
 8005540:	f100 0514 	add.w	r5, r0, #20
 8005544:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005548:	462b      	mov	r3, r5
 800554a:	2200      	movs	r2, #0
 800554c:	4543      	cmp	r3, r8
 800554e:	d321      	bcc.n	8005594 <__multiply+0x98>
 8005550:	f104 0314 	add.w	r3, r4, #20
 8005554:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005558:	f109 0314 	add.w	r3, r9, #20
 800555c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005560:	9202      	str	r2, [sp, #8]
 8005562:	1b3a      	subs	r2, r7, r4
 8005564:	3a15      	subs	r2, #21
 8005566:	f022 0203 	bic.w	r2, r2, #3
 800556a:	3204      	adds	r2, #4
 800556c:	f104 0115 	add.w	r1, r4, #21
 8005570:	428f      	cmp	r7, r1
 8005572:	bf38      	it	cc
 8005574:	2204      	movcc	r2, #4
 8005576:	9201      	str	r2, [sp, #4]
 8005578:	9a02      	ldr	r2, [sp, #8]
 800557a:	9303      	str	r3, [sp, #12]
 800557c:	429a      	cmp	r2, r3
 800557e:	d80c      	bhi.n	800559a <__multiply+0x9e>
 8005580:	2e00      	cmp	r6, #0
 8005582:	dd03      	ble.n	800558c <__multiply+0x90>
 8005584:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005588:	2b00      	cmp	r3, #0
 800558a:	d05b      	beq.n	8005644 <__multiply+0x148>
 800558c:	6106      	str	r6, [r0, #16]
 800558e:	b005      	add	sp, #20
 8005590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005594:	f843 2b04 	str.w	r2, [r3], #4
 8005598:	e7d8      	b.n	800554c <__multiply+0x50>
 800559a:	f8b3 a000 	ldrh.w	sl, [r3]
 800559e:	f1ba 0f00 	cmp.w	sl, #0
 80055a2:	d024      	beq.n	80055ee <__multiply+0xf2>
 80055a4:	f104 0e14 	add.w	lr, r4, #20
 80055a8:	46a9      	mov	r9, r5
 80055aa:	f04f 0c00 	mov.w	ip, #0
 80055ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80055b2:	f8d9 1000 	ldr.w	r1, [r9]
 80055b6:	fa1f fb82 	uxth.w	fp, r2
 80055ba:	b289      	uxth	r1, r1
 80055bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80055c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80055c4:	f8d9 2000 	ldr.w	r2, [r9]
 80055c8:	4461      	add	r1, ip
 80055ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80055ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80055d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80055d6:	b289      	uxth	r1, r1
 80055d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80055dc:	4577      	cmp	r7, lr
 80055de:	f849 1b04 	str.w	r1, [r9], #4
 80055e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80055e6:	d8e2      	bhi.n	80055ae <__multiply+0xb2>
 80055e8:	9a01      	ldr	r2, [sp, #4]
 80055ea:	f845 c002 	str.w	ip, [r5, r2]
 80055ee:	9a03      	ldr	r2, [sp, #12]
 80055f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80055f4:	3304      	adds	r3, #4
 80055f6:	f1b9 0f00 	cmp.w	r9, #0
 80055fa:	d021      	beq.n	8005640 <__multiply+0x144>
 80055fc:	6829      	ldr	r1, [r5, #0]
 80055fe:	f104 0c14 	add.w	ip, r4, #20
 8005602:	46ae      	mov	lr, r5
 8005604:	f04f 0a00 	mov.w	sl, #0
 8005608:	f8bc b000 	ldrh.w	fp, [ip]
 800560c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005610:	fb09 220b 	mla	r2, r9, fp, r2
 8005614:	4452      	add	r2, sl
 8005616:	b289      	uxth	r1, r1
 8005618:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800561c:	f84e 1b04 	str.w	r1, [lr], #4
 8005620:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005624:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005628:	f8be 1000 	ldrh.w	r1, [lr]
 800562c:	fb09 110a 	mla	r1, r9, sl, r1
 8005630:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005634:	4567      	cmp	r7, ip
 8005636:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800563a:	d8e5      	bhi.n	8005608 <__multiply+0x10c>
 800563c:	9a01      	ldr	r2, [sp, #4]
 800563e:	50a9      	str	r1, [r5, r2]
 8005640:	3504      	adds	r5, #4
 8005642:	e799      	b.n	8005578 <__multiply+0x7c>
 8005644:	3e01      	subs	r6, #1
 8005646:	e79b      	b.n	8005580 <__multiply+0x84>
 8005648:	0800749f 	.word	0x0800749f
 800564c:	080074b0 	.word	0x080074b0

08005650 <__pow5mult>:
 8005650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005654:	4615      	mov	r5, r2
 8005656:	f012 0203 	ands.w	r2, r2, #3
 800565a:	4606      	mov	r6, r0
 800565c:	460f      	mov	r7, r1
 800565e:	d007      	beq.n	8005670 <__pow5mult+0x20>
 8005660:	4c25      	ldr	r4, [pc, #148]	; (80056f8 <__pow5mult+0xa8>)
 8005662:	3a01      	subs	r2, #1
 8005664:	2300      	movs	r3, #0
 8005666:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800566a:	f7ff fe9d 	bl	80053a8 <__multadd>
 800566e:	4607      	mov	r7, r0
 8005670:	10ad      	asrs	r5, r5, #2
 8005672:	d03d      	beq.n	80056f0 <__pow5mult+0xa0>
 8005674:	69f4      	ldr	r4, [r6, #28]
 8005676:	b97c      	cbnz	r4, 8005698 <__pow5mult+0x48>
 8005678:	2010      	movs	r0, #16
 800567a:	f7fe f893 	bl	80037a4 <malloc>
 800567e:	4602      	mov	r2, r0
 8005680:	61f0      	str	r0, [r6, #28]
 8005682:	b928      	cbnz	r0, 8005690 <__pow5mult+0x40>
 8005684:	4b1d      	ldr	r3, [pc, #116]	; (80056fc <__pow5mult+0xac>)
 8005686:	481e      	ldr	r0, [pc, #120]	; (8005700 <__pow5mult+0xb0>)
 8005688:	f240 11b3 	movw	r1, #435	; 0x1b3
 800568c:	f000 fbd4 	bl	8005e38 <__assert_func>
 8005690:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005694:	6004      	str	r4, [r0, #0]
 8005696:	60c4      	str	r4, [r0, #12]
 8005698:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800569c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80056a0:	b94c      	cbnz	r4, 80056b6 <__pow5mult+0x66>
 80056a2:	f240 2171 	movw	r1, #625	; 0x271
 80056a6:	4630      	mov	r0, r6
 80056a8:	f7ff ff12 	bl	80054d0 <__i2b>
 80056ac:	2300      	movs	r3, #0
 80056ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80056b2:	4604      	mov	r4, r0
 80056b4:	6003      	str	r3, [r0, #0]
 80056b6:	f04f 0900 	mov.w	r9, #0
 80056ba:	07eb      	lsls	r3, r5, #31
 80056bc:	d50a      	bpl.n	80056d4 <__pow5mult+0x84>
 80056be:	4639      	mov	r1, r7
 80056c0:	4622      	mov	r2, r4
 80056c2:	4630      	mov	r0, r6
 80056c4:	f7ff ff1a 	bl	80054fc <__multiply>
 80056c8:	4639      	mov	r1, r7
 80056ca:	4680      	mov	r8, r0
 80056cc:	4630      	mov	r0, r6
 80056ce:	f7ff fe49 	bl	8005364 <_Bfree>
 80056d2:	4647      	mov	r7, r8
 80056d4:	106d      	asrs	r5, r5, #1
 80056d6:	d00b      	beq.n	80056f0 <__pow5mult+0xa0>
 80056d8:	6820      	ldr	r0, [r4, #0]
 80056da:	b938      	cbnz	r0, 80056ec <__pow5mult+0x9c>
 80056dc:	4622      	mov	r2, r4
 80056de:	4621      	mov	r1, r4
 80056e0:	4630      	mov	r0, r6
 80056e2:	f7ff ff0b 	bl	80054fc <__multiply>
 80056e6:	6020      	str	r0, [r4, #0]
 80056e8:	f8c0 9000 	str.w	r9, [r0]
 80056ec:	4604      	mov	r4, r0
 80056ee:	e7e4      	b.n	80056ba <__pow5mult+0x6a>
 80056f0:	4638      	mov	r0, r7
 80056f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056f6:	bf00      	nop
 80056f8:	08007600 	.word	0x08007600
 80056fc:	08007430 	.word	0x08007430
 8005700:	080074b0 	.word	0x080074b0

08005704 <__lshift>:
 8005704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005708:	460c      	mov	r4, r1
 800570a:	6849      	ldr	r1, [r1, #4]
 800570c:	6923      	ldr	r3, [r4, #16]
 800570e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005712:	68a3      	ldr	r3, [r4, #8]
 8005714:	4607      	mov	r7, r0
 8005716:	4691      	mov	r9, r2
 8005718:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800571c:	f108 0601 	add.w	r6, r8, #1
 8005720:	42b3      	cmp	r3, r6
 8005722:	db0b      	blt.n	800573c <__lshift+0x38>
 8005724:	4638      	mov	r0, r7
 8005726:	f7ff fddd 	bl	80052e4 <_Balloc>
 800572a:	4605      	mov	r5, r0
 800572c:	b948      	cbnz	r0, 8005742 <__lshift+0x3e>
 800572e:	4602      	mov	r2, r0
 8005730:	4b28      	ldr	r3, [pc, #160]	; (80057d4 <__lshift+0xd0>)
 8005732:	4829      	ldr	r0, [pc, #164]	; (80057d8 <__lshift+0xd4>)
 8005734:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005738:	f000 fb7e 	bl	8005e38 <__assert_func>
 800573c:	3101      	adds	r1, #1
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	e7ee      	b.n	8005720 <__lshift+0x1c>
 8005742:	2300      	movs	r3, #0
 8005744:	f100 0114 	add.w	r1, r0, #20
 8005748:	f100 0210 	add.w	r2, r0, #16
 800574c:	4618      	mov	r0, r3
 800574e:	4553      	cmp	r3, sl
 8005750:	db33      	blt.n	80057ba <__lshift+0xb6>
 8005752:	6920      	ldr	r0, [r4, #16]
 8005754:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005758:	f104 0314 	add.w	r3, r4, #20
 800575c:	f019 091f 	ands.w	r9, r9, #31
 8005760:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005764:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005768:	d02b      	beq.n	80057c2 <__lshift+0xbe>
 800576a:	f1c9 0e20 	rsb	lr, r9, #32
 800576e:	468a      	mov	sl, r1
 8005770:	2200      	movs	r2, #0
 8005772:	6818      	ldr	r0, [r3, #0]
 8005774:	fa00 f009 	lsl.w	r0, r0, r9
 8005778:	4310      	orrs	r0, r2
 800577a:	f84a 0b04 	str.w	r0, [sl], #4
 800577e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005782:	459c      	cmp	ip, r3
 8005784:	fa22 f20e 	lsr.w	r2, r2, lr
 8005788:	d8f3      	bhi.n	8005772 <__lshift+0x6e>
 800578a:	ebac 0304 	sub.w	r3, ip, r4
 800578e:	3b15      	subs	r3, #21
 8005790:	f023 0303 	bic.w	r3, r3, #3
 8005794:	3304      	adds	r3, #4
 8005796:	f104 0015 	add.w	r0, r4, #21
 800579a:	4584      	cmp	ip, r0
 800579c:	bf38      	it	cc
 800579e:	2304      	movcc	r3, #4
 80057a0:	50ca      	str	r2, [r1, r3]
 80057a2:	b10a      	cbz	r2, 80057a8 <__lshift+0xa4>
 80057a4:	f108 0602 	add.w	r6, r8, #2
 80057a8:	3e01      	subs	r6, #1
 80057aa:	4638      	mov	r0, r7
 80057ac:	612e      	str	r6, [r5, #16]
 80057ae:	4621      	mov	r1, r4
 80057b0:	f7ff fdd8 	bl	8005364 <_Bfree>
 80057b4:	4628      	mov	r0, r5
 80057b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80057be:	3301      	adds	r3, #1
 80057c0:	e7c5      	b.n	800574e <__lshift+0x4a>
 80057c2:	3904      	subs	r1, #4
 80057c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80057c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80057cc:	459c      	cmp	ip, r3
 80057ce:	d8f9      	bhi.n	80057c4 <__lshift+0xc0>
 80057d0:	e7ea      	b.n	80057a8 <__lshift+0xa4>
 80057d2:	bf00      	nop
 80057d4:	0800749f 	.word	0x0800749f
 80057d8:	080074b0 	.word	0x080074b0

080057dc <__mcmp>:
 80057dc:	b530      	push	{r4, r5, lr}
 80057de:	6902      	ldr	r2, [r0, #16]
 80057e0:	690c      	ldr	r4, [r1, #16]
 80057e2:	1b12      	subs	r2, r2, r4
 80057e4:	d10e      	bne.n	8005804 <__mcmp+0x28>
 80057e6:	f100 0314 	add.w	r3, r0, #20
 80057ea:	3114      	adds	r1, #20
 80057ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80057f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80057f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80057f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80057fc:	42a5      	cmp	r5, r4
 80057fe:	d003      	beq.n	8005808 <__mcmp+0x2c>
 8005800:	d305      	bcc.n	800580e <__mcmp+0x32>
 8005802:	2201      	movs	r2, #1
 8005804:	4610      	mov	r0, r2
 8005806:	bd30      	pop	{r4, r5, pc}
 8005808:	4283      	cmp	r3, r0
 800580a:	d3f3      	bcc.n	80057f4 <__mcmp+0x18>
 800580c:	e7fa      	b.n	8005804 <__mcmp+0x28>
 800580e:	f04f 32ff 	mov.w	r2, #4294967295
 8005812:	e7f7      	b.n	8005804 <__mcmp+0x28>

08005814 <__mdiff>:
 8005814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005818:	460c      	mov	r4, r1
 800581a:	4606      	mov	r6, r0
 800581c:	4611      	mov	r1, r2
 800581e:	4620      	mov	r0, r4
 8005820:	4690      	mov	r8, r2
 8005822:	f7ff ffdb 	bl	80057dc <__mcmp>
 8005826:	1e05      	subs	r5, r0, #0
 8005828:	d110      	bne.n	800584c <__mdiff+0x38>
 800582a:	4629      	mov	r1, r5
 800582c:	4630      	mov	r0, r6
 800582e:	f7ff fd59 	bl	80052e4 <_Balloc>
 8005832:	b930      	cbnz	r0, 8005842 <__mdiff+0x2e>
 8005834:	4b3a      	ldr	r3, [pc, #232]	; (8005920 <__mdiff+0x10c>)
 8005836:	4602      	mov	r2, r0
 8005838:	f240 2137 	movw	r1, #567	; 0x237
 800583c:	4839      	ldr	r0, [pc, #228]	; (8005924 <__mdiff+0x110>)
 800583e:	f000 fafb 	bl	8005e38 <__assert_func>
 8005842:	2301      	movs	r3, #1
 8005844:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005848:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800584c:	bfa4      	itt	ge
 800584e:	4643      	movge	r3, r8
 8005850:	46a0      	movge	r8, r4
 8005852:	4630      	mov	r0, r6
 8005854:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005858:	bfa6      	itte	ge
 800585a:	461c      	movge	r4, r3
 800585c:	2500      	movge	r5, #0
 800585e:	2501      	movlt	r5, #1
 8005860:	f7ff fd40 	bl	80052e4 <_Balloc>
 8005864:	b920      	cbnz	r0, 8005870 <__mdiff+0x5c>
 8005866:	4b2e      	ldr	r3, [pc, #184]	; (8005920 <__mdiff+0x10c>)
 8005868:	4602      	mov	r2, r0
 800586a:	f240 2145 	movw	r1, #581	; 0x245
 800586e:	e7e5      	b.n	800583c <__mdiff+0x28>
 8005870:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005874:	6926      	ldr	r6, [r4, #16]
 8005876:	60c5      	str	r5, [r0, #12]
 8005878:	f104 0914 	add.w	r9, r4, #20
 800587c:	f108 0514 	add.w	r5, r8, #20
 8005880:	f100 0e14 	add.w	lr, r0, #20
 8005884:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005888:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800588c:	f108 0210 	add.w	r2, r8, #16
 8005890:	46f2      	mov	sl, lr
 8005892:	2100      	movs	r1, #0
 8005894:	f859 3b04 	ldr.w	r3, [r9], #4
 8005898:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800589c:	fa11 f88b 	uxtah	r8, r1, fp
 80058a0:	b299      	uxth	r1, r3
 80058a2:	0c1b      	lsrs	r3, r3, #16
 80058a4:	eba8 0801 	sub.w	r8, r8, r1
 80058a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80058ac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80058b0:	fa1f f888 	uxth.w	r8, r8
 80058b4:	1419      	asrs	r1, r3, #16
 80058b6:	454e      	cmp	r6, r9
 80058b8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80058bc:	f84a 3b04 	str.w	r3, [sl], #4
 80058c0:	d8e8      	bhi.n	8005894 <__mdiff+0x80>
 80058c2:	1b33      	subs	r3, r6, r4
 80058c4:	3b15      	subs	r3, #21
 80058c6:	f023 0303 	bic.w	r3, r3, #3
 80058ca:	3304      	adds	r3, #4
 80058cc:	3415      	adds	r4, #21
 80058ce:	42a6      	cmp	r6, r4
 80058d0:	bf38      	it	cc
 80058d2:	2304      	movcc	r3, #4
 80058d4:	441d      	add	r5, r3
 80058d6:	4473      	add	r3, lr
 80058d8:	469e      	mov	lr, r3
 80058da:	462e      	mov	r6, r5
 80058dc:	4566      	cmp	r6, ip
 80058de:	d30e      	bcc.n	80058fe <__mdiff+0xea>
 80058e0:	f10c 0203 	add.w	r2, ip, #3
 80058e4:	1b52      	subs	r2, r2, r5
 80058e6:	f022 0203 	bic.w	r2, r2, #3
 80058ea:	3d03      	subs	r5, #3
 80058ec:	45ac      	cmp	ip, r5
 80058ee:	bf38      	it	cc
 80058f0:	2200      	movcc	r2, #0
 80058f2:	4413      	add	r3, r2
 80058f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80058f8:	b17a      	cbz	r2, 800591a <__mdiff+0x106>
 80058fa:	6107      	str	r7, [r0, #16]
 80058fc:	e7a4      	b.n	8005848 <__mdiff+0x34>
 80058fe:	f856 8b04 	ldr.w	r8, [r6], #4
 8005902:	fa11 f288 	uxtah	r2, r1, r8
 8005906:	1414      	asrs	r4, r2, #16
 8005908:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800590c:	b292      	uxth	r2, r2
 800590e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005912:	f84e 2b04 	str.w	r2, [lr], #4
 8005916:	1421      	asrs	r1, r4, #16
 8005918:	e7e0      	b.n	80058dc <__mdiff+0xc8>
 800591a:	3f01      	subs	r7, #1
 800591c:	e7ea      	b.n	80058f4 <__mdiff+0xe0>
 800591e:	bf00      	nop
 8005920:	0800749f 	.word	0x0800749f
 8005924:	080074b0 	.word	0x080074b0

08005928 <__d2b>:
 8005928:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800592c:	460f      	mov	r7, r1
 800592e:	2101      	movs	r1, #1
 8005930:	ec59 8b10 	vmov	r8, r9, d0
 8005934:	4616      	mov	r6, r2
 8005936:	f7ff fcd5 	bl	80052e4 <_Balloc>
 800593a:	4604      	mov	r4, r0
 800593c:	b930      	cbnz	r0, 800594c <__d2b+0x24>
 800593e:	4602      	mov	r2, r0
 8005940:	4b24      	ldr	r3, [pc, #144]	; (80059d4 <__d2b+0xac>)
 8005942:	4825      	ldr	r0, [pc, #148]	; (80059d8 <__d2b+0xb0>)
 8005944:	f240 310f 	movw	r1, #783	; 0x30f
 8005948:	f000 fa76 	bl	8005e38 <__assert_func>
 800594c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005950:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005954:	bb2d      	cbnz	r5, 80059a2 <__d2b+0x7a>
 8005956:	9301      	str	r3, [sp, #4]
 8005958:	f1b8 0300 	subs.w	r3, r8, #0
 800595c:	d026      	beq.n	80059ac <__d2b+0x84>
 800595e:	4668      	mov	r0, sp
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	f7ff fd87 	bl	8005474 <__lo0bits>
 8005966:	e9dd 1200 	ldrd	r1, r2, [sp]
 800596a:	b1e8      	cbz	r0, 80059a8 <__d2b+0x80>
 800596c:	f1c0 0320 	rsb	r3, r0, #32
 8005970:	fa02 f303 	lsl.w	r3, r2, r3
 8005974:	430b      	orrs	r3, r1
 8005976:	40c2      	lsrs	r2, r0
 8005978:	6163      	str	r3, [r4, #20]
 800597a:	9201      	str	r2, [sp, #4]
 800597c:	9b01      	ldr	r3, [sp, #4]
 800597e:	61a3      	str	r3, [r4, #24]
 8005980:	2b00      	cmp	r3, #0
 8005982:	bf14      	ite	ne
 8005984:	2202      	movne	r2, #2
 8005986:	2201      	moveq	r2, #1
 8005988:	6122      	str	r2, [r4, #16]
 800598a:	b1bd      	cbz	r5, 80059bc <__d2b+0x94>
 800598c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005990:	4405      	add	r5, r0
 8005992:	603d      	str	r5, [r7, #0]
 8005994:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005998:	6030      	str	r0, [r6, #0]
 800599a:	4620      	mov	r0, r4
 800599c:	b003      	add	sp, #12
 800599e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059a6:	e7d6      	b.n	8005956 <__d2b+0x2e>
 80059a8:	6161      	str	r1, [r4, #20]
 80059aa:	e7e7      	b.n	800597c <__d2b+0x54>
 80059ac:	a801      	add	r0, sp, #4
 80059ae:	f7ff fd61 	bl	8005474 <__lo0bits>
 80059b2:	9b01      	ldr	r3, [sp, #4]
 80059b4:	6163      	str	r3, [r4, #20]
 80059b6:	3020      	adds	r0, #32
 80059b8:	2201      	movs	r2, #1
 80059ba:	e7e5      	b.n	8005988 <__d2b+0x60>
 80059bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80059c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80059c4:	6038      	str	r0, [r7, #0]
 80059c6:	6918      	ldr	r0, [r3, #16]
 80059c8:	f7ff fd34 	bl	8005434 <__hi0bits>
 80059cc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80059d0:	e7e2      	b.n	8005998 <__d2b+0x70>
 80059d2:	bf00      	nop
 80059d4:	0800749f 	.word	0x0800749f
 80059d8:	080074b0 	.word	0x080074b0

080059dc <__ssputs_r>:
 80059dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059e0:	688e      	ldr	r6, [r1, #8]
 80059e2:	461f      	mov	r7, r3
 80059e4:	42be      	cmp	r6, r7
 80059e6:	680b      	ldr	r3, [r1, #0]
 80059e8:	4682      	mov	sl, r0
 80059ea:	460c      	mov	r4, r1
 80059ec:	4690      	mov	r8, r2
 80059ee:	d82c      	bhi.n	8005a4a <__ssputs_r+0x6e>
 80059f0:	898a      	ldrh	r2, [r1, #12]
 80059f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80059f6:	d026      	beq.n	8005a46 <__ssputs_r+0x6a>
 80059f8:	6965      	ldr	r5, [r4, #20]
 80059fa:	6909      	ldr	r1, [r1, #16]
 80059fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a00:	eba3 0901 	sub.w	r9, r3, r1
 8005a04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a08:	1c7b      	adds	r3, r7, #1
 8005a0a:	444b      	add	r3, r9
 8005a0c:	106d      	asrs	r5, r5, #1
 8005a0e:	429d      	cmp	r5, r3
 8005a10:	bf38      	it	cc
 8005a12:	461d      	movcc	r5, r3
 8005a14:	0553      	lsls	r3, r2, #21
 8005a16:	d527      	bpl.n	8005a68 <__ssputs_r+0x8c>
 8005a18:	4629      	mov	r1, r5
 8005a1a:	f7fd fef3 	bl	8003804 <_malloc_r>
 8005a1e:	4606      	mov	r6, r0
 8005a20:	b360      	cbz	r0, 8005a7c <__ssputs_r+0xa0>
 8005a22:	6921      	ldr	r1, [r4, #16]
 8005a24:	464a      	mov	r2, r9
 8005a26:	f000 f9f9 	bl	8005e1c <memcpy>
 8005a2a:	89a3      	ldrh	r3, [r4, #12]
 8005a2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a34:	81a3      	strh	r3, [r4, #12]
 8005a36:	6126      	str	r6, [r4, #16]
 8005a38:	6165      	str	r5, [r4, #20]
 8005a3a:	444e      	add	r6, r9
 8005a3c:	eba5 0509 	sub.w	r5, r5, r9
 8005a40:	6026      	str	r6, [r4, #0]
 8005a42:	60a5      	str	r5, [r4, #8]
 8005a44:	463e      	mov	r6, r7
 8005a46:	42be      	cmp	r6, r7
 8005a48:	d900      	bls.n	8005a4c <__ssputs_r+0x70>
 8005a4a:	463e      	mov	r6, r7
 8005a4c:	6820      	ldr	r0, [r4, #0]
 8005a4e:	4632      	mov	r2, r6
 8005a50:	4641      	mov	r1, r8
 8005a52:	f000 f9c9 	bl	8005de8 <memmove>
 8005a56:	68a3      	ldr	r3, [r4, #8]
 8005a58:	1b9b      	subs	r3, r3, r6
 8005a5a:	60a3      	str	r3, [r4, #8]
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	4433      	add	r3, r6
 8005a60:	6023      	str	r3, [r4, #0]
 8005a62:	2000      	movs	r0, #0
 8005a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a68:	462a      	mov	r2, r5
 8005a6a:	f000 fa2b 	bl	8005ec4 <_realloc_r>
 8005a6e:	4606      	mov	r6, r0
 8005a70:	2800      	cmp	r0, #0
 8005a72:	d1e0      	bne.n	8005a36 <__ssputs_r+0x5a>
 8005a74:	6921      	ldr	r1, [r4, #16]
 8005a76:	4650      	mov	r0, sl
 8005a78:	f7ff fbe8 	bl	800524c <_free_r>
 8005a7c:	230c      	movs	r3, #12
 8005a7e:	f8ca 3000 	str.w	r3, [sl]
 8005a82:	89a3      	ldrh	r3, [r4, #12]
 8005a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a88:	81a3      	strh	r3, [r4, #12]
 8005a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8e:	e7e9      	b.n	8005a64 <__ssputs_r+0x88>

08005a90 <_svfiprintf_r>:
 8005a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a94:	4698      	mov	r8, r3
 8005a96:	898b      	ldrh	r3, [r1, #12]
 8005a98:	061b      	lsls	r3, r3, #24
 8005a9a:	b09d      	sub	sp, #116	; 0x74
 8005a9c:	4607      	mov	r7, r0
 8005a9e:	460d      	mov	r5, r1
 8005aa0:	4614      	mov	r4, r2
 8005aa2:	d50e      	bpl.n	8005ac2 <_svfiprintf_r+0x32>
 8005aa4:	690b      	ldr	r3, [r1, #16]
 8005aa6:	b963      	cbnz	r3, 8005ac2 <_svfiprintf_r+0x32>
 8005aa8:	2140      	movs	r1, #64	; 0x40
 8005aaa:	f7fd feab 	bl	8003804 <_malloc_r>
 8005aae:	6028      	str	r0, [r5, #0]
 8005ab0:	6128      	str	r0, [r5, #16]
 8005ab2:	b920      	cbnz	r0, 8005abe <_svfiprintf_r+0x2e>
 8005ab4:	230c      	movs	r3, #12
 8005ab6:	603b      	str	r3, [r7, #0]
 8005ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8005abc:	e0d0      	b.n	8005c60 <_svfiprintf_r+0x1d0>
 8005abe:	2340      	movs	r3, #64	; 0x40
 8005ac0:	616b      	str	r3, [r5, #20]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ac6:	2320      	movs	r3, #32
 8005ac8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005acc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ad0:	2330      	movs	r3, #48	; 0x30
 8005ad2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005c78 <_svfiprintf_r+0x1e8>
 8005ad6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ada:	f04f 0901 	mov.w	r9, #1
 8005ade:	4623      	mov	r3, r4
 8005ae0:	469a      	mov	sl, r3
 8005ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ae6:	b10a      	cbz	r2, 8005aec <_svfiprintf_r+0x5c>
 8005ae8:	2a25      	cmp	r2, #37	; 0x25
 8005aea:	d1f9      	bne.n	8005ae0 <_svfiprintf_r+0x50>
 8005aec:	ebba 0b04 	subs.w	fp, sl, r4
 8005af0:	d00b      	beq.n	8005b0a <_svfiprintf_r+0x7a>
 8005af2:	465b      	mov	r3, fp
 8005af4:	4622      	mov	r2, r4
 8005af6:	4629      	mov	r1, r5
 8005af8:	4638      	mov	r0, r7
 8005afa:	f7ff ff6f 	bl	80059dc <__ssputs_r>
 8005afe:	3001      	adds	r0, #1
 8005b00:	f000 80a9 	beq.w	8005c56 <_svfiprintf_r+0x1c6>
 8005b04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b06:	445a      	add	r2, fp
 8005b08:	9209      	str	r2, [sp, #36]	; 0x24
 8005b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f000 80a1 	beq.w	8005c56 <_svfiprintf_r+0x1c6>
 8005b14:	2300      	movs	r3, #0
 8005b16:	f04f 32ff 	mov.w	r2, #4294967295
 8005b1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b1e:	f10a 0a01 	add.w	sl, sl, #1
 8005b22:	9304      	str	r3, [sp, #16]
 8005b24:	9307      	str	r3, [sp, #28]
 8005b26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b2a:	931a      	str	r3, [sp, #104]	; 0x68
 8005b2c:	4654      	mov	r4, sl
 8005b2e:	2205      	movs	r2, #5
 8005b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b34:	4850      	ldr	r0, [pc, #320]	; (8005c78 <_svfiprintf_r+0x1e8>)
 8005b36:	f7fa fb4b 	bl	80001d0 <memchr>
 8005b3a:	9a04      	ldr	r2, [sp, #16]
 8005b3c:	b9d8      	cbnz	r0, 8005b76 <_svfiprintf_r+0xe6>
 8005b3e:	06d0      	lsls	r0, r2, #27
 8005b40:	bf44      	itt	mi
 8005b42:	2320      	movmi	r3, #32
 8005b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b48:	0711      	lsls	r1, r2, #28
 8005b4a:	bf44      	itt	mi
 8005b4c:	232b      	movmi	r3, #43	; 0x2b
 8005b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b52:	f89a 3000 	ldrb.w	r3, [sl]
 8005b56:	2b2a      	cmp	r3, #42	; 0x2a
 8005b58:	d015      	beq.n	8005b86 <_svfiprintf_r+0xf6>
 8005b5a:	9a07      	ldr	r2, [sp, #28]
 8005b5c:	4654      	mov	r4, sl
 8005b5e:	2000      	movs	r0, #0
 8005b60:	f04f 0c0a 	mov.w	ip, #10
 8005b64:	4621      	mov	r1, r4
 8005b66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b6a:	3b30      	subs	r3, #48	; 0x30
 8005b6c:	2b09      	cmp	r3, #9
 8005b6e:	d94d      	bls.n	8005c0c <_svfiprintf_r+0x17c>
 8005b70:	b1b0      	cbz	r0, 8005ba0 <_svfiprintf_r+0x110>
 8005b72:	9207      	str	r2, [sp, #28]
 8005b74:	e014      	b.n	8005ba0 <_svfiprintf_r+0x110>
 8005b76:	eba0 0308 	sub.w	r3, r0, r8
 8005b7a:	fa09 f303 	lsl.w	r3, r9, r3
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	9304      	str	r3, [sp, #16]
 8005b82:	46a2      	mov	sl, r4
 8005b84:	e7d2      	b.n	8005b2c <_svfiprintf_r+0x9c>
 8005b86:	9b03      	ldr	r3, [sp, #12]
 8005b88:	1d19      	adds	r1, r3, #4
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	9103      	str	r1, [sp, #12]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	bfbb      	ittet	lt
 8005b92:	425b      	neglt	r3, r3
 8005b94:	f042 0202 	orrlt.w	r2, r2, #2
 8005b98:	9307      	strge	r3, [sp, #28]
 8005b9a:	9307      	strlt	r3, [sp, #28]
 8005b9c:	bfb8      	it	lt
 8005b9e:	9204      	strlt	r2, [sp, #16]
 8005ba0:	7823      	ldrb	r3, [r4, #0]
 8005ba2:	2b2e      	cmp	r3, #46	; 0x2e
 8005ba4:	d10c      	bne.n	8005bc0 <_svfiprintf_r+0x130>
 8005ba6:	7863      	ldrb	r3, [r4, #1]
 8005ba8:	2b2a      	cmp	r3, #42	; 0x2a
 8005baa:	d134      	bne.n	8005c16 <_svfiprintf_r+0x186>
 8005bac:	9b03      	ldr	r3, [sp, #12]
 8005bae:	1d1a      	adds	r2, r3, #4
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	9203      	str	r2, [sp, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	bfb8      	it	lt
 8005bb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005bbc:	3402      	adds	r4, #2
 8005bbe:	9305      	str	r3, [sp, #20]
 8005bc0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005c88 <_svfiprintf_r+0x1f8>
 8005bc4:	7821      	ldrb	r1, [r4, #0]
 8005bc6:	2203      	movs	r2, #3
 8005bc8:	4650      	mov	r0, sl
 8005bca:	f7fa fb01 	bl	80001d0 <memchr>
 8005bce:	b138      	cbz	r0, 8005be0 <_svfiprintf_r+0x150>
 8005bd0:	9b04      	ldr	r3, [sp, #16]
 8005bd2:	eba0 000a 	sub.w	r0, r0, sl
 8005bd6:	2240      	movs	r2, #64	; 0x40
 8005bd8:	4082      	lsls	r2, r0
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	3401      	adds	r4, #1
 8005bde:	9304      	str	r3, [sp, #16]
 8005be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005be4:	4825      	ldr	r0, [pc, #148]	; (8005c7c <_svfiprintf_r+0x1ec>)
 8005be6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bea:	2206      	movs	r2, #6
 8005bec:	f7fa faf0 	bl	80001d0 <memchr>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	d038      	beq.n	8005c66 <_svfiprintf_r+0x1d6>
 8005bf4:	4b22      	ldr	r3, [pc, #136]	; (8005c80 <_svfiprintf_r+0x1f0>)
 8005bf6:	bb1b      	cbnz	r3, 8005c40 <_svfiprintf_r+0x1b0>
 8005bf8:	9b03      	ldr	r3, [sp, #12]
 8005bfa:	3307      	adds	r3, #7
 8005bfc:	f023 0307 	bic.w	r3, r3, #7
 8005c00:	3308      	adds	r3, #8
 8005c02:	9303      	str	r3, [sp, #12]
 8005c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c06:	4433      	add	r3, r6
 8005c08:	9309      	str	r3, [sp, #36]	; 0x24
 8005c0a:	e768      	b.n	8005ade <_svfiprintf_r+0x4e>
 8005c0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c10:	460c      	mov	r4, r1
 8005c12:	2001      	movs	r0, #1
 8005c14:	e7a6      	b.n	8005b64 <_svfiprintf_r+0xd4>
 8005c16:	2300      	movs	r3, #0
 8005c18:	3401      	adds	r4, #1
 8005c1a:	9305      	str	r3, [sp, #20]
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	f04f 0c0a 	mov.w	ip, #10
 8005c22:	4620      	mov	r0, r4
 8005c24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c28:	3a30      	subs	r2, #48	; 0x30
 8005c2a:	2a09      	cmp	r2, #9
 8005c2c:	d903      	bls.n	8005c36 <_svfiprintf_r+0x1a6>
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0c6      	beq.n	8005bc0 <_svfiprintf_r+0x130>
 8005c32:	9105      	str	r1, [sp, #20]
 8005c34:	e7c4      	b.n	8005bc0 <_svfiprintf_r+0x130>
 8005c36:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e7f0      	b.n	8005c22 <_svfiprintf_r+0x192>
 8005c40:	ab03      	add	r3, sp, #12
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	462a      	mov	r2, r5
 8005c46:	4b0f      	ldr	r3, [pc, #60]	; (8005c84 <_svfiprintf_r+0x1f4>)
 8005c48:	a904      	add	r1, sp, #16
 8005c4a:	4638      	mov	r0, r7
 8005c4c:	f7fd ff06 	bl	8003a5c <_printf_float>
 8005c50:	1c42      	adds	r2, r0, #1
 8005c52:	4606      	mov	r6, r0
 8005c54:	d1d6      	bne.n	8005c04 <_svfiprintf_r+0x174>
 8005c56:	89ab      	ldrh	r3, [r5, #12]
 8005c58:	065b      	lsls	r3, r3, #25
 8005c5a:	f53f af2d 	bmi.w	8005ab8 <_svfiprintf_r+0x28>
 8005c5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c60:	b01d      	add	sp, #116	; 0x74
 8005c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c66:	ab03      	add	r3, sp, #12
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	462a      	mov	r2, r5
 8005c6c:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <_svfiprintf_r+0x1f4>)
 8005c6e:	a904      	add	r1, sp, #16
 8005c70:	4638      	mov	r0, r7
 8005c72:	f7fe f997 	bl	8003fa4 <_printf_i>
 8005c76:	e7eb      	b.n	8005c50 <_svfiprintf_r+0x1c0>
 8005c78:	0800760c 	.word	0x0800760c
 8005c7c:	08007616 	.word	0x08007616
 8005c80:	08003a5d 	.word	0x08003a5d
 8005c84:	080059dd 	.word	0x080059dd
 8005c88:	08007612 	.word	0x08007612

08005c8c <__sflush_r>:
 8005c8c:	898a      	ldrh	r2, [r1, #12]
 8005c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c92:	4605      	mov	r5, r0
 8005c94:	0710      	lsls	r0, r2, #28
 8005c96:	460c      	mov	r4, r1
 8005c98:	d458      	bmi.n	8005d4c <__sflush_r+0xc0>
 8005c9a:	684b      	ldr	r3, [r1, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	dc05      	bgt.n	8005cac <__sflush_r+0x20>
 8005ca0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	dc02      	bgt.n	8005cac <__sflush_r+0x20>
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cae:	2e00      	cmp	r6, #0
 8005cb0:	d0f9      	beq.n	8005ca6 <__sflush_r+0x1a>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005cb8:	682f      	ldr	r7, [r5, #0]
 8005cba:	6a21      	ldr	r1, [r4, #32]
 8005cbc:	602b      	str	r3, [r5, #0]
 8005cbe:	d032      	beq.n	8005d26 <__sflush_r+0x9a>
 8005cc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005cc2:	89a3      	ldrh	r3, [r4, #12]
 8005cc4:	075a      	lsls	r2, r3, #29
 8005cc6:	d505      	bpl.n	8005cd4 <__sflush_r+0x48>
 8005cc8:	6863      	ldr	r3, [r4, #4]
 8005cca:	1ac0      	subs	r0, r0, r3
 8005ccc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005cce:	b10b      	cbz	r3, 8005cd4 <__sflush_r+0x48>
 8005cd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cd2:	1ac0      	subs	r0, r0, r3
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cda:	6a21      	ldr	r1, [r4, #32]
 8005cdc:	4628      	mov	r0, r5
 8005cde:	47b0      	blx	r6
 8005ce0:	1c43      	adds	r3, r0, #1
 8005ce2:	89a3      	ldrh	r3, [r4, #12]
 8005ce4:	d106      	bne.n	8005cf4 <__sflush_r+0x68>
 8005ce6:	6829      	ldr	r1, [r5, #0]
 8005ce8:	291d      	cmp	r1, #29
 8005cea:	d82b      	bhi.n	8005d44 <__sflush_r+0xb8>
 8005cec:	4a29      	ldr	r2, [pc, #164]	; (8005d94 <__sflush_r+0x108>)
 8005cee:	410a      	asrs	r2, r1
 8005cf0:	07d6      	lsls	r6, r2, #31
 8005cf2:	d427      	bmi.n	8005d44 <__sflush_r+0xb8>
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	6062      	str	r2, [r4, #4]
 8005cf8:	04d9      	lsls	r1, r3, #19
 8005cfa:	6922      	ldr	r2, [r4, #16]
 8005cfc:	6022      	str	r2, [r4, #0]
 8005cfe:	d504      	bpl.n	8005d0a <__sflush_r+0x7e>
 8005d00:	1c42      	adds	r2, r0, #1
 8005d02:	d101      	bne.n	8005d08 <__sflush_r+0x7c>
 8005d04:	682b      	ldr	r3, [r5, #0]
 8005d06:	b903      	cbnz	r3, 8005d0a <__sflush_r+0x7e>
 8005d08:	6560      	str	r0, [r4, #84]	; 0x54
 8005d0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d0c:	602f      	str	r7, [r5, #0]
 8005d0e:	2900      	cmp	r1, #0
 8005d10:	d0c9      	beq.n	8005ca6 <__sflush_r+0x1a>
 8005d12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d16:	4299      	cmp	r1, r3
 8005d18:	d002      	beq.n	8005d20 <__sflush_r+0x94>
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	f7ff fa96 	bl	800524c <_free_r>
 8005d20:	2000      	movs	r0, #0
 8005d22:	6360      	str	r0, [r4, #52]	; 0x34
 8005d24:	e7c0      	b.n	8005ca8 <__sflush_r+0x1c>
 8005d26:	2301      	movs	r3, #1
 8005d28:	4628      	mov	r0, r5
 8005d2a:	47b0      	blx	r6
 8005d2c:	1c41      	adds	r1, r0, #1
 8005d2e:	d1c8      	bne.n	8005cc2 <__sflush_r+0x36>
 8005d30:	682b      	ldr	r3, [r5, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d0c5      	beq.n	8005cc2 <__sflush_r+0x36>
 8005d36:	2b1d      	cmp	r3, #29
 8005d38:	d001      	beq.n	8005d3e <__sflush_r+0xb2>
 8005d3a:	2b16      	cmp	r3, #22
 8005d3c:	d101      	bne.n	8005d42 <__sflush_r+0xb6>
 8005d3e:	602f      	str	r7, [r5, #0]
 8005d40:	e7b1      	b.n	8005ca6 <__sflush_r+0x1a>
 8005d42:	89a3      	ldrh	r3, [r4, #12]
 8005d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d48:	81a3      	strh	r3, [r4, #12]
 8005d4a:	e7ad      	b.n	8005ca8 <__sflush_r+0x1c>
 8005d4c:	690f      	ldr	r7, [r1, #16]
 8005d4e:	2f00      	cmp	r7, #0
 8005d50:	d0a9      	beq.n	8005ca6 <__sflush_r+0x1a>
 8005d52:	0793      	lsls	r3, r2, #30
 8005d54:	680e      	ldr	r6, [r1, #0]
 8005d56:	bf08      	it	eq
 8005d58:	694b      	ldreq	r3, [r1, #20]
 8005d5a:	600f      	str	r7, [r1, #0]
 8005d5c:	bf18      	it	ne
 8005d5e:	2300      	movne	r3, #0
 8005d60:	eba6 0807 	sub.w	r8, r6, r7
 8005d64:	608b      	str	r3, [r1, #8]
 8005d66:	f1b8 0f00 	cmp.w	r8, #0
 8005d6a:	dd9c      	ble.n	8005ca6 <__sflush_r+0x1a>
 8005d6c:	6a21      	ldr	r1, [r4, #32]
 8005d6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d70:	4643      	mov	r3, r8
 8005d72:	463a      	mov	r2, r7
 8005d74:	4628      	mov	r0, r5
 8005d76:	47b0      	blx	r6
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	dc06      	bgt.n	8005d8a <__sflush_r+0xfe>
 8005d7c:	89a3      	ldrh	r3, [r4, #12]
 8005d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d82:	81a3      	strh	r3, [r4, #12]
 8005d84:	f04f 30ff 	mov.w	r0, #4294967295
 8005d88:	e78e      	b.n	8005ca8 <__sflush_r+0x1c>
 8005d8a:	4407      	add	r7, r0
 8005d8c:	eba8 0800 	sub.w	r8, r8, r0
 8005d90:	e7e9      	b.n	8005d66 <__sflush_r+0xda>
 8005d92:	bf00      	nop
 8005d94:	dfbffffe 	.word	0xdfbffffe

08005d98 <_fflush_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	690b      	ldr	r3, [r1, #16]
 8005d9c:	4605      	mov	r5, r0
 8005d9e:	460c      	mov	r4, r1
 8005da0:	b913      	cbnz	r3, 8005da8 <_fflush_r+0x10>
 8005da2:	2500      	movs	r5, #0
 8005da4:	4628      	mov	r0, r5
 8005da6:	bd38      	pop	{r3, r4, r5, pc}
 8005da8:	b118      	cbz	r0, 8005db2 <_fflush_r+0x1a>
 8005daa:	6a03      	ldr	r3, [r0, #32]
 8005dac:	b90b      	cbnz	r3, 8005db2 <_fflush_r+0x1a>
 8005dae:	f7fe faa7 	bl	8004300 <__sinit>
 8005db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0f3      	beq.n	8005da2 <_fflush_r+0xa>
 8005dba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005dbc:	07d0      	lsls	r0, r2, #31
 8005dbe:	d404      	bmi.n	8005dca <_fflush_r+0x32>
 8005dc0:	0599      	lsls	r1, r3, #22
 8005dc2:	d402      	bmi.n	8005dca <_fflush_r+0x32>
 8005dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dc6:	f7fe fbc2 	bl	800454e <__retarget_lock_acquire_recursive>
 8005dca:	4628      	mov	r0, r5
 8005dcc:	4621      	mov	r1, r4
 8005dce:	f7ff ff5d 	bl	8005c8c <__sflush_r>
 8005dd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dd4:	07da      	lsls	r2, r3, #31
 8005dd6:	4605      	mov	r5, r0
 8005dd8:	d4e4      	bmi.n	8005da4 <_fflush_r+0xc>
 8005dda:	89a3      	ldrh	r3, [r4, #12]
 8005ddc:	059b      	lsls	r3, r3, #22
 8005dde:	d4e1      	bmi.n	8005da4 <_fflush_r+0xc>
 8005de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005de2:	f7fe fbb5 	bl	8004550 <__retarget_lock_release_recursive>
 8005de6:	e7dd      	b.n	8005da4 <_fflush_r+0xc>

08005de8 <memmove>:
 8005de8:	4288      	cmp	r0, r1
 8005dea:	b510      	push	{r4, lr}
 8005dec:	eb01 0402 	add.w	r4, r1, r2
 8005df0:	d902      	bls.n	8005df8 <memmove+0x10>
 8005df2:	4284      	cmp	r4, r0
 8005df4:	4623      	mov	r3, r4
 8005df6:	d807      	bhi.n	8005e08 <memmove+0x20>
 8005df8:	1e43      	subs	r3, r0, #1
 8005dfa:	42a1      	cmp	r1, r4
 8005dfc:	d008      	beq.n	8005e10 <memmove+0x28>
 8005dfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e06:	e7f8      	b.n	8005dfa <memmove+0x12>
 8005e08:	4402      	add	r2, r0
 8005e0a:	4601      	mov	r1, r0
 8005e0c:	428a      	cmp	r2, r1
 8005e0e:	d100      	bne.n	8005e12 <memmove+0x2a>
 8005e10:	bd10      	pop	{r4, pc}
 8005e12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e1a:	e7f7      	b.n	8005e0c <memmove+0x24>

08005e1c <memcpy>:
 8005e1c:	440a      	add	r2, r1
 8005e1e:	4291      	cmp	r1, r2
 8005e20:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e24:	d100      	bne.n	8005e28 <memcpy+0xc>
 8005e26:	4770      	bx	lr
 8005e28:	b510      	push	{r4, lr}
 8005e2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e32:	4291      	cmp	r1, r2
 8005e34:	d1f9      	bne.n	8005e2a <memcpy+0xe>
 8005e36:	bd10      	pop	{r4, pc}

08005e38 <__assert_func>:
 8005e38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e3a:	4614      	mov	r4, r2
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	4b09      	ldr	r3, [pc, #36]	; (8005e64 <__assert_func+0x2c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4605      	mov	r5, r0
 8005e44:	68d8      	ldr	r0, [r3, #12]
 8005e46:	b14c      	cbz	r4, 8005e5c <__assert_func+0x24>
 8005e48:	4b07      	ldr	r3, [pc, #28]	; (8005e68 <__assert_func+0x30>)
 8005e4a:	9100      	str	r1, [sp, #0]
 8005e4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005e50:	4906      	ldr	r1, [pc, #24]	; (8005e6c <__assert_func+0x34>)
 8005e52:	462b      	mov	r3, r5
 8005e54:	f000 f872 	bl	8005f3c <fiprintf>
 8005e58:	f000 f882 	bl	8005f60 <abort>
 8005e5c:	4b04      	ldr	r3, [pc, #16]	; (8005e70 <__assert_func+0x38>)
 8005e5e:	461c      	mov	r4, r3
 8005e60:	e7f3      	b.n	8005e4a <__assert_func+0x12>
 8005e62:	bf00      	nop
 8005e64:	200000e0 	.word	0x200000e0
 8005e68:	08007627 	.word	0x08007627
 8005e6c:	08007634 	.word	0x08007634
 8005e70:	08007662 	.word	0x08007662

08005e74 <_calloc_r>:
 8005e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e76:	fba1 2402 	umull	r2, r4, r1, r2
 8005e7a:	b94c      	cbnz	r4, 8005e90 <_calloc_r+0x1c>
 8005e7c:	4611      	mov	r1, r2
 8005e7e:	9201      	str	r2, [sp, #4]
 8005e80:	f7fd fcc0 	bl	8003804 <_malloc_r>
 8005e84:	9a01      	ldr	r2, [sp, #4]
 8005e86:	4605      	mov	r5, r0
 8005e88:	b930      	cbnz	r0, 8005e98 <_calloc_r+0x24>
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	b003      	add	sp, #12
 8005e8e:	bd30      	pop	{r4, r5, pc}
 8005e90:	220c      	movs	r2, #12
 8005e92:	6002      	str	r2, [r0, #0]
 8005e94:	2500      	movs	r5, #0
 8005e96:	e7f8      	b.n	8005e8a <_calloc_r+0x16>
 8005e98:	4621      	mov	r1, r4
 8005e9a:	f7fe faca 	bl	8004432 <memset>
 8005e9e:	e7f4      	b.n	8005e8a <_calloc_r+0x16>

08005ea0 <__ascii_mbtowc>:
 8005ea0:	b082      	sub	sp, #8
 8005ea2:	b901      	cbnz	r1, 8005ea6 <__ascii_mbtowc+0x6>
 8005ea4:	a901      	add	r1, sp, #4
 8005ea6:	b142      	cbz	r2, 8005eba <__ascii_mbtowc+0x1a>
 8005ea8:	b14b      	cbz	r3, 8005ebe <__ascii_mbtowc+0x1e>
 8005eaa:	7813      	ldrb	r3, [r2, #0]
 8005eac:	600b      	str	r3, [r1, #0]
 8005eae:	7812      	ldrb	r2, [r2, #0]
 8005eb0:	1e10      	subs	r0, r2, #0
 8005eb2:	bf18      	it	ne
 8005eb4:	2001      	movne	r0, #1
 8005eb6:	b002      	add	sp, #8
 8005eb8:	4770      	bx	lr
 8005eba:	4610      	mov	r0, r2
 8005ebc:	e7fb      	b.n	8005eb6 <__ascii_mbtowc+0x16>
 8005ebe:	f06f 0001 	mvn.w	r0, #1
 8005ec2:	e7f8      	b.n	8005eb6 <__ascii_mbtowc+0x16>

08005ec4 <_realloc_r>:
 8005ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec8:	4680      	mov	r8, r0
 8005eca:	4614      	mov	r4, r2
 8005ecc:	460e      	mov	r6, r1
 8005ece:	b921      	cbnz	r1, 8005eda <_realloc_r+0x16>
 8005ed0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ed4:	4611      	mov	r1, r2
 8005ed6:	f7fd bc95 	b.w	8003804 <_malloc_r>
 8005eda:	b92a      	cbnz	r2, 8005ee8 <_realloc_r+0x24>
 8005edc:	f7ff f9b6 	bl	800524c <_free_r>
 8005ee0:	4625      	mov	r5, r4
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ee8:	f000 f841 	bl	8005f6e <_malloc_usable_size_r>
 8005eec:	4284      	cmp	r4, r0
 8005eee:	4607      	mov	r7, r0
 8005ef0:	d802      	bhi.n	8005ef8 <_realloc_r+0x34>
 8005ef2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005ef6:	d812      	bhi.n	8005f1e <_realloc_r+0x5a>
 8005ef8:	4621      	mov	r1, r4
 8005efa:	4640      	mov	r0, r8
 8005efc:	f7fd fc82 	bl	8003804 <_malloc_r>
 8005f00:	4605      	mov	r5, r0
 8005f02:	2800      	cmp	r0, #0
 8005f04:	d0ed      	beq.n	8005ee2 <_realloc_r+0x1e>
 8005f06:	42bc      	cmp	r4, r7
 8005f08:	4622      	mov	r2, r4
 8005f0a:	4631      	mov	r1, r6
 8005f0c:	bf28      	it	cs
 8005f0e:	463a      	movcs	r2, r7
 8005f10:	f7ff ff84 	bl	8005e1c <memcpy>
 8005f14:	4631      	mov	r1, r6
 8005f16:	4640      	mov	r0, r8
 8005f18:	f7ff f998 	bl	800524c <_free_r>
 8005f1c:	e7e1      	b.n	8005ee2 <_realloc_r+0x1e>
 8005f1e:	4635      	mov	r5, r6
 8005f20:	e7df      	b.n	8005ee2 <_realloc_r+0x1e>

08005f22 <__ascii_wctomb>:
 8005f22:	b149      	cbz	r1, 8005f38 <__ascii_wctomb+0x16>
 8005f24:	2aff      	cmp	r2, #255	; 0xff
 8005f26:	bf85      	ittet	hi
 8005f28:	238a      	movhi	r3, #138	; 0x8a
 8005f2a:	6003      	strhi	r3, [r0, #0]
 8005f2c:	700a      	strbls	r2, [r1, #0]
 8005f2e:	f04f 30ff 	movhi.w	r0, #4294967295
 8005f32:	bf98      	it	ls
 8005f34:	2001      	movls	r0, #1
 8005f36:	4770      	bx	lr
 8005f38:	4608      	mov	r0, r1
 8005f3a:	4770      	bx	lr

08005f3c <fiprintf>:
 8005f3c:	b40e      	push	{r1, r2, r3}
 8005f3e:	b503      	push	{r0, r1, lr}
 8005f40:	4601      	mov	r1, r0
 8005f42:	ab03      	add	r3, sp, #12
 8005f44:	4805      	ldr	r0, [pc, #20]	; (8005f5c <fiprintf+0x20>)
 8005f46:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f4a:	6800      	ldr	r0, [r0, #0]
 8005f4c:	9301      	str	r3, [sp, #4]
 8005f4e:	f000 f83f 	bl	8005fd0 <_vfiprintf_r>
 8005f52:	b002      	add	sp, #8
 8005f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f58:	b003      	add	sp, #12
 8005f5a:	4770      	bx	lr
 8005f5c:	200000e0 	.word	0x200000e0

08005f60 <abort>:
 8005f60:	b508      	push	{r3, lr}
 8005f62:	2006      	movs	r0, #6
 8005f64:	f000 fa0c 	bl	8006380 <raise>
 8005f68:	2001      	movs	r0, #1
 8005f6a:	f7fc f913 	bl	8002194 <_exit>

08005f6e <_malloc_usable_size_r>:
 8005f6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f72:	1f18      	subs	r0, r3, #4
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	bfbc      	itt	lt
 8005f78:	580b      	ldrlt	r3, [r1, r0]
 8005f7a:	18c0      	addlt	r0, r0, r3
 8005f7c:	4770      	bx	lr

08005f7e <__sfputc_r>:
 8005f7e:	6893      	ldr	r3, [r2, #8]
 8005f80:	3b01      	subs	r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	b410      	push	{r4}
 8005f86:	6093      	str	r3, [r2, #8]
 8005f88:	da08      	bge.n	8005f9c <__sfputc_r+0x1e>
 8005f8a:	6994      	ldr	r4, [r2, #24]
 8005f8c:	42a3      	cmp	r3, r4
 8005f8e:	db01      	blt.n	8005f94 <__sfputc_r+0x16>
 8005f90:	290a      	cmp	r1, #10
 8005f92:	d103      	bne.n	8005f9c <__sfputc_r+0x1e>
 8005f94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f98:	f000 b934 	b.w	8006204 <__swbuf_r>
 8005f9c:	6813      	ldr	r3, [r2, #0]
 8005f9e:	1c58      	adds	r0, r3, #1
 8005fa0:	6010      	str	r0, [r2, #0]
 8005fa2:	7019      	strb	r1, [r3, #0]
 8005fa4:	4608      	mov	r0, r1
 8005fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <__sfputs_r>:
 8005fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fae:	4606      	mov	r6, r0
 8005fb0:	460f      	mov	r7, r1
 8005fb2:	4614      	mov	r4, r2
 8005fb4:	18d5      	adds	r5, r2, r3
 8005fb6:	42ac      	cmp	r4, r5
 8005fb8:	d101      	bne.n	8005fbe <__sfputs_r+0x12>
 8005fba:	2000      	movs	r0, #0
 8005fbc:	e007      	b.n	8005fce <__sfputs_r+0x22>
 8005fbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fc2:	463a      	mov	r2, r7
 8005fc4:	4630      	mov	r0, r6
 8005fc6:	f7ff ffda 	bl	8005f7e <__sfputc_r>
 8005fca:	1c43      	adds	r3, r0, #1
 8005fcc:	d1f3      	bne.n	8005fb6 <__sfputs_r+0xa>
 8005fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005fd0 <_vfiprintf_r>:
 8005fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd4:	460d      	mov	r5, r1
 8005fd6:	b09d      	sub	sp, #116	; 0x74
 8005fd8:	4614      	mov	r4, r2
 8005fda:	4698      	mov	r8, r3
 8005fdc:	4606      	mov	r6, r0
 8005fde:	b118      	cbz	r0, 8005fe8 <_vfiprintf_r+0x18>
 8005fe0:	6a03      	ldr	r3, [r0, #32]
 8005fe2:	b90b      	cbnz	r3, 8005fe8 <_vfiprintf_r+0x18>
 8005fe4:	f7fe f98c 	bl	8004300 <__sinit>
 8005fe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fea:	07d9      	lsls	r1, r3, #31
 8005fec:	d405      	bmi.n	8005ffa <_vfiprintf_r+0x2a>
 8005fee:	89ab      	ldrh	r3, [r5, #12]
 8005ff0:	059a      	lsls	r2, r3, #22
 8005ff2:	d402      	bmi.n	8005ffa <_vfiprintf_r+0x2a>
 8005ff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ff6:	f7fe faaa 	bl	800454e <__retarget_lock_acquire_recursive>
 8005ffa:	89ab      	ldrh	r3, [r5, #12]
 8005ffc:	071b      	lsls	r3, r3, #28
 8005ffe:	d501      	bpl.n	8006004 <_vfiprintf_r+0x34>
 8006000:	692b      	ldr	r3, [r5, #16]
 8006002:	b99b      	cbnz	r3, 800602c <_vfiprintf_r+0x5c>
 8006004:	4629      	mov	r1, r5
 8006006:	4630      	mov	r0, r6
 8006008:	f000 f93a 	bl	8006280 <__swsetup_r>
 800600c:	b170      	cbz	r0, 800602c <_vfiprintf_r+0x5c>
 800600e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006010:	07dc      	lsls	r4, r3, #31
 8006012:	d504      	bpl.n	800601e <_vfiprintf_r+0x4e>
 8006014:	f04f 30ff 	mov.w	r0, #4294967295
 8006018:	b01d      	add	sp, #116	; 0x74
 800601a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800601e:	89ab      	ldrh	r3, [r5, #12]
 8006020:	0598      	lsls	r0, r3, #22
 8006022:	d4f7      	bmi.n	8006014 <_vfiprintf_r+0x44>
 8006024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006026:	f7fe fa93 	bl	8004550 <__retarget_lock_release_recursive>
 800602a:	e7f3      	b.n	8006014 <_vfiprintf_r+0x44>
 800602c:	2300      	movs	r3, #0
 800602e:	9309      	str	r3, [sp, #36]	; 0x24
 8006030:	2320      	movs	r3, #32
 8006032:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006036:	f8cd 800c 	str.w	r8, [sp, #12]
 800603a:	2330      	movs	r3, #48	; 0x30
 800603c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80061f0 <_vfiprintf_r+0x220>
 8006040:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006044:	f04f 0901 	mov.w	r9, #1
 8006048:	4623      	mov	r3, r4
 800604a:	469a      	mov	sl, r3
 800604c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006050:	b10a      	cbz	r2, 8006056 <_vfiprintf_r+0x86>
 8006052:	2a25      	cmp	r2, #37	; 0x25
 8006054:	d1f9      	bne.n	800604a <_vfiprintf_r+0x7a>
 8006056:	ebba 0b04 	subs.w	fp, sl, r4
 800605a:	d00b      	beq.n	8006074 <_vfiprintf_r+0xa4>
 800605c:	465b      	mov	r3, fp
 800605e:	4622      	mov	r2, r4
 8006060:	4629      	mov	r1, r5
 8006062:	4630      	mov	r0, r6
 8006064:	f7ff ffa2 	bl	8005fac <__sfputs_r>
 8006068:	3001      	adds	r0, #1
 800606a:	f000 80a9 	beq.w	80061c0 <_vfiprintf_r+0x1f0>
 800606e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006070:	445a      	add	r2, fp
 8006072:	9209      	str	r2, [sp, #36]	; 0x24
 8006074:	f89a 3000 	ldrb.w	r3, [sl]
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 80a1 	beq.w	80061c0 <_vfiprintf_r+0x1f0>
 800607e:	2300      	movs	r3, #0
 8006080:	f04f 32ff 	mov.w	r2, #4294967295
 8006084:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006088:	f10a 0a01 	add.w	sl, sl, #1
 800608c:	9304      	str	r3, [sp, #16]
 800608e:	9307      	str	r3, [sp, #28]
 8006090:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006094:	931a      	str	r3, [sp, #104]	; 0x68
 8006096:	4654      	mov	r4, sl
 8006098:	2205      	movs	r2, #5
 800609a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800609e:	4854      	ldr	r0, [pc, #336]	; (80061f0 <_vfiprintf_r+0x220>)
 80060a0:	f7fa f896 	bl	80001d0 <memchr>
 80060a4:	9a04      	ldr	r2, [sp, #16]
 80060a6:	b9d8      	cbnz	r0, 80060e0 <_vfiprintf_r+0x110>
 80060a8:	06d1      	lsls	r1, r2, #27
 80060aa:	bf44      	itt	mi
 80060ac:	2320      	movmi	r3, #32
 80060ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060b2:	0713      	lsls	r3, r2, #28
 80060b4:	bf44      	itt	mi
 80060b6:	232b      	movmi	r3, #43	; 0x2b
 80060b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060bc:	f89a 3000 	ldrb.w	r3, [sl]
 80060c0:	2b2a      	cmp	r3, #42	; 0x2a
 80060c2:	d015      	beq.n	80060f0 <_vfiprintf_r+0x120>
 80060c4:	9a07      	ldr	r2, [sp, #28]
 80060c6:	4654      	mov	r4, sl
 80060c8:	2000      	movs	r0, #0
 80060ca:	f04f 0c0a 	mov.w	ip, #10
 80060ce:	4621      	mov	r1, r4
 80060d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060d4:	3b30      	subs	r3, #48	; 0x30
 80060d6:	2b09      	cmp	r3, #9
 80060d8:	d94d      	bls.n	8006176 <_vfiprintf_r+0x1a6>
 80060da:	b1b0      	cbz	r0, 800610a <_vfiprintf_r+0x13a>
 80060dc:	9207      	str	r2, [sp, #28]
 80060de:	e014      	b.n	800610a <_vfiprintf_r+0x13a>
 80060e0:	eba0 0308 	sub.w	r3, r0, r8
 80060e4:	fa09 f303 	lsl.w	r3, r9, r3
 80060e8:	4313      	orrs	r3, r2
 80060ea:	9304      	str	r3, [sp, #16]
 80060ec:	46a2      	mov	sl, r4
 80060ee:	e7d2      	b.n	8006096 <_vfiprintf_r+0xc6>
 80060f0:	9b03      	ldr	r3, [sp, #12]
 80060f2:	1d19      	adds	r1, r3, #4
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	9103      	str	r1, [sp, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	bfbb      	ittet	lt
 80060fc:	425b      	neglt	r3, r3
 80060fe:	f042 0202 	orrlt.w	r2, r2, #2
 8006102:	9307      	strge	r3, [sp, #28]
 8006104:	9307      	strlt	r3, [sp, #28]
 8006106:	bfb8      	it	lt
 8006108:	9204      	strlt	r2, [sp, #16]
 800610a:	7823      	ldrb	r3, [r4, #0]
 800610c:	2b2e      	cmp	r3, #46	; 0x2e
 800610e:	d10c      	bne.n	800612a <_vfiprintf_r+0x15a>
 8006110:	7863      	ldrb	r3, [r4, #1]
 8006112:	2b2a      	cmp	r3, #42	; 0x2a
 8006114:	d134      	bne.n	8006180 <_vfiprintf_r+0x1b0>
 8006116:	9b03      	ldr	r3, [sp, #12]
 8006118:	1d1a      	adds	r2, r3, #4
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	9203      	str	r2, [sp, #12]
 800611e:	2b00      	cmp	r3, #0
 8006120:	bfb8      	it	lt
 8006122:	f04f 33ff 	movlt.w	r3, #4294967295
 8006126:	3402      	adds	r4, #2
 8006128:	9305      	str	r3, [sp, #20]
 800612a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006200 <_vfiprintf_r+0x230>
 800612e:	7821      	ldrb	r1, [r4, #0]
 8006130:	2203      	movs	r2, #3
 8006132:	4650      	mov	r0, sl
 8006134:	f7fa f84c 	bl	80001d0 <memchr>
 8006138:	b138      	cbz	r0, 800614a <_vfiprintf_r+0x17a>
 800613a:	9b04      	ldr	r3, [sp, #16]
 800613c:	eba0 000a 	sub.w	r0, r0, sl
 8006140:	2240      	movs	r2, #64	; 0x40
 8006142:	4082      	lsls	r2, r0
 8006144:	4313      	orrs	r3, r2
 8006146:	3401      	adds	r4, #1
 8006148:	9304      	str	r3, [sp, #16]
 800614a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800614e:	4829      	ldr	r0, [pc, #164]	; (80061f4 <_vfiprintf_r+0x224>)
 8006150:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006154:	2206      	movs	r2, #6
 8006156:	f7fa f83b 	bl	80001d0 <memchr>
 800615a:	2800      	cmp	r0, #0
 800615c:	d03f      	beq.n	80061de <_vfiprintf_r+0x20e>
 800615e:	4b26      	ldr	r3, [pc, #152]	; (80061f8 <_vfiprintf_r+0x228>)
 8006160:	bb1b      	cbnz	r3, 80061aa <_vfiprintf_r+0x1da>
 8006162:	9b03      	ldr	r3, [sp, #12]
 8006164:	3307      	adds	r3, #7
 8006166:	f023 0307 	bic.w	r3, r3, #7
 800616a:	3308      	adds	r3, #8
 800616c:	9303      	str	r3, [sp, #12]
 800616e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006170:	443b      	add	r3, r7
 8006172:	9309      	str	r3, [sp, #36]	; 0x24
 8006174:	e768      	b.n	8006048 <_vfiprintf_r+0x78>
 8006176:	fb0c 3202 	mla	r2, ip, r2, r3
 800617a:	460c      	mov	r4, r1
 800617c:	2001      	movs	r0, #1
 800617e:	e7a6      	b.n	80060ce <_vfiprintf_r+0xfe>
 8006180:	2300      	movs	r3, #0
 8006182:	3401      	adds	r4, #1
 8006184:	9305      	str	r3, [sp, #20]
 8006186:	4619      	mov	r1, r3
 8006188:	f04f 0c0a 	mov.w	ip, #10
 800618c:	4620      	mov	r0, r4
 800618e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006192:	3a30      	subs	r2, #48	; 0x30
 8006194:	2a09      	cmp	r2, #9
 8006196:	d903      	bls.n	80061a0 <_vfiprintf_r+0x1d0>
 8006198:	2b00      	cmp	r3, #0
 800619a:	d0c6      	beq.n	800612a <_vfiprintf_r+0x15a>
 800619c:	9105      	str	r1, [sp, #20]
 800619e:	e7c4      	b.n	800612a <_vfiprintf_r+0x15a>
 80061a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80061a4:	4604      	mov	r4, r0
 80061a6:	2301      	movs	r3, #1
 80061a8:	e7f0      	b.n	800618c <_vfiprintf_r+0x1bc>
 80061aa:	ab03      	add	r3, sp, #12
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	462a      	mov	r2, r5
 80061b0:	4b12      	ldr	r3, [pc, #72]	; (80061fc <_vfiprintf_r+0x22c>)
 80061b2:	a904      	add	r1, sp, #16
 80061b4:	4630      	mov	r0, r6
 80061b6:	f7fd fc51 	bl	8003a5c <_printf_float>
 80061ba:	4607      	mov	r7, r0
 80061bc:	1c78      	adds	r0, r7, #1
 80061be:	d1d6      	bne.n	800616e <_vfiprintf_r+0x19e>
 80061c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061c2:	07d9      	lsls	r1, r3, #31
 80061c4:	d405      	bmi.n	80061d2 <_vfiprintf_r+0x202>
 80061c6:	89ab      	ldrh	r3, [r5, #12]
 80061c8:	059a      	lsls	r2, r3, #22
 80061ca:	d402      	bmi.n	80061d2 <_vfiprintf_r+0x202>
 80061cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061ce:	f7fe f9bf 	bl	8004550 <__retarget_lock_release_recursive>
 80061d2:	89ab      	ldrh	r3, [r5, #12]
 80061d4:	065b      	lsls	r3, r3, #25
 80061d6:	f53f af1d 	bmi.w	8006014 <_vfiprintf_r+0x44>
 80061da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061dc:	e71c      	b.n	8006018 <_vfiprintf_r+0x48>
 80061de:	ab03      	add	r3, sp, #12
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	462a      	mov	r2, r5
 80061e4:	4b05      	ldr	r3, [pc, #20]	; (80061fc <_vfiprintf_r+0x22c>)
 80061e6:	a904      	add	r1, sp, #16
 80061e8:	4630      	mov	r0, r6
 80061ea:	f7fd fedb 	bl	8003fa4 <_printf_i>
 80061ee:	e7e4      	b.n	80061ba <_vfiprintf_r+0x1ea>
 80061f0:	0800760c 	.word	0x0800760c
 80061f4:	08007616 	.word	0x08007616
 80061f8:	08003a5d 	.word	0x08003a5d
 80061fc:	08005fad 	.word	0x08005fad
 8006200:	08007612 	.word	0x08007612

08006204 <__swbuf_r>:
 8006204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006206:	460e      	mov	r6, r1
 8006208:	4614      	mov	r4, r2
 800620a:	4605      	mov	r5, r0
 800620c:	b118      	cbz	r0, 8006216 <__swbuf_r+0x12>
 800620e:	6a03      	ldr	r3, [r0, #32]
 8006210:	b90b      	cbnz	r3, 8006216 <__swbuf_r+0x12>
 8006212:	f7fe f875 	bl	8004300 <__sinit>
 8006216:	69a3      	ldr	r3, [r4, #24]
 8006218:	60a3      	str	r3, [r4, #8]
 800621a:	89a3      	ldrh	r3, [r4, #12]
 800621c:	071a      	lsls	r2, r3, #28
 800621e:	d525      	bpl.n	800626c <__swbuf_r+0x68>
 8006220:	6923      	ldr	r3, [r4, #16]
 8006222:	b31b      	cbz	r3, 800626c <__swbuf_r+0x68>
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	6922      	ldr	r2, [r4, #16]
 8006228:	1a98      	subs	r0, r3, r2
 800622a:	6963      	ldr	r3, [r4, #20]
 800622c:	b2f6      	uxtb	r6, r6
 800622e:	4283      	cmp	r3, r0
 8006230:	4637      	mov	r7, r6
 8006232:	dc04      	bgt.n	800623e <__swbuf_r+0x3a>
 8006234:	4621      	mov	r1, r4
 8006236:	4628      	mov	r0, r5
 8006238:	f7ff fdae 	bl	8005d98 <_fflush_r>
 800623c:	b9e0      	cbnz	r0, 8006278 <__swbuf_r+0x74>
 800623e:	68a3      	ldr	r3, [r4, #8]
 8006240:	3b01      	subs	r3, #1
 8006242:	60a3      	str	r3, [r4, #8]
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	1c5a      	adds	r2, r3, #1
 8006248:	6022      	str	r2, [r4, #0]
 800624a:	701e      	strb	r6, [r3, #0]
 800624c:	6962      	ldr	r2, [r4, #20]
 800624e:	1c43      	adds	r3, r0, #1
 8006250:	429a      	cmp	r2, r3
 8006252:	d004      	beq.n	800625e <__swbuf_r+0x5a>
 8006254:	89a3      	ldrh	r3, [r4, #12]
 8006256:	07db      	lsls	r3, r3, #31
 8006258:	d506      	bpl.n	8006268 <__swbuf_r+0x64>
 800625a:	2e0a      	cmp	r6, #10
 800625c:	d104      	bne.n	8006268 <__swbuf_r+0x64>
 800625e:	4621      	mov	r1, r4
 8006260:	4628      	mov	r0, r5
 8006262:	f7ff fd99 	bl	8005d98 <_fflush_r>
 8006266:	b938      	cbnz	r0, 8006278 <__swbuf_r+0x74>
 8006268:	4638      	mov	r0, r7
 800626a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800626c:	4621      	mov	r1, r4
 800626e:	4628      	mov	r0, r5
 8006270:	f000 f806 	bl	8006280 <__swsetup_r>
 8006274:	2800      	cmp	r0, #0
 8006276:	d0d5      	beq.n	8006224 <__swbuf_r+0x20>
 8006278:	f04f 37ff 	mov.w	r7, #4294967295
 800627c:	e7f4      	b.n	8006268 <__swbuf_r+0x64>
	...

08006280 <__swsetup_r>:
 8006280:	b538      	push	{r3, r4, r5, lr}
 8006282:	4b2a      	ldr	r3, [pc, #168]	; (800632c <__swsetup_r+0xac>)
 8006284:	4605      	mov	r5, r0
 8006286:	6818      	ldr	r0, [r3, #0]
 8006288:	460c      	mov	r4, r1
 800628a:	b118      	cbz	r0, 8006294 <__swsetup_r+0x14>
 800628c:	6a03      	ldr	r3, [r0, #32]
 800628e:	b90b      	cbnz	r3, 8006294 <__swsetup_r+0x14>
 8006290:	f7fe f836 	bl	8004300 <__sinit>
 8006294:	89a3      	ldrh	r3, [r4, #12]
 8006296:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800629a:	0718      	lsls	r0, r3, #28
 800629c:	d422      	bmi.n	80062e4 <__swsetup_r+0x64>
 800629e:	06d9      	lsls	r1, r3, #27
 80062a0:	d407      	bmi.n	80062b2 <__swsetup_r+0x32>
 80062a2:	2309      	movs	r3, #9
 80062a4:	602b      	str	r3, [r5, #0]
 80062a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80062aa:	81a3      	strh	r3, [r4, #12]
 80062ac:	f04f 30ff 	mov.w	r0, #4294967295
 80062b0:	e034      	b.n	800631c <__swsetup_r+0x9c>
 80062b2:	0758      	lsls	r0, r3, #29
 80062b4:	d512      	bpl.n	80062dc <__swsetup_r+0x5c>
 80062b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062b8:	b141      	cbz	r1, 80062cc <__swsetup_r+0x4c>
 80062ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062be:	4299      	cmp	r1, r3
 80062c0:	d002      	beq.n	80062c8 <__swsetup_r+0x48>
 80062c2:	4628      	mov	r0, r5
 80062c4:	f7fe ffc2 	bl	800524c <_free_r>
 80062c8:	2300      	movs	r3, #0
 80062ca:	6363      	str	r3, [r4, #52]	; 0x34
 80062cc:	89a3      	ldrh	r3, [r4, #12]
 80062ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062d2:	81a3      	strh	r3, [r4, #12]
 80062d4:	2300      	movs	r3, #0
 80062d6:	6063      	str	r3, [r4, #4]
 80062d8:	6923      	ldr	r3, [r4, #16]
 80062da:	6023      	str	r3, [r4, #0]
 80062dc:	89a3      	ldrh	r3, [r4, #12]
 80062de:	f043 0308 	orr.w	r3, r3, #8
 80062e2:	81a3      	strh	r3, [r4, #12]
 80062e4:	6923      	ldr	r3, [r4, #16]
 80062e6:	b94b      	cbnz	r3, 80062fc <__swsetup_r+0x7c>
 80062e8:	89a3      	ldrh	r3, [r4, #12]
 80062ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80062ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062f2:	d003      	beq.n	80062fc <__swsetup_r+0x7c>
 80062f4:	4621      	mov	r1, r4
 80062f6:	4628      	mov	r0, r5
 80062f8:	f000 f884 	bl	8006404 <__smakebuf_r>
 80062fc:	89a0      	ldrh	r0, [r4, #12]
 80062fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006302:	f010 0301 	ands.w	r3, r0, #1
 8006306:	d00a      	beq.n	800631e <__swsetup_r+0x9e>
 8006308:	2300      	movs	r3, #0
 800630a:	60a3      	str	r3, [r4, #8]
 800630c:	6963      	ldr	r3, [r4, #20]
 800630e:	425b      	negs	r3, r3
 8006310:	61a3      	str	r3, [r4, #24]
 8006312:	6923      	ldr	r3, [r4, #16]
 8006314:	b943      	cbnz	r3, 8006328 <__swsetup_r+0xa8>
 8006316:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800631a:	d1c4      	bne.n	80062a6 <__swsetup_r+0x26>
 800631c:	bd38      	pop	{r3, r4, r5, pc}
 800631e:	0781      	lsls	r1, r0, #30
 8006320:	bf58      	it	pl
 8006322:	6963      	ldrpl	r3, [r4, #20]
 8006324:	60a3      	str	r3, [r4, #8]
 8006326:	e7f4      	b.n	8006312 <__swsetup_r+0x92>
 8006328:	2000      	movs	r0, #0
 800632a:	e7f7      	b.n	800631c <__swsetup_r+0x9c>
 800632c:	200000e0 	.word	0x200000e0

08006330 <_raise_r>:
 8006330:	291f      	cmp	r1, #31
 8006332:	b538      	push	{r3, r4, r5, lr}
 8006334:	4604      	mov	r4, r0
 8006336:	460d      	mov	r5, r1
 8006338:	d904      	bls.n	8006344 <_raise_r+0x14>
 800633a:	2316      	movs	r3, #22
 800633c:	6003      	str	r3, [r0, #0]
 800633e:	f04f 30ff 	mov.w	r0, #4294967295
 8006342:	bd38      	pop	{r3, r4, r5, pc}
 8006344:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006346:	b112      	cbz	r2, 800634e <_raise_r+0x1e>
 8006348:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800634c:	b94b      	cbnz	r3, 8006362 <_raise_r+0x32>
 800634e:	4620      	mov	r0, r4
 8006350:	f000 f830 	bl	80063b4 <_getpid_r>
 8006354:	462a      	mov	r2, r5
 8006356:	4601      	mov	r1, r0
 8006358:	4620      	mov	r0, r4
 800635a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800635e:	f000 b817 	b.w	8006390 <_kill_r>
 8006362:	2b01      	cmp	r3, #1
 8006364:	d00a      	beq.n	800637c <_raise_r+0x4c>
 8006366:	1c59      	adds	r1, r3, #1
 8006368:	d103      	bne.n	8006372 <_raise_r+0x42>
 800636a:	2316      	movs	r3, #22
 800636c:	6003      	str	r3, [r0, #0]
 800636e:	2001      	movs	r0, #1
 8006370:	e7e7      	b.n	8006342 <_raise_r+0x12>
 8006372:	2400      	movs	r4, #0
 8006374:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006378:	4628      	mov	r0, r5
 800637a:	4798      	blx	r3
 800637c:	2000      	movs	r0, #0
 800637e:	e7e0      	b.n	8006342 <_raise_r+0x12>

08006380 <raise>:
 8006380:	4b02      	ldr	r3, [pc, #8]	; (800638c <raise+0xc>)
 8006382:	4601      	mov	r1, r0
 8006384:	6818      	ldr	r0, [r3, #0]
 8006386:	f7ff bfd3 	b.w	8006330 <_raise_r>
 800638a:	bf00      	nop
 800638c:	200000e0 	.word	0x200000e0

08006390 <_kill_r>:
 8006390:	b538      	push	{r3, r4, r5, lr}
 8006392:	4d07      	ldr	r5, [pc, #28]	; (80063b0 <_kill_r+0x20>)
 8006394:	2300      	movs	r3, #0
 8006396:	4604      	mov	r4, r0
 8006398:	4608      	mov	r0, r1
 800639a:	4611      	mov	r1, r2
 800639c:	602b      	str	r3, [r5, #0]
 800639e:	f7fb fee9 	bl	8002174 <_kill>
 80063a2:	1c43      	adds	r3, r0, #1
 80063a4:	d102      	bne.n	80063ac <_kill_r+0x1c>
 80063a6:	682b      	ldr	r3, [r5, #0]
 80063a8:	b103      	cbz	r3, 80063ac <_kill_r+0x1c>
 80063aa:	6023      	str	r3, [r4, #0]
 80063ac:	bd38      	pop	{r3, r4, r5, pc}
 80063ae:	bf00      	nop
 80063b0:	200004b8 	.word	0x200004b8

080063b4 <_getpid_r>:
 80063b4:	f7fb bed6 	b.w	8002164 <_getpid>

080063b8 <__swhatbuf_r>:
 80063b8:	b570      	push	{r4, r5, r6, lr}
 80063ba:	460c      	mov	r4, r1
 80063bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c0:	2900      	cmp	r1, #0
 80063c2:	b096      	sub	sp, #88	; 0x58
 80063c4:	4615      	mov	r5, r2
 80063c6:	461e      	mov	r6, r3
 80063c8:	da0d      	bge.n	80063e6 <__swhatbuf_r+0x2e>
 80063ca:	89a3      	ldrh	r3, [r4, #12]
 80063cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80063d0:	f04f 0100 	mov.w	r1, #0
 80063d4:	bf0c      	ite	eq
 80063d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80063da:	2340      	movne	r3, #64	; 0x40
 80063dc:	2000      	movs	r0, #0
 80063de:	6031      	str	r1, [r6, #0]
 80063e0:	602b      	str	r3, [r5, #0]
 80063e2:	b016      	add	sp, #88	; 0x58
 80063e4:	bd70      	pop	{r4, r5, r6, pc}
 80063e6:	466a      	mov	r2, sp
 80063e8:	f000 f848 	bl	800647c <_fstat_r>
 80063ec:	2800      	cmp	r0, #0
 80063ee:	dbec      	blt.n	80063ca <__swhatbuf_r+0x12>
 80063f0:	9901      	ldr	r1, [sp, #4]
 80063f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80063f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80063fa:	4259      	negs	r1, r3
 80063fc:	4159      	adcs	r1, r3
 80063fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006402:	e7eb      	b.n	80063dc <__swhatbuf_r+0x24>

08006404 <__smakebuf_r>:
 8006404:	898b      	ldrh	r3, [r1, #12]
 8006406:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006408:	079d      	lsls	r5, r3, #30
 800640a:	4606      	mov	r6, r0
 800640c:	460c      	mov	r4, r1
 800640e:	d507      	bpl.n	8006420 <__smakebuf_r+0x1c>
 8006410:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	6123      	str	r3, [r4, #16]
 8006418:	2301      	movs	r3, #1
 800641a:	6163      	str	r3, [r4, #20]
 800641c:	b002      	add	sp, #8
 800641e:	bd70      	pop	{r4, r5, r6, pc}
 8006420:	ab01      	add	r3, sp, #4
 8006422:	466a      	mov	r2, sp
 8006424:	f7ff ffc8 	bl	80063b8 <__swhatbuf_r>
 8006428:	9900      	ldr	r1, [sp, #0]
 800642a:	4605      	mov	r5, r0
 800642c:	4630      	mov	r0, r6
 800642e:	f7fd f9e9 	bl	8003804 <_malloc_r>
 8006432:	b948      	cbnz	r0, 8006448 <__smakebuf_r+0x44>
 8006434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006438:	059a      	lsls	r2, r3, #22
 800643a:	d4ef      	bmi.n	800641c <__smakebuf_r+0x18>
 800643c:	f023 0303 	bic.w	r3, r3, #3
 8006440:	f043 0302 	orr.w	r3, r3, #2
 8006444:	81a3      	strh	r3, [r4, #12]
 8006446:	e7e3      	b.n	8006410 <__smakebuf_r+0xc>
 8006448:	89a3      	ldrh	r3, [r4, #12]
 800644a:	6020      	str	r0, [r4, #0]
 800644c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006450:	81a3      	strh	r3, [r4, #12]
 8006452:	9b00      	ldr	r3, [sp, #0]
 8006454:	6163      	str	r3, [r4, #20]
 8006456:	9b01      	ldr	r3, [sp, #4]
 8006458:	6120      	str	r0, [r4, #16]
 800645a:	b15b      	cbz	r3, 8006474 <__smakebuf_r+0x70>
 800645c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006460:	4630      	mov	r0, r6
 8006462:	f000 f81d 	bl	80064a0 <_isatty_r>
 8006466:	b128      	cbz	r0, 8006474 <__smakebuf_r+0x70>
 8006468:	89a3      	ldrh	r3, [r4, #12]
 800646a:	f023 0303 	bic.w	r3, r3, #3
 800646e:	f043 0301 	orr.w	r3, r3, #1
 8006472:	81a3      	strh	r3, [r4, #12]
 8006474:	89a3      	ldrh	r3, [r4, #12]
 8006476:	431d      	orrs	r5, r3
 8006478:	81a5      	strh	r5, [r4, #12]
 800647a:	e7cf      	b.n	800641c <__smakebuf_r+0x18>

0800647c <_fstat_r>:
 800647c:	b538      	push	{r3, r4, r5, lr}
 800647e:	4d07      	ldr	r5, [pc, #28]	; (800649c <_fstat_r+0x20>)
 8006480:	2300      	movs	r3, #0
 8006482:	4604      	mov	r4, r0
 8006484:	4608      	mov	r0, r1
 8006486:	4611      	mov	r1, r2
 8006488:	602b      	str	r3, [r5, #0]
 800648a:	f7fb fed2 	bl	8002232 <_fstat>
 800648e:	1c43      	adds	r3, r0, #1
 8006490:	d102      	bne.n	8006498 <_fstat_r+0x1c>
 8006492:	682b      	ldr	r3, [r5, #0]
 8006494:	b103      	cbz	r3, 8006498 <_fstat_r+0x1c>
 8006496:	6023      	str	r3, [r4, #0]
 8006498:	bd38      	pop	{r3, r4, r5, pc}
 800649a:	bf00      	nop
 800649c:	200004b8 	.word	0x200004b8

080064a0 <_isatty_r>:
 80064a0:	b538      	push	{r3, r4, r5, lr}
 80064a2:	4d06      	ldr	r5, [pc, #24]	; (80064bc <_isatty_r+0x1c>)
 80064a4:	2300      	movs	r3, #0
 80064a6:	4604      	mov	r4, r0
 80064a8:	4608      	mov	r0, r1
 80064aa:	602b      	str	r3, [r5, #0]
 80064ac:	f7fb fed1 	bl	8002252 <_isatty>
 80064b0:	1c43      	adds	r3, r0, #1
 80064b2:	d102      	bne.n	80064ba <_isatty_r+0x1a>
 80064b4:	682b      	ldr	r3, [r5, #0]
 80064b6:	b103      	cbz	r3, 80064ba <_isatty_r+0x1a>
 80064b8:	6023      	str	r3, [r4, #0]
 80064ba:	bd38      	pop	{r3, r4, r5, pc}
 80064bc:	200004b8 	.word	0x200004b8

080064c0 <pow>:
 80064c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c2:	ed2d 8b02 	vpush	{d8}
 80064c6:	eeb0 8a40 	vmov.f32	s16, s0
 80064ca:	eef0 8a60 	vmov.f32	s17, s1
 80064ce:	ec55 4b11 	vmov	r4, r5, d1
 80064d2:	f000 f871 	bl	80065b8 <__ieee754_pow>
 80064d6:	4622      	mov	r2, r4
 80064d8:	462b      	mov	r3, r5
 80064da:	4620      	mov	r0, r4
 80064dc:	4629      	mov	r1, r5
 80064de:	ec57 6b10 	vmov	r6, r7, d0
 80064e2:	f7fa fb23 	bl	8000b2c <__aeabi_dcmpun>
 80064e6:	2800      	cmp	r0, #0
 80064e8:	d13b      	bne.n	8006562 <pow+0xa2>
 80064ea:	ec51 0b18 	vmov	r0, r1, d8
 80064ee:	2200      	movs	r2, #0
 80064f0:	2300      	movs	r3, #0
 80064f2:	f7fa fae9 	bl	8000ac8 <__aeabi_dcmpeq>
 80064f6:	b1b8      	cbz	r0, 8006528 <pow+0x68>
 80064f8:	2200      	movs	r2, #0
 80064fa:	2300      	movs	r3, #0
 80064fc:	4620      	mov	r0, r4
 80064fe:	4629      	mov	r1, r5
 8006500:	f7fa fae2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006504:	2800      	cmp	r0, #0
 8006506:	d146      	bne.n	8006596 <pow+0xd6>
 8006508:	ec45 4b10 	vmov	d0, r4, r5
 800650c:	f000 f848 	bl	80065a0 <finite>
 8006510:	b338      	cbz	r0, 8006562 <pow+0xa2>
 8006512:	2200      	movs	r2, #0
 8006514:	2300      	movs	r3, #0
 8006516:	4620      	mov	r0, r4
 8006518:	4629      	mov	r1, r5
 800651a:	f7fa fadf 	bl	8000adc <__aeabi_dcmplt>
 800651e:	b300      	cbz	r0, 8006562 <pow+0xa2>
 8006520:	f7fd ffea 	bl	80044f8 <__errno>
 8006524:	2322      	movs	r3, #34	; 0x22
 8006526:	e01b      	b.n	8006560 <pow+0xa0>
 8006528:	ec47 6b10 	vmov	d0, r6, r7
 800652c:	f000 f838 	bl	80065a0 <finite>
 8006530:	b9e0      	cbnz	r0, 800656c <pow+0xac>
 8006532:	eeb0 0a48 	vmov.f32	s0, s16
 8006536:	eef0 0a68 	vmov.f32	s1, s17
 800653a:	f000 f831 	bl	80065a0 <finite>
 800653e:	b1a8      	cbz	r0, 800656c <pow+0xac>
 8006540:	ec45 4b10 	vmov	d0, r4, r5
 8006544:	f000 f82c 	bl	80065a0 <finite>
 8006548:	b180      	cbz	r0, 800656c <pow+0xac>
 800654a:	4632      	mov	r2, r6
 800654c:	463b      	mov	r3, r7
 800654e:	4630      	mov	r0, r6
 8006550:	4639      	mov	r1, r7
 8006552:	f7fa faeb 	bl	8000b2c <__aeabi_dcmpun>
 8006556:	2800      	cmp	r0, #0
 8006558:	d0e2      	beq.n	8006520 <pow+0x60>
 800655a:	f7fd ffcd 	bl	80044f8 <__errno>
 800655e:	2321      	movs	r3, #33	; 0x21
 8006560:	6003      	str	r3, [r0, #0]
 8006562:	ecbd 8b02 	vpop	{d8}
 8006566:	ec47 6b10 	vmov	d0, r6, r7
 800656a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800656c:	2200      	movs	r2, #0
 800656e:	2300      	movs	r3, #0
 8006570:	4630      	mov	r0, r6
 8006572:	4639      	mov	r1, r7
 8006574:	f7fa faa8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006578:	2800      	cmp	r0, #0
 800657a:	d0f2      	beq.n	8006562 <pow+0xa2>
 800657c:	eeb0 0a48 	vmov.f32	s0, s16
 8006580:	eef0 0a68 	vmov.f32	s1, s17
 8006584:	f000 f80c 	bl	80065a0 <finite>
 8006588:	2800      	cmp	r0, #0
 800658a:	d0ea      	beq.n	8006562 <pow+0xa2>
 800658c:	ec45 4b10 	vmov	d0, r4, r5
 8006590:	f000 f806 	bl	80065a0 <finite>
 8006594:	e7c3      	b.n	800651e <pow+0x5e>
 8006596:	4f01      	ldr	r7, [pc, #4]	; (800659c <pow+0xdc>)
 8006598:	2600      	movs	r6, #0
 800659a:	e7e2      	b.n	8006562 <pow+0xa2>
 800659c:	3ff00000 	.word	0x3ff00000

080065a0 <finite>:
 80065a0:	b082      	sub	sp, #8
 80065a2:	ed8d 0b00 	vstr	d0, [sp]
 80065a6:	9801      	ldr	r0, [sp, #4]
 80065a8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80065ac:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80065b0:	0fc0      	lsrs	r0, r0, #31
 80065b2:	b002      	add	sp, #8
 80065b4:	4770      	bx	lr
	...

080065b8 <__ieee754_pow>:
 80065b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065bc:	ed2d 8b06 	vpush	{d8-d10}
 80065c0:	b089      	sub	sp, #36	; 0x24
 80065c2:	ed8d 1b00 	vstr	d1, [sp]
 80065c6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80065ca:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80065ce:	ea58 0102 	orrs.w	r1, r8, r2
 80065d2:	ec57 6b10 	vmov	r6, r7, d0
 80065d6:	d115      	bne.n	8006604 <__ieee754_pow+0x4c>
 80065d8:	19b3      	adds	r3, r6, r6
 80065da:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80065de:	4152      	adcs	r2, r2
 80065e0:	4299      	cmp	r1, r3
 80065e2:	4b89      	ldr	r3, [pc, #548]	; (8006808 <__ieee754_pow+0x250>)
 80065e4:	4193      	sbcs	r3, r2
 80065e6:	f080 84d1 	bcs.w	8006f8c <__ieee754_pow+0x9d4>
 80065ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065ee:	4630      	mov	r0, r6
 80065f0:	4639      	mov	r1, r7
 80065f2:	f7f9 fe4b 	bl	800028c <__adddf3>
 80065f6:	ec41 0b10 	vmov	d0, r0, r1
 80065fa:	b009      	add	sp, #36	; 0x24
 80065fc:	ecbd 8b06 	vpop	{d8-d10}
 8006600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006604:	4b81      	ldr	r3, [pc, #516]	; (800680c <__ieee754_pow+0x254>)
 8006606:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800660a:	429c      	cmp	r4, r3
 800660c:	ee10 aa10 	vmov	sl, s0
 8006610:	463d      	mov	r5, r7
 8006612:	dc06      	bgt.n	8006622 <__ieee754_pow+0x6a>
 8006614:	d101      	bne.n	800661a <__ieee754_pow+0x62>
 8006616:	2e00      	cmp	r6, #0
 8006618:	d1e7      	bne.n	80065ea <__ieee754_pow+0x32>
 800661a:	4598      	cmp	r8, r3
 800661c:	dc01      	bgt.n	8006622 <__ieee754_pow+0x6a>
 800661e:	d10f      	bne.n	8006640 <__ieee754_pow+0x88>
 8006620:	b172      	cbz	r2, 8006640 <__ieee754_pow+0x88>
 8006622:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006626:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800662a:	ea55 050a 	orrs.w	r5, r5, sl
 800662e:	d1dc      	bne.n	80065ea <__ieee754_pow+0x32>
 8006630:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006634:	18db      	adds	r3, r3, r3
 8006636:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800663a:	4152      	adcs	r2, r2
 800663c:	429d      	cmp	r5, r3
 800663e:	e7d0      	b.n	80065e2 <__ieee754_pow+0x2a>
 8006640:	2d00      	cmp	r5, #0
 8006642:	da3b      	bge.n	80066bc <__ieee754_pow+0x104>
 8006644:	4b72      	ldr	r3, [pc, #456]	; (8006810 <__ieee754_pow+0x258>)
 8006646:	4598      	cmp	r8, r3
 8006648:	dc51      	bgt.n	80066ee <__ieee754_pow+0x136>
 800664a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800664e:	4598      	cmp	r8, r3
 8006650:	f340 84ab 	ble.w	8006faa <__ieee754_pow+0x9f2>
 8006654:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006658:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800665c:	2b14      	cmp	r3, #20
 800665e:	dd0f      	ble.n	8006680 <__ieee754_pow+0xc8>
 8006660:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006664:	fa22 f103 	lsr.w	r1, r2, r3
 8006668:	fa01 f303 	lsl.w	r3, r1, r3
 800666c:	4293      	cmp	r3, r2
 800666e:	f040 849c 	bne.w	8006faa <__ieee754_pow+0x9f2>
 8006672:	f001 0101 	and.w	r1, r1, #1
 8006676:	f1c1 0302 	rsb	r3, r1, #2
 800667a:	9304      	str	r3, [sp, #16]
 800667c:	b182      	cbz	r2, 80066a0 <__ieee754_pow+0xe8>
 800667e:	e05f      	b.n	8006740 <__ieee754_pow+0x188>
 8006680:	2a00      	cmp	r2, #0
 8006682:	d15b      	bne.n	800673c <__ieee754_pow+0x184>
 8006684:	f1c3 0314 	rsb	r3, r3, #20
 8006688:	fa48 f103 	asr.w	r1, r8, r3
 800668c:	fa01 f303 	lsl.w	r3, r1, r3
 8006690:	4543      	cmp	r3, r8
 8006692:	f040 8487 	bne.w	8006fa4 <__ieee754_pow+0x9ec>
 8006696:	f001 0101 	and.w	r1, r1, #1
 800669a:	f1c1 0302 	rsb	r3, r1, #2
 800669e:	9304      	str	r3, [sp, #16]
 80066a0:	4b5c      	ldr	r3, [pc, #368]	; (8006814 <__ieee754_pow+0x25c>)
 80066a2:	4598      	cmp	r8, r3
 80066a4:	d132      	bne.n	800670c <__ieee754_pow+0x154>
 80066a6:	f1b9 0f00 	cmp.w	r9, #0
 80066aa:	f280 8477 	bge.w	8006f9c <__ieee754_pow+0x9e4>
 80066ae:	4959      	ldr	r1, [pc, #356]	; (8006814 <__ieee754_pow+0x25c>)
 80066b0:	4632      	mov	r2, r6
 80066b2:	463b      	mov	r3, r7
 80066b4:	2000      	movs	r0, #0
 80066b6:	f7fa f8c9 	bl	800084c <__aeabi_ddiv>
 80066ba:	e79c      	b.n	80065f6 <__ieee754_pow+0x3e>
 80066bc:	2300      	movs	r3, #0
 80066be:	9304      	str	r3, [sp, #16]
 80066c0:	2a00      	cmp	r2, #0
 80066c2:	d13d      	bne.n	8006740 <__ieee754_pow+0x188>
 80066c4:	4b51      	ldr	r3, [pc, #324]	; (800680c <__ieee754_pow+0x254>)
 80066c6:	4598      	cmp	r8, r3
 80066c8:	d1ea      	bne.n	80066a0 <__ieee754_pow+0xe8>
 80066ca:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80066ce:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80066d2:	ea53 030a 	orrs.w	r3, r3, sl
 80066d6:	f000 8459 	beq.w	8006f8c <__ieee754_pow+0x9d4>
 80066da:	4b4f      	ldr	r3, [pc, #316]	; (8006818 <__ieee754_pow+0x260>)
 80066dc:	429c      	cmp	r4, r3
 80066de:	dd08      	ble.n	80066f2 <__ieee754_pow+0x13a>
 80066e0:	f1b9 0f00 	cmp.w	r9, #0
 80066e4:	f2c0 8456 	blt.w	8006f94 <__ieee754_pow+0x9dc>
 80066e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066ec:	e783      	b.n	80065f6 <__ieee754_pow+0x3e>
 80066ee:	2302      	movs	r3, #2
 80066f0:	e7e5      	b.n	80066be <__ieee754_pow+0x106>
 80066f2:	f1b9 0f00 	cmp.w	r9, #0
 80066f6:	f04f 0000 	mov.w	r0, #0
 80066fa:	f04f 0100 	mov.w	r1, #0
 80066fe:	f6bf af7a 	bge.w	80065f6 <__ieee754_pow+0x3e>
 8006702:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006706:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800670a:	e774      	b.n	80065f6 <__ieee754_pow+0x3e>
 800670c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006710:	d106      	bne.n	8006720 <__ieee754_pow+0x168>
 8006712:	4632      	mov	r2, r6
 8006714:	463b      	mov	r3, r7
 8006716:	4630      	mov	r0, r6
 8006718:	4639      	mov	r1, r7
 800671a:	f7f9 ff6d 	bl	80005f8 <__aeabi_dmul>
 800671e:	e76a      	b.n	80065f6 <__ieee754_pow+0x3e>
 8006720:	4b3e      	ldr	r3, [pc, #248]	; (800681c <__ieee754_pow+0x264>)
 8006722:	4599      	cmp	r9, r3
 8006724:	d10c      	bne.n	8006740 <__ieee754_pow+0x188>
 8006726:	2d00      	cmp	r5, #0
 8006728:	db0a      	blt.n	8006740 <__ieee754_pow+0x188>
 800672a:	ec47 6b10 	vmov	d0, r6, r7
 800672e:	b009      	add	sp, #36	; 0x24
 8006730:	ecbd 8b06 	vpop	{d8-d10}
 8006734:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006738:	f000 bd20 	b.w	800717c <__ieee754_sqrt>
 800673c:	2300      	movs	r3, #0
 800673e:	9304      	str	r3, [sp, #16]
 8006740:	ec47 6b10 	vmov	d0, r6, r7
 8006744:	f000 fc62 	bl	800700c <fabs>
 8006748:	ec51 0b10 	vmov	r0, r1, d0
 800674c:	f1ba 0f00 	cmp.w	sl, #0
 8006750:	d129      	bne.n	80067a6 <__ieee754_pow+0x1ee>
 8006752:	b124      	cbz	r4, 800675e <__ieee754_pow+0x1a6>
 8006754:	4b2f      	ldr	r3, [pc, #188]	; (8006814 <__ieee754_pow+0x25c>)
 8006756:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800675a:	429a      	cmp	r2, r3
 800675c:	d123      	bne.n	80067a6 <__ieee754_pow+0x1ee>
 800675e:	f1b9 0f00 	cmp.w	r9, #0
 8006762:	da05      	bge.n	8006770 <__ieee754_pow+0x1b8>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	2000      	movs	r0, #0
 800676a:	492a      	ldr	r1, [pc, #168]	; (8006814 <__ieee754_pow+0x25c>)
 800676c:	f7fa f86e 	bl	800084c <__aeabi_ddiv>
 8006770:	2d00      	cmp	r5, #0
 8006772:	f6bf af40 	bge.w	80065f6 <__ieee754_pow+0x3e>
 8006776:	9b04      	ldr	r3, [sp, #16]
 8006778:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800677c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006780:	431c      	orrs	r4, r3
 8006782:	d108      	bne.n	8006796 <__ieee754_pow+0x1de>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4610      	mov	r0, r2
 800678a:	4619      	mov	r1, r3
 800678c:	f7f9 fd7c 	bl	8000288 <__aeabi_dsub>
 8006790:	4602      	mov	r2, r0
 8006792:	460b      	mov	r3, r1
 8006794:	e78f      	b.n	80066b6 <__ieee754_pow+0xfe>
 8006796:	9b04      	ldr	r3, [sp, #16]
 8006798:	2b01      	cmp	r3, #1
 800679a:	f47f af2c 	bne.w	80065f6 <__ieee754_pow+0x3e>
 800679e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80067a2:	4619      	mov	r1, r3
 80067a4:	e727      	b.n	80065f6 <__ieee754_pow+0x3e>
 80067a6:	0feb      	lsrs	r3, r5, #31
 80067a8:	3b01      	subs	r3, #1
 80067aa:	9306      	str	r3, [sp, #24]
 80067ac:	9a06      	ldr	r2, [sp, #24]
 80067ae:	9b04      	ldr	r3, [sp, #16]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	d102      	bne.n	80067ba <__ieee754_pow+0x202>
 80067b4:	4632      	mov	r2, r6
 80067b6:	463b      	mov	r3, r7
 80067b8:	e7e6      	b.n	8006788 <__ieee754_pow+0x1d0>
 80067ba:	4b19      	ldr	r3, [pc, #100]	; (8006820 <__ieee754_pow+0x268>)
 80067bc:	4598      	cmp	r8, r3
 80067be:	f340 80fb 	ble.w	80069b8 <__ieee754_pow+0x400>
 80067c2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80067c6:	4598      	cmp	r8, r3
 80067c8:	4b13      	ldr	r3, [pc, #76]	; (8006818 <__ieee754_pow+0x260>)
 80067ca:	dd0c      	ble.n	80067e6 <__ieee754_pow+0x22e>
 80067cc:	429c      	cmp	r4, r3
 80067ce:	dc0f      	bgt.n	80067f0 <__ieee754_pow+0x238>
 80067d0:	f1b9 0f00 	cmp.w	r9, #0
 80067d4:	da0f      	bge.n	80067f6 <__ieee754_pow+0x23e>
 80067d6:	2000      	movs	r0, #0
 80067d8:	b009      	add	sp, #36	; 0x24
 80067da:	ecbd 8b06 	vpop	{d8-d10}
 80067de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e2:	f000 bcc2 	b.w	800716a <__math_oflow>
 80067e6:	429c      	cmp	r4, r3
 80067e8:	dbf2      	blt.n	80067d0 <__ieee754_pow+0x218>
 80067ea:	4b0a      	ldr	r3, [pc, #40]	; (8006814 <__ieee754_pow+0x25c>)
 80067ec:	429c      	cmp	r4, r3
 80067ee:	dd19      	ble.n	8006824 <__ieee754_pow+0x26c>
 80067f0:	f1b9 0f00 	cmp.w	r9, #0
 80067f4:	dcef      	bgt.n	80067d6 <__ieee754_pow+0x21e>
 80067f6:	2000      	movs	r0, #0
 80067f8:	b009      	add	sp, #36	; 0x24
 80067fa:	ecbd 8b06 	vpop	{d8-d10}
 80067fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006802:	f000 bca9 	b.w	8007158 <__math_uflow>
 8006806:	bf00      	nop
 8006808:	fff00000 	.word	0xfff00000
 800680c:	7ff00000 	.word	0x7ff00000
 8006810:	433fffff 	.word	0x433fffff
 8006814:	3ff00000 	.word	0x3ff00000
 8006818:	3fefffff 	.word	0x3fefffff
 800681c:	3fe00000 	.word	0x3fe00000
 8006820:	41e00000 	.word	0x41e00000
 8006824:	4b60      	ldr	r3, [pc, #384]	; (80069a8 <__ieee754_pow+0x3f0>)
 8006826:	2200      	movs	r2, #0
 8006828:	f7f9 fd2e 	bl	8000288 <__aeabi_dsub>
 800682c:	a354      	add	r3, pc, #336	; (adr r3, 8006980 <__ieee754_pow+0x3c8>)
 800682e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006832:	4604      	mov	r4, r0
 8006834:	460d      	mov	r5, r1
 8006836:	f7f9 fedf 	bl	80005f8 <__aeabi_dmul>
 800683a:	a353      	add	r3, pc, #332	; (adr r3, 8006988 <__ieee754_pow+0x3d0>)
 800683c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006840:	4606      	mov	r6, r0
 8006842:	460f      	mov	r7, r1
 8006844:	4620      	mov	r0, r4
 8006846:	4629      	mov	r1, r5
 8006848:	f7f9 fed6 	bl	80005f8 <__aeabi_dmul>
 800684c:	4b57      	ldr	r3, [pc, #348]	; (80069ac <__ieee754_pow+0x3f4>)
 800684e:	4682      	mov	sl, r0
 8006850:	468b      	mov	fp, r1
 8006852:	2200      	movs	r2, #0
 8006854:	4620      	mov	r0, r4
 8006856:	4629      	mov	r1, r5
 8006858:	f7f9 fece 	bl	80005f8 <__aeabi_dmul>
 800685c:	4602      	mov	r2, r0
 800685e:	460b      	mov	r3, r1
 8006860:	a14b      	add	r1, pc, #300	; (adr r1, 8006990 <__ieee754_pow+0x3d8>)
 8006862:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006866:	f7f9 fd0f 	bl	8000288 <__aeabi_dsub>
 800686a:	4622      	mov	r2, r4
 800686c:	462b      	mov	r3, r5
 800686e:	f7f9 fec3 	bl	80005f8 <__aeabi_dmul>
 8006872:	4602      	mov	r2, r0
 8006874:	460b      	mov	r3, r1
 8006876:	2000      	movs	r0, #0
 8006878:	494d      	ldr	r1, [pc, #308]	; (80069b0 <__ieee754_pow+0x3f8>)
 800687a:	f7f9 fd05 	bl	8000288 <__aeabi_dsub>
 800687e:	4622      	mov	r2, r4
 8006880:	4680      	mov	r8, r0
 8006882:	4689      	mov	r9, r1
 8006884:	462b      	mov	r3, r5
 8006886:	4620      	mov	r0, r4
 8006888:	4629      	mov	r1, r5
 800688a:	f7f9 feb5 	bl	80005f8 <__aeabi_dmul>
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	4640      	mov	r0, r8
 8006894:	4649      	mov	r1, r9
 8006896:	f7f9 feaf 	bl	80005f8 <__aeabi_dmul>
 800689a:	a33f      	add	r3, pc, #252	; (adr r3, 8006998 <__ieee754_pow+0x3e0>)
 800689c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a0:	f7f9 feaa 	bl	80005f8 <__aeabi_dmul>
 80068a4:	4602      	mov	r2, r0
 80068a6:	460b      	mov	r3, r1
 80068a8:	4650      	mov	r0, sl
 80068aa:	4659      	mov	r1, fp
 80068ac:	f7f9 fcec 	bl	8000288 <__aeabi_dsub>
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	4680      	mov	r8, r0
 80068b6:	4689      	mov	r9, r1
 80068b8:	4630      	mov	r0, r6
 80068ba:	4639      	mov	r1, r7
 80068bc:	f7f9 fce6 	bl	800028c <__adddf3>
 80068c0:	2000      	movs	r0, #0
 80068c2:	4632      	mov	r2, r6
 80068c4:	463b      	mov	r3, r7
 80068c6:	4604      	mov	r4, r0
 80068c8:	460d      	mov	r5, r1
 80068ca:	f7f9 fcdd 	bl	8000288 <__aeabi_dsub>
 80068ce:	4602      	mov	r2, r0
 80068d0:	460b      	mov	r3, r1
 80068d2:	4640      	mov	r0, r8
 80068d4:	4649      	mov	r1, r9
 80068d6:	f7f9 fcd7 	bl	8000288 <__aeabi_dsub>
 80068da:	9b04      	ldr	r3, [sp, #16]
 80068dc:	9a06      	ldr	r2, [sp, #24]
 80068de:	3b01      	subs	r3, #1
 80068e0:	4313      	orrs	r3, r2
 80068e2:	4682      	mov	sl, r0
 80068e4:	468b      	mov	fp, r1
 80068e6:	f040 81e7 	bne.w	8006cb8 <__ieee754_pow+0x700>
 80068ea:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80069a0 <__ieee754_pow+0x3e8>
 80068ee:	eeb0 8a47 	vmov.f32	s16, s14
 80068f2:	eef0 8a67 	vmov.f32	s17, s15
 80068f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80068fa:	2600      	movs	r6, #0
 80068fc:	4632      	mov	r2, r6
 80068fe:	463b      	mov	r3, r7
 8006900:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006904:	f7f9 fcc0 	bl	8000288 <__aeabi_dsub>
 8006908:	4622      	mov	r2, r4
 800690a:	462b      	mov	r3, r5
 800690c:	f7f9 fe74 	bl	80005f8 <__aeabi_dmul>
 8006910:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006914:	4680      	mov	r8, r0
 8006916:	4689      	mov	r9, r1
 8006918:	4650      	mov	r0, sl
 800691a:	4659      	mov	r1, fp
 800691c:	f7f9 fe6c 	bl	80005f8 <__aeabi_dmul>
 8006920:	4602      	mov	r2, r0
 8006922:	460b      	mov	r3, r1
 8006924:	4640      	mov	r0, r8
 8006926:	4649      	mov	r1, r9
 8006928:	f7f9 fcb0 	bl	800028c <__adddf3>
 800692c:	4632      	mov	r2, r6
 800692e:	463b      	mov	r3, r7
 8006930:	4680      	mov	r8, r0
 8006932:	4689      	mov	r9, r1
 8006934:	4620      	mov	r0, r4
 8006936:	4629      	mov	r1, r5
 8006938:	f7f9 fe5e 	bl	80005f8 <__aeabi_dmul>
 800693c:	460b      	mov	r3, r1
 800693e:	4604      	mov	r4, r0
 8006940:	460d      	mov	r5, r1
 8006942:	4602      	mov	r2, r0
 8006944:	4649      	mov	r1, r9
 8006946:	4640      	mov	r0, r8
 8006948:	f7f9 fca0 	bl	800028c <__adddf3>
 800694c:	4b19      	ldr	r3, [pc, #100]	; (80069b4 <__ieee754_pow+0x3fc>)
 800694e:	4299      	cmp	r1, r3
 8006950:	ec45 4b19 	vmov	d9, r4, r5
 8006954:	4606      	mov	r6, r0
 8006956:	460f      	mov	r7, r1
 8006958:	468b      	mov	fp, r1
 800695a:	f340 82f0 	ble.w	8006f3e <__ieee754_pow+0x986>
 800695e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006962:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006966:	4303      	orrs	r3, r0
 8006968:	f000 81e4 	beq.w	8006d34 <__ieee754_pow+0x77c>
 800696c:	ec51 0b18 	vmov	r0, r1, d8
 8006970:	2200      	movs	r2, #0
 8006972:	2300      	movs	r3, #0
 8006974:	f7fa f8b2 	bl	8000adc <__aeabi_dcmplt>
 8006978:	3800      	subs	r0, #0
 800697a:	bf18      	it	ne
 800697c:	2001      	movne	r0, #1
 800697e:	e72b      	b.n	80067d8 <__ieee754_pow+0x220>
 8006980:	60000000 	.word	0x60000000
 8006984:	3ff71547 	.word	0x3ff71547
 8006988:	f85ddf44 	.word	0xf85ddf44
 800698c:	3e54ae0b 	.word	0x3e54ae0b
 8006990:	55555555 	.word	0x55555555
 8006994:	3fd55555 	.word	0x3fd55555
 8006998:	652b82fe 	.word	0x652b82fe
 800699c:	3ff71547 	.word	0x3ff71547
 80069a0:	00000000 	.word	0x00000000
 80069a4:	bff00000 	.word	0xbff00000
 80069a8:	3ff00000 	.word	0x3ff00000
 80069ac:	3fd00000 	.word	0x3fd00000
 80069b0:	3fe00000 	.word	0x3fe00000
 80069b4:	408fffff 	.word	0x408fffff
 80069b8:	4bd5      	ldr	r3, [pc, #852]	; (8006d10 <__ieee754_pow+0x758>)
 80069ba:	402b      	ands	r3, r5
 80069bc:	2200      	movs	r2, #0
 80069be:	b92b      	cbnz	r3, 80069cc <__ieee754_pow+0x414>
 80069c0:	4bd4      	ldr	r3, [pc, #848]	; (8006d14 <__ieee754_pow+0x75c>)
 80069c2:	f7f9 fe19 	bl	80005f8 <__aeabi_dmul>
 80069c6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80069ca:	460c      	mov	r4, r1
 80069cc:	1523      	asrs	r3, r4, #20
 80069ce:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80069d2:	4413      	add	r3, r2
 80069d4:	9305      	str	r3, [sp, #20]
 80069d6:	4bd0      	ldr	r3, [pc, #832]	; (8006d18 <__ieee754_pow+0x760>)
 80069d8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80069dc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80069e0:	429c      	cmp	r4, r3
 80069e2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80069e6:	dd08      	ble.n	80069fa <__ieee754_pow+0x442>
 80069e8:	4bcc      	ldr	r3, [pc, #816]	; (8006d1c <__ieee754_pow+0x764>)
 80069ea:	429c      	cmp	r4, r3
 80069ec:	f340 8162 	ble.w	8006cb4 <__ieee754_pow+0x6fc>
 80069f0:	9b05      	ldr	r3, [sp, #20]
 80069f2:	3301      	adds	r3, #1
 80069f4:	9305      	str	r3, [sp, #20]
 80069f6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80069fa:	2400      	movs	r4, #0
 80069fc:	00e3      	lsls	r3, r4, #3
 80069fe:	9307      	str	r3, [sp, #28]
 8006a00:	4bc7      	ldr	r3, [pc, #796]	; (8006d20 <__ieee754_pow+0x768>)
 8006a02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a06:	ed93 7b00 	vldr	d7, [r3]
 8006a0a:	4629      	mov	r1, r5
 8006a0c:	ec53 2b17 	vmov	r2, r3, d7
 8006a10:	eeb0 9a47 	vmov.f32	s18, s14
 8006a14:	eef0 9a67 	vmov.f32	s19, s15
 8006a18:	4682      	mov	sl, r0
 8006a1a:	f7f9 fc35 	bl	8000288 <__aeabi_dsub>
 8006a1e:	4652      	mov	r2, sl
 8006a20:	4606      	mov	r6, r0
 8006a22:	460f      	mov	r7, r1
 8006a24:	462b      	mov	r3, r5
 8006a26:	ec51 0b19 	vmov	r0, r1, d9
 8006a2a:	f7f9 fc2f 	bl	800028c <__adddf3>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	460b      	mov	r3, r1
 8006a32:	2000      	movs	r0, #0
 8006a34:	49bb      	ldr	r1, [pc, #748]	; (8006d24 <__ieee754_pow+0x76c>)
 8006a36:	f7f9 ff09 	bl	800084c <__aeabi_ddiv>
 8006a3a:	ec41 0b1a 	vmov	d10, r0, r1
 8006a3e:	4602      	mov	r2, r0
 8006a40:	460b      	mov	r3, r1
 8006a42:	4630      	mov	r0, r6
 8006a44:	4639      	mov	r1, r7
 8006a46:	f7f9 fdd7 	bl	80005f8 <__aeabi_dmul>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a50:	9302      	str	r3, [sp, #8]
 8006a52:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006a56:	46ab      	mov	fp, r5
 8006a58:	106d      	asrs	r5, r5, #1
 8006a5a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006a5e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006a62:	ec41 0b18 	vmov	d8, r0, r1
 8006a66:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	4640      	mov	r0, r8
 8006a6e:	4649      	mov	r1, r9
 8006a70:	4614      	mov	r4, r2
 8006a72:	461d      	mov	r5, r3
 8006a74:	f7f9 fdc0 	bl	80005f8 <__aeabi_dmul>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	4639      	mov	r1, r7
 8006a80:	f7f9 fc02 	bl	8000288 <__aeabi_dsub>
 8006a84:	ec53 2b19 	vmov	r2, r3, d9
 8006a88:	4606      	mov	r6, r0
 8006a8a:	460f      	mov	r7, r1
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	4629      	mov	r1, r5
 8006a90:	f7f9 fbfa 	bl	8000288 <__aeabi_dsub>
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	4650      	mov	r0, sl
 8006a9a:	4659      	mov	r1, fp
 8006a9c:	f7f9 fbf4 	bl	8000288 <__aeabi_dsub>
 8006aa0:	4642      	mov	r2, r8
 8006aa2:	464b      	mov	r3, r9
 8006aa4:	f7f9 fda8 	bl	80005f8 <__aeabi_dmul>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	4630      	mov	r0, r6
 8006aae:	4639      	mov	r1, r7
 8006ab0:	f7f9 fbea 	bl	8000288 <__aeabi_dsub>
 8006ab4:	ec53 2b1a 	vmov	r2, r3, d10
 8006ab8:	f7f9 fd9e 	bl	80005f8 <__aeabi_dmul>
 8006abc:	ec53 2b18 	vmov	r2, r3, d8
 8006ac0:	ec41 0b19 	vmov	d9, r0, r1
 8006ac4:	ec51 0b18 	vmov	r0, r1, d8
 8006ac8:	f7f9 fd96 	bl	80005f8 <__aeabi_dmul>
 8006acc:	a37c      	add	r3, pc, #496	; (adr r3, 8006cc0 <__ieee754_pow+0x708>)
 8006ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	460d      	mov	r5, r1
 8006ad6:	f7f9 fd8f 	bl	80005f8 <__aeabi_dmul>
 8006ada:	a37b      	add	r3, pc, #492	; (adr r3, 8006cc8 <__ieee754_pow+0x710>)
 8006adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae0:	f7f9 fbd4 	bl	800028c <__adddf3>
 8006ae4:	4622      	mov	r2, r4
 8006ae6:	462b      	mov	r3, r5
 8006ae8:	f7f9 fd86 	bl	80005f8 <__aeabi_dmul>
 8006aec:	a378      	add	r3, pc, #480	; (adr r3, 8006cd0 <__ieee754_pow+0x718>)
 8006aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af2:	f7f9 fbcb 	bl	800028c <__adddf3>
 8006af6:	4622      	mov	r2, r4
 8006af8:	462b      	mov	r3, r5
 8006afa:	f7f9 fd7d 	bl	80005f8 <__aeabi_dmul>
 8006afe:	a376      	add	r3, pc, #472	; (adr r3, 8006cd8 <__ieee754_pow+0x720>)
 8006b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b04:	f7f9 fbc2 	bl	800028c <__adddf3>
 8006b08:	4622      	mov	r2, r4
 8006b0a:	462b      	mov	r3, r5
 8006b0c:	f7f9 fd74 	bl	80005f8 <__aeabi_dmul>
 8006b10:	a373      	add	r3, pc, #460	; (adr r3, 8006ce0 <__ieee754_pow+0x728>)
 8006b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b16:	f7f9 fbb9 	bl	800028c <__adddf3>
 8006b1a:	4622      	mov	r2, r4
 8006b1c:	462b      	mov	r3, r5
 8006b1e:	f7f9 fd6b 	bl	80005f8 <__aeabi_dmul>
 8006b22:	a371      	add	r3, pc, #452	; (adr r3, 8006ce8 <__ieee754_pow+0x730>)
 8006b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b28:	f7f9 fbb0 	bl	800028c <__adddf3>
 8006b2c:	4622      	mov	r2, r4
 8006b2e:	4606      	mov	r6, r0
 8006b30:	460f      	mov	r7, r1
 8006b32:	462b      	mov	r3, r5
 8006b34:	4620      	mov	r0, r4
 8006b36:	4629      	mov	r1, r5
 8006b38:	f7f9 fd5e 	bl	80005f8 <__aeabi_dmul>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4630      	mov	r0, r6
 8006b42:	4639      	mov	r1, r7
 8006b44:	f7f9 fd58 	bl	80005f8 <__aeabi_dmul>
 8006b48:	4642      	mov	r2, r8
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	460d      	mov	r5, r1
 8006b4e:	464b      	mov	r3, r9
 8006b50:	ec51 0b18 	vmov	r0, r1, d8
 8006b54:	f7f9 fb9a 	bl	800028c <__adddf3>
 8006b58:	ec53 2b19 	vmov	r2, r3, d9
 8006b5c:	f7f9 fd4c 	bl	80005f8 <__aeabi_dmul>
 8006b60:	4622      	mov	r2, r4
 8006b62:	462b      	mov	r3, r5
 8006b64:	f7f9 fb92 	bl	800028c <__adddf3>
 8006b68:	4642      	mov	r2, r8
 8006b6a:	4682      	mov	sl, r0
 8006b6c:	468b      	mov	fp, r1
 8006b6e:	464b      	mov	r3, r9
 8006b70:	4640      	mov	r0, r8
 8006b72:	4649      	mov	r1, r9
 8006b74:	f7f9 fd40 	bl	80005f8 <__aeabi_dmul>
 8006b78:	4b6b      	ldr	r3, [pc, #428]	; (8006d28 <__ieee754_pow+0x770>)
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	4606      	mov	r6, r0
 8006b7e:	460f      	mov	r7, r1
 8006b80:	f7f9 fb84 	bl	800028c <__adddf3>
 8006b84:	4652      	mov	r2, sl
 8006b86:	465b      	mov	r3, fp
 8006b88:	f7f9 fb80 	bl	800028c <__adddf3>
 8006b8c:	2000      	movs	r0, #0
 8006b8e:	4604      	mov	r4, r0
 8006b90:	460d      	mov	r5, r1
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	4640      	mov	r0, r8
 8006b98:	4649      	mov	r1, r9
 8006b9a:	f7f9 fd2d 	bl	80005f8 <__aeabi_dmul>
 8006b9e:	4b62      	ldr	r3, [pc, #392]	; (8006d28 <__ieee754_pow+0x770>)
 8006ba0:	4680      	mov	r8, r0
 8006ba2:	4689      	mov	r9, r1
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	4629      	mov	r1, r5
 8006baa:	f7f9 fb6d 	bl	8000288 <__aeabi_dsub>
 8006bae:	4632      	mov	r2, r6
 8006bb0:	463b      	mov	r3, r7
 8006bb2:	f7f9 fb69 	bl	8000288 <__aeabi_dsub>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	460b      	mov	r3, r1
 8006bba:	4650      	mov	r0, sl
 8006bbc:	4659      	mov	r1, fp
 8006bbe:	f7f9 fb63 	bl	8000288 <__aeabi_dsub>
 8006bc2:	ec53 2b18 	vmov	r2, r3, d8
 8006bc6:	f7f9 fd17 	bl	80005f8 <__aeabi_dmul>
 8006bca:	4622      	mov	r2, r4
 8006bcc:	4606      	mov	r6, r0
 8006bce:	460f      	mov	r7, r1
 8006bd0:	462b      	mov	r3, r5
 8006bd2:	ec51 0b19 	vmov	r0, r1, d9
 8006bd6:	f7f9 fd0f 	bl	80005f8 <__aeabi_dmul>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4630      	mov	r0, r6
 8006be0:	4639      	mov	r1, r7
 8006be2:	f7f9 fb53 	bl	800028c <__adddf3>
 8006be6:	4606      	mov	r6, r0
 8006be8:	460f      	mov	r7, r1
 8006bea:	4602      	mov	r2, r0
 8006bec:	460b      	mov	r3, r1
 8006bee:	4640      	mov	r0, r8
 8006bf0:	4649      	mov	r1, r9
 8006bf2:	f7f9 fb4b 	bl	800028c <__adddf3>
 8006bf6:	a33e      	add	r3, pc, #248	; (adr r3, 8006cf0 <__ieee754_pow+0x738>)
 8006bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfc:	2000      	movs	r0, #0
 8006bfe:	4604      	mov	r4, r0
 8006c00:	460d      	mov	r5, r1
 8006c02:	f7f9 fcf9 	bl	80005f8 <__aeabi_dmul>
 8006c06:	4642      	mov	r2, r8
 8006c08:	ec41 0b18 	vmov	d8, r0, r1
 8006c0c:	464b      	mov	r3, r9
 8006c0e:	4620      	mov	r0, r4
 8006c10:	4629      	mov	r1, r5
 8006c12:	f7f9 fb39 	bl	8000288 <__aeabi_dsub>
 8006c16:	4602      	mov	r2, r0
 8006c18:	460b      	mov	r3, r1
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	4639      	mov	r1, r7
 8006c1e:	f7f9 fb33 	bl	8000288 <__aeabi_dsub>
 8006c22:	a335      	add	r3, pc, #212	; (adr r3, 8006cf8 <__ieee754_pow+0x740>)
 8006c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c28:	f7f9 fce6 	bl	80005f8 <__aeabi_dmul>
 8006c2c:	a334      	add	r3, pc, #208	; (adr r3, 8006d00 <__ieee754_pow+0x748>)
 8006c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c32:	4606      	mov	r6, r0
 8006c34:	460f      	mov	r7, r1
 8006c36:	4620      	mov	r0, r4
 8006c38:	4629      	mov	r1, r5
 8006c3a:	f7f9 fcdd 	bl	80005f8 <__aeabi_dmul>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	4630      	mov	r0, r6
 8006c44:	4639      	mov	r1, r7
 8006c46:	f7f9 fb21 	bl	800028c <__adddf3>
 8006c4a:	9a07      	ldr	r2, [sp, #28]
 8006c4c:	4b37      	ldr	r3, [pc, #220]	; (8006d2c <__ieee754_pow+0x774>)
 8006c4e:	4413      	add	r3, r2
 8006c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c54:	f7f9 fb1a 	bl	800028c <__adddf3>
 8006c58:	4682      	mov	sl, r0
 8006c5a:	9805      	ldr	r0, [sp, #20]
 8006c5c:	468b      	mov	fp, r1
 8006c5e:	f7f9 fc61 	bl	8000524 <__aeabi_i2d>
 8006c62:	9a07      	ldr	r2, [sp, #28]
 8006c64:	4b32      	ldr	r3, [pc, #200]	; (8006d30 <__ieee754_pow+0x778>)
 8006c66:	4413      	add	r3, r2
 8006c68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c6c:	4606      	mov	r6, r0
 8006c6e:	460f      	mov	r7, r1
 8006c70:	4652      	mov	r2, sl
 8006c72:	465b      	mov	r3, fp
 8006c74:	ec51 0b18 	vmov	r0, r1, d8
 8006c78:	f7f9 fb08 	bl	800028c <__adddf3>
 8006c7c:	4642      	mov	r2, r8
 8006c7e:	464b      	mov	r3, r9
 8006c80:	f7f9 fb04 	bl	800028c <__adddf3>
 8006c84:	4632      	mov	r2, r6
 8006c86:	463b      	mov	r3, r7
 8006c88:	f7f9 fb00 	bl	800028c <__adddf3>
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	4632      	mov	r2, r6
 8006c90:	463b      	mov	r3, r7
 8006c92:	4604      	mov	r4, r0
 8006c94:	460d      	mov	r5, r1
 8006c96:	f7f9 faf7 	bl	8000288 <__aeabi_dsub>
 8006c9a:	4642      	mov	r2, r8
 8006c9c:	464b      	mov	r3, r9
 8006c9e:	f7f9 faf3 	bl	8000288 <__aeabi_dsub>
 8006ca2:	ec53 2b18 	vmov	r2, r3, d8
 8006ca6:	f7f9 faef 	bl	8000288 <__aeabi_dsub>
 8006caa:	4602      	mov	r2, r0
 8006cac:	460b      	mov	r3, r1
 8006cae:	4650      	mov	r0, sl
 8006cb0:	4659      	mov	r1, fp
 8006cb2:	e610      	b.n	80068d6 <__ieee754_pow+0x31e>
 8006cb4:	2401      	movs	r4, #1
 8006cb6:	e6a1      	b.n	80069fc <__ieee754_pow+0x444>
 8006cb8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006d08 <__ieee754_pow+0x750>
 8006cbc:	e617      	b.n	80068ee <__ieee754_pow+0x336>
 8006cbe:	bf00      	nop
 8006cc0:	4a454eef 	.word	0x4a454eef
 8006cc4:	3fca7e28 	.word	0x3fca7e28
 8006cc8:	93c9db65 	.word	0x93c9db65
 8006ccc:	3fcd864a 	.word	0x3fcd864a
 8006cd0:	a91d4101 	.word	0xa91d4101
 8006cd4:	3fd17460 	.word	0x3fd17460
 8006cd8:	518f264d 	.word	0x518f264d
 8006cdc:	3fd55555 	.word	0x3fd55555
 8006ce0:	db6fabff 	.word	0xdb6fabff
 8006ce4:	3fdb6db6 	.word	0x3fdb6db6
 8006ce8:	33333303 	.word	0x33333303
 8006cec:	3fe33333 	.word	0x3fe33333
 8006cf0:	e0000000 	.word	0xe0000000
 8006cf4:	3feec709 	.word	0x3feec709
 8006cf8:	dc3a03fd 	.word	0xdc3a03fd
 8006cfc:	3feec709 	.word	0x3feec709
 8006d00:	145b01f5 	.word	0x145b01f5
 8006d04:	be3e2fe0 	.word	0xbe3e2fe0
 8006d08:	00000000 	.word	0x00000000
 8006d0c:	3ff00000 	.word	0x3ff00000
 8006d10:	7ff00000 	.word	0x7ff00000
 8006d14:	43400000 	.word	0x43400000
 8006d18:	0003988e 	.word	0x0003988e
 8006d1c:	000bb679 	.word	0x000bb679
 8006d20:	08007768 	.word	0x08007768
 8006d24:	3ff00000 	.word	0x3ff00000
 8006d28:	40080000 	.word	0x40080000
 8006d2c:	08007788 	.word	0x08007788
 8006d30:	08007778 	.word	0x08007778
 8006d34:	a3b3      	add	r3, pc, #716	; (adr r3, 8007004 <__ieee754_pow+0xa4c>)
 8006d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3a:	4640      	mov	r0, r8
 8006d3c:	4649      	mov	r1, r9
 8006d3e:	f7f9 faa5 	bl	800028c <__adddf3>
 8006d42:	4622      	mov	r2, r4
 8006d44:	ec41 0b1a 	vmov	d10, r0, r1
 8006d48:	462b      	mov	r3, r5
 8006d4a:	4630      	mov	r0, r6
 8006d4c:	4639      	mov	r1, r7
 8006d4e:	f7f9 fa9b 	bl	8000288 <__aeabi_dsub>
 8006d52:	4602      	mov	r2, r0
 8006d54:	460b      	mov	r3, r1
 8006d56:	ec51 0b1a 	vmov	r0, r1, d10
 8006d5a:	f7f9 fedd 	bl	8000b18 <__aeabi_dcmpgt>
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	f47f ae04 	bne.w	800696c <__ieee754_pow+0x3b4>
 8006d64:	4aa2      	ldr	r2, [pc, #648]	; (8006ff0 <__ieee754_pow+0xa38>)
 8006d66:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	f340 8107 	ble.w	8006f7e <__ieee754_pow+0x9c6>
 8006d70:	151b      	asrs	r3, r3, #20
 8006d72:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006d76:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006d7a:	fa4a fa03 	asr.w	sl, sl, r3
 8006d7e:	44da      	add	sl, fp
 8006d80:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006d84:	489b      	ldr	r0, [pc, #620]	; (8006ff4 <__ieee754_pow+0xa3c>)
 8006d86:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006d8a:	4108      	asrs	r0, r1
 8006d8c:	ea00 030a 	and.w	r3, r0, sl
 8006d90:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006d94:	f1c1 0114 	rsb	r1, r1, #20
 8006d98:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006d9c:	fa4a fa01 	asr.w	sl, sl, r1
 8006da0:	f1bb 0f00 	cmp.w	fp, #0
 8006da4:	f04f 0200 	mov.w	r2, #0
 8006da8:	4620      	mov	r0, r4
 8006daa:	4629      	mov	r1, r5
 8006dac:	bfb8      	it	lt
 8006dae:	f1ca 0a00 	rsblt	sl, sl, #0
 8006db2:	f7f9 fa69 	bl	8000288 <__aeabi_dsub>
 8006db6:	ec41 0b19 	vmov	d9, r0, r1
 8006dba:	4642      	mov	r2, r8
 8006dbc:	464b      	mov	r3, r9
 8006dbe:	ec51 0b19 	vmov	r0, r1, d9
 8006dc2:	f7f9 fa63 	bl	800028c <__adddf3>
 8006dc6:	a37a      	add	r3, pc, #488	; (adr r3, 8006fb0 <__ieee754_pow+0x9f8>)
 8006dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dcc:	2000      	movs	r0, #0
 8006dce:	4604      	mov	r4, r0
 8006dd0:	460d      	mov	r5, r1
 8006dd2:	f7f9 fc11 	bl	80005f8 <__aeabi_dmul>
 8006dd6:	ec53 2b19 	vmov	r2, r3, d9
 8006dda:	4606      	mov	r6, r0
 8006ddc:	460f      	mov	r7, r1
 8006dde:	4620      	mov	r0, r4
 8006de0:	4629      	mov	r1, r5
 8006de2:	f7f9 fa51 	bl	8000288 <__aeabi_dsub>
 8006de6:	4602      	mov	r2, r0
 8006de8:	460b      	mov	r3, r1
 8006dea:	4640      	mov	r0, r8
 8006dec:	4649      	mov	r1, r9
 8006dee:	f7f9 fa4b 	bl	8000288 <__aeabi_dsub>
 8006df2:	a371      	add	r3, pc, #452	; (adr r3, 8006fb8 <__ieee754_pow+0xa00>)
 8006df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df8:	f7f9 fbfe 	bl	80005f8 <__aeabi_dmul>
 8006dfc:	a370      	add	r3, pc, #448	; (adr r3, 8006fc0 <__ieee754_pow+0xa08>)
 8006dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e02:	4680      	mov	r8, r0
 8006e04:	4689      	mov	r9, r1
 8006e06:	4620      	mov	r0, r4
 8006e08:	4629      	mov	r1, r5
 8006e0a:	f7f9 fbf5 	bl	80005f8 <__aeabi_dmul>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	460b      	mov	r3, r1
 8006e12:	4640      	mov	r0, r8
 8006e14:	4649      	mov	r1, r9
 8006e16:	f7f9 fa39 	bl	800028c <__adddf3>
 8006e1a:	4604      	mov	r4, r0
 8006e1c:	460d      	mov	r5, r1
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	4630      	mov	r0, r6
 8006e24:	4639      	mov	r1, r7
 8006e26:	f7f9 fa31 	bl	800028c <__adddf3>
 8006e2a:	4632      	mov	r2, r6
 8006e2c:	463b      	mov	r3, r7
 8006e2e:	4680      	mov	r8, r0
 8006e30:	4689      	mov	r9, r1
 8006e32:	f7f9 fa29 	bl	8000288 <__aeabi_dsub>
 8006e36:	4602      	mov	r2, r0
 8006e38:	460b      	mov	r3, r1
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	f7f9 fa23 	bl	8000288 <__aeabi_dsub>
 8006e42:	4642      	mov	r2, r8
 8006e44:	4606      	mov	r6, r0
 8006e46:	460f      	mov	r7, r1
 8006e48:	464b      	mov	r3, r9
 8006e4a:	4640      	mov	r0, r8
 8006e4c:	4649      	mov	r1, r9
 8006e4e:	f7f9 fbd3 	bl	80005f8 <__aeabi_dmul>
 8006e52:	a35d      	add	r3, pc, #372	; (adr r3, 8006fc8 <__ieee754_pow+0xa10>)
 8006e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e58:	4604      	mov	r4, r0
 8006e5a:	460d      	mov	r5, r1
 8006e5c:	f7f9 fbcc 	bl	80005f8 <__aeabi_dmul>
 8006e60:	a35b      	add	r3, pc, #364	; (adr r3, 8006fd0 <__ieee754_pow+0xa18>)
 8006e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e66:	f7f9 fa0f 	bl	8000288 <__aeabi_dsub>
 8006e6a:	4622      	mov	r2, r4
 8006e6c:	462b      	mov	r3, r5
 8006e6e:	f7f9 fbc3 	bl	80005f8 <__aeabi_dmul>
 8006e72:	a359      	add	r3, pc, #356	; (adr r3, 8006fd8 <__ieee754_pow+0xa20>)
 8006e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e78:	f7f9 fa08 	bl	800028c <__adddf3>
 8006e7c:	4622      	mov	r2, r4
 8006e7e:	462b      	mov	r3, r5
 8006e80:	f7f9 fbba 	bl	80005f8 <__aeabi_dmul>
 8006e84:	a356      	add	r3, pc, #344	; (adr r3, 8006fe0 <__ieee754_pow+0xa28>)
 8006e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8a:	f7f9 f9fd 	bl	8000288 <__aeabi_dsub>
 8006e8e:	4622      	mov	r2, r4
 8006e90:	462b      	mov	r3, r5
 8006e92:	f7f9 fbb1 	bl	80005f8 <__aeabi_dmul>
 8006e96:	a354      	add	r3, pc, #336	; (adr r3, 8006fe8 <__ieee754_pow+0xa30>)
 8006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9c:	f7f9 f9f6 	bl	800028c <__adddf3>
 8006ea0:	4622      	mov	r2, r4
 8006ea2:	462b      	mov	r3, r5
 8006ea4:	f7f9 fba8 	bl	80005f8 <__aeabi_dmul>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4640      	mov	r0, r8
 8006eae:	4649      	mov	r1, r9
 8006eb0:	f7f9 f9ea 	bl	8000288 <__aeabi_dsub>
 8006eb4:	4604      	mov	r4, r0
 8006eb6:	460d      	mov	r5, r1
 8006eb8:	4602      	mov	r2, r0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	4640      	mov	r0, r8
 8006ebe:	4649      	mov	r1, r9
 8006ec0:	f7f9 fb9a 	bl	80005f8 <__aeabi_dmul>
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	ec41 0b19 	vmov	d9, r0, r1
 8006eca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ece:	4620      	mov	r0, r4
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	f7f9 f9d9 	bl	8000288 <__aeabi_dsub>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	460b      	mov	r3, r1
 8006eda:	ec51 0b19 	vmov	r0, r1, d9
 8006ede:	f7f9 fcb5 	bl	800084c <__aeabi_ddiv>
 8006ee2:	4632      	mov	r2, r6
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	460d      	mov	r5, r1
 8006ee8:	463b      	mov	r3, r7
 8006eea:	4640      	mov	r0, r8
 8006eec:	4649      	mov	r1, r9
 8006eee:	f7f9 fb83 	bl	80005f8 <__aeabi_dmul>
 8006ef2:	4632      	mov	r2, r6
 8006ef4:	463b      	mov	r3, r7
 8006ef6:	f7f9 f9c9 	bl	800028c <__adddf3>
 8006efa:	4602      	mov	r2, r0
 8006efc:	460b      	mov	r3, r1
 8006efe:	4620      	mov	r0, r4
 8006f00:	4629      	mov	r1, r5
 8006f02:	f7f9 f9c1 	bl	8000288 <__aeabi_dsub>
 8006f06:	4642      	mov	r2, r8
 8006f08:	464b      	mov	r3, r9
 8006f0a:	f7f9 f9bd 	bl	8000288 <__aeabi_dsub>
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4602      	mov	r2, r0
 8006f12:	4939      	ldr	r1, [pc, #228]	; (8006ff8 <__ieee754_pow+0xa40>)
 8006f14:	2000      	movs	r0, #0
 8006f16:	f7f9 f9b7 	bl	8000288 <__aeabi_dsub>
 8006f1a:	ec41 0b10 	vmov	d0, r0, r1
 8006f1e:	ee10 3a90 	vmov	r3, s1
 8006f22:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f2a:	da2b      	bge.n	8006f84 <__ieee754_pow+0x9cc>
 8006f2c:	4650      	mov	r0, sl
 8006f2e:	f000 f877 	bl	8007020 <scalbn>
 8006f32:	ec51 0b10 	vmov	r0, r1, d0
 8006f36:	ec53 2b18 	vmov	r2, r3, d8
 8006f3a:	f7ff bbee 	b.w	800671a <__ieee754_pow+0x162>
 8006f3e:	4b2f      	ldr	r3, [pc, #188]	; (8006ffc <__ieee754_pow+0xa44>)
 8006f40:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006f44:	429e      	cmp	r6, r3
 8006f46:	f77f af0d 	ble.w	8006d64 <__ieee754_pow+0x7ac>
 8006f4a:	4b2d      	ldr	r3, [pc, #180]	; (8007000 <__ieee754_pow+0xa48>)
 8006f4c:	440b      	add	r3, r1
 8006f4e:	4303      	orrs	r3, r0
 8006f50:	d009      	beq.n	8006f66 <__ieee754_pow+0x9ae>
 8006f52:	ec51 0b18 	vmov	r0, r1, d8
 8006f56:	2200      	movs	r2, #0
 8006f58:	2300      	movs	r3, #0
 8006f5a:	f7f9 fdbf 	bl	8000adc <__aeabi_dcmplt>
 8006f5e:	3800      	subs	r0, #0
 8006f60:	bf18      	it	ne
 8006f62:	2001      	movne	r0, #1
 8006f64:	e448      	b.n	80067f8 <__ieee754_pow+0x240>
 8006f66:	4622      	mov	r2, r4
 8006f68:	462b      	mov	r3, r5
 8006f6a:	f7f9 f98d 	bl	8000288 <__aeabi_dsub>
 8006f6e:	4642      	mov	r2, r8
 8006f70:	464b      	mov	r3, r9
 8006f72:	f7f9 fdc7 	bl	8000b04 <__aeabi_dcmpge>
 8006f76:	2800      	cmp	r0, #0
 8006f78:	f43f aef4 	beq.w	8006d64 <__ieee754_pow+0x7ac>
 8006f7c:	e7e9      	b.n	8006f52 <__ieee754_pow+0x99a>
 8006f7e:	f04f 0a00 	mov.w	sl, #0
 8006f82:	e71a      	b.n	8006dba <__ieee754_pow+0x802>
 8006f84:	ec51 0b10 	vmov	r0, r1, d0
 8006f88:	4619      	mov	r1, r3
 8006f8a:	e7d4      	b.n	8006f36 <__ieee754_pow+0x97e>
 8006f8c:	491a      	ldr	r1, [pc, #104]	; (8006ff8 <__ieee754_pow+0xa40>)
 8006f8e:	2000      	movs	r0, #0
 8006f90:	f7ff bb31 	b.w	80065f6 <__ieee754_pow+0x3e>
 8006f94:	2000      	movs	r0, #0
 8006f96:	2100      	movs	r1, #0
 8006f98:	f7ff bb2d 	b.w	80065f6 <__ieee754_pow+0x3e>
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	4639      	mov	r1, r7
 8006fa0:	f7ff bb29 	b.w	80065f6 <__ieee754_pow+0x3e>
 8006fa4:	9204      	str	r2, [sp, #16]
 8006fa6:	f7ff bb7b 	b.w	80066a0 <__ieee754_pow+0xe8>
 8006faa:	2300      	movs	r3, #0
 8006fac:	f7ff bb65 	b.w	800667a <__ieee754_pow+0xc2>
 8006fb0:	00000000 	.word	0x00000000
 8006fb4:	3fe62e43 	.word	0x3fe62e43
 8006fb8:	fefa39ef 	.word	0xfefa39ef
 8006fbc:	3fe62e42 	.word	0x3fe62e42
 8006fc0:	0ca86c39 	.word	0x0ca86c39
 8006fc4:	be205c61 	.word	0xbe205c61
 8006fc8:	72bea4d0 	.word	0x72bea4d0
 8006fcc:	3e663769 	.word	0x3e663769
 8006fd0:	c5d26bf1 	.word	0xc5d26bf1
 8006fd4:	3ebbbd41 	.word	0x3ebbbd41
 8006fd8:	af25de2c 	.word	0xaf25de2c
 8006fdc:	3f11566a 	.word	0x3f11566a
 8006fe0:	16bebd93 	.word	0x16bebd93
 8006fe4:	3f66c16c 	.word	0x3f66c16c
 8006fe8:	5555553e 	.word	0x5555553e
 8006fec:	3fc55555 	.word	0x3fc55555
 8006ff0:	3fe00000 	.word	0x3fe00000
 8006ff4:	fff00000 	.word	0xfff00000
 8006ff8:	3ff00000 	.word	0x3ff00000
 8006ffc:	4090cbff 	.word	0x4090cbff
 8007000:	3f6f3400 	.word	0x3f6f3400
 8007004:	652b82fe 	.word	0x652b82fe
 8007008:	3c971547 	.word	0x3c971547

0800700c <fabs>:
 800700c:	ec51 0b10 	vmov	r0, r1, d0
 8007010:	ee10 2a10 	vmov	r2, s0
 8007014:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007018:	ec43 2b10 	vmov	d0, r2, r3
 800701c:	4770      	bx	lr
	...

08007020 <scalbn>:
 8007020:	b570      	push	{r4, r5, r6, lr}
 8007022:	ec55 4b10 	vmov	r4, r5, d0
 8007026:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800702a:	4606      	mov	r6, r0
 800702c:	462b      	mov	r3, r5
 800702e:	b999      	cbnz	r1, 8007058 <scalbn+0x38>
 8007030:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007034:	4323      	orrs	r3, r4
 8007036:	d03f      	beq.n	80070b8 <scalbn+0x98>
 8007038:	4b35      	ldr	r3, [pc, #212]	; (8007110 <scalbn+0xf0>)
 800703a:	4629      	mov	r1, r5
 800703c:	ee10 0a10 	vmov	r0, s0
 8007040:	2200      	movs	r2, #0
 8007042:	f7f9 fad9 	bl	80005f8 <__aeabi_dmul>
 8007046:	4b33      	ldr	r3, [pc, #204]	; (8007114 <scalbn+0xf4>)
 8007048:	429e      	cmp	r6, r3
 800704a:	4604      	mov	r4, r0
 800704c:	460d      	mov	r5, r1
 800704e:	da10      	bge.n	8007072 <scalbn+0x52>
 8007050:	a327      	add	r3, pc, #156	; (adr r3, 80070f0 <scalbn+0xd0>)
 8007052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007056:	e01f      	b.n	8007098 <scalbn+0x78>
 8007058:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800705c:	4291      	cmp	r1, r2
 800705e:	d10c      	bne.n	800707a <scalbn+0x5a>
 8007060:	ee10 2a10 	vmov	r2, s0
 8007064:	4620      	mov	r0, r4
 8007066:	4629      	mov	r1, r5
 8007068:	f7f9 f910 	bl	800028c <__adddf3>
 800706c:	4604      	mov	r4, r0
 800706e:	460d      	mov	r5, r1
 8007070:	e022      	b.n	80070b8 <scalbn+0x98>
 8007072:	460b      	mov	r3, r1
 8007074:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007078:	3936      	subs	r1, #54	; 0x36
 800707a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800707e:	4296      	cmp	r6, r2
 8007080:	dd0d      	ble.n	800709e <scalbn+0x7e>
 8007082:	2d00      	cmp	r5, #0
 8007084:	a11c      	add	r1, pc, #112	; (adr r1, 80070f8 <scalbn+0xd8>)
 8007086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800708a:	da02      	bge.n	8007092 <scalbn+0x72>
 800708c:	a11c      	add	r1, pc, #112	; (adr r1, 8007100 <scalbn+0xe0>)
 800708e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007092:	a319      	add	r3, pc, #100	; (adr r3, 80070f8 <scalbn+0xd8>)
 8007094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007098:	f7f9 faae 	bl	80005f8 <__aeabi_dmul>
 800709c:	e7e6      	b.n	800706c <scalbn+0x4c>
 800709e:	1872      	adds	r2, r6, r1
 80070a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80070a4:	428a      	cmp	r2, r1
 80070a6:	dcec      	bgt.n	8007082 <scalbn+0x62>
 80070a8:	2a00      	cmp	r2, #0
 80070aa:	dd08      	ble.n	80070be <scalbn+0x9e>
 80070ac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80070b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80070b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80070b8:	ec45 4b10 	vmov	d0, r4, r5
 80070bc:	bd70      	pop	{r4, r5, r6, pc}
 80070be:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80070c2:	da08      	bge.n	80070d6 <scalbn+0xb6>
 80070c4:	2d00      	cmp	r5, #0
 80070c6:	a10a      	add	r1, pc, #40	; (adr r1, 80070f0 <scalbn+0xd0>)
 80070c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070cc:	dac0      	bge.n	8007050 <scalbn+0x30>
 80070ce:	a10e      	add	r1, pc, #56	; (adr r1, 8007108 <scalbn+0xe8>)
 80070d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070d4:	e7bc      	b.n	8007050 <scalbn+0x30>
 80070d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80070da:	3236      	adds	r2, #54	; 0x36
 80070dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80070e0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80070e4:	4620      	mov	r0, r4
 80070e6:	4b0c      	ldr	r3, [pc, #48]	; (8007118 <scalbn+0xf8>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	e7d5      	b.n	8007098 <scalbn+0x78>
 80070ec:	f3af 8000 	nop.w
 80070f0:	c2f8f359 	.word	0xc2f8f359
 80070f4:	01a56e1f 	.word	0x01a56e1f
 80070f8:	8800759c 	.word	0x8800759c
 80070fc:	7e37e43c 	.word	0x7e37e43c
 8007100:	8800759c 	.word	0x8800759c
 8007104:	fe37e43c 	.word	0xfe37e43c
 8007108:	c2f8f359 	.word	0xc2f8f359
 800710c:	81a56e1f 	.word	0x81a56e1f
 8007110:	43500000 	.word	0x43500000
 8007114:	ffff3cb0 	.word	0xffff3cb0
 8007118:	3c900000 	.word	0x3c900000

0800711c <with_errno>:
 800711c:	b570      	push	{r4, r5, r6, lr}
 800711e:	4604      	mov	r4, r0
 8007120:	460d      	mov	r5, r1
 8007122:	4616      	mov	r6, r2
 8007124:	f7fd f9e8 	bl	80044f8 <__errno>
 8007128:	4629      	mov	r1, r5
 800712a:	6006      	str	r6, [r0, #0]
 800712c:	4620      	mov	r0, r4
 800712e:	bd70      	pop	{r4, r5, r6, pc}

08007130 <xflow>:
 8007130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007132:	4614      	mov	r4, r2
 8007134:	461d      	mov	r5, r3
 8007136:	b108      	cbz	r0, 800713c <xflow+0xc>
 8007138:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800713c:	e9cd 2300 	strd	r2, r3, [sp]
 8007140:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007144:	4620      	mov	r0, r4
 8007146:	4629      	mov	r1, r5
 8007148:	f7f9 fa56 	bl	80005f8 <__aeabi_dmul>
 800714c:	2222      	movs	r2, #34	; 0x22
 800714e:	b003      	add	sp, #12
 8007150:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007154:	f7ff bfe2 	b.w	800711c <with_errno>

08007158 <__math_uflow>:
 8007158:	b508      	push	{r3, lr}
 800715a:	2200      	movs	r2, #0
 800715c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007160:	f7ff ffe6 	bl	8007130 <xflow>
 8007164:	ec41 0b10 	vmov	d0, r0, r1
 8007168:	bd08      	pop	{r3, pc}

0800716a <__math_oflow>:
 800716a:	b508      	push	{r3, lr}
 800716c:	2200      	movs	r2, #0
 800716e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007172:	f7ff ffdd 	bl	8007130 <xflow>
 8007176:	ec41 0b10 	vmov	d0, r0, r1
 800717a:	bd08      	pop	{r3, pc}

0800717c <__ieee754_sqrt>:
 800717c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007180:	ec55 4b10 	vmov	r4, r5, d0
 8007184:	4e67      	ldr	r6, [pc, #412]	; (8007324 <__ieee754_sqrt+0x1a8>)
 8007186:	43ae      	bics	r6, r5
 8007188:	ee10 0a10 	vmov	r0, s0
 800718c:	ee10 2a10 	vmov	r2, s0
 8007190:	4629      	mov	r1, r5
 8007192:	462b      	mov	r3, r5
 8007194:	d10d      	bne.n	80071b2 <__ieee754_sqrt+0x36>
 8007196:	f7f9 fa2f 	bl	80005f8 <__aeabi_dmul>
 800719a:	4602      	mov	r2, r0
 800719c:	460b      	mov	r3, r1
 800719e:	4620      	mov	r0, r4
 80071a0:	4629      	mov	r1, r5
 80071a2:	f7f9 f873 	bl	800028c <__adddf3>
 80071a6:	4604      	mov	r4, r0
 80071a8:	460d      	mov	r5, r1
 80071aa:	ec45 4b10 	vmov	d0, r4, r5
 80071ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b2:	2d00      	cmp	r5, #0
 80071b4:	dc0b      	bgt.n	80071ce <__ieee754_sqrt+0x52>
 80071b6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80071ba:	4326      	orrs	r6, r4
 80071bc:	d0f5      	beq.n	80071aa <__ieee754_sqrt+0x2e>
 80071be:	b135      	cbz	r5, 80071ce <__ieee754_sqrt+0x52>
 80071c0:	f7f9 f862 	bl	8000288 <__aeabi_dsub>
 80071c4:	4602      	mov	r2, r0
 80071c6:	460b      	mov	r3, r1
 80071c8:	f7f9 fb40 	bl	800084c <__aeabi_ddiv>
 80071cc:	e7eb      	b.n	80071a6 <__ieee754_sqrt+0x2a>
 80071ce:	1509      	asrs	r1, r1, #20
 80071d0:	f000 808d 	beq.w	80072ee <__ieee754_sqrt+0x172>
 80071d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071d8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80071dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071e0:	07c9      	lsls	r1, r1, #31
 80071e2:	bf5c      	itt	pl
 80071e4:	005b      	lslpl	r3, r3, #1
 80071e6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80071ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80071ee:	bf58      	it	pl
 80071f0:	0052      	lslpl	r2, r2, #1
 80071f2:	2500      	movs	r5, #0
 80071f4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80071f8:	1076      	asrs	r6, r6, #1
 80071fa:	0052      	lsls	r2, r2, #1
 80071fc:	f04f 0e16 	mov.w	lr, #22
 8007200:	46ac      	mov	ip, r5
 8007202:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007206:	eb0c 0001 	add.w	r0, ip, r1
 800720a:	4298      	cmp	r0, r3
 800720c:	bfde      	ittt	le
 800720e:	1a1b      	suble	r3, r3, r0
 8007210:	eb00 0c01 	addle.w	ip, r0, r1
 8007214:	186d      	addle	r5, r5, r1
 8007216:	005b      	lsls	r3, r3, #1
 8007218:	f1be 0e01 	subs.w	lr, lr, #1
 800721c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007220:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007224:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007228:	d1ed      	bne.n	8007206 <__ieee754_sqrt+0x8a>
 800722a:	4674      	mov	r4, lr
 800722c:	2720      	movs	r7, #32
 800722e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007232:	4563      	cmp	r3, ip
 8007234:	eb01 000e 	add.w	r0, r1, lr
 8007238:	dc02      	bgt.n	8007240 <__ieee754_sqrt+0xc4>
 800723a:	d113      	bne.n	8007264 <__ieee754_sqrt+0xe8>
 800723c:	4290      	cmp	r0, r2
 800723e:	d811      	bhi.n	8007264 <__ieee754_sqrt+0xe8>
 8007240:	2800      	cmp	r0, #0
 8007242:	eb00 0e01 	add.w	lr, r0, r1
 8007246:	da57      	bge.n	80072f8 <__ieee754_sqrt+0x17c>
 8007248:	f1be 0f00 	cmp.w	lr, #0
 800724c:	db54      	blt.n	80072f8 <__ieee754_sqrt+0x17c>
 800724e:	f10c 0801 	add.w	r8, ip, #1
 8007252:	eba3 030c 	sub.w	r3, r3, ip
 8007256:	4290      	cmp	r0, r2
 8007258:	bf88      	it	hi
 800725a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800725e:	1a12      	subs	r2, r2, r0
 8007260:	440c      	add	r4, r1
 8007262:	46c4      	mov	ip, r8
 8007264:	005b      	lsls	r3, r3, #1
 8007266:	3f01      	subs	r7, #1
 8007268:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800726c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007270:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007274:	d1dd      	bne.n	8007232 <__ieee754_sqrt+0xb6>
 8007276:	4313      	orrs	r3, r2
 8007278:	d01b      	beq.n	80072b2 <__ieee754_sqrt+0x136>
 800727a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007328 <__ieee754_sqrt+0x1ac>
 800727e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800732c <__ieee754_sqrt+0x1b0>
 8007282:	e9da 0100 	ldrd	r0, r1, [sl]
 8007286:	e9db 2300 	ldrd	r2, r3, [fp]
 800728a:	f7f8 fffd 	bl	8000288 <__aeabi_dsub>
 800728e:	e9da 8900 	ldrd	r8, r9, [sl]
 8007292:	4602      	mov	r2, r0
 8007294:	460b      	mov	r3, r1
 8007296:	4640      	mov	r0, r8
 8007298:	4649      	mov	r1, r9
 800729a:	f7f9 fc29 	bl	8000af0 <__aeabi_dcmple>
 800729e:	b140      	cbz	r0, 80072b2 <__ieee754_sqrt+0x136>
 80072a0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80072a4:	e9da 0100 	ldrd	r0, r1, [sl]
 80072a8:	e9db 2300 	ldrd	r2, r3, [fp]
 80072ac:	d126      	bne.n	80072fc <__ieee754_sqrt+0x180>
 80072ae:	3501      	adds	r5, #1
 80072b0:	463c      	mov	r4, r7
 80072b2:	106a      	asrs	r2, r5, #1
 80072b4:	0863      	lsrs	r3, r4, #1
 80072b6:	07e9      	lsls	r1, r5, #31
 80072b8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80072bc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80072c0:	bf48      	it	mi
 80072c2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80072c6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80072ca:	461c      	mov	r4, r3
 80072cc:	e76d      	b.n	80071aa <__ieee754_sqrt+0x2e>
 80072ce:	0ad3      	lsrs	r3, r2, #11
 80072d0:	3815      	subs	r0, #21
 80072d2:	0552      	lsls	r2, r2, #21
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d0fa      	beq.n	80072ce <__ieee754_sqrt+0x152>
 80072d8:	02dc      	lsls	r4, r3, #11
 80072da:	d50a      	bpl.n	80072f2 <__ieee754_sqrt+0x176>
 80072dc:	f1c1 0420 	rsb	r4, r1, #32
 80072e0:	fa22 f404 	lsr.w	r4, r2, r4
 80072e4:	1e4d      	subs	r5, r1, #1
 80072e6:	408a      	lsls	r2, r1
 80072e8:	4323      	orrs	r3, r4
 80072ea:	1b41      	subs	r1, r0, r5
 80072ec:	e772      	b.n	80071d4 <__ieee754_sqrt+0x58>
 80072ee:	4608      	mov	r0, r1
 80072f0:	e7f0      	b.n	80072d4 <__ieee754_sqrt+0x158>
 80072f2:	005b      	lsls	r3, r3, #1
 80072f4:	3101      	adds	r1, #1
 80072f6:	e7ef      	b.n	80072d8 <__ieee754_sqrt+0x15c>
 80072f8:	46e0      	mov	r8, ip
 80072fa:	e7aa      	b.n	8007252 <__ieee754_sqrt+0xd6>
 80072fc:	f7f8 ffc6 	bl	800028c <__adddf3>
 8007300:	e9da 8900 	ldrd	r8, r9, [sl]
 8007304:	4602      	mov	r2, r0
 8007306:	460b      	mov	r3, r1
 8007308:	4640      	mov	r0, r8
 800730a:	4649      	mov	r1, r9
 800730c:	f7f9 fbe6 	bl	8000adc <__aeabi_dcmplt>
 8007310:	b120      	cbz	r0, 800731c <__ieee754_sqrt+0x1a0>
 8007312:	1ca0      	adds	r0, r4, #2
 8007314:	bf08      	it	eq
 8007316:	3501      	addeq	r5, #1
 8007318:	3402      	adds	r4, #2
 800731a:	e7ca      	b.n	80072b2 <__ieee754_sqrt+0x136>
 800731c:	3401      	adds	r4, #1
 800731e:	f024 0401 	bic.w	r4, r4, #1
 8007322:	e7c6      	b.n	80072b2 <__ieee754_sqrt+0x136>
 8007324:	7ff00000 	.word	0x7ff00000
 8007328:	20000250 	.word	0x20000250
 800732c:	20000258 	.word	0x20000258

08007330 <_init>:
 8007330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007332:	bf00      	nop
 8007334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007336:	bc08      	pop	{r3}
 8007338:	469e      	mov	lr, r3
 800733a:	4770      	bx	lr

0800733c <_fini>:
 800733c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733e:	bf00      	nop
 8007340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007342:	bc08      	pop	{r3}
 8007344:	469e      	mov	lr, r3
 8007346:	4770      	bx	lr
